id,post_title,post_content,words,word2V
78,JavaScript对Select的子元素Option的操作,"javascript_删除所有select下面的option的方法//增加之前删除所有optionwhile(length!=0){     var length = document.getElementById('courseorder').options.length;      for(var i = 0;i<length;i++){            document.getElementById('courseorder').options.remove(i);            length = length/2;      }}javascript_创建一个option节点op = document.createElement(""option"");op.value=0;//表明没有安排到科次te = document.createTextNode(""没有安排到课次"");op.appendChild(te);document.getElementById(""courseorder"").appendChild(op);","['javascript', 'select', '元素', 'option', '操作', 'javascript', '删除', '所有', 'select', '下面', 'option', '方法', '增加', '之前', '删除', '所有', 'optionwhile', 'length', 'var', 'length', 'document', 'getelementbyid', 'courseorder', 'options', 'length', 'for', 'var', 'length', '++', 'document', 'getelementbyid', 'courseorder', 'options', 'remove', 'length', 'length', 'javascript', '创建', '一个', 'option', '节点', 'op', 'document', 'createelement', 'option', 'op', 'value', '表明', '没有', '安排', '科次', 'te', 'document', 'createtextnode', '没有', '安排', '课次', 'op', 'appendchild', 'te', 'document', 'getelementbyid', 'courseorder', 'appendchild', 'op']","[[-0.20394364 -0.10664297  0.22834548  0.09747902  0.2884342  -0.33236209
  -0.14255907  0.44009585 -0.04627961 -0.09147821 -0.0277073  -0.33138162
  -0.15850169  0.52081008  0.16748016 -0.08967377 -0.12977306 -0.00361382
  -0.08851261 -0.50885967 -0.03495877  0.22690687 -0.02560678 -0.16505682
   0.07795518 -0.47308441 -0.28432796  0.04805247 -0.22933544 -0.06523337
   0.16337572 -0.01345773  0.00206523 -0.12941315 -0.13731807  0.29546625
  -0.18476776 -0.24735611  0.08735791 -0.70504191 -0.15811234 -0.57371227
  -0.07500417 -0.00695636 -0.13573151 -0.20242733 -0.19115321  0.34375963
  -0.1995679   0.44470085  0.1694273  -0.24837175 -0.13597282 -0.15292457
   0.00836415  0.35781139  0.16668819 -0.08395044  0.1036206  -0.13222292
   0.06980333  0.23570014  0.01559844  0.09466812 -0.35306337  0.02791393
   0.06278103 -0.04181032 -0.28664096  0.40666397  0.11893439 -0.18200446
   0.35209168 -0.30077405  0.5175123   0.22709817  0.11613595 -0.13084944
  -0.31237994 -0.11465891  0.00171732  0.04253672 -0.10086282  0.33126358
  -0.31754586  0.201438   -0.27071589  0.40143409  0.45152532  0.13935596
   0.2487952   0.10080433  0.3473582   0.17199857  0.17987108  0.30625108
   0.11694494 -0.31198667 -0.07194715 -0.11628255]]"
83,当用header方法输出内容时出现“Cannot modify header information - headers already sent by”的解决方法,    解决方法有2种：使用ultraEditor打开该文件，然后变成utf-8编码，就会发现文件前面多了个乱码，删掉即可使用DreamWeaver的文件格式化功能，把文件格式化一下就OK了,"['当用', 'header', '方法', '输出', '内容', '出现', 'cannot', 'modify', 'header', 'information', 'headers', 'already', 'sent', 'by', '解决', '方法', '解决', '方法', '使用', 'ultraeditor', '打开', '文件', '然后', '变成', 'utf', '编码', '发现', '文件', '前面', '乱码', '删掉', '即可', '使用', 'dreamweaver', '文件', '格式化', '功能', '文件', '格式化', '一下', 'ok']","[[-0.26031842 -0.16944922  0.19808248  0.1699749   0.31077178 -0.33298314
  -0.21544156  0.51346699  0.01194552 -0.00462406 -0.06976234 -0.317329
  -0.22066761  0.62462417  0.14379077 -0.10778122 -0.17166838  0.01008099
  -0.11569907 -0.46639948  0.0378024   0.23825252  0.02809133 -0.06049764
   0.14903013 -0.59128397 -0.28181945  0.10540414 -0.21984409 -0.05530829
   0.26685349  0.02877655 -0.02837682 -0.16758746 -0.10014178  0.34919901
  -0.13548739 -0.21313069  0.1336563  -0.79383003 -0.18815771 -0.60136234
  -0.02530953 -0.07904093 -0.18229733 -0.12590285 -0.24992048  0.51660798
  -0.17311051  0.38399831  0.24425057 -0.2807607  -0.1157742  -0.23596688
   0.09216514  0.40569211  0.27732512 -0.06153083  0.10640491 -0.10325407
   0.03915782  0.32051317  0.04023271  0.09229314 -0.40286027 -0.03327656
   0.03770529 -0.00853908 -0.24801484  0.44945069  0.17385019 -0.26542429
   0.41748262 -0.32586334  0.6037552   0.14406137  0.21544489 -0.1245938
  -0.2878231  -0.22758665 -0.09441827 -0.02858933 -0.0591351   0.31792663
  -0.40259362  0.20001904 -0.29764723  0.40968314  0.46593422  0.10988406
   0.34262523  0.13025247  0.36265728  0.20658832  0.19348124  0.38620022
   0.09998672 -0.30439202 -0.05055379 -0.10142483]]"
85,linux下禁止机箱蜂鸣方法,1、在图像界面下 ，注意，是图形界面下，即使在图像界面下按快捷键出现的虚拟终端里用xset b off命令关闭蜂鸣声2、在纯粹的终端下 ，指的是当inittab中的启动级别是第三级别的时候出现的终端用 setterm -blength 0即可以上两个命令可以直接加入到/etc/bashrc中，以永久生效,"['linux', '禁止', '机箱', '蜂鸣', '方法', '图像', '界面', '注意', '图形界面', '即使', '图像', '界面', '快捷键', '出现', '虚拟', '终端', 'xset', 'off', '命令', '关闭', '鸣声', '纯粹', '终端', 'inittab', '启动', '级别', '第三', '级别', '时候', '出现', '终端', 'setterm', 'blength', '即可', '以上', '两个', '命令', '可以', '直接', '加入', 'etc', 'bashrc', '永久', '生效']","[[-0.19978107 -0.11163393  0.16181452  0.1305659   0.23403621 -0.25594136
  -0.14766421  0.38182028 -0.0006807  -0.0078714  -0.05037531 -0.25073074
  -0.14522454  0.46729238  0.11634056 -0.08518294 -0.12098427  0.00279471
  -0.08637722 -0.35347225  0.02731269  0.19122282  0.00815088 -0.06118205
   0.10146324 -0.43365986 -0.21518939  0.06657847 -0.16320793 -0.04744108
   0.19646184  0.02058825 -0.01918014 -0.11657666 -0.07925847  0.26402247
  -0.10690671 -0.16756226  0.09967545 -0.60030746 -0.13802159 -0.44497338
  -0.02303011 -0.05548813 -0.13504853 -0.10249213 -0.20275957  0.37082998
  -0.13944041  0.29972982  0.17038343 -0.21446763 -0.09649122 -0.18155882
   0.06371679  0.30537084  0.19545487 -0.04318316  0.0759405  -0.07312784
   0.03322464  0.23330795  0.0259169   0.06668641 -0.3047787  -0.02051503
   0.03206811 -0.01169609 -0.18862109  0.3407594   0.11372183 -0.19285739
   0.3129108  -0.25411372  0.44771205  0.11990126  0.1632479  -0.09862414
  -0.21804951 -0.16544289 -0.06739307 -0.01211232 -0.04509817  0.25183278
  -0.29118549  0.15817328 -0.22167752  0.30917756  0.35354623  0.09501477
   0.2509248   0.09529115  0.28082592  0.15167909  0.14552139  0.29080684
   0.08213932 -0.22623148 -0.02701183 -0.07134411]]"
87,硬盘分区表丢失、修复大事记--分区表修复利器testdisk,"今天是2009年11月14日，就在刚才，我找回了前几天丢失分区表的硬盘分区，特此记录。事件起因：前几天我用睿思疯狂下载东西时候，突然出现，硬盘扇区定位错误，以为没什么问题，我还强制继续下载，结果第二天开电脑后，发现电脑启动直接蓝屏，进不了XP了，然后我就试着多次重启，结果出现了XP欢迎界面后，立刻变成蓝屏。。。。事件发展：根据以往的习惯或者说是经验，我选择直接重装系统，拿ghost xp盘装，几分钟装好了，然后重启-》欢迎界面-》蓝屏。。。。。     至此，我猜测也许是电脑出了什么问题，ghost盘装不进去了，就换成了非ghost盘，系统检测硬件，最后给出：无法找到能安装系统的硬盘。。。     事件二度发展：这个时候，我才知道，是这个硬盘出问题了，于是将我的ＳＴ和ＷＤ（出问题的盘）交换，进入系统，发现资源管理器里面已经看不到ＷＤ分区了，同时进入计算机管理的磁盘管理，仍然看不到ＷＤ分区，和ＷＤ硬盘。     直接反应，买了块ＷＤ垃圾盘，然后去网上搜索ＷＤ的坏消息，竟然找出一些，这让一直对ＷＤ有好感的自信也没了，心里想着，硬盘硬件出问题了，估计要返厂修理，可怜了我的Ｎ多资料。     事件转机：关掉电脑后，想起来，硬件管理里面能不能看到呢，于是我重新打开电脑，打开计算机的硬件管理，终于给我一个惊喜：硬件管理里面能看到ＷＤ盘。     然后我推测，是不是硬盘出了坏道，于是打开ＨＤＴＵＮＥ发现没有坏道，ＷＤ盘竟然是健康度为好。     其中经过一番折腾。。。最后认为是分区表丢失了－－－回到正确轨道怎么这么难呀于是上网搜集分区表修复软件，下载了个ＰＴＤＤ，分区表医生，直接开始修复，当扫描到最后的时候，发现不进行下去了，这才想起来我新盘有４０多Ｇ的地方没有格式化，不会卡在这了吧。。。。进行了Ｎ次扫描，发现还真是卡在这了，这个软件失败。。。。。网上又看到一个ＧＰＬ软件ｔｅｓｔｄｉｓｋ－－－－－－－－－－－－－－救星就用它再扫描，扫描很慢，我考研没时间，好几次都是扫到一半，我就关机走了，下次回来继续扫描。。。终于有一天，我挂机扫了一天，晚上回来一看，还停在那。。。。于是又是一番不停地折腾。。。。最后，就在今晚，我发现，testdisk不用全部扫描完就能找到所有分区，同时要注意将分区的标志位一定要设置好，就是Ｐ（primary）,D(deleted),L(logical)，这几个标志位要设置好，然后重启就可以了。。。。本次事件总结：1、        testdisk是一个非常棒的软件，真的很棒，它允许扫描出结果直接可以操作，这是PTDD所没有的功能，所以分区表丢失修复，必然要用它了。2、        testdisk不用等到扫描完，出现要的分区就可了。3、        扫出来的分区标志位一定要设置好p,l即主分区还是逻辑分区，这样才能把完整系统恢复。4、        下次遇见硬盘分区不见了，或者磁盘管理也看不到了，或者磁盘出问题打不开了，都要试一试testdisk因为出现分区不见这类情况，不可能是磁盘坏道这类小故障能干得出来的。","['硬盘分区', '丢失', '修复', '大事记', '--', '分区表', '修复', '利器', 'testdisk', '今天', '2009', '11', '14', '刚才', '找回', '几天', '丢失', '分区表', '硬盘分区', '特此', '记录', '事件', '起因', '几天', '我用', '疯狂', '下载', '东西', '时候', '突然', '出现', '硬盘', '扇区', '定位', '错误', '以为', '没什么', '问题', '强制', '继续', '下载', '结果', '第二天', '电脑', '发现', '电脑', '启动', '直接', '蓝屏', '进不了', 'xp', '然后', '试着', '多次', '重启', '结果', '出现', 'xp', '欢迎', '界面', '立刻', '变成', '蓝屏', '事件', '发展', '根据', '以往', '习惯', '或者说', '经验', '选择', '直接', '重装系统', 'ghost', 'xp', '盘装', '几分钟', '装好', '然后', '重启', '欢迎', '界面', '蓝屏', '至此', '猜测', '也许', '电脑', '什么', '问题', 'ghost', '盘装', '进去', '换成', 'ghost', '系统', '检测', '硬件', '最后', '给出', '无法', '找到', '安装', '系统', '硬盘', '事件', '二度', '发展', '这个', '时候', '知道', '这个', '硬盘', '问题', '于是', '问题', '交换', '进入', '系统', '发现', '资源管理', '里面', '已经', '看不到', '分区', '同时', '进入', '计算机管理', '磁盘', '管理', '仍然', '看不到', '分区', '硬盘', '直接', '反应', '垃圾', '然后', '网上', '搜索', '坏消息', '竟然', '找出', '一些', '一直', '好感', '自信', '心里', '想着', '硬盘', '硬件', '问题', '估计', '返厂', '修理', '可怜', '资料', '事件', '转机', '关掉', '电脑', '起来', '硬件', '管理', '里面', '不能', '看到', '于是', '重新', '打开', '电脑', '打开', '计算机', '硬件', '管理', '终于', '一个', '惊喜', '硬件', '管理', '里面', '看到', '然后', '推测', '是不是', '硬盘', '于是', '打开', '发现', '没有', '坏道', '竟然', '健康', '度为', '其中', '经过', '一番', '折腾', '最后', '认为', '分区表', '丢失', '回到', '正确轨道', '怎么', '这么', '于是', '上网', '搜集', '分区表', '修复', '软件', '下载', '分区表', '医生', '直接', '开始', '修复', '扫描', '最后', '时候', '发现', '进行', '下去', '这才', '起来', '我新盘', '地方', '没有', '格式化', '不会', '进行', '扫描', '发现', '真是', '这个', '软件', '失败', '网上', '看到', '一个', '软件', '救星', '扫描', '扫描', '考研', '时间', '几次', '扫到', '一半', '关机', '下次', '回来', '继续', '扫描', '终于', '一天', '挂机', '一天', '晚上', '回来', '一看', '于是', '一番', '不停', '折腾', '最后', '今晚', '发现', 'testdisk', '不用', '全部', '扫描', '找到', '所有', '分区', '同时', '注意', '分区', '标志', '一定', '设置', '就是', 'primary', 'deleted', 'logical', '几个', '标志', '位要', '设置', '然后', '重启', '可以', '本次', '事件', '总结', 'testdisk', '一个', '非常', '软件', '真的', '很棒', '允许', '扫描', '结果', '直接', '可以', '操作', '这是', 'ptdd', '没有', '功能', '所以', '分区表', '丢失', '修复', '必然', '要用', 'testdisk', '不用', '等到', '扫描', '出现', '分区', '扫出来', '分区', '标志', '一定', '设置', '即主', '分区', '还是', '逻辑', '分区', '这样', '才能', '完整', '系统', '恢复', '下次', '遇见', '硬盘分区', '不见', '或者', '磁盘', '管理', '看不到', '或者', '磁盘', '问题', '打不开', '试一试', 'testdisk', '因为', '出现', '分区', '不见', '情况', '可能', '磁盘', '坏道', '这类', '故障', '能干', '出来']","[[-0.21766145 -0.12018231  0.1874843   0.1442562   0.24935934 -0.29270911
  -0.15740517  0.41542177 -0.00499737 -0.01496428 -0.05459171 -0.28191029
  -0.15595302  0.51057173  0.12470534 -0.0914646  -0.13157899 -0.00570452
  -0.08586619 -0.38325084  0.02748977  0.20713368  0.00232221 -0.07432316
   0.10175224 -0.47225473 -0.24022939  0.07197023 -0.17601884 -0.05217814
   0.21244996  0.02837995 -0.01499002 -0.12068098 -0.08838376  0.28513285
  -0.11231792 -0.18830873  0.09877535 -0.65051779 -0.14631744 -0.49547178
  -0.02962164 -0.06760273 -0.14490036 -0.11976649 -0.23077995  0.40722031
  -0.14919237  0.33244929  0.17591344 -0.22638718 -0.09570042 -0.20189543
   0.05955585  0.33264862  0.2121092  -0.05178144  0.08197883 -0.07753026
   0.03448592  0.25243477  0.01879834  0.07303617 -0.3302968  -0.01372237
   0.03348204 -0.01390744 -0.20224751  0.37630886  0.12138838 -0.21275758
   0.34214362 -0.28079365  0.49668791  0.1395163   0.18475185 -0.11922478
  -0.22567177 -0.1862421  -0.0694825  -0.00481218 -0.05508351  0.28371854
  -0.32431656  0.17449983 -0.2467147   0.35132426  0.39518473  0.10932703
   0.26567114  0.1045566   0.30581998  0.15938439  0.15881483  0.32488627
   0.08395696 -0.25476814 -0.0113364  -0.07354677]]"
91,vi编辑器命令,vi编辑器的文字说明模式：命令模式，编辑模式，末行模式。切换方式：命令模式→i→编辑模式，编辑模式→Esc→命令模式，命令模式→：→末行模式。功能：命令模式(Command Mode)：  控制光标移动，删除字符，段落复制。编辑模式(Insert Mode)：   新增文字及修改文字。末行模式(Last Line Mode)：保存文件，离开vi，以及其他设置。命令模式命令命令       说明h           将光标向左移动一格l           将光标向右移动一格j           将光标向下移动一格k           将光标向上移动一格0           数字0，将光标移动到该行的行首$           将光标移动到该行的行末H           将光标移动到该屏幕的顶端M           将光标移动到该屏幕的中间L           将光标移动到该屏幕的底端gg          将光标移动到文章的首行G           将光标移动到文章的尾行w或W         将光标移动到下一单词x           删除光标所在处的字符X           删除光标前的字符dd          删除光标所在行*dd          从光标所在行向下删除*行，*为数字D           删除光标所在处到行尾r           取代光标处的一个字符R           从光标处向后替换，按Esc结束u           取消上步的操作U           取消目前的所有操作yy          复制光标所在行p           将复制的内容放在光标所在行的下行编辑模式命令命令       说明a           在光标后插入文本A           在光标所在行后插入文本i           在光标前插入文本I           在光标所在行前插入文本o           在光标所在行下插入新行(小写字母o)O           在光标所在行上插入新行(大写字母O)末行命令命令       说明e           创建新文件n           加载新文件w           保存文件!           强行操作w!          强行保存文件q           退出q!          强行退出wq          保存退出wq!         强行保存退出set nu      显示行号set nonu    不显示行号/*          /搜索，*任意字符串?           同上,"['vi', '编辑器', '命令', 'vi', '编辑器', '文字说明', '模式', '命令', '模式', '编辑', '模式', '末行', '模式', '切换', '方式', '命令', '模式', '编辑', '模式', '编辑', '模式', 'esc', '命令', '模式', '命令', '模式', '末行', '模式', '功能', '命令', '模式', 'command', 'mode', '控制', '光标', '移动', '删除', '字符', '段落', '复制', '编辑', '模式', 'insert', 'mode', '新增', '文字', '修改', '文字', '末行', '模式', 'last', 'line', 'mode', '保存', '文件', '离开', 'vi', '以及', '其他', '设置', '命令', '模式', '命令', '命令', '说明', '光标', '移动', '一格', '光标', '移动', '一格', '光标', '向下', '移动', '一格', '光标', '向上', '移动', '一格', '数字', '光标', '移动', '该行', '行首', '光标', '移动', '该行', '行末', '光标', '移动', '屏幕', '顶端', '光标', '移动', '屏幕', '中间', '光标', '移动', '屏幕', '底端', 'gg', '光标', '移动', '文章', '首行', '光标', '移动', '文章', '尾行', '光标', '移动', '单词', '删除', '光标', '所在', '字符', '删除', '光标', '字符', 'dd', '删除', '光标', '所在', 'dd', '光标', '所在', '向下', '删除', '数字', '删除', '光标', '所在', '行尾', '取代', '光标', '一个', '字符', '光标', '处向', '替换', 'esc', '结束', '取消', '上步', '操作', '取消', '目前', '所有', '操作', 'yy', '复制', '光标', '所在', '复制', '内容', '放在', '光标', '所在', '下行', '编辑', '模式', '命令', '命令', '说明', '光标', '插入', '文本', '光标', '所在', '行后', '插入', '文本', '光标', '插入', '文本', '光标', '所在', '行前', '插入', '文本', '光标', '所在', '行下', '插入', '小写字母', '光标', '所在', '行上', '插入', '大写字母', '末行', '命令', '命令', '说明', '创建', '文件', '加载', '文件', '保存', '文件', '强行', '操作', '强行', '保存', '文件', '退出', '强行', '退出', 'wq', '保存', '退出', 'wq', '强行', '保存', '退出', 'set', 'nu', '显示', '行号', 'set', 'nonu', '显示', '行号', '搜索', '任意', '字符串']","[[-2.31757477e-01 -1.17795544e-01  2.00162851e-01  1.45847722e-01
   2.66097247e-01 -3.01014218e-01 -1.53413356e-01  4.29093161e-01
  -5.04180803e-03 -3.64799382e-02 -4.90347748e-02 -2.93403845e-01
  -1.55206443e-01  5.24960647e-01  1.42490155e-01 -1.01591121e-01
  -1.34184132e-01  1.72935478e-03 -9.63426839e-02 -4.19345225e-01
   2.01411429e-02  2.20060369e-01 -2.59859902e-04 -9.05111742e-02
   1.01406865e-01 -4.95227686e-01 -2.62569325e-01  6.80168001e-02
  -1.88944072e-01 -5.87595823e-02  1.98778467e-01  1.28334457e-02
  -2.36198250e-02 -1.31095348e-01 -1.02909051e-01  2.98113018e-01
  -1.33006283e-01 -2.01693497e-01  1.11393746e-01 -6.81199281e-01
  -1.60504920e-01 -5.17119235e-01 -3.41676856e-02 -5.86898308e-02
  -1.52098220e-01 -1.36051402e-01 -2.33511306e-01  4.15880158e-01
  -1.58449604e-01  3.52273106e-01  1.84900515e-01 -2.47956573e-01
  -1.06190003e-01 -2.02450977e-01  5.51746202e-02  3.46045316e-01
   2.14653274e-01 -5.79630358e-02  8.56345734e-02 -8.86075496e-02
   3.87987141e-02  2.59965070e-01  2.49878603e-02  7.37781315e-02
  -3.45303310e-01 -1.26277392e-02  3.38184005e-02 -9.31593860e-03
  -2.21075717e-01  3.82210095e-01  1.22542178e-01 -2.10899540e-01
   3.55544273e-01 -2.89815253e-01  5.02629014e-01  1.52713313e-01
   1.69053637e-01 -1.22219528e-01 -2.44230118e-01 -1.80515502e-01
  -5.65329888e-02 -5.49381111e-03 -5.56151565e-02  3.01574019e-01
  -3.26127879e-01  1.88091130e-01 -2.51628517e-01  3.63566359e-01
   4.19363447e-01  1.23952744e-01  2.80934732e-01  1.16330066e-01
   3.24692999e-01  1.73262350e-01  1.67987553e-01  3.32888251e-01
   8.95385645e-02 -2.65148631e-01 -2.67756316e-02 -8.92007124e-02]]"
94,搜索关键词高亮显示,"写一个搜索页面的时候，经常需要把输入的搜索关键词给用高亮红色标记出来，用JS很方便就能实现这一点，对了，用jQuery更方便，我就是这么做的：$(""div.rest a"").html(    function(){        return $(this).html().replace(            /<?php echo $_REQUEST['search-keyword'];?>/g,            ""<span class='red'><?php echo $_REQUEST['search-keyword'];?></span>""        )    }); 看到了吗，前面是选择要替换的层，然后用正则表达式将搜索的关键词，套上了一个<span class='red'></span>这样的样式标签，然后整个层里面都会关键词高亮了，方便吧，就这一句。","['搜索', '关键词', '高亮', '显示', '一个', '搜索', '页面', '时候', '经常', '需要', '输入', '搜索', '关键词', '高亮', '红色', '标记', '出来', 'js', '方便', '实现', '一点', 'jquery', '方便', '就是', '这么', 'div', 'rest', 'html', 'function', 'return', 'this', 'html', 'replace', 'php', 'echo', 'request', 'search', 'keyword', 'span', 'class', 'red', 'php', 'echo', 'request', 'search', 'keyword', 'span', '看到', '前面', '选择', '替换', '然后', '正则表达式', '搜索', '关键词', '一个', 'span', 'class', 'red', 'span', '这样', '样式', '标签', '然后', '整个', '里面', '关键词', '高亮', '方便', '一句']","[[-0.22348537 -0.11666712  0.23481806  0.15814757  0.25223191 -0.33547649
  -0.12978446  0.43661924 -0.03330638 -0.06762405 -0.05300657 -0.33788343
  -0.1395811   0.5071525   0.13275227 -0.09934841 -0.13314775 -0.00782799
  -0.06631014 -0.43979541 -0.00116764  0.23051274 -0.03511535 -0.13873559
   0.06377791 -0.45608315 -0.28213838  0.0575762  -0.20786627 -0.07112357
   0.17757267  0.03420848 -0.00363512 -0.11865034 -0.14512834  0.31326486
  -0.1545309  -0.22502199  0.0802522  -0.66700301 -0.13053043 -0.53714612
  -0.04821607 -0.04230307 -0.12738831 -0.18104343 -0.25376155  0.37917055
  -0.13749894  0.3913503   0.14686148 -0.24826296 -0.07759293 -0.20259413
   0.02224561  0.35980698  0.17242147 -0.06802912  0.10169502 -0.10294222
   0.0709616   0.23126984  0.01629409  0.07701983 -0.33809587  0.01800169
   0.03438423 -0.00441151 -0.22699504  0.40746367  0.10418613 -0.18911765
   0.36847212 -0.2984059   0.52523695  0.21179097  0.1895942  -0.14643408
  -0.25008322 -0.18153974 -0.04187517  0.03520544 -0.09936934  0.33035162
  -0.34735073  0.18588218 -0.26616175  0.41005171  0.45396341  0.1408436
   0.23740325  0.10352506  0.32869836  0.16948678  0.1772681   0.3572297
   0.08650917 -0.2709803   0.01667562 -0.09733846]]"
97,PHP IE下载时提示”无法复制 无法读取源文件或磁盘”的解决办法," 之前说的一篇php下载指定文件,今天终于遇到一个问题，IE另存下载时提示：无法复制，无法读取源文件或磁盘。一步一步调式，发现header报错？因为我测试是php和html混合写的，之前没有任何输出，但就是报错。费大劲才解决这个问题：在php和html代码之间加个空行（格）。好了，header不报错，但是IE无法另存还照样出现。仔细检查代码，尝试任何可能性，试对了，解决办法：//找到这行代码header(""Content-Type: application/octet-stream"");//修改为header(""Content-Type: application/octet-stream;charset=utf8""); OK,可以正常下载,做个记录。  ","['php', 'ie', '下载', '提示', '无法', '复制', '无法', '读取', '源文件', '磁盘', '解决办法', '之前', '一篇', 'php', '下载', '指定', '文件', '今天', '终于', '遇到', '一个', '问题', 'ie', '另存', '下载', '提示', '无法', '复制', '无法', '读取', '源文件', '磁盘', '一步', '一步', '调式', '发现', 'header', '报错', '因为', '测试', 'php', 'html', '混合', '之前', '没有', '任何', '输出', '就是', '报错', '费大劲', '解决', '这个', '问题', 'php', 'html', '代码', '之间', '加个', '空行', 'header', '报错', '但是', 'ie', '无法', '另存', '照样', '出现', '仔细检查', '代码', '尝试', '任何', '可能性', '试对', '解决办法', '找到', '代码', 'header', 'content', 'type', 'application', 'octet', 'stream', '修改', 'header', 'content', 'type', 'application', 'octet', 'stream', 'charset', 'utf8', 'ok', '可以', '正常', '下载', '做个', '记录']","[[-0.23677902 -0.13744448  0.21969682  0.20418039  0.24342647 -0.34982474
  -0.1580176   0.47769735 -0.01808053 -0.0405913  -0.07279503 -0.34163219
  -0.16116616  0.55984461  0.11878293 -0.11643749 -0.14095004  0.0057915
  -0.05875489 -0.41738371  0.01934049  0.25032012 -0.02991823 -0.12209607
   0.08155777 -0.49945566 -0.29475519  0.08660702 -0.19490939 -0.0625518
   0.21518989  0.06448765 -0.00862877 -0.12763597 -0.13760232  0.33646049
  -0.14441687 -0.22223904  0.09487547 -0.69767489 -0.12835301 -0.54425277
  -0.03213458 -0.06162097 -0.14814348 -0.17631488 -0.27841252  0.44448948
  -0.10506939  0.36540554  0.15804767 -0.27224792 -0.06026727 -0.23404207
   0.04135318  0.39673406  0.21505762 -0.07450902  0.11809945 -0.09566706
   0.07579724  0.26105938  0.0190522   0.08433647 -0.3601973   0.00905762
   0.01207087  0.00840348 -0.22140796  0.42515582  0.1175828  -0.21768269
   0.40179023 -0.31816869  0.55558873  0.20599963  0.24079195 -0.16743237
  -0.23455677 -0.21332565 -0.08965631  0.00518089 -0.08904108  0.34549738
  -0.3720075   0.18035734 -0.28173072  0.43626312  0.47991081  0.14172991
   0.25461907  0.1190588   0.33019663  0.1736258   0.1832208   0.39341493
   0.08250203 -0.26275782  0.05107333 -0.09296186]]"
99,PHP中文乱码解决,"网上转载的,但是代码不完全, 补充了下, 再发 通过把Content-Type设置为application/octet-stream，可以把动态生成的内容当作文件来下载，相信这个大家都会。那么用Content-Disposition设置下载的文件名，这个也有不少人知道吧。基本上，下载程序都是这么写的：<?php$filename = ""document.txt"";header('Content-Type: application/octet-stream');header('Content-Disposition: attachment; filename=' . $filename);print ""Hello!"";?> 这样用浏览器打开之后，就可以下载document.txt。但是，如果$filename是UTF-8编码的，有些浏览器就无法正常处理了。比如把上面那个程序稍稍改一下：<?php$filename = ""中文 文件名.txt"";header('Content-Type: application/octet-stream');header('Content-Disposition: attachment; filename=' . $filename);print ""Hello!"";?> 把程序保存成UTF-8编码再访问，IE6下载的文件名就会乱码。 FF3下下载的文件名就只有“中文”两个字。Opera 9下一切正常。输出的header实际上是这样子：Content-Disposition: attachment; filename=中文 文件名.txt 其实按照RFC2231的定义，多语言编码的Content-Disposition应该这么定义：Content-Disposition: attachment; filename*=""utf8'%B6%E5%90%8D.txt"" 即：filename后面的等号之前要加 * filename的值用单引号分成三段，分别是字符集(utf8)、语言(空)和urlencode过的文件名。 最好加上双引号，否则文件名中空格后面的部分在Firefox中显示不出来 注意urlencode的结果与php的urlencode函数结果不太相同，php的urlencode会把空格替换成+，而这里需要替换成%20经过试验，发现几种主流浏览器的支持情况如下：IE6                  attachment; filename=""<URL编码之后的UTF-8文件名>""FF3                 attachment; filename=""UTF-8文件名""attachment; filename*=""utf8''<URL编码之后的UTF-8文件名>""Opera9           attachment; filename=""UTF-8文件名""Safari3(Win)    貌似不支持？上述方法都不行这样看来，程序必须得这样写才能支持所有主流浏览器：以下代码适用于页面时UTF-8编码情况，若不是，用iconv将文件名转码下<?php$filename = ""中文 文件名.txt"";$encoded_filename = urlencode($filename);$encoded_filename = str_replace(""+"", ""%20"", $encoded_filename);$ua = $_SERVER[""HTTP_USER_AGENT""];header('Content-Type: application/octet-stream');if (preg_match(""/MSIE/"", $ua)) {header('Content-Disposition: attachment; filename=""' . $encoded_filename . '""');} else if (preg_match(""/Firefox/"", $ua)) {header('Content-Disposition: attachment; filename*=""utf8\'\'' . $filename . '""');} else {header('Content-Disposition: attachment; filename=""' . $filename . '""');}print 'ABC';?>  ","['php', '中文', '乱码', '解决', '网上', '转载', '但是', '代码', '完全', '补充', '再发', '通过', 'content', 'type', '设置', 'application', 'octet', 'stream', '可以', '动态', '生成', '内容', '当作', '文件', '下载', '相信', '这个', '大家', '那么', 'content', 'disposition', '设置', '下载', '文件名', '这个', '不少', '知道', '基本上', '下载', '程序', '这么', 'php', 'filename', 'document', 'txt', 'header', 'content', 'type', 'application', 'octet', 'stream', 'header', 'content', 'disposition', 'attachment', 'filename', 'filename', 'print', 'hello', '这样', '浏览器', '打开', '之后', '可以', '下载', 'document', 'txt', '但是', '如果', 'filename', 'utf', '编码', '有些', '浏览器', '无法', '正常', '处理', '比如', '上面', '那个', '程序', '稍稍', '一下', 'php', 'filename', '中文', '文件名', 'txt', 'header', 'content', 'type', 'application', 'octet', 'stream', 'header', 'content', 'disposition', 'attachment', 'filename', 'filename', 'print', 'hello', '程序', '保存', 'utf', '编码', '访问', 'ie6', '下载', '文件名', '乱码', 'ff3', '下载', '文件名', '只有', '中文', '两个', 'opera', '一切正常', '输出', 'header', '实际上', '样子', 'content', 'disposition', 'attachment', 'filename', '中文', '文件名', 'txt', '其实', '按照', 'rfc2231', '定义', '语言', '编码', 'content', 'disposition', '应该', '这么', '定义', 'content', 'disposition', 'attachment', 'filename', 'utf8', 'b6%', 'e5%', '90%', '8d', 'txt', 'filename', '后面', '之前', '要加', 'filename', '值用', '单引号', '分成', '三段', '分别', '字符集', 'utf8', '语言', 'urlencode', '文件名', '最好', '加上', '双引号', '否则', '文件名', '空格', '后面', '部分', 'firefox', '显示', '出来', '注意', 'urlencode', '结果', 'php', 'urlencode', '函数', '结果', '不太', '相同', 'php', 'urlencode', '空格', '替换成', '这里', '需要', '替换成', '20', '经过', '试验', '发现', '几种', '主流', '浏览器', '支持', '情况', '如下', 'ie6', 'attachment', 'filename', 'url', '编码', '之后', 'utf', '文件名', 'ff3', 'attachment', 'filename', 'utf', '文件名', 'attachment', 'filename', 'utf8', 'url', '编码', '之后', 'utf', '文件名', 'opera9', 'attachment', 'filename', 'utf', '文件名', 'safari3', 'win', '貌似', '支持', '上述', '方法', '不行', '这样', '看来', '程序', '必须', '这样', '才能', '支持', '所有', '主流', '浏览器', '以下', '代码', '适用', '页面', 'utf', '编码', '情况', '不是', 'iconv', '文件名', '转码', 'php', 'filename', '中文', '文件名', 'txt', 'encoded', 'filename', 'urlencode', 'filename', 'encoded', 'filename', 'str', 'replace', '20', 'encoded', 'filename', 'ua', 'server', 'http', 'user', 'agent', 'header', 'content', 'type', 'application', 'octet', 'stream', 'if', 'preg', 'match', 'msie', 'ua', 'header', 'content', 'disposition', 'attachment', 'filename', 'encoded', 'filename', 'else', 'if', 'preg', 'match', 'firefox', 'ua', 'header', 'content', 'disposition', 'attachment', 'filename', 'utf8', 'filename', 'else', 'header', 'content', 'disposition', 'attachment', 'filename', 'filename', 'print', 'abc']","[[-0.22920138 -0.1180129   0.24420047  0.1508674   0.26000629 -0.35707717
  -0.1201779   0.46629424 -0.05178022 -0.10413241 -0.04899829 -0.36325852
  -0.1449251   0.52230682  0.13770222 -0.10820258 -0.12093669 -0.00286482
  -0.05117873 -0.48250118 -0.03326262  0.25143823 -0.0500041  -0.18340842
   0.06239323 -0.46887272 -0.29901642  0.05388095 -0.22078392 -0.07762281
   0.16677475  0.02244406  0.00229028 -0.11769446 -0.16337033  0.32337209
  -0.1872731  -0.26203603  0.07942131 -0.69628887 -0.12726962 -0.56301865
  -0.05454656 -0.02055391 -0.12768573 -0.21217797 -0.23314671  0.37140524
  -0.14813882  0.43017034  0.13942089 -0.26248893 -0.09263281 -0.18807752
  -0.01290569  0.38340107  0.15852666 -0.09857641  0.12394075 -0.12954926
   0.09184228  0.23607099  0.00622169  0.0806935  -0.36303139  0.03909601
   0.03840011 -0.01987566 -0.27168198  0.41506883  0.10021014 -0.18039897
   0.38535702 -0.31745843  0.5408393   0.2630836   0.17550652 -0.16670399
  -0.28601347 -0.13959841 -0.02561912  0.04388717 -0.11472356  0.36241295
  -0.33279959  0.19246828 -0.28010081  0.44124918  0.48261654  0.15307861
   0.22375582  0.11306188  0.33971755  0.17716995  0.18275335  0.35335665
   0.10665144 -0.29237653  0.00715891 -0.11610898]]"
103,文件下载代码-来自PBDigg,"         $disposition = isImg($attachmentpath) ? 'inline' : 'attachment';        $db_charset == 'utf-8' && $attdata['filename'] = convert_encoding('utf-8', 'gbk', $attdata['filename']);        strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE && $attdata['filename'] = urlencode($attdata['filename']);        header('Cache-control: max-age=31536000');        header('Expires: '.gmdate('D, d M Y H:i:s', $timestamp + 31536000).' GMT');        header('Last-Modified: '.gmdate('D, d M Y H:i:s', $attdata['uploaddate']).' GMT');        header('Content-type: '.$attdata['filetype']);        header('Content-Encoding: none');        header('Content-Disposition: '.$disposition.'; filename='.$attdata['filename']);        header('Content-Length: '.filesize($attachmentpath));        header('Content-Transfer-Encoding: binary');        @readfile($attachmentpath);  ","['文件', '下载', '代码', '来自', 'pbdigg', 'disposition', 'isimg', 'attachmentpath', 'inline', 'attachment', 'db', 'charset', 'utf', '&&', 'attdata', 'filename', 'convert', 'encoding', 'utf', 'gbk', 'attdata', 'filename', 'strpos', 'server', 'http', 'user', 'agent', 'msie', 'false', '&&', 'attdata', 'filename', 'urlencode', 'attdata', 'filename', 'header', 'cache', 'control', 'max', 'age', '31536000', 'header', 'expires', 'gmdate', 'timestamp', '31536000', 'gmt', 'header', 'last', 'modified', 'gmdate', 'attdata', 'uploaddate', 'gmt', 'header', 'content', 'type', 'attdata', 'filetype', 'header', 'content', 'encoding', 'none', 'header', 'content', 'disposition', 'disposition', 'filename', 'attdata', 'filename', 'header', 'content', 'length', 'filesize', 'attachmentpath', 'header', 'content', 'transfer', 'encoding', 'binary', 'readfile', 'attachmentpath']","[[-0.18431629 -0.08794784  0.23709524  0.13643879  0.20339442 -0.33296087
  -0.06280926  0.40526358 -0.0809628  -0.14376218 -0.03693292 -0.35245984
  -0.09872293  0.41873945  0.11564297 -0.10311316 -0.08836514 -0.00060659
  -0.0091121  -0.4454062  -0.06574821  0.23707912 -0.08037993 -0.22471004
   0.00727991 -0.3587187  -0.28401248  0.02484355 -0.20257404 -0.07735692
   0.09658228  0.0266053   0.01413957 -0.08766113 -0.18430177  0.28516928
  -0.20080733 -0.26027917  0.04080516 -0.57514854 -0.07720566 -0.49091539
  -0.06401669  0.01868168 -0.08524805 -0.23902212 -0.2008196   0.26530112
  -0.09751331  0.40468927  0.07022842 -0.23786636 -0.05716564 -0.14395576
  -0.06570727  0.34607421  0.08486433 -0.11038452  0.12640631 -0.13163033
   0.12137913  0.166296   -0.0056633   0.07163963 -0.30066373  0.07417592
   0.02426463 -0.00882732 -0.26279204  0.35519228  0.05381334 -0.11611174
   0.33899319 -0.27797448  0.45709758  0.30428894  0.14436329 -0.17450748
  -0.25791356 -0.0841718   0.00930114  0.07058727 -0.13530293  0.34984761
  -0.27562912  0.16510294 -0.2440635   0.41965263  0.45098005  0.15691359
   0.14095559  0.0944595   0.28976419  0.14757726  0.16198327  0.30870302
   0.09757622 -0.25327378  0.04197896 -0.11851985]]"
105,PHP安全笔记,"1、           Magic Quotes选项PHP.INI中中有三个以magic_quotes_开头的选项magic_quotes_gpc如果是On的话，就会自动用‘\’转义从GET,POST,COOKIE来的数据，这是为什么我们想在URL中输入' ; show tables;--有时候失败的原因，因为被转义了呗magic_quotes_runtime如果是on，会自动转义来自数据库或字符串中数据magic_quotes_sybase会用单引号代替反斜杠来转义我们可以使用addslashes函数来达到同样目的，不过有时候得用stripslashes来取消转义哦2、           PHP的命令执行函数a)      system:执行一个外部的应用程序并显示输出的结果b)      exec:执行一个外部的应用程序c)       passthru:执行一个UNIX系统命令并返回原始的输出d)      shell_exec:执行shell命令并返回输出的字符串e)      ""``""运算符：与shell_exec功能相同system举例-列出C盘内容：<?phpecho ""<pre>"";$last_line = system(""dir c:"", $retval);echo ""</pre>""; echo ""命令输出的最后一行："" . $last_line . ""<br />"";echo ""命令的返回值："" . $retval;?> exec执行外部应用程序-列出C盘内容：<?php$output = array();echo ""<pre>"";$last_line = exec(""dir c:"", $output);echo ""</pre>"";while(list($key, $value) = each($output)){    echo $value . ""<br />"";} echo ""命令输出的最后一行："" . $last_line . ""<br />"";echo ""命令的返回值："" . $retval;?> string shell_exec( string cmd )<?phpecho ""<pre>"";$output = shell_exec(""dir c:"");echo ""</pre>""; echo nl2br($output) . ""<br />"";?> <?phpecho ""<pre>"";$output = `dir c:`;echo ""</pre>""; echo nl2br($output) . ""<br />"";?> 3、           EVAL函数攻击下面的例子我换参数为system(""dir c:"");,执行失败了，是因为我的php.ini中 ;Magic quotes for incoming GET/POST/Cookie data.magic_quotes_gpc = On这句话导致system括号里的双引号被转义，导致执行失败<?php$myvar = ""varname""; if (isset($_GET[""arg""])){    $arg = $_GET[""arg""];    //arg参数可以替换成system造成命令注入攻击    eval(""\$myvar = $arg;"");//eval 能够执行里面的字符串的PHP代码    echo ""\$myvar = "" . $myvar; }?> 4、           防范命令注入攻击和EVAL注入攻击的方法使用函数 escateshellarg 函数过滤传来的字符串参数即可5、           客户端脚本攻击-SQL Insertion客户端脚本攻击，就是用户在留言板框内输入js脚本，然后别人就中招了解决方法就是HTML输出过滤在PHP中有两种方法可以进行HTML输出过滤：l  使用strip_tags来删除字符串中的PHP和HTML标签l  使用 htmlspecialchars函数来讲特殊字符转换成HTML编码，而不是执行，这是解决该问题的最佳方法l  跨网站脚本攻击XSS解决方法很简单，仍然使用htmlspecialchars将来自URL的参数过滤一下即可，这样不让来自URL的js代码执行就OK如果在表单中用的是action=$_SERVER['PHP_SELF']或者action=$SCRIPT_NAME的时候，会被XSS注入，解决方法：在action后面的URL加上htmlspecialchars过滤action写成空，即action=''默认是提交到自身页面的，所以没必要，该情况用于表单是自身处理的情况6、           SQL注入攻击的防御方法：a)      如果确定是整数，用intval过滤参数b)      如果确定是浮点数，用floatval或doubleval函数过滤c)       如果是字符串，则用addslashes函数将单引号，双引号，反斜杠，NULL等字符转义请注意，PHP.INI中的magic_quotes_gpc如果为ON，那么字符串中引号等会被自动加上反斜杠转义，那么如果我们再加上addslashes函数就会有了两个反斜杠，使得SQL语句中出现了一个反斜杠后被执行，会出错误的。解决方法，使用get_magic_quotes_gpc判断是不是将该值设置为ON了，如果是ON返回1，如果offf返回0","['php', '安全', '笔记', 'magic', 'quotes', '选项', 'php', 'ini', '中中', '三个', 'magic', 'quotes', '开头', '选项', 'magic', 'quotes', 'gpc', '如果', 'on', '的话', '自动', '转义', 'get', 'post', 'cookie', '数据', '这是', '为什么', '我们', 'url', '输入', 'show', 'tables', '--', '有时候', '失败', '原因', '因为', '转义', 'magic', 'quotes', 'runtime', '如果', 'on', '自动', '转义', '来自', '数据库', '字符串', '数据', 'magic', 'quotes', 'sybase', '会用', '单引号', '代替', '斜杠', '转义', '我们', '可以', '使用', 'addslashes', '函数', '达到', '同样', '目的', '不过', '有时候', '得用', 'stripslashes', '取消', '转义', 'php', '命令', '执行', '函数', 'system', '执行', '一个', '外部', '应用程序', '显示', '输出', '结果', 'exec', '执行', '一个', '外部', '应用程序', 'passthru', '执行', '一个', 'unix', '系统命令', '返回', '原始', '输出', 'shell', 'exec', '执行', 'shell', '命令', '返回', '输出', '字符串', '运算符', 'shell', 'exec', '功能', '相同', 'system', '举例', '列出', 'c盘', '内容', 'phpecho', 'pre', 'last', 'line', 'system', 'dir', 'retval', 'echo', 'pre', 'echo', '命令', '输出', '最后', '一行', 'last', 'line', 'br', 'echo', '命令', '返回值', 'retval', 'exec', '执行', '外部', '应用程序', '列出', 'c盘', '内容', 'php', 'output', 'array', 'echo', 'pre', 'last', 'line', 'exec', 'dir', 'output', 'echo', 'pre', 'while', 'list', 'key', 'value', 'each', 'output', 'echo', 'value', 'br', 'echo', '命令', '输出', '最后', '一行', 'last', 'line', 'br', 'echo', '命令', '返回值', 'retval', 'string', 'shell', 'exec', 'string', 'cmd', 'phpecho', 'pre', 'output', 'shell', 'exec', 'dir', 'echo', 'pre', 'echo', 'nl2br', 'output', 'br', 'phpecho', 'pre', 'output', 'dir', 'echo', 'pre', 'echo', 'nl2br', 'output', 'br', 'eval', '函数', '攻击', '下面', '例子', '我换', '参数', 'system', 'dir', '执行', '失败', '是因为', 'php', 'ini', 'magic', 'quotes', 'for', 'incoming', 'get', 'post', 'cookie', 'data', 'magic', 'quotes', 'gpc', 'on', '这句', '导致', 'system', '括号', '双引号', '转义', '导致', '执行', '失败', 'php', 'myvar', 'varname', 'if', 'isset', 'get', 'arg', 'arg', 'get', 'arg', 'arg', '参数', '可以', '替换成', 'system', '造成', '命令', '注入', '攻击', 'eval', 'myvar', 'arg', 'eval', '能够', '执行', '里面', '字符串', 'php', '代码', 'echo', 'myvar', 'myvar', '防范', '命令', '注入', '攻击', 'eval', '注入', '攻击', '方法', '使用', '函数', 'escateshellarg', '函数', '过滤', '传来', '字符串', '参数', '即可', '客户端', '脚本', '攻击', 'sql', 'insertion', '客户端', '脚本', '攻击', '就是', '用户', '留言板', '框内', '输入', 'js', '脚本', '然后', '别人', '中招', '解决', '方法', '就是', 'html', '输出', '过滤', 'php', '中有', '两种', '方法', '可以', '进行', 'html', '输出', '过滤', '使用', 'strip', 'tags', '删除', '字符串', 'php', 'html', '标签', '使用', 'htmlspecialchars', '函数', '来讲', '特殊字符', '转换成', 'html', '编码', '不是', '执行', '这是', '解决', '问题', '最佳', '方法', '网站', '脚本', '攻击', 'xss', '解决', '方法', '简单', '仍然', '使用', 'htmlspecialchars', '来自', 'url', '参数', '过滤', '一下', '即可', '这样', '不让', '来自', 'url', 'js', '代码执行', 'ok', '如果', '表单', '中用', 'action', 'server', 'php', 'self', '或者', 'action', 'script', 'name', '时候', 'xss', '注入', '解决', '方法', 'action', '后面', 'url', '加上', 'htmlspecialchars', '过滤', 'action', '写成', 'action', '默认', '提交', '自身', '页面', '所以', '必要', '情况', '用于', '表单', '自身', '处理', '情况', 'sql', '注入', '攻击', '防御', '方法', '如果', '确定', '整数', 'intval', '过滤', '参数', '如果', '确定', '浮点数', 'floatval', 'doubleval', '函数', '过滤', '如果', '字符串', 'addslashes', '函数', '单引号', '双引号', '斜杠', 'null', '字符', '转义', '注意', 'php', 'ini', 'magic', 'quotes', 'gpc', '如果', 'on', '那么', '字符串', '引号', '自动', '加上', '斜杠', '转义', '那么', '如果', '我们', '加上', 'addslashes', '函数', '两个', '斜杠', '使得', 'sql', '语句', '出现', '一个', '斜杠', '执行', '会出', '错误', '解决', '方法', '使用', 'get', 'magic', 'quotes', 'gpc', '判断', '是不是', '该值', '设置', 'on', '如果', 'on', '返回', '如果', 'offf', '返回']","[[-0.22531961 -0.1262381   0.21289933  0.13631194  0.2791108  -0.3268854
  -0.16635874  0.45704445 -0.01048458 -0.05052216 -0.04686176 -0.31447993
  -0.16923818  0.55107558  0.14648878 -0.09818851 -0.14180932  0.00469158
  -0.09093774 -0.46179896  0.00281775  0.22494952 -0.0141969  -0.11466214
   0.10377562 -0.50397931 -0.27579553  0.07072826 -0.21501034 -0.06188576
   0.20222642  0.00894199 -0.00698589 -0.13613888 -0.12444285  0.31052188
  -0.15248823 -0.22259219  0.10725465 -0.71228737 -0.1629873  -0.55705298
  -0.04404038 -0.04656373 -0.14645388 -0.1676494  -0.22460916  0.41072423
  -0.17120757  0.39967224  0.18663137 -0.2524629  -0.11650169 -0.19199043
   0.04752539  0.36701362  0.2065887  -0.07362745  0.10009867 -0.1186699
   0.05771995  0.26055891  0.02382292  0.08644949 -0.36423401  0.00247018
   0.04617304 -0.02549205 -0.25078336  0.41508057  0.13534299 -0.21170933
   0.36846492 -0.30117059  0.53886677  0.19237001  0.16803071 -0.13113169
  -0.28363244 -0.16580554 -0.04601265  0.01436569 -0.08125468  0.32165626
  -0.34614078  0.19419416 -0.27528138  0.39564507  0.44297627  0.12762571
   0.27707831  0.10973759  0.33856246  0.18132951  0.18162885  0.34232877
   0.09795743 -0.28609254 -0.04537033 -0.10565325]]"
107,PHP输出Excel实例代码,"这里使用PHPExcel的开源类一个完整的实例：<?php require_once(""../includes/function.php""); //提供了SQL注入检测函数inject_checkrequire_once(""../class/DB.php""); //DB操作类，自己扩展一下$db = new DB();  if($_GET['show_year']){     $_GET['show_year'] = inject_check($_GET['show_year']); } else {     echo ""<script>location.href='{$_SERVER['REQUEST_URI']}';</script>"";     return; }  //查出开设预约的班级的学生名单 $sql = ""select * from bishe_student,student where bishe_student.sno=student.sno "";  if($_GET['show_year'] && $_GET['show_year']!='-1'){     $lagreYear = $_GET['show_year']+1;     $sql .= "" and bishe_student.time>='{$_GET['show_year']}-01-01 00:00:00' and bishe_student.time<'{$lagreYear}-01-01 00:00:00'""; }  $sql .= ""order by bishe_student.time asc; "";  $rs = $db->query($sql);  /** *该PHP代码块开始为能够输出EXCEL文件作准备 */  ////////////////////////////////////////////**********************第一步，开头操作，包括引入类、设定文件基本属性 require_once(""../Excel/Classes/PHPExcel.php""); require_once(""../Excel/Classes/PHPExcel/Writer/Excel5.php"");  //单元格的字母坐标 $colx = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','aa','ab','ac','ad','ae','af','ag','ah','ai','ak','al','am','an','ao','ap','aq','ar','as','at','au','av','aw','ax','ay','az'); // 创建一个处理对象实例        $objExcel = new PHPExcel();               // 创建文件格式写入对象实例, uncomment        $objWriter = new PHPExcel_Writer_Excel5($objExcel);   //设置文档基本属性        $objProps = $objExcel->getProperties();        $objProps->setCreator( gbkToUtf8(""计算机学院专业实践中心"") );        $objProps->setLastModifiedBy( gbkToUtf8(""计算机学院专业实践中心"") );        $objProps->setTitle( gbkToUtf8(""毕业设计预约学生表"") );        $objProps->setSubject( gbkToUtf8(""毕业设计预约学生表"") );        $objProps->setDescription( gbkToUtf8(""毕业设计预约学生表"") );        $objProps->setKeywords( gbkToUtf8(""毕业设计预约学生表"") );        $objProps->setCategory( gbkToUtf8(""毕业设计预约学生表"") );   //*************************************        //设置当前的sheet索引，用于后续的内容操作。        //一般只有在使用多个sheet的时候才需要显示调用。        //缺省情况下，PHPExcel会自动创建第一个sheet被设置SheetIndex=0        $objExcel->setActiveSheetIndex(0);        $objActSheet = $objExcel->getActiveSheet();               //设置当前活动sheet的名称        $objActSheet->setTitle('sheet1');    //设置宽度 function setWidth($index,$width=5){     global $objActSheet;     $objActSheet->getColumnDimension(gbkToUtf8($index))->setWidth($width); }  //宽度设置 for($i=0;$i<51;$i++){     //echo $colx[$i]."""";     $ind = $colx[$i];          setWidth(gbkToUtf8(""$ind""),11); }  $objActSheet->getRowDimension(1)->setRowHeight(30);     $objActSheet->getRowDimension(2)->setRowHeight(20);     $objActSheet->getRowDimension(3)->setRowHeight(16);    //函数：设置border function setBorder($index){     global $objActSheet;     $objActSheet->getStyle($index)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );        $objActSheet->getStyle($index)->getBorders()->getLeft()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );        $objActSheet->getStyle($index)->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );        $objActSheet->getStyle($index)->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );      $objActSheet->getStyle($index)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);      $objActSheet->getStyle($index)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);       $objActSheet->getStyle($index)->getAlignment()->setWrapText(true);           }  //设置值 function setValue($index,$value){     global $objActSheet;     $objActSheet->setCellValue($index,gbkToUtf8($value) );     }  //设置值 function setValueGBK($index,$value){     global $objActSheet;     $objActSheet->getCell($index)->setValueExplicit($value, PHPExcel_Cell_DataType::TYPE_STRING); }  //合并单元格 function merge($fc,$lc){     global $objActSheet;     $objActSheet->mergeCells($fc."":"".$lc);  }  //********************开始写入数据  $lastIndex = 10;  $objActSheet->setCellValue('A1',gbkToUtf8( '毕业设计上机预约学生表' ) );     //合并单元格     $objActSheet->mergeCells(""A1:"".$colx[$lastIndex].""1"");     //设置样式    $objStyleA1 = $objActSheet->getStyle('A1');        $objStyleA1->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);    $objFontA1 = $objStyleA1->getFont();        $objFontA1->setName('Courier New');        $objFontA1->setSize(18);      $objFontA1->setBold(true);     $rowIndexB = 3; function showBottomRows($xuhao='序号',$xuehao='学号',$xingming='姓名',$bishelaoshi='毕设老师',$bishetimu='毕设题目',$phone='电话',$email='Email',$beizhu='备注'){     global $colx;     global $rowIndexB;     $colIndexB = 0;          //都分三步，设值、合并、边框     //序号     setValue($colx[$colIndexB].$rowIndexB   ,   $xuhao);     merge($colx[$colIndexB].$rowIndexB   ,    $colx[$colIndexB].$rowIndexB );     $colIndexB = $colIndexB+1;       //学号     setValue($colx[$colIndexB].$rowIndexB   ,   $xuehao);     merge($colx[$colIndexB].$rowIndexB   ,    $colx[$colIndexB].$rowIndexB );     $colIndexB = $colIndexB+1;          //姓名     setValue($colx[$colIndexB].$rowIndexB   ,   $xingming);     merge($colx[$colIndexB].$rowIndexB   ,    $colx[$colIndexB].$rowIndexB );     $colIndexB = $colIndexB+1;          //毕设老师     setValue($colx[$colIndexB].$rowIndexB   ,   $bishelaoshi);     merge($colx[$colIndexB].$rowIndexB   ,    $colx[$colIndexB].$rowIndexB );     $colIndexB = $colIndexB+1;          //毕设题目     setValue($colx[$colIndexB].$rowIndexB   ,   $bishetimu);     merge($colx[$colIndexB].$rowIndexB   ,    $colx[$colIndexB+2].$rowIndexB );     $colIndexB = $colIndexB+3;          //电话     setValue($colx[$colIndexB].$rowIndexB   ,   $phone);     merge($colx[$colIndexB].$rowIndexB   ,    $colx[$colIndexB].$rowIndexB );     $colIndexB = $colIndexB+1;      //Email     setValue($colx[$colIndexB].$rowIndexB   ,   $email);     merge($colx[$colIndexB].$rowIndexB   ,    $colx[$colIndexB+1].$rowIndexB );     $colIndexB = $colIndexB+2;          //备注     setValue($colx[$colIndexB].$rowIndexB   ,   $beizhu);     merge($colx[$colIndexB].$rowIndexB   ,    $colx[$colIndexB].$rowIndexB );     $colIndexB = $colIndexB+1;                       for($xx=0;$xx<$lastIndex;$xx++){         setBorder($colx[$xx].$rowIndexB);     }     $rowIndexB++; } showBottomRows(); //********************************************表格头部结束 ////////////////////////////////////////////*********************第一步结束，第二步就可以开始打印数据，在下面的主要函数里面   $order=1; while($row = $db->getRows($rs)){     showBottomRows(                 $order++ ,                 "" "".$row['sno'],                  "" "".$row['sname'] ,                  "" "".$row['bishe_teacher'],                 "" "".$row['bishe_title'],                 "" "".$row['bishe_phone'],                 "" "".$row['bishe_email'],                 "" ""     ); }  //刷新border for($i=0;$i<=$lastIndex;$i++){     $objStyleA3 = $objActSheet->getStyle('A3');       $objStyleA3->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );        $objStyleA3->getBorders()->getLeft()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );        $objStyleA3->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );        $objStyleA3->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );      $objStyleA3->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);      $objStyleA3->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);       //$objActSheet->duplicateStyle($objStyleA3, 'A3:'.$colx[$lastIndex].(mysql_num_rows( $result_stuList )+3) );      $objActSheet->duplicateStyle($objStyleA3, 'A3:'.$colx[$lastIndex].($db->getRowsNum($rs)+3) );  }  $cancel_time=date(""YmdHis"");    $outputFileName = ""{$cancel_time}bisheYuyueStudentList.xls"";        //到文件        $objWriter->save('../temp/'.$outputFileName);       header(""Content-Type: application/OCTET-STREAM"");     header(""Content-Disposition: inline; filename={$_GET['show_year']}年毕业设计上机预约学生表.xls"");     readfile('../temp/'.$outputFileName);      echo ""<script language='javascript'>         location.href='{$_SERVER['REQUEST_URI']}';     </script>     ""; ?>   ","['php', '输出', 'excel', '实例', '代码', '这里', '使用', 'phpexcel', '开源', '一个', '完整', '实例', 'php', 'require', 'once', '..', 'includes', 'function', 'php', '提供', 'sql', '注入', '检测', '函数', 'inject', 'checkrequire', 'once', '..', 'class', 'db', 'php', 'db', '操作', '自己', '扩展', '一下', 'db', 'new', 'db', 'if', 'get', 'show', 'year', 'get', 'show', 'year', 'inject', 'check', 'get', 'show', 'year', 'else', 'echo', 'script', 'location', 'href', 'server', 'request', 'uri', 'script', 'return', '查出', '开设', '预约', '班级', '学生名单', 'sql', 'select', 'from', 'bishe', 'student', 'student', 'where', 'bishe', 'student', 'sno', 'student', 'sno', 'if', 'get', 'show', 'year', '&&', 'get', 'show', 'year', 'lagreyear', 'get', 'show', 'year', 'sql', 'and', 'bishe', 'student', 'time', 'get', 'show', 'year', '01', '01', '00', '00', '00', 'and', 'bishe', 'student', 'time', 'lagreyear', '01', '01', '00', '00', '00', 'sql', 'order', 'by', 'bishe', 'student', 'time', 'asc', 'rs', 'db', 'query', 'sql', 'php', '代码', '开始', '能够', '输出', 'excel', '文件', '准备', '第一步', '开头', '操作', '包括', '引入', '设定', '文件', '基本', '属性', 'require', 'once', '..', 'excel', 'classes', 'phpexcel', 'php', 'require', 'once', '..', 'excel', 'classes', 'phpexcel', 'writer', 'excel5', 'php', '单元格', '字母', '坐标', 'colx', 'array', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'ag', 'ah', 'ai', 'ak', 'al', 'am', 'an', 'ao', 'ap', 'aq', 'ar', 'as', 'at', 'au', 'av', 'aw', 'ax', 'ay', 'az', '创建', '一个', '处理', '对象', '实例', 'objexcel', 'new', 'phpexcel', '创建', '文件格式', '写入', '对象', '实例', 'uncomment', 'objwriter', 'new', 'phpexcel', 'writer', 'excel5', 'objexcel', '设置', '文档', '基本', '属性', 'objprops', 'objexcel', 'getproperties', 'objprops', 'setcreator', 'gbktoutf8', '计算机', '学院', '专业', '实践', '中心', 'objprops', 'setlastmodifiedby', 'gbktoutf8', '计算机', '学院', '专业', '实践', '中心', 'objprops', 'settitle', 'gbktoutf8', '毕业设计', '预约', '学生', 'objprops', 'setsubject', 'gbktoutf8', '毕业设计', '预约', '学生', 'objprops', 'setdescription', 'gbktoutf8', '毕业设计', '预约', '学生', 'objprops', 'setkeywords', 'gbktoutf8', '毕业设计', '预约', '学生', 'objprops', 'setcategory', 'gbktoutf8', '毕业设计', '预约', '学生', '设置', '当前', 'sheet', '索引', '用于', '后续', '内容', '操作', '一般', '只有', '使用', '多个', 'sheet', '时候', '需要', '显示', '调用', '缺省', '情况', 'phpexcel', '自动', '创建', '第一个', 'sheet', '设置', 'sheetindex', 'objexcel', 'setactivesheetindex', 'objactsheet', 'objexcel', 'getactivesheet', '设置', '当前', '活动', 'sheet', '名称', 'objactsheet', 'settitle', 'sheet1', '设置', '宽度', 'function', 'setwidth', 'index', 'width', 'global', 'objactsheet', 'objactsheet', 'getcolumndimension', 'gbktoutf8', 'index', 'setwidth', 'width', '宽度', '设置', 'for', '51', '++', 'echo', 'colx', 'ind', 'colx', 'setwidth', 'gbktoutf8', 'ind', '11', 'objactsheet', 'getrowdimension', 'setrowheight', '30', 'objactsheet', 'getrowdimension', 'setrowheight', '20', 'objactsheet', 'getrowdimension', 'setrowheight', '16', '函数', '设置', 'border', 'function', 'setborder', 'index', 'global', 'objactsheet', 'objactsheet', 'getstyle', 'index', 'getborders', 'gettop', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objactsheet', 'getstyle', 'index', 'getborders', 'getleft', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objactsheet', 'getstyle', 'index', 'getborders', 'getright', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objactsheet', 'getstyle', 'index', 'getborders', 'getbottom', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objactsheet', 'getstyle', 'index', 'getalignment', 'sethorizontal', 'phpexcel', 'style', 'alignment', 'horizontal', 'center', 'objactsheet', 'getstyle', 'index', 'getalignment', 'setvertical', 'phpexcel', 'style', 'alignment', 'vertical', 'center', 'objactsheet', 'getstyle', 'index', 'getalignment', 'setwraptext', 'true', '设置', 'function', 'setvalue', 'index', 'value', 'global', 'objactsheet', 'objactsheet', 'setcellvalue', 'index', 'gbktoutf8', 'value', '设置', 'function', 'setvaluegbk', 'index', 'value', 'global', 'objactsheet', 'objactsheet', 'getcell', 'index', 'setvalueexplicit', 'value', 'phpexcel', 'cell', 'datatype', 'type', 'string', '合并', '单元格', 'function', 'merge', 'fc', 'lc', 'global', 'objactsheet', 'objactsheet', 'mergecells', 'fc', 'lc', '开始', '写入', '数据', 'lastindex', '10', 'objactsheet', 'setcellvalue', 'a1', 'gbktoutf8', '毕业设计', '上机', '预约', '学生', '合并', '单元格', 'objactsheet', 'mergecells', 'a1', 'colx', 'lastindex', '设置', '样式', 'objstylea1', 'objactsheet', 'getstyle', 'a1', 'objstylea1', 'getalignment', 'sethorizontal', 'phpexcel', 'style', 'alignment', 'horizontal', 'center', 'objfonta1', 'objstylea1', 'getfont', 'objfonta1', 'setname', 'courier', 'new', 'objfonta1', 'setsize', '18', 'objfonta1', 'setbold', 'true', 'rowindexb', 'function', 'showbottomrows', 'xuhao', '序号', 'xuehao', 'xingming', '姓名', 'bishelaoshi', '毕设', '老师', 'bishetimu', '毕设', '题目', 'phone', '电话', 'email', 'email', 'beizhu', '备注', 'global', 'colx', 'global', 'rowindexb', 'colindexb', '分三步', '设值', '合并', '边框', '序号', 'setvalue', 'colx', 'colindexb', 'rowindexb', 'xuhao', 'merge', 'colx', 'colindexb', 'rowindexb', 'colx', 'colindexb', 'rowindexb', 'colindexb', 'colindexb', 'setvalue', 'colx', 'colindexb', 'rowindexb', 'xuehao', 'merge', 'colx', 'colindexb', 'rowindexb', 'colx', 'colindexb', 'rowindexb', 'colindexb', 'colindexb', '姓名', 'setvalue', 'colx', 'colindexb', 'rowindexb', 'xingming', 'merge', 'colx', 'colindexb', 'rowindexb', 'colx', 'colindexb', 'rowindexb', 'colindexb', 'colindexb', '毕设', '老师', 'setvalue', 'colx', 'colindexb', 'rowindexb', 'bishelaoshi', 'merge', 'colx', 'colindexb', 'rowindexb', 'colx', 'colindexb', 'rowindexb', 'colindexb', 'colindexb', '毕设', '题目', 'setvalue', 'colx', 'colindexb', 'rowindexb', 'bishetimu', 'merge', 'colx', 'colindexb', 'rowindexb', 'colx', 'colindexb', 'rowindexb', 'colindexb', 'colindexb', '电话', 'setvalue', 'colx', 'colindexb', 'rowindexb', 'phone', 'merge', 'colx', 'colindexb', 'rowindexb', 'colx', 'colindexb', 'rowindexb', 'colindexb', 'colindexb', 'email', 'setvalue', 'colx', 'colindexb', 'rowindexb', 'email', 'merge', 'colx', 'colindexb', 'rowindexb', 'colx', 'colindexb', 'rowindexb', 'colindexb', 'colindexb', '备注', 'setvalue', 'colx', 'colindexb', 'rowindexb', 'beizhu', 'merge', 'colx', 'colindexb', 'rowindexb', 'colx', 'colindexb', 'rowindexb', 'colindexb', 'colindexb', 'for', 'xx', 'xx', 'lastindex', 'xx', '++', 'setborder', 'colx', 'xx', 'rowindexb', 'rowindexb', '++', 'showbottomrows', '表格', '头部', '结束', '第一步', '结束', '第二步', '可以', '开始', '打印', '数据', '下面', '主要', '函数', '里面', 'order', 'while', 'row', 'db', 'getrows', 'rs', 'showbottomrows', 'order', '++', 'row', 'sno', 'row', 'sname', 'row', 'bishe', 'teacher', 'row', 'bishe', 'title', 'row', 'bishe', 'phone', 'row', 'bishe', 'email', '刷新', 'border', 'for', 'lastindex', '++', 'objstylea3', 'objactsheet', 'getstyle', 'a3', 'objstylea3', 'getborders', 'gettop', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objstylea3', 'getborders', 'getleft', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objstylea3', 'getborders', 'getright', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objstylea3', 'getborders', 'getbottom', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objstylea3', 'getalignment', 'sethorizontal', 'phpexcel', 'style', 'alignment', 'horizontal', 'center', 'objstylea3', 'getalignment', 'setvertical', 'phpexcel', 'style', 'alignment', 'vertical', 'center', 'objactsheet', 'duplicatestyle', 'objstylea3', 'a3', 'colx', 'lastindex', 'mysql', 'num', 'rows', 'result', 'stulist', 'objactsheet', 'duplicatestyle', 'objstylea3', 'a3', 'colx', 'lastindex', 'db', 'getrowsnum', 'rs', 'cancel', 'time', 'date', 'ymdhis', 'outputfilename', 'cancel', 'time', 'bisheyuyuestudentlist', 'xls', '文件', 'objwriter', 'save', '..', 'temp', 'outputfilename', 'header', 'content', 'type', 'application', 'octet', 'stream', 'header', 'content', 'disposition', 'inline', 'filename', 'get', 'show', 'year', '毕业设计', '上机', '预约', '学生', 'xls', 'readfile', '..', 'temp', 'outputfilename', 'echo', 'script', 'language', 'javascript', 'location', 'href', 'server', 'request', 'uri', 'script']","[[-2.10628484e-01 -1.09071135e-01  2.37376700e-01  1.20338531e-01
   2.37628407e-01 -3.44854950e-01 -8.34847809e-02  4.04359916e-01
  -5.49998657e-02 -1.14437233e-01 -2.57799210e-02 -3.26326444e-01
  -1.24013863e-01  4.67978875e-01  1.32070180e-01 -9.96402734e-02
  -1.01084929e-01 -5.85798438e-04 -5.07156503e-02 -4.58048930e-01
  -4.62913280e-02  2.42312126e-01 -5.46334116e-02 -1.89027214e-01
   5.11048619e-02 -4.08871988e-01 -2.66214933e-01  2.75441967e-02
  -2.03538839e-01 -6.68387129e-02  1.49707715e-01 -6.95178654e-03
   1.60686646e-02 -9.54342070e-02 -1.45061968e-01  2.81368627e-01
  -1.89799045e-01 -2.51505863e-01  6.71803837e-02 -6.40716732e-01
  -1.04056347e-01 -5.22695754e-01 -7.53471222e-02 -1.61590824e-02
  -1.18619917e-01 -2.09839391e-01 -2.02025396e-01  3.09388127e-01
  -1.70907793e-01  4.16853354e-01  1.20757203e-01 -2.28573516e-01
  -1.13333918e-01 -1.51679110e-01 -3.57075328e-02  3.45639867e-01
   1.23780703e-01 -8.88743451e-02  1.12632454e-01 -1.22046142e-01
   9.08212941e-02  1.87547393e-01  6.62631737e-03  7.18335691e-02
  -3.12988222e-01  3.83260758e-02  5.88206956e-02 -3.31275472e-02
  -2.73318784e-01  3.78060483e-01  7.14763823e-02 -1.42785262e-01
   3.37390662e-01 -2.97012661e-01  4.76986404e-01  2.41933132e-01
   1.24113176e-01 -1.42943226e-01 -2.83186153e-01 -9.17623928e-02
   2.84927827e-02  7.24322236e-02 -1.24146665e-01  3.39935128e-01
  -2.73197018e-01  1.63405290e-01 -2.46966669e-01  3.92422781e-01
   4.25906448e-01  1.42291984e-01  1.96756581e-01  7.79048086e-02
   3.08908809e-01  1.49973093e-01  1.59810144e-01  2.98061133e-01
   1.18930815e-01 -2.84551809e-01  4.43810887e-03 -9.80895929e-02]]"
109,java环境变量配置,"安装JDK，安装过程中可以自定义安装目录等信息，例如我们选择安装目录为D:\java\jdk1.5.0_08；安装完成后，右击“我的电脑”，点击“属性”；选择“高级”选项卡，点击“环境变量”；在“系统变量”中，设置3项属性，JAVA_HOME,PATH,CLASSPATH(大小写无所谓),若已存在则点击“编辑”，不存在则点击“新建”；JAVA_HOME指明JDK安装路径，就是刚才安装时所选择的路径D:\java\jdk1.5.0_08，此路径下包括lib，bin，jre等文件夹（此变量最好设置，因为以后运行tomcat，eclipse等都需要依*此变量）；Path使得系统可以在任何路径下识别java命令，设为：%JAVA_HOME%\bin;%JAVA_HOME%\jre\binCLASSPATH为java加载类(class or lib)路径，只有类在classpath中，java命令才能识别，设为：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar (要加.表示当前路径)　　%JAVA_HOME%就是引用前面指定的JAVA_HOME；“开始”－>;“运行”，键入“cmd”；键入命令“java -version”，“java”，“javac”几个命令，出现画面，说明环境变量配置成功；好了，打完收工。下面开始你的第一个java程序吧。下面讲讲java几个环境变量的含义和linux下的配置方法：通常，我们需要设置三个环境变量：JAVA_HOME、PATH 和 CLASSPATH。JAVA_HOME：该环境变量的值就是 Java 所在的目录，一些 Java 版的软件和一些 Java 的工具需要用到该变量，设置 PATH 和 CLASSPATH 的时候，也可以使用该变量以方便设置。PATH： 指定一个路径列表，用于搜索可执行文件的。执行一个可执行文件时，如果该文件不能在当前路径下找到，则依次寻找 PATH 中的每一个路径，直至找到。或者找完 PATH 中的路径也不能找到，则报错。Java 的编译命令 (javac)，执行命令 (java) 和一些工具命令 (javadoc, jdb 等) 都在其安装路径下的 bin 目录中。因此我们应该将该路径添加到 PATH 变量中。CLASSPATH： 也指定一个路径列表，是用于搜索 Java 编译或者运行时需要用到的类。在 CLASSPATH 列表中除了可以包含路径外，还可以包含 .jar 文件。Java 查找类时会把这个 .jar 文件当作一个目录来进行查找。通常，我们需要把 JDK 安装路径下的 jre\lib\rt.jar (Linux: jre/lib/rt.jar) 包含在 CLASSPATH 中。PATH 和 CLASSPATH 都指定路径列表，列表中的各项 (即各个路径) 之间使用分隔符分隔。在 Windows 下，分隔符是分号 (;)，而在 Linux 下，分隔符是冒号 (:)。下 面分别说明三个环境变量在 Windows 和 Linux 下如何设置，不过在此之前，我们需要做个假设。假设 JDK 在 Windows 下的安装路径是 C:\jdk\，在 Linux 下的安装路径是 /usr/local/jdk/。那么，安装后的 JDK 至少会包括如下内容：C:\jdk (/usr/local/jdk)|-- bin|-- demo|-- include|-- jre| |-- bin| `-- lib`-- lib***** 在 Windows 下设置Windows 下使用 set 命令设置环境变量，为了使每一次启动计算机都设置这些环境变量，应该在系统盘根目录下的 autoexec.bat 文件中进行设置，如：set JAVA_HOME=C:\jdkset PATH=%JAVA_HOME%\bin;C:\Windows;C:\Windows\Commandset CLASSPATH=%JAVA_HOME%\jre\lib\rt.jar;.有些版本的 Windows 不能用 %变量名% 来替换环境变量的内容，那么就只好直接写 C:\jdk 而不是 %JAVA_HOME% 了。另外，C:\Windows 和 C:\Windows\Command 是 Windows 会自动加入路径的，所以可以从设置中去掉。如果在 autoexec.bat 中已经设置了 PATH，那只需要将 %JAVA_HOME%\bin 加到原来设置 PATH 的那条语句中就行了。CLASSPATH 也可以根据需要设置或者加入其它的路径，比如你想把自己写的一些类放在 C:\java 中，就可以把 C:\java 也添加到 CLASSPATH 中去，set CLASSPATH=%JAVA_HOME%\jre\lib\rt.jar;C:\java;.。注 意，在 CLASSPATH 中包含了一个“当前目录 (.)”。包含了该目录后，就可以到任意目录下去执行需要用到该目录下某个类的 Java 程序，即使该路径并未包含在 CLASSPATH 中也可以。原因很简单：虽然没有明确的把该路径包含在 CLASSPATH 中，但 CLASSPATH 中的 “.” 在此时就代表了该路径，如：假设在 C:\java 目录下有可运行的类 HelloJava.class，那么C:\> set CLASSPATH=C:\jdk\jre\lib\rt.jar;. // 设置 CLASSPATH 环境变量，注意最后有一个 “.”C:\> cd java // 转到 C:\java 目录C:\java> java HelloJava // 运行 HelloJavaHello, Java. // 运行结果","['java', '环境变量', '配置', '安装', 'jdk', '安装', '过程', '可以', '自定义', '安装', '目录', '信息', '例如', '我们', '选择', '安装', '目录', 'java', 'jdk1.5', '08', '安装', '完成', '右击', '电脑', '点击', '属性', '选择', '高级', '选项卡', '点击', '环境变量', '系统', '变量', '设置', '属性', 'java', 'home', 'path', 'classpath', '大小写', '无所谓', '存在', '点击', '编辑', '存在', '点击', '新建', 'java', 'home', '指明', 'jdk', '安装', '路径', '就是', '刚才', '安装', '时所', '选择', '路径', 'java', 'jdk1.5', '08', '路径', '包括', 'lib', 'bin', 'jre', '文件夹', '变量', '最好', '设置', '因为', '以后', '运行', 'tomcat', 'eclipse', '需要', '变量', 'path', '使得', '系统', '可以', '任何', '路径', '识别', 'java', '命令', 'java', 'home%', 'bin', 'java', 'home%', 'jre', 'binclasspath', 'java', '加载', 'class', 'or', 'lib', '路径', '只有', 'classpath', 'java', '命令', '才能', '识别', 'java', 'home%', 'lib', 'dt', 'jar', 'java', 'home%', 'lib', 'tools', 'jar', '要加', '表示', '当前', '路径', 'java', 'home%', '就是', '引用', '前面', '指定', 'java', 'home', '开始', '运行', '键入', 'cmd', '键入', '命令', 'java', 'version', 'java', 'javac', '几个', '命令', '出现', '画面', '说明', '环境变量', '配置', '成功', '收工', '下面', '开始', '第一个', 'java', '程序', '下面', '讲讲', 'java', '几个', '环境变量', '含义', 'linux', '配置', '方法', '通常', '我们', '需要', '设置', '三个', '环境变量', 'java', 'home', 'path', 'classpath', 'java', 'home', '环境变量', '就是', 'java', '所在', '目录', '一些', 'java', '软件', '一些', 'java', '工具', '需要', '用到', '变量', '设置', 'path', 'classpath', '时候', '可以', '使用', '变量', '方便', '设置', 'path', '指定', '一个', '路径', '列表', '用于', '搜索', '可执行文件', '执行', '一个', '可执行文件', '如果', '文件', '不能', '当前', '路径', '找到', '依次', '寻找', 'path', '一个', '路径', '直至', '找到', '或者', 'path', '路径', '不能', '找到', '报错', 'java', '编译', '命令', 'javac', '执行命令', 'java', '一些', '工具', '命令', 'javadoc', 'jdb', '安装', '路径', 'bin', '目录', '因此', '我们', '应该', '路径', '添加', 'path', '变量', 'classpath', '指定', '一个', '路径', '列表', '用于', '搜索', 'java', '编译', '或者', '运行', '需要', '用到', 'classpath', '列表', '除了', '可以', '包含', '路径', '可以', '包含', 'jar', '文件', 'java', '查找', '时会', '这个', 'jar', '文件', '当作', '一个', '目录', '进行', '查找', '通常', '我们', '需要', 'jdk', '安装', '路径', 'jre', 'lib', 'rt', 'jar', 'linux', 'jre', 'lib', 'rt', 'jar', '包含', 'classpath', 'path', 'classpath', '指定', '路径', '列表', '列表', '各项', '各个', '路径', '之间', '使用', '分隔符', '分隔', 'windows', '分隔符', '分号', 'linux', '分隔符', '冒号', '分别', '说明', '三个', '环境变量', 'windows', 'linux', '如何', '设置', '不过', '在此之前', '我们', '需要', '做个', '假设', '假设', 'jdk', 'windows', '安装', '路径', 'jdk', 'linux', '安装', '路径', 'usr', 'local', 'jdk', '那么', '安装', 'jdk', '至少', '包括', '如下', '内容', 'jdk', 'usr', 'local', 'jdk', '--', 'bin', '--', 'demo', '--', 'include', '--', 'jre', '--', 'bin', '--', 'lib', '--', 'lib', 'windows', '设置', 'windows', '使用', 'set', '命令', '设置', '环境变量', '为了', '一次', '启动', '计算机', '设置', '这些', '环境变量', '应该', '系统盘', '根目录', 'autoexec', 'bat', '文件', '进行', '设置', 'set', 'java', 'home', 'jdkset', 'path', 'java', 'home%', 'bin', 'windows', 'windows', 'commandset', 'classpath', 'java', 'home%', 'jre', 'lib', 'rt', 'jar', '有些', '版本', 'windows', '不能', '变量名', '替换', '环境变量', '内容', '那么', '只好', '直接', 'jdk', '不是', 'java', 'home%', '另外', 'windows', 'windows', 'command', 'windows', '自动', '加入', '路径', '所以', '可以', '设置', '去掉', '如果', 'autoexec', 'bat', '已经', '设置', 'path', '需要', 'java', 'home%', 'bin', '原来', '设置', 'path', '那条', '语句', '就行了', 'classpath', '可以', '根据', '需要', '设置', '或者', '加入', '其它', '路径', '比如', '自己', '一些', '放在', 'java', '可以', 'java', '添加', 'classpath', 'set', 'classpath', 'java', 'home%', 'jre', 'lib', 'rt', 'jar', 'java', 'classpath', '包含', '一个', '当前目录', '包含', '目录', '可以', '任意', '目录', '下去', '执行', '需要', '用到', '目录', '某个', 'java', '程序', '即使', '路径', '并未', '包含', 'classpath', '可以', '原因', '简单', '虽然', '没有', '明确', '路径', '包含', 'classpath', 'classpath', '此时', '代表', '路径', '假设', 'java', '目录', '下有', '运行', 'hellojava', 'class', '那么', 'set', 'classpath', 'jdk', 'jre', 'lib', 'rt', 'jar', '设置', 'classpath', '环境变量', '注意', '最后', '一个', 'cd', 'java', 'java', '目录', 'java', 'java', 'hellojava', '运行', 'hellojavahello', 'java', '运行', '结果']","[[-0.33001201 -0.08382426  0.24882961  0.26407313  0.26061475 -0.35203684
  -0.13332854  0.49802732 -0.07020893 -0.05708712 -0.06521765 -0.37991151
  -0.07938721  0.5629802   0.17406788 -0.12864475 -0.12892474 -0.04275736
  -0.08466793 -0.45458615  0.00594128  0.33106877 -0.04572626 -0.14002185
   0.06674072 -0.50238833 -0.3140947   0.05808875 -0.18498607 -0.09725746
   0.24517642  0.04005434 -0.02613336 -0.12677075 -0.13090169  0.41029936
  -0.15499338 -0.26907427  0.11281926 -0.79260604 -0.12682809 -0.49782434
  -0.04431158 -0.06674462 -0.17132194 -0.16548701 -0.33262813  0.46851461
  -0.15261032  0.37466095  0.1250995  -0.33217168 -0.11740891 -0.27586634
   0.07430941  0.4349552   0.20792077 -0.05821974  0.13521694 -0.09107033
   0.08204655  0.24480274  0.04807696  0.05796758 -0.41452637  0.02896694
   0.00948241  0.02830396 -0.25696112  0.45316232  0.05447042 -0.19796725
   0.43082361 -0.35855628  0.52463242  0.22823927  0.23156171 -0.178937
  -0.27783084 -0.21791219 -0.09786472 -0.02795088 -0.0561245   0.40865713
  -0.3238709   0.20907343 -0.28040862  0.43610979  0.49071793  0.17914403
   0.25085873  0.124741    0.36090881  0.22439762  0.19130201  0.42467195
   0.09469773 -0.24487822  0.10998213 -0.11158126]]"
111,AJAX中文乱码PHP完美解决(IE和Firefox兼容),"最近在做一个项目，遇到AJAX中文乱码问题，经过一个下午的努力终于完美解决，现将心得写下来，希望对那些还困绕在这个问题而头痛不已的人们有所帮助。众所周知，使用AJAX传送和接收中文参数时，如果不在客户端和服务器做相应的处理就会出现乱码问题，在网上相应的文章也不少，但是有的情况下很难从中找 到符合自己理想的答案，我今天就是在网上找了很多，但是都差不多，讲ASP和JSP的比较多（我是用的PHP），所以到最后都没找到自己满意的答案。AJAX的中文乱码可以大概分为两中，第一种是向服务器端发送中文参数时（xmlhttp.open(“get|post”,url,true)）,服务 器端接收到的为乱码，这个也是我今天遇到的问题，没做处理之前，在IE里是正常的，但是在Firefox里面就出现了乱码，我先把接收到参数输出到一个文 本里，没有发现什么问题，郁闷了，然后我就把查询语句在输出来观察（我这里是要从数据库里查出与参数相关的东西），终于发现问题，IE和Firefox输 出的参数不一样，虽然汉字上都一样，但是和前后连接上有细小的区别，于是认定了是编码问题，在网上查找了相关资料，都没能解决问题，但是得到一些启示，因 为AJAX发送数据都是采用UTF-8编码的方式发送的，所以要在服务器端进行编码转换（我这里页面是采用GB2312编码的，如果是采用UTF-8的话 应该不会有这步的问题），所以我在服务器端进行了UTF-8转GB2312，$str=iconv(""UTF-8"",""GB2312"",$str);然后测试，在Firefox上顺利解决了问题，以为大公告成了，可是再到IE下测试，发现IE又出现了问题，服务器端接收到的参数没值，这下就郁闷了，突 然看到发送头设置了setRequestHeader(""Content-Type"",""application/x-www-form- urlencoded"");，就找到问题所在了，然后就在发送那里进行了参数编码：geturl=encodeURI(geturl);geturl=encodeURI(geturl); //两次也可以写成geturl=encodeURI(encodeURI(geturl));xmlhttp.open(""GET"",geturl,true);然后再到服务器端进行URL解码：$str=urldecode($str); //解码$ str =iconv(""UTF-8"",""GB2312"",$ str); //编码转换注意：解码必须在编码转换前面，不然得不到正确值保存测试，IE和Firefox都能正常了。第二种就是服务器端向客户端输出中文时出现乱码，这类问题网上的答案就比较多了，也都能解决，为了避免各位再去查找，我在这里就COPY下J原因：AJAX在接收responseText或responseXML的值的时候是按照UTF-8的格式来解码的，如果服务器段发送的数据不是UTF-8的格式，那么接收responseText或responseXML的值有可能为乱码。解决办法：在服务器指定发送数据的格式：在jsp文件中：response.setContentType(""text/text;charset=UTF-8"");//返回的是txt文本文件或是response.setContentType(""text/xml;charset=UTF-8"");//返回的xml文件PHP:header('Content-Type:text/html;charset=GB2312');ASP:Response.Charset(""GB2312"")JSP:response.setHeader(""Charset"",""GB2312"");本文转自网络 ","['ajax', '中文', '乱码', 'php', '完美', '解决', 'ie', 'firefox', '兼容', '最近', '一个', '项目', '遇到', 'ajax', '中文', '乱码', '问题', '经过', '一个', '下午', '努力', '终于', '完美', '解决', '现将', '心得', '下来', '希望', '那些', '困绕', '这个', '问题', '头痛', '不已', '人们', '有所', '帮助', '众所周知', '使用', 'ajax', '传送', '接收', '中文', '参数', '如果', '客户端', '服务器', '相应', '处理', '出现', '乱码', '问题', '网上', '相应', '文章', '不少', '但是', '情况', '从中', '符合', '自己', '理想', '答案', '今天', '就是', '网上', '很多', '但是', '差不多', 'asp', 'jsp', '比较', 'php', '所以', '最后', '找到', '自己', '满意', '答案', 'ajax', '中文', '乱码', '可以', '大概', '分为', '两中', '第一种', '服务器端', '发送', '中文', '参数', 'xmlhttp', 'open', 'get', 'post', 'url', 'true', '服务', '器端', '接收', '乱码', '这个', '今天', '遇到', '问题', '处理', '之前', 'ie', '正常', '但是', 'firefox', '里面', '出现', '乱码', '接收', '参数', '输出', '一个', '没有', '发现', '什么', '问题', '郁闷', '然后', '查询', '语句', '输出', '观察', '这里', '数据库', '查出', '参数', '相关', '东西', '终于', '发现', '问题', 'ie', 'firefox', '参数', '一样', '虽然', '汉字', '一样', '但是', '前后', '连接', '细小', '区别', '于是', '认定', '编码', '问题', '网上', '查找', '相关', '资料', '没能', '解决问题', '但是', '得到', '一些', '启示', 'ajax', '发送数据', '采用', 'utf', '编码', '方式', '发送', '所以', '服务器端', '进行', '编码', '转换', '这里', '页面', '采用', 'gb2312', '编码', '如果', '采用', 'utf', '的话', '应该', '不会', '这步', '问题', '所以', '服务器端', '进行', 'utf', 'gb2312', 'str', 'iconv', 'utf', 'gb2312', 'str', '然后', '测试', 'firefox', '顺利', '解决', '问题', '以为', '公告', '可是', 'ie', '测试', '发现', 'ie', '出现', '问题', '服务器端', '接收', '参数', '没值', '这下', '郁闷', '看到', '发送', '设置', 'setrequestheader', 'content', 'type', 'application', 'www', 'form', 'urlencoded', '找到', '问题所在', '然后', '发送', '那里', '进行', '参数', '编码', 'geturl', 'encodeuri', 'geturl', 'geturl', 'encodeuri', 'geturl', '两次', '可以', '写成', 'geturl', 'encodeuri', 'encodeuri', 'geturl', 'xmlhttp', 'open', 'get', 'geturl', 'true', '然后', '服务器端', '进行', 'url', '解码', 'str', 'urldecode', 'str', '解码', 'str', 'iconv', 'utf', 'gb2312', 'str', '编码', '转换', '注意', '解码', '必须', '编码', '转换', '前面', '不然', '得不到', '正确', '保存', '测试', 'ie', 'firefox', '正常', '第二种', '就是', '服务器端', '客户端', '输出', '中文', '出现', '乱码', '问题', '网上', '答案', '比较', '解决', '为了', '避免', '各位', '查找', '这里', 'copy', '原因', 'ajax', '接收', 'responsetext', 'responsexml', '时候', '按照', 'utf', '格式', '解码', '如果', '服务器', '发送', '数据', '不是', 'utf', '格式', '那么', '接收', 'responsetext', 'responsexml', '可能', '乱码', '解决办法', '服务器', '指定', '发送数据', '格式', 'jsp', '文件', 'response', 'setcontenttype', 'text', 'text', 'charset', 'utf', '返回', 'txt', '文本文件', '或是', 'response', 'setcontenttype', 'text', 'xml', 'charset', 'utf', '返回', 'xml', '文件', 'php', 'header', 'content', 'type', 'text', 'html', 'charset', 'gb2312', 'asp', 'response', 'charset', 'gb2312', 'jsp', 'response', 'setheader', 'charset', 'gb2312', '本文', '转自', '网络']","[[-0.22663391 -0.12347555  0.21216391  0.15302972  0.26704705 -0.32379636
  -0.16010682  0.45039902 -0.01232738 -0.03782041 -0.05397921 -0.31706296
  -0.16433155  0.54437492  0.13907035 -0.10015257 -0.14046082 -0.00369738
  -0.08283037 -0.43567351  0.01267847  0.22523134 -0.01224742 -0.10469915
   0.09740556 -0.49607593 -0.2676045   0.07379522 -0.19661791 -0.05918525
   0.20914173  0.0267856  -0.01035411 -0.12869423 -0.11193354  0.30939534
  -0.13678646 -0.21419055  0.09923227 -0.69916795 -0.15174481 -0.54385261
  -0.04186637 -0.05603523 -0.14834662 -0.15338236 -0.24080783  0.41831685
  -0.15479694  0.37541147  0.17648426 -0.24609534 -0.09871684 -0.20664956
   0.04953618  0.36542041  0.213138   -0.06515176  0.09396487 -0.09510764
   0.05352049  0.26122409  0.0198533   0.08250059 -0.35887887 -0.00257985
   0.0376099  -0.0176504  -0.23109304  0.40730386  0.12811064 -0.21886873
   0.37157911 -0.30032522  0.53259     0.17643523  0.19216553 -0.13727758
  -0.25633416 -0.18654166 -0.06307618  0.00537188 -0.07421985  0.3152918
  -0.34527615  0.18872589 -0.26754677  0.3935371   0.43912614  0.12612455
   0.26918006  0.11278275  0.33116759  0.17412158  0.17420381  0.34776154
   0.09322116 -0.28005456 -0.01558564 -0.0898576 ]]"
113,phpmyadmin无法加载mcrypt的解决方法,"无法加载 mcrypt (外链,英语) 扩展,请检查您的 PHP 配置：很多朋友在运行phpmyadmin程序都会见到这样的提示，""无法加载 mcrypt (外链,英语) 扩展,请检查您的 PHP 配置""，那么遇到这样的问题应当怎么解决呢？下面我们就一点一点把这个问题解决掉：无法载入 mcrypt 扩展，请检查 PHP 配置出现以下几种情况后可能会造成运行phpmyadmin程序 提示“无法载入 mcrypt 扩展，<br />请检查 PHP 配置”的 错误提示1、没有正确安装Mysql数据库，在系统服务中Mysql相关的服务没有启动   （请查看正确安装Mysql的方法）2、在系统的 system32（C:\windows\system32） 目录下缺少 libmcrypt.dll文件，解决方法是找到php目录下的libmcrypt.dll，并将libmcrypt.dll复制到C:\windows \system32目录中，然后重新启动Web服务。3、在C:\windows目录下的php.ini文件中，没有将“;extension=php_mcrypt.dll”中的前面一个“;”去 掉，所以不能使用相应功能，解决方法是打开php.ini文件找到;extension=php_mcrypt.dll改成extension=php_mcrypt.dll    //去掉前面的;使之生效4、Mysql目录没有读取权限，正确的目录权限如下：administrator   完全控制system    完全控制user    读取加运行其他的用户权限全部删除（也可保留，但安全性不高，建议删除），然后重启MYsql服务和Web服务（建议修改 此项后重启一下服务器）当你试过所有办法之后还是不行,其实还有一步,网上很少有说,解决办法,我的是 WINXP+IIS+PHP5+MYSQL5棹面>我的电脑>右键属性>高级>环境变量>系统变量>新建名:phprc值:d:\php  (你的PHP在什么目录就是什么)文章来源于网络。 ","['phpmyadmin', '无法', '加载', 'mcrypt', '解决', '方法', '无法', '加载', 'mcrypt', '外链', '英语', '扩展', '检查', 'php', '配置', '很多', '朋友', '运行', 'phpmyadmin', '程序', '见到', '这样', '提示', '无法', '加载', 'mcrypt', '外链', '英语', '扩展', '检查', 'php', '配置', '那么', '遇到', '这样', '问题', '应当', '怎么', '解决', '下面', '我们', '一点一点把', '这个', '问题', '解决', '无法', '载入', 'mcrypt', '扩展', '检查', 'php', '配置', '出现', '以下', '几种', '情况', '可能', '造成', '运行', 'phpmyadmin', '程序', '提示', '无法', '载入', 'mcrypt', '扩展', 'br', '检查', 'php', '配置', '错误', '提示', '没有', '正确', '安装', 'mysql', '数据库', '系统', '服务', 'mysql', '相关', '服务', '没有', '启动', '查看', '正确', '安装', 'mysql', '方法', '系统', 'system32', 'windows', 'system32', '目录', '缺少', 'libmcrypt', 'dll', '文件', '解决', '方法', '找到', 'php', '目录', 'libmcrypt', 'dll', 'libmcrypt', 'dll', '复制到', 'windows', 'system32', '目录', '然后', '重新启动', 'web', '服务', 'windows', '目录', 'php', 'ini', '文件', '没有', 'extension', 'php', 'mcrypt', 'dll', '前面', '一个', '所以', '不能', '使用', '相应', '功能', '解决', '方法', '打开', 'php', 'ini', '文件', '找到', 'extension', 'php', 'mcrypt', 'dll', '改成', 'extension', 'php', 'mcrypt', 'dll', '去掉', '前面', '生效', 'mysql', '目录', '没有', '读取', '权限', '正确', '目录', '权限', '如下', 'administrator', '完全', '控制', 'system', '完全', '控制', 'user', '读取', '运行', '其他', '用户', '权限', '全部', '删除', '保留', '安全性', '不高', '建议', '删除', '然后', '重启', 'mysql', '服务', 'web', '服务', '建议', '修改', '此项', '重启', '一下', '服务器', '试过', '所有', '办法', '之后', '还是', '不行', '其实', '还有', '一步', '网上', '很少', '解决办法', 'winxp', 'iis', 'php5', 'mysql5', '电脑', '右键', '属性', '高级', '环境变量', '系统', '变量', '新建', 'phprc', 'php', 'php', '什么', '目录', '就是', '什么', '文章', '来源于', '网络']","[[-2.47284478e-01 -1.44711631e-01  1.98479885e-01  1.92703773e-01
   2.66589031e-01 -3.23435607e-01 -1.81407911e-01  4.73803174e-01
  -7.69351923e-03 -1.29856595e-02 -7.31091781e-02 -3.11910032e-01
  -1.73642910e-01  5.68068837e-01  1.28242260e-01 -1.03345028e-01
  -1.46104012e-01 -2.13598417e-03 -8.90893836e-02 -4.10833411e-01
   3.55818635e-02  2.39990455e-01 -5.09953543e-04 -8.24790213e-02
   1.16499519e-01 -5.22358687e-01 -2.75219290e-01  8.86365285e-02
  -1.92354854e-01 -6.04239431e-02  2.41294932e-01  4.50248227e-02
  -2.08149853e-02 -1.39769922e-01 -1.09693094e-01  3.35515362e-01
  -1.31614881e-01 -2.07013277e-01  1.13285424e-01 -7.21601284e-01
  -1.52796578e-01 -5.33182901e-01 -2.15305104e-02 -7.25221167e-02
  -1.64933091e-01 -1.31675651e-01 -2.65508185e-01  4.65974940e-01
  -1.41725031e-01  3.52231547e-01  1.91729969e-01 -2.69128093e-01
  -9.13598209e-02 -2.32237886e-01  7.50391196e-02  3.80368586e-01
   2.36947890e-01 -5.63105283e-02  1.06330352e-01 -8.55422846e-02
   5.10632446e-02  2.76481678e-01  3.18133367e-02  7.90042461e-02
  -3.70315595e-01 -1.81111897e-02  2.25148802e-02  1.22129194e-03
  -2.17474681e-01  4.21034911e-01  1.32505412e-01 -2.33690238e-01
   3.89638871e-01 -3.13182670e-01  5.49426390e-01  1.54403785e-01
   2.22689046e-01 -1.34130359e-01 -2.50964765e-01 -2.21197607e-01
  -9.20582387e-02 -1.47661553e-02 -6.51996752e-02  3.19981578e-01
  -3.65394242e-01  1.85354229e-01 -2.75162157e-01  3.99145455e-01
   4.46108753e-01  1.20548445e-01  2.90004521e-01  1.17510985e-01
   3.34248322e-01  1.90273561e-01  1.78000014e-01  3.73309671e-01
   8.72883923e-02 -2.64169826e-01  1.22314002e-02 -8.84956634e-02]]"
115,删除记录之前-切记要检查是不是存在该记录, 如题，删除一条记录时，一定要先检查该记录是不是存在，如果为空值，可能会删掉整个表  2010-11-04大教训，用户因为网速慢，点了三次同一个删除按钮，结果我数据库一个表被清空了。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。 原因是第一次删掉后，第二次数据库中已经不存在该值，结果就把整个表删了。。。。。。。。。。。。。。 代码写的如此不严谨，检讨 ,"['删除', '记录', '之前', '切记', '检查', '是不是', '存在', '记录', '删除', '一条', '记录', '一定', '检查', '记录', '是不是', '存在', '如果', '空值', '可能', '删掉', '整个', '2010', '11', '04', '教训', '用户', '因为', '网速慢', '三次', '同一个', '删除', '按钮', '结果', '数据库', '一个', '清空', '原因', '第一次', '删掉', '第二次', '数据库', '已经', '存在', '该值', '结果', '整个', '表删', '代码', '如此', '严谨', '检讨']","[[-2.14998539e-01 -1.29456706e-01  1.92605904e-01  1.23340625e-01
   2.79307621e-01 -3.08507795e-01 -1.74737610e-01  4.37666173e-01
  -5.11380654e-03 -2.30889042e-02 -4.77436565e-02 -2.89601433e-01
  -1.81910935e-01  5.43240492e-01  1.41672638e-01 -8.65332949e-02
  -1.41955470e-01  6.26797244e-05 -1.02074753e-01 -4.29328042e-01
   2.18129475e-02  2.08754432e-01  1.68279865e-02 -7.84030323e-02
   1.18173156e-01 -5.04312946e-01 -2.53851850e-01  7.37370928e-02
  -1.98994743e-01 -5.10390467e-02  2.23129467e-01  1.01277371e-02
  -1.19845465e-02 -1.43599787e-01 -9.54407485e-02  2.91260728e-01
  -1.32633479e-01 -1.96280298e-01  1.11520318e-01 -7.00287139e-01
  -1.74480700e-01 -5.41854698e-01 -4.27341919e-02 -6.16265374e-02
  -1.56244872e-01 -1.33199144e-01 -2.15641253e-01  4.16404356e-01
  -1.78382210e-01  3.69971079e-01  1.97200915e-01 -2.38549476e-01
  -1.21285288e-01 -1.95262978e-01  6.44506131e-02  3.44571137e-01
   2.23873088e-01 -5.67054388e-02  8.93678347e-02 -9.29052570e-02
   3.72514808e-02  2.70469424e-01  2.43431833e-02  8.88688272e-02
  -3.53986143e-01 -1.55517867e-02  4.75897084e-02 -3.10234865e-02
  -2.35819173e-01  3.99844364e-01  1.35671587e-01 -2.25258850e-01
   3.54273270e-01 -2.93897674e-01  5.25541522e-01  1.43954591e-01
   1.65649231e-01 -1.13040704e-01 -2.58846403e-01 -1.80891785e-01
  -5.66429098e-02 -7.61407142e-04 -6.59157061e-02  2.94339412e-01
  -3.40485276e-01  1.84739945e-01 -2.62494409e-01  3.62726738e-01
   4.16658972e-01  1.07688977e-01  2.89655542e-01  1.09166080e-01
   3.31546330e-01  1.70237865e-01  1.67366541e-01  3.23051979e-01
   9.95292931e-02 -2.84209217e-01 -5.94757058e-02 -8.42439111e-02]]"
117,项目经历2-电子台账系统,电子台账系统：开发日期：2010-10-10至2010-10-18主要是设计以下几个方面：1、无限分类数据库设计2、数据库与文档系统的同步，通过数据库数据读取文件地址，获得文件路径，目录等3、超级管理员，二级管理员，普通用户的用户管理4、涉及搜索功能，关键字，分类等搜索的文件管理功能5、登陆日志的记录与管理通 过上一个选课系统，这次的开发发现非常的快速，也得到了老大的赏识，感觉非常的棒，每天像选课系统那样的起早贪黑，不过很充实，在学生阶段，我没有虚度， 我沉迷于程序的逻辑与界面的美观设计之中，不知道是不是值得，不知道简单的WEB开发，值不值得我这么去做，不过我想，程序都是相通的，我要一直做下去， 既赚了小钱，更重要的是，以后是我的经历，为我的人生添彩。感谢女朋友对我的支持，她没有怨言，没有怨我陪她的时间少了感谢老大对我的关照，给了我这个系统，让我又一次体会到了CODING的乐趣，我很满足，老大还给我钱，数目不算少，我非常开心感谢宿舍的兄弟们，每天我都忙到2点以后，有时候没注意的就把键盘敲很大声，有空一定请他们吃个饭，陪下罪。感谢王老师，感谢樊老师，他们给我的选课系统，让我真正在项目开发上面有了质的提升，没有他们给我的机会，就没有这次神速的完工。呵呵，好像是我自己做完了，不过乙方可能很不满意，这个不好，那个要改，我不怕哦，让我改什么，我就改呗，毕竟一个星期收你这么多钱，也得给你做点实事是不，也谢谢你们，有需求，我才有动力。呵呵，研一了，发现大家和本科不一样了，大家都有个心思，就是要学习，要实践，要做项目，而不能像本科一样浑浑噩噩的过日子，即使很累，但一定要有收获，一定要有经历。,"['项目', '经历', '电子', '台账', '系统', '电子', '台账', '系统', '开发', '日期', '2010', '10', '10', '2010', '10', '18', '主要', '设计', '以下', '几个', '方面', '无限', '分类', '数据库', '设计', '数据库', '文档', '系统', '同步', '通过', '数据库', '数据', '读取', '文件', '地址', '获得', '文件', '路径', '目录', '超级', '管理员', '二级', '管理员', '普通用户', '用户', '管理', '涉及', '搜索', '功能', '关键字', '分类', '搜索', '文件', '管理', '功能', '登陆', '日志', '记录', '管理', '一个', '选课', '系统', '这次', '开发', '发现', '非常', '快速', '得到', '老大', '赏识', '感觉', '非常', '每天', '选课', '系统', '那样', '起早贪黑', '不过', '充实', '学生', '阶段', '没有', '虚度', '沉迷于', '程序', '逻辑', '界面', '美观', '设计', '之中', '知道', '是不是', '值得', '知道', '简单', 'web', '开发', '值不值得', '这么', '不过', '程序', '相通', '我要', '一直', '下去', '小钱', '重要', '以后', '经历', '人生', '添彩', '感谢', '女朋友', '支持', '没有', '怨言', '没有', '时间', '感谢', '老大', '关照', '这个', '系统', '一次', '体会', 'coding', '乐趣', '满足', '老大', '还给', '数目', '不算', '非常', '开心', '感谢', '宿舍', '兄弟', '每天', '以后', '有时候', '注意', '键盘', '大声', '有空', '一定', '他们', '吃个', '陪下罪', '感谢', '王老师', '感谢', '老师', '他们', '选课', '系统', '真正', '项目', '开发', '上面', '提升', '没有', '他们', '机会', '没有', '这次', '神速', '完工', '呵呵', '好像', '自己', '不过', '乙方', '可能', '满意', '这个', '不好', '那个', '不怕', '什么', '毕竟', '一个', '星期', '这么', '多钱', '做点', '实事', '谢谢你们', '需求', '动力', '呵呵', '研一', '发现', '大家', '本科', '一样', '大家', '心思', '就是', '学习', '实践', '项目', '不能', '本科', '一样', '浑浑噩噩', '过日子', '即使', '很累', '一定', '收获', '一定', '经历']","[[-0.24673566 -0.12397521  0.21310626  0.16499112  0.26867376 -0.33199133
  -0.16475995  0.45756569 -0.01275467 -0.02344586 -0.06385362 -0.31880803
  -0.16334036  0.55722745  0.13692369 -0.10357117 -0.13669685 -0.00999581
  -0.08514116 -0.41687778  0.02581168  0.23332029 -0.00231908 -0.08815135
   0.10682022 -0.51094306 -0.26459764  0.07492341 -0.18887622 -0.0585838
   0.23392828  0.03590843 -0.01435574 -0.12687723 -0.10203509  0.3166155
  -0.12548045 -0.20811535  0.10600395 -0.7151897  -0.15435627 -0.54216067
  -0.03584963 -0.07264058 -0.15795901 -0.13986498 -0.26062455  0.44267317
  -0.15775548  0.36841637  0.18052822 -0.25003852 -0.10128983 -0.22441182
   0.05833611  0.36318262  0.22622795 -0.06039825  0.08974752 -0.08274295
   0.04391713  0.27273828  0.0210404   0.07584805 -0.36248381 -0.01272368
   0.04036517 -0.01345964 -0.22191509  0.41337379  0.12137673 -0.22863433
   0.37761374 -0.3091049   0.54360847  0.16751182  0.20648017 -0.1372895
  -0.24499482 -0.2035583  -0.07646366 -0.00200666 -0.06265574  0.32247921
  -0.35217159  0.19054396 -0.26958992  0.39763822  0.43693701  0.12526049
   0.28377486  0.11902485  0.33605818  0.17447238  0.17704868  0.35717787
   0.09507445 -0.27852428  0.00300504 -0.07875131]]"
119,日期选择控件-date_input,"一款jquery插件date_input <script language=""javascript"" src=""../../jquery-1.4.2.js""> </script><script type=""text/javascript"" src=""jquery.date_input.js""> </script><link rel=""stylesheet"" href=""date_input.css"" type=""text/css""><script language=""javascript"">$(function() {  $(""#my_specific_input"").date_input();  $("".button,.prev"").css(""cursor"",""hand"").css(""cursor"",""pointer"");  $("".button,.next"").css(""cursor"",""hand"").css(""cursor"",""pointer"");});</script><input type=""text"" id=""my_specific_input"" /> 美观大方，十分方便。","['日期', '选择', '控件', 'date', 'input', '一款', 'jquery', '插件', 'date', 'input', 'script', 'language', 'javascript', 'src', '..', '..', 'jquery', '1.4', 'js', 'script', 'script', 'type', 'text', 'javascript', 'src', 'jquery', 'date', 'input', 'js', 'script', 'link', 'rel', 'stylesheet', 'href', 'date', 'input', 'css', 'type', 'text', 'css', 'script', 'language', 'javascript', 'function', 'my', 'specific', 'input', 'date', 'input', 'button', 'prev', 'css', 'cursor', 'hand', 'css', 'cursor', 'pointer', 'button', 'next', 'css', 'cursor', 'hand', 'css', 'cursor', 'pointer', 'script', 'input', 'type', 'text', 'id', 'my', 'specific', 'input', '美观大方', '十分', '方便']","[[-0.20686793 -0.08132322  0.27371365  0.11368642  0.25169531 -0.37948893
  -0.071837    0.44353287 -0.09380665 -0.17570091 -0.02426009 -0.38796574
  -0.11236294  0.46496371  0.1486239  -0.11108135 -0.09610558 -0.01329684
  -0.03525992 -0.52542701 -0.08118419  0.26019076 -0.09248296 -0.2655538
   0.01880437 -0.40829772 -0.3023389   0.0080211  -0.23224815 -0.08565191
   0.10725354  0.00377362  0.02635479 -0.10011341 -0.19819861  0.30342909
  -0.22655865 -0.30587859  0.05667543 -0.65843601 -0.10526077 -0.56741416
  -0.09285309  0.01717632 -0.09586284 -0.26911157 -0.19935752  0.2748409
  -0.16346542  0.48361765  0.09974156 -0.24713134 -0.11599327 -0.14182333
  -0.08179995  0.36666621  0.08505679 -0.12229344  0.1251097  -0.16211401
   0.12375474  0.18973574 -0.00293798  0.08158865 -0.3439066   0.07920172
   0.05360262 -0.04266357 -0.31355032  0.40501368  0.05641744 -0.12943196
   0.35636391 -0.30769601  0.51338297  0.33166798  0.11151236 -0.18094616
  -0.31515152 -0.05969097  0.04649929  0.09637764 -0.15002765  0.39090902
  -0.28859882  0.18754567 -0.27050096  0.44902359  0.47905383  0.1721136
   0.1640907   0.09919057  0.33084044  0.16020988  0.1843905   0.31668119
   0.1288096  -0.30600265 -0.00824555 -0.13207416]]"
122,PHP只下载不打开文件,"转自：http://hi.baidu.com/ssfnadn/blog/item/b57b3394eeec0117d21b7018.html 由于现在的浏览器已经可以识别格式为txt的文档格式，所以如果只是给txt文档做一个文字链接的话，可能只是打开一个新窗口显示txt文件的内容，并不能实现点击下载的目的。当然这个问题的解决办法也可以是你将你的txt文件改名为浏览器不认识的文件，比如rar,这样的话点击，浏览器不认识就只好让用户下载了。下面这个文件就是通过设置header设置文档的格式来实现点击下载的目的，上个页面传来了两个变量'file'和'filename'将上个页面传递过来的文件点击可以下载。<?php$file = $_GET['file'];   //要下载的文件(含文件的目录)$filename = $_GET['filename']; //这个只是文件的名字header(""Content-Type: application/force-download"");header(""Content-Disposition: attachment; filename="".($filename)); readfile($file);?> 首先：设置Content-Type的值为application/force-download，强制下载接着第二个header函数设置了要下载的文件，注意这里filename是不包含路径的文件名，这个filename的值将来就是点击下载后弹出对话框里面的文件名.最后就是readfile，将文件流输出到浏览器，这样就实现了文件的下载。 ","['php', '下载', '打开', '文件', '转自', 'http', 'hi', 'baidu', 'com', 'ssfnadn', 'blog', 'item', 'b57b3394eeec0117d21b7018', 'html', '由于', '现在', '浏览器', '已经', '可以', '识别', '格式', 'txt', '文档', '格式', '所以', '如果', '只是', 'txt', '文档', '一个', '文字', '链接', '的话', '可能', '只是', '打开', '一个', '新窗口', '显示', 'txt', '文件', '内容', '不能', '实现', '点击', '下载', '目的', '当然', '这个', '问题', '解决办法', '可以', 'txt', '文件', '改名', '浏览器', '认识', '文件', '比如', 'rar', '这样的话', '点击', '浏览器', '认识', '只好', '用户', '下载', '下面', '这个', '文件', '就是', '通过', '设置', 'header', '设置', '文档', '格式', '实现', '点击', '下载', '目的', '页面', '传来', '两个', '变量', 'file', 'filename', '页面', '传递', '过来', '文件', '点击', '可以', '下载', 'php', 'file', 'get', 'file', '下载', '文件', '文件', '目录', 'filename', 'get', 'filename', '这个', '只是', '文件', '名字', 'header', 'content', 'type', 'application', 'force', 'download', 'header', 'content', 'disposition', 'attachment', 'filename', 'filename', 'readfile', 'file', '首先', '设置', 'content', 'type', 'application', 'force', 'download', '强制', '下载', '接着', '第二个', 'header', '函数', '设置', '下载', '文件', '注意', '这里', 'filename', '包含', '路径', '文件名', '这个', 'filename', '将来', '就是', '点击', '下载', '后弹', '对话框', '里面', '文件名', '最后', '就是', 'readfile', '文件', '输出', '浏览器', '这样', '实现', '文件', '下载']","[[-0.27421387 -0.16711582  0.25240549  0.22406499  0.28723632 -0.39619815
  -0.17971919  0.54884353 -0.02489579 -0.05832199 -0.07933714 -0.38762436
  -0.19460885  0.63787311  0.13695818 -0.12818655 -0.16403233  0.01068674
  -0.07440084 -0.4926035   0.01050468  0.2843407  -0.02726745 -0.14723748
   0.10349665 -0.57871909 -0.33806716  0.10108575 -0.23624785 -0.07755307
   0.24006941  0.06497889 -0.01170408 -0.15353667 -0.16402835  0.38389057
  -0.17719163 -0.25922588  0.10878125 -0.80491748 -0.15458203 -0.63191296
  -0.03521375 -0.06220994 -0.16971611 -0.20363532 -0.3000977   0.50310118
  -0.13056488  0.43193632  0.19201974 -0.31585327 -0.07985249 -0.25135941
   0.03557625  0.45213418  0.24231532 -0.09252672  0.13943588 -0.12251053
   0.09349184  0.29969856  0.02245257  0.09339213 -0.41625097  0.0149235
   0.01303496  0.00850892 -0.26624187  0.48089468  0.14080754 -0.24229458
   0.45961926 -0.36038756  0.63976152  0.24122277  0.2532147  -0.18391969
  -0.290332   -0.22491132 -0.08913597  0.00560836 -0.10131071  0.39412015
  -0.4224406   0.20714357 -0.32203606  0.49869278  0.55027266  0.15871626
   0.2985039   0.13985832  0.37882857  0.20744526  0.2100875   0.4484508
   0.10067409 -0.30992113  0.031188   -0.117712  ]]"
124,Javascript trim()函数实现,"在JavaScript中我们需要用到trim的地方很多，但是JavaScript又没有独立的trim函数或者方法可以使用，所以我们需要自己写个trim函数来实现我们的目的。     方案一：以原型方式调用，即obj.trim()形式，此方式简单且使用方面广泛，定义方式如下：<script language=”javascript”>/*** 删除左右两端的空格*/String.prototype.trim=function(){     return this.replace(/(^\s*)|(\s*$)/g, ”);}/*** 删除左边的空格*/String.prototype.ltrim=function(){     return this.replace(/(^\s*)/g,”);}/*** 删除右边的空格*/String.prototype.rtrim=function(){     return this.replace(/(\s*$)/g,”);}</script> 使用示例如下：<script type=”text/javascript”>alert(document.getElementById(’abc’).value.trim());alert(document.getElementById(’abc’).value.ltrim());alert(document.getElementById(’abc’).value.rtrim());</script> 方案二：以工具方式调用，即trim(obj)的形式，此方式可以用于特殊处理需要，定义方式如下：<script type=”text/javascript”>/*** 删除左右两端的空格*/function trim(str){     return str.replace(/(^\s*)|(\s*$)/g, ”);}/*** 删除左边的空格*/function ltrim(str){     return str.replace(/(^\s*)/g,”);}/*** 删除右边的空格*/function rtrim(str){     return str.replace(/(\s*$)/g,”);}</script> 使用示例如下：<script type=”text/javascript”>alert(trim(document.getElementById(’abc’).value));alert(ltrim(document.getElementById(’abc’).value));alert(rtrim(document.getElementById(’abc’).value));</script>  ","['javascript', 'trim', '函数', '实现', 'javascript', '我们', '需要', '用到', 'trim', '地方', '很多', '但是', 'javascript', '没有', '独立', 'trim', '函数', '或者', '方法', '可以', '使用', '所以', '我们', '需要', '自己', '写个', 'trim', '函数', '实现', '我们', '目的', '方案', '原型', '方式', '调用', 'obj', 'trim', '形式', '方式', '简单', '使用', '方面', '广泛', '定义', '方式', '如下', 'script', 'language', 'javascript', '删除', '左右两端', '空格', 'string', 'prototype', 'trim', 'function', 'return', 'this', 'replace', '删除', '左边', '空格', 'string', 'prototype', 'ltrim', 'function', 'return', 'this', 'replace', '删除', '右边', '空格', 'string', 'prototype', 'rtrim', 'function', 'return', 'this', 'replace', 'script', '使用', '示例', '如下', 'script', 'type', 'text', 'javascript', 'alert', 'document', 'getelementbyid', 'abc', 'value', 'trim', 'alert', 'document', 'getelementbyid', 'abc', 'value', 'ltrim', 'alert', 'document', 'getelementbyid', 'abc', 'value', 'rtrim', 'script', '方案', '工具', '方式', '调用', 'trim', 'obj', '形式', '方式', '可以', '用于', '特殊', '处理', '需要', '定义', '方式', '如下', 'script', 'type', 'text', 'javascript', '删除', '左右两端', '空格', 'function', 'trim', 'str', 'return', 'str', 'replace', '删除', '左边', '空格', 'function', 'ltrim', 'str', 'return', 'str', 'replace', '删除', '右边', '空格', 'function', 'rtrim', 'str', 'return', 'str', 'replace', 'script', '使用', '示例', '如下', 'script', 'type', 'text', 'javascript', 'alert', 'trim', 'document', 'getelementbyid', 'abc', 'value', 'alert', 'ltrim', 'document', 'getelementbyid', 'abc', 'value', 'alert', 'rtrim', 'document', 'getelementbyid', 'abc', 'value', 'script']","[[-2.20040508e-01 -1.01975328e-01  2.67702948e-01  8.46827268e-02
   3.20658687e-01 -3.54169172e-01 -1.27698134e-01  4.54052885e-01
  -5.93429895e-02 -1.22990251e-01 -2.12079728e-02 -3.71969966e-01
  -1.47008597e-01  5.21271703e-01  1.87876415e-01 -9.07679642e-02
  -1.32801059e-01 -2.41811164e-02 -9.32754089e-02 -5.66089959e-01
  -4.88024659e-02  2.36181178e-01 -4.00761904e-02 -1.89325904e-01
   6.79555414e-02 -4.75710110e-01 -2.96012159e-01  3.17661281e-02
  -2.56588103e-01 -8.69985135e-02  1.51938090e-01 -2.77198486e-02
   1.44880420e-03 -1.30188774e-01 -1.60908719e-01  3.09976732e-01
  -2.07915808e-01 -2.80094322e-01  8.31150230e-02 -7.45692874e-01
  -1.65430337e-01 -6.23063489e-01 -8.65704705e-02 -5.68853767e-04
  -1.34216283e-01 -2.23690454e-01 -2.00401265e-01  3.37193526e-01
  -2.35588839e-01  4.98272711e-01  1.73849527e-01 -2.49171505e-01
  -1.52713564e-01 -1.60887546e-01 -4.82211848e-03  3.71484449e-01
   1.45315737e-01 -8.91821378e-02  1.03071477e-01 -1.39903581e-01
   7.28067814e-02  2.38176154e-01  2.29513490e-02  9.25775358e-02
  -3.82647390e-01  3.78380118e-02  7.61690640e-02 -5.29322323e-02
  -3.12562607e-01  4.35113396e-01  1.27412850e-01 -1.83296754e-01
   3.72798824e-01 -3.12217984e-01  5.49780854e-01  2.57221666e-01
   1.18278085e-01 -1.33263868e-01 -3.44580197e-01 -1.17744947e-01
   3.41178625e-02  6.39226635e-02 -1.21268377e-01  3.52112181e-01
  -3.33085727e-01  2.25491754e-01 -2.89048936e-01  4.23729392e-01
   4.81318966e-01  1.50086836e-01  2.47353414e-01  9.79669613e-02
   3.82284536e-01  1.90590005e-01  1.89335763e-01  3.17921866e-01
   1.26349967e-01 -3.45198476e-01 -8.32540565e-02 -1.32234665e-01]]"
126,PHP获取IP的多种方式解析,"转自：http://developer.51cto.com/art/200911/164514.htmPHP获取IP的方法有许多种，我们今天向大家总结了六种方法，希望通过对这六种方法的学习，能够加深我们对PHP语言的进一步了解，巩固我们所掌握的知识。PHP获取IP方法一：<?php echo ""<br>"";  ?>  <?php     function GetIP()  {  if(!empty($_SERVER[""HTTP_CLIENT_IP""]))     $cip = $_SERVER[""HTTP_CLIENT_IP""];  else if(!empty($_SERVER[""HTTP_X_FORWARDED_FOR""]))     $cip = $_SERVER[""HTTP_X_FORWARDED_FOR""];  else if(!empty($_SERVER[""REMOTE_ADDR""]))     $cip = $_SERVER[""REMOTE_ADDR""];  else     $cip = ""无法获取！"";  return $cip;  }  echo ""<br>"";  ?> PHP获取IP方法二：<?php echo ""<br>"";  ?>  <? error_reporting (E_ERROR | E_WARNING | E_PARSE);  if($HTTP_SERVER_VARS[""HTTP_X_FORWARDED_FOR""])   {                                                       $ip = $HTTP_SERVER_VARS[""HTTP_X_FORWARDED_FOR""];          }                                                elseif($HTTP_SERVER_VARS[""HTTP_CLIENT_IP""])      {                                                       $ip = $HTTP_SERVER_VARS[""HTTP_CLIENT_IP""];             }                                                elseif ($HTTP_SERVER_VARS[""REMOTE_ADDR""])         {                                                       $ip = $HTTP_SERVER_VARS[""REMOTE_ADDR""];                  }                                                elseif (getenv(""HTTP_X_FORWARDED_FOR""))            {                                                       $ip = getenv(""HTTP_X_FORWARDED_FOR"");                     }                                                elseif (getenv(""HTTP_CLIENT_IP""))                  {                                                       $ip = getenv(""HTTP_CLIENT_IP"");                           }                                               elseif (getenv(""REMOTE_ADDR""))                     {                                                       $ip = getenv(""REMOTE_ADDR"");                             }                                               else                                             {                                                       $ip = ""Unknown"";                                         }                                                echo ""你的IP地址是:"".$ip.""<br>"";                              ?> PHP获取IP方法三：<?php echo ""<br>"";  ?>  <? $iipp = $_SERVER[""REMOTE_ADDR""];  echo $iipp;  echo ""<br>"";  ?> PHP获取IP方法四：<?php echo ""<br>"";  ?>  <?php $user_IP = ($_SERVER[""HTTP_VIA""]) ? $_SERVER[""HTTP_X_FORWARDED_FOR""] : $_SERVER[""REMOTE_ADDR""];  $user_IP = ($user_IP) ? $user_IP : $_SERVER[""REMOTE_ADDR""];  echo $user_IP.""<br>"";  ?> PHP获取IP方法五：<?php echo ""<br>"";  ?>  <? function get_real_ip()  {         $ip=false;         if(!empty($_SERVER[""HTTP_CLIENT_IP""]))         {              $ip = $_SERVER[""HTTP_CLIENT_IP""];         }         if (!empty($_SERVER['HTTP_X_FORWARDED_FOR']))         {              $ips = explode ("", "", $_SERVER['HTTP_X_FORWARDED_FOR']);              if ($ip)              {                       array_unshift($ips, $ip); $ip = FALSE;              }              for ($i = 0; $i < count($ips); $i++)              {                       if (!eregi (""^(10|172\.16|192\.168)\."", $ips[$i]))                       {                                 $ip = $ips[$i];                                 break;                       }              }         }         return ($ip ? $ip : $_SERVER['REMOTE_ADDR']);  }  echo get_real_ip();  echo ""<br>"";  ?> PHP获取IP方法六：<?php echo ""<br>"";  ?>  <? if(getenv('HTTP_CLIENT_IP'))  {         $onlineip = getenv('HTTP_CLIENT_IP');  }  elseif(getenv('HTTP_X_FORWARDED_FOR'))  {         $onlineip = getenv('HTTP_X_FORWARDED_FOR');  }  elseif(getenv('REMOTE_ADDR'))  {         $onlineip = getenv('REMOTE_ADDR');  }  else  {         $onlineip = $HTTP_SERVER_VARS['REMOTE_ADDR'];  }  echo $onlineip;  echo ""<br>"";  ?>  ","['php', '获取', 'ip', '多种', '方式', '解析', '转自', 'http', 'developer.51', 'cto', 'com', 'art', '200911', '164514', 'htmphp', '获取', 'ip', '方法', '许多种', '我们', '今天', '大家', '总结', '六种', '方法', '希望', '通过', '六种', '方法', '学习', '能够', '加深', '我们', 'php', '语言', '进一步', '了解', '巩固', '我们', '掌握', '知识', 'php', '获取', 'ip', '方法', 'php', 'echo', 'br', 'php', 'function', 'getip', 'if', 'empty', 'server', 'http', 'client', 'ip', 'cip', 'server', 'http', 'client', 'ip', 'else', 'if', 'empty', 'server', 'http', 'forwarded', 'for', 'cip', 'server', 'http', 'forwarded', 'for', 'else', 'if', 'empty', 'server', 'remote', 'addr', 'cip', 'server', 'remote', 'addr', 'else', 'cip', '无法', '获取', 'return', 'cip', 'echo', 'br', 'php', '获取', 'ip', '方法', 'php', 'echo', 'br', 'error', 'reporting', 'error', 'warning', 'parse', 'if', 'http', 'server', 'vars', 'http', 'forwarded', 'for', 'ip', 'http', 'server', 'vars', 'http', 'forwarded', 'for', 'elseif', 'http', 'server', 'vars', 'http', 'client', 'ip', 'ip', 'http', 'server', 'vars', 'http', 'client', 'ip', 'elseif', 'http', 'server', 'vars', 'remote', 'addr', 'ip', 'http', 'server', 'vars', 'remote', 'addr', 'elseif', 'getenv', 'http', 'forwarded', 'for', 'ip', 'getenv', 'http', 'forwarded', 'for', 'elseif', 'getenv', 'http', 'client', 'ip', 'ip', 'getenv', 'http', 'client', 'ip', 'elseif', 'getenv', 'remote', 'addr', 'ip', 'getenv', 'remote', 'addr', 'else', 'ip', 'unknown', 'echo', 'ip地址', 'ip', 'br', 'php', '获取', 'ip', '方法', 'php', 'echo', 'br', 'iipp', 'server', 'remote', 'addr', 'echo', 'iipp', 'echo', 'br', 'php', '获取', 'ip', '方法', 'php', 'echo', 'br', 'php', 'user', 'ip', 'server', 'http', 'via', 'server', 'http', 'forwarded', 'for', 'server', 'remote', 'addr', 'user', 'ip', 'user', 'ip', 'user', 'ip', 'server', 'remote', 'addr', 'echo', 'user', 'ip', 'br', 'php', '获取', 'ip', '方法', 'php', 'echo', 'br', 'function', 'get', 'real', 'ip', 'ip', 'false', 'if', 'empty', 'server', 'http', 'client', 'ip', 'ip', 'server', 'http', 'client', 'ip', 'if', 'empty', 'server', 'http', 'forwarded', 'for', 'ips', 'explode', 'server', 'http', 'forwarded', 'for', 'if', 'ip', 'array', 'unshift', 'ips', 'ip', 'ip', 'false', 'for', 'count', 'ips', '++', 'if', 'eregi', '10', '172', '16', '192', '168', 'ips', 'ip', 'ips', 'break', 'return', 'ip', 'ip', 'server', 'remote', 'addr', 'echo', 'get', 'real', 'ip', 'echo', 'br', 'php', '获取', 'ip', '方法', 'php', 'echo', 'br', 'if', 'getenv', 'http', 'client', 'ip', 'onlineip', 'getenv', 'http', 'client', 'ip', 'elseif', 'getenv', 'http', 'forwarded', 'for', 'onlineip', 'getenv', 'http', 'forwarded', 'for', 'elseif', 'getenv', 'remote', 'addr', 'onlineip', 'getenv', 'remote', 'addr', 'else', 'onlineip', 'http', 'server', 'vars', 'remote', 'addr', 'echo', 'onlineip', 'echo', 'br']","[[-0.20685585 -0.1155114   0.30946031  0.25718326  0.1582077  -0.43966115
  -0.05400656  0.48276656 -0.09994549 -0.19599688 -0.07595639 -0.44375292
  -0.08504578  0.48301202  0.09785918 -0.14775982 -0.10285345  0.01333297
   0.04913116 -0.47474483 -0.07653775  0.30827035 -0.1556626  -0.31791999
  -0.04768605 -0.35886318 -0.36718661  0.0374505  -0.23631442 -0.08940565
   0.08318567  0.11069766  0.05227851 -0.09901813 -0.28879347  0.36825424
  -0.2514627  -0.3096577   0.01982599 -0.61855911 -0.03203237 -0.55394739
  -0.06142796  0.03550752 -0.06333511 -0.36332011 -0.31632425  0.30083944
  -0.00988255  0.45143042  0.0031219  -0.31600085  0.0228786  -0.19455602
  -0.11160538  0.43079809  0.06059841 -0.13496086  0.16156146 -0.15978224
   0.2223863   0.14994609 -0.01023889  0.09018597 -0.31447235  0.11919242
  -0.02581747  0.04291433 -0.26170422  0.43284982  0.01099034 -0.08973494
   0.42042591 -0.32189991  0.55659182  0.41769603  0.23750435 -0.24905498
  -0.26442495 -0.14390652 -0.02331895  0.10952433 -0.2059101   0.46046616
  -0.35579134  0.17642101 -0.29145766  0.57412103  0.59631432  0.23067114
   0.10344101  0.1138135   0.31416029  0.16741364  0.21052782  0.44210489
   0.08932665 -0.22838638  0.18203608 -0.14040408]]"
128,PHP删除无限分类并同时删除它下面的所有子分类的方法,"转帖：今天晚上上Q的时候 ，一个以前的学员在网上问我，怎么删除一个无限分类的时候同时删除它下面的所有子分类。我把代码稍微整理了一下，发出来，放在php学员问答里面，方便以后的人查看 。 $act = isset ($_GET['act']) ? trim ($_GET['act']) : "";if ($act == 'del'){$sort_id = isset ($_GET['id']) ? intval($_GET['id']) : '0' ;$sort_ids = $sort_id;$childrenIds = getChildrenIds ($sort_id);if (!empty ($childrenIds)){$sort_ids .= $childrenIds;}$sql = “delete from `article_sort` WHERE `sort_id` in ({$sort_ids})"";$res = mysql_query ($sql);if ($res){alert ('删除成功');exit;}else{alert ('删除失败');exit;}}  getChildrenIds 这个函数以前已经给出来过，不清楚的请参考 自定义函数之获取无限分类ID下的子类ID集自定义函数之获取无限分类ID下的子类ID集/*—————————————————— *///– 获取无限分类ID下面的子类ID集//– $sort_id = $sort_id.getChildrenIds($sort_id);//– $sql = "" ….. where sort_id in ($sort_id)"";/*—————————————————— */function getChildrenIds ($sort_id){global $db;$ids = "";$sql = ""SELECT * FROM "".$db->table('article_sort')."" WHERE `parent_id` = '{$sort_id}'"";$res = $db->query ($sql);if ($res){while ($row = $db->fetch_assoc ($res)){$ids .= ','.$row['sort_id'];$ids .= getChildrenIds ($row['sort_id']);}}return $ids;}  ","['php', '删除', '无限', '分类', '同时', '删除', '下面', '所有', '分类', '方法', '转帖', '今天', '晚上', '时候', '一个', '以前', '学员', '网上', '怎么', '删除', '一个', '无限', '分类', '时候', '同时', '删除', '下面', '所有', '分类', '代码', '稍微', '整理', '一下', '发出', '放在', 'php', '学员', '问答', '里面', '方便', '以后', '查看', 'act', 'isset', 'get', 'act', 'trim', 'get', 'act', 'if', 'act', 'del', 'sort', 'id', 'isset', 'get', 'id', 'intval', 'get', 'id', 'sort', 'ids', 'sort', 'id', 'childrenids', 'getchildrenids', 'sort', 'id', 'if', 'empty', 'childrenids', 'sort', 'ids', 'childrenids', 'sql', 'delete', 'from', 'article', 'sort', 'where', 'sort', 'id', 'in', 'sort', 'ids', 'res', 'mysql', 'query', 'sql', 'if', 'res', 'alert', '删除', '成功', 'exit', 'else', 'alert', '删除', '失败', 'exit', 'getchildrenids', '这个', '函数', '以前', '已经', '出来', '清楚', '参考', '自定义', '函数', '获取', '无限', '分类', 'id', '子类', 'id', '自定义', '函数', '获取', '无限', '分类', 'id', '子类', 'id', '获取', '无限', '分类', 'id', '下面', '子类', 'id', 'sort', 'id', 'sort', 'id', 'getchildrenids', 'sort', 'id', 'sql', '..', 'where', 'sort', 'id', 'in', 'sort', 'id', 'function', 'getchildrenids', 'sort', 'id', 'global', 'db', 'ids', 'sql', 'select', 'from', 'db', 'table', 'article', 'sort', 'where', 'parent', 'id', 'sort', 'id', 'res', 'db', 'query', 'sql', 'if', 'res', 'while', 'row', 'db', 'fetch', 'assoc', 'res', 'ids', 'row', 'sort', 'id', 'ids', 'getchildrenids', 'row', 'sort', 'id', 'return', 'ids']","[[-0.18008958 -0.10273843  0.23877968  0.05722849  0.33140835 -0.34728783
  -0.14920891  0.4796646  -0.05538437 -0.13923277 -0.03004437 -0.3353415
  -0.17040539  0.52757302  0.17474412 -0.06915586 -0.11370297  0.00571401
  -0.09592165 -0.58672959 -0.0698323   0.22565878 -0.05483066 -0.24035504
   0.07176849 -0.46814343 -0.32282631  0.04590319 -0.26890987 -0.06377517
   0.14492871 -0.01381289 -0.00599463 -0.13394209 -0.1676382   0.30973368
  -0.22288038 -0.27247598  0.08069319 -0.72773352 -0.16380805 -0.63090522
  -0.09232966  0.02772712 -0.12185043 -0.23788118 -0.16125534  0.30057861
  -0.23243508  0.51075524  0.17091713 -0.24880187 -0.16764983 -0.1127123
  -0.02467788  0.35294802  0.13683574 -0.08580614  0.09227535 -0.15353344
   0.08966196  0.21090592  0.01237592  0.11526099 -0.35018242  0.0461466
   0.09840518 -0.06553692 -0.34780028  0.42232923  0.13035905 -0.16867448
   0.337067   -0.31795948  0.53095903  0.27123195  0.06782328 -0.12928793
  -0.37790344 -0.06201943  0.06550008  0.09262717 -0.1251009   0.3529819
  -0.32185495  0.23014405 -0.27568999  0.41818577  0.47911741  0.15322704
   0.25479299  0.09074864  0.37937364  0.1836214   0.19328788  0.28856161
   0.12484445 -0.34618926 -0.12577139 -0.13513518]]"
130,PHP-非常好用的文件操作类,"<?php/***本类为文件操作类，实现了文件的建立，写入，删除，修改，复制，移动，创建目录，删除目录* 列出目录里的文件等功能，路径后面别忘了加""/""** @author 路人郝* @copyright myself* @link [url=http://www.phpr.cn]www.phpr.cn[/url]**/class fileoperate{     var $path;// 文件路径var $name;//文件名var $result;//对文件操作后的结果/*** 本方法用来在path目录下创建name文件** @param string path* @param string name*/function creat_file($path,$name)//建立文件{    $filename=$path.$name;    if (file_exists($filename))    {        echo ""文件已经存在，请换个文件名"";    }    else    {        if (file_exists($path))        {            touch($name);            rename($name,$filename);            echo ""文件建立成功 </br>"";        }        else{            echo ""目录不存在，请检查"";        }    }}/*** 本方法删除path路径下name文件** @param string_type path* @param string_type name*/function del_file($path,$name){ //删除文件    $filename=$path.$name;        if (!file_exists($filename)) {        echo ""文件不存在，请确认路径是否正确"";    }    else {        if (unlink($filename)){            echo ""文件删除成功"";        }        else echo ""文件删除失败"";    }}/*** 本方法把filename文件重命名为newname文件** @param string_type filename* @param string_type newname*/function rename_file($filename,$newname) { //文件或目录更名    $path=pathinfo($filename);    $dir=$path['dirname']; //得到文件路径    $newfilename=$dir.'/'.$newname;    if (file_exists($filename)) { //判断文件是否存在        $result=rename($filename,$newfilename);        if ($result==true)            echo ""文件更名成功"";        else            echo ""文件更名失败"";    }    else        echo ""文件不存在"";    }/*** 本方法用来列出目录里的文件或目录switch为1时按字母顺序列出所有目录和文件* switch为2则只列出目录，switch为3时，只列出文件名** @param string_type path* @param int_type switch*/function list_filename($path,$switch) //列出文件和目录名{    if (file_exists($path)) {        $dir=scandir($path);        if ($switch==1){ //如果switch为1则按字母顺序列出所有目录和文件            for ($i=0;$i<=count($dir);$i++)            {                if ($dir[$i]!=""."" and $dir[$i]!="".."")                {                    echo ""$dir[$i]<br>"";                }            }        }        if ($switch==2) //switch为2则只列出目录        {            for ($i=0;$i<=count($dir);$i++)            {                $x=is_dir($path.$dir[$i]);                if ($dir[$i]!=""."" and $dir[$i]!="".."" and $x==true)                {                    echo ""$dir[$i]<br>"";                }            }        }        if ($switch==3) //switch为3时，只列出文件名        {            for ($i=0;$i<=count($dir);$i++)            {                $x=is_dir($path.$dir[$i]);                if ($dir[$i]!=""."" and $dir[$i]!="".."" and $x==false)                {                    echo ""$dir[$i]<br>"";                }            }        }    }}/*** 本方法在path目录下创建名为dirname的目录** @param string_type path* @param string_type dirname*/function creat_dir($path,$dirname){ //创建目录    if (file_exists($path)) {        $result=@mkdir($path.$dirname);        if ($result)            echo ""目录建立成功"";        else            echo ""目录建立失败"";    }    else        echo ""路径不存在，请重新输入"";}/*** 本方法删除pathname目录，包括该目录下所有的文件及子目录** @param string_type pathname*/function del_dir($pathname){ //删除目录及目录里所有的文件夹和文件    if (!is_dir($pathname))    {exit(""你输入的不是一个目录，请检查"") ;}    $handle=opendir($pathname);    while (($fileordir=readdir($handle)) !== false) {        if ($fileordir!=""."" && $fileordir!="".."") {            is_dir(""$pathname/$fileordir"")?            $this->del_dir(""$pathname/$fileordir""):            unlink(""$pathname/$fileordir"");        }    }    if (readdir($handle) == false)    {        closedir($handle);        rmdir($pathname);    }}}?><?php$op=new fileoperate();$op->creat_file(""user-files/"",""aa3.txt"");//$op->del_file(""user-files/"",""aa3.txt"");//$op->rename_file(""user-files/aa3.txt"",""测试文件.txt"");echo '<br>';$op->list_filename(""user-files/"",1);$op->creat_dir(""user-files/"",""新建的目录"");$op->del_dir(""user-files/新建的目录"");?> ","['php', '非常', '好用', '文件', '操作', 'php', '本类', '文件', '操作', '实现', '文件', '建立', '写入', '删除', '修改', '复制', '移动', '创建', '目录', '删除', '目录', '列出', '目录', '文件', '功能', '路径', '后面', '别忘了', 'author', '路人', 'copyright', 'myself', 'link', 'url', 'http', 'www', 'phpr', 'cn', 'www', 'phpr', 'cn', 'url', 'class', 'fileoperate', 'var', 'path', '文件', '路径', 'var', 'name', '文件名', 'var', 'result', '文件', '操作', '结果', '方法', '用来', 'path', '目录', '创建', 'name', '文件', 'param', 'string', 'path', 'param', 'string', 'name', 'function', 'creat', 'file', 'path', 'name', '建立', '文件', 'filename', 'path', 'name', 'if', 'file', 'exists', 'filename', 'echo', '文件', '已经', '存在', '请换个', '文件名', 'else', 'if', 'file', 'exists', 'path', 'touch', 'name', 'rename', 'name', 'filename', 'echo', '文件', '建立', '成功', 'br', 'else', 'echo', '目录', '存在', '检查', '方法', '删除', 'path', '路径', 'name', '文件', 'param', 'string', 'type', 'path', 'param', 'string', 'type', 'name', 'function', 'del', 'file', 'path', 'name', '删除', '文件', 'filename', 'path', 'name', 'if', 'file', 'exists', 'filename', 'echo', '文件', '存在', '确认', '路径', '是否', '正确', 'else', 'if', 'unlink', 'filename', 'echo', '文件', '删除', '成功', 'else', 'echo', '文件', '删除', '失败', '方法', 'filename', '文件', '重命名', 'newname', '文件', 'param', 'string', 'type', 'filename', 'param', 'string', 'type', 'newname', 'function', 'rename', 'file', 'filename', 'newname', '文件', '目录', '更名', 'path', 'pathinfo', 'filename', 'dir', 'path', 'dirname', '得到', '文件', '路径', 'newfilename', 'dir', 'newname', 'if', 'file', 'exists', 'filename', '判断', '文件', '是否', '存在', 'result', 'rename', 'filename', 'newfilename', 'if', 'result', 'true', 'echo', '文件', '更名', '成功', 'else', 'echo', '文件', '更名', '失败', 'else', 'echo', '文件', '存在', '方法', '用来', '列出', '目录', '文件', '目录', 'switch', '字母', '顺序', '列出', '所有', '目录', '文件', 'switch', '列出', '目录', 'switch', '列出', '文件名', 'param', 'string', 'type', 'path', 'param', 'int', 'type', 'switch', 'function', 'list', 'filename', 'path', 'switch', '列出', '文件', '目录名', 'if', 'file', 'exists', 'path', 'dir', 'scandir', 'path', 'if', 'switch', '如果', 'switch', '字母', '顺序', '列出', '所有', '目录', '文件', 'for', 'count', 'dir', '++', 'if', 'dir', 'and', 'dir', '..', 'echo', 'dir', 'br', 'if', 'switch', 'switch', '列出', '目录', 'for', 'count', 'dir', '++', 'is', 'dir', 'path', 'dir', 'if', 'dir', 'and', 'dir', '..', 'and', 'true', 'echo', 'dir', 'br', 'if', 'switch', 'switch', '列出', '文件名', 'for', 'count', 'dir', '++', 'is', 'dir', 'path', 'dir', 'if', 'dir', 'and', 'dir', '..', 'and', 'false', 'echo', 'dir', 'br', '方法', 'path', '目录', '创建', '名为', 'dirname', '目录', 'param', 'string', 'type', 'path', 'param', 'string', 'type', 'dirname', 'function', 'creat', 'dir', 'path', 'dirname', '创建', '目录', 'if', 'file', 'exists', 'path', 'result', 'mkdir', 'path', 'dirname', 'if', 'result', 'echo', '目录', '建立', '成功', 'else', 'echo', '目录', '建立', '失败', 'else', 'echo', '路径', '存在', '重新', '输入', '方法', '删除', 'pathname', '目录', '包括', '目录', '所有', '文件', '子目录', 'param', 'string', 'type', 'pathname', 'function', 'del', 'dir', 'pathname', '删除', '目录', '目录', '所有', '文件夹', '文件', 'if', 'is', 'dir', 'pathname', 'exit', '输入', '不是', '一个', '目录', '检查', 'handle', 'opendir', 'pathname', 'while', 'fileordir', 'readdir', 'handle', 'false', 'if', 'fileordir', '&&', 'fileordir', '..', 'is', 'dir', 'pathname', 'fileordir', 'this', 'del', 'dir', 'pathname', 'fileordir', 'unlink', 'pathname', 'fileordir', 'if', 'readdir', 'handle', 'false', 'closedir', 'handle', 'rmdir', 'pathname', 'php', 'op', 'new', 'fileoperate', 'op', 'creat', 'file', 'user', 'files', 'aa3', 'txt', 'op', 'del', 'file', 'user', 'files', 'aa3', 'txt', 'op', 'rename', 'file', 'user', 'files', 'aa3', 'txt', '测试', '文件', 'txt', 'echo', 'br', 'op', 'list', 'filename', 'user', 'files', 'op', 'creat', 'dir', 'user', 'files', '新建', '目录', 'op', 'del', 'dir', 'user', 'files', '新建', '目录']","[[-2.28238001e-01 -1.32230378e-01  2.98154597e-01  1.07005111e-01
   3.14822207e-01 -4.11979401e-01 -1.07609421e-01  5.07836633e-01
  -1.04671596e-01 -2.04760798e-01 -1.68659571e-02 -4.25945010e-01
  -1.66955328e-01  5.37357960e-01  1.79508646e-01 -1.10441766e-01
  -1.26980894e-01  3.93126907e-04 -6.32830523e-02 -6.42623299e-01
  -1.12233873e-01  2.95036515e-01 -7.34141440e-02 -2.97835126e-01
   5.68426115e-02 -4.83909011e-01 -3.52822995e-01  2.11903638e-02
  -3.08468384e-01 -9.97991710e-02  1.18136562e-01 -3.16167404e-02
   2.14401358e-02 -1.45014637e-01 -2.39063292e-01  3.46597315e-01
  -2.86301908e-01 -3.56208545e-01  6.92693117e-02 -7.84466073e-01
  -1.48068289e-01 -6.75548122e-01 -9.40735969e-02  4.64893537e-02
  -1.20084191e-01 -3.08247019e-01 -1.87753155e-01  3.17863891e-01
  -2.17947454e-01  5.81472100e-01  1.55555333e-01 -3.02160680e-01
  -1.56088567e-01 -1.27131461e-01 -7.77629364e-02  4.13594283e-01
   9.76453820e-02 -1.43477763e-01  1.60832350e-01 -2.16935496e-01
   1.46224425e-01  2.29877960e-01  1.66659474e-02  1.00012301e-01
  -4.12418085e-01  9.46373438e-02  6.41240546e-02 -4.40886726e-02
  -3.82123539e-01  4.67521659e-01  1.01767027e-01 -1.36569839e-01
   4.14898075e-01 -3.44706254e-01  6.04281821e-01  3.69689848e-01
   8.91630816e-02 -1.82593205e-01 -4.14704162e-01 -5.65806837e-02
   7.27492413e-02  9.13105003e-02 -1.78763071e-01  4.30404038e-01
  -3.30924794e-01  2.26066583e-01 -3.17702981e-01  5.13961868e-01
   5.53281256e-01  1.84683918e-01  2.19684766e-01  1.14581947e-01
   3.93480708e-01  2.17948094e-01  2.18942360e-01  3.51506823e-01
   1.57584181e-01 -3.68853414e-01 -8.07636156e-02 -1.84041395e-01]]"
132,屏幕取色工具, 屏幕取色工具： mezer tools V1.9.6.2 | 填写web开发必备工具，取色器，屏幕直尺 名字就叫做：mezer tools ,"['屏幕', '取色', '工具', '屏幕', '取色', '工具', 'mezer', 'tools', 'v1.9', '6.2', '填写', 'web', '开发', '必备', '工具', '取色', '屏幕', '直尺', '名字', '叫做', 'mezer', 'tools']","[[-0.17121729 -0.06844164  0.15309889  0.12387667  0.16120619 -0.23087571
  -0.08461795  0.29859124 -0.02536545 -0.03943301 -0.04398683 -0.22980742
  -0.08181602  0.3505561   0.08788441 -0.07484226 -0.07654398 -0.01213413
  -0.04146224 -0.27536157 -0.00129407  0.17349549 -0.02470114 -0.08727121
   0.04205939 -0.30884428 -0.18582049  0.0361108  -0.12370503 -0.05084368
   0.13543237  0.02547457 -0.00596749 -0.08051233 -0.08754229  0.22163832
  -0.09955999 -0.15927526  0.05719944 -0.45911157 -0.08132388 -0.34644072
  -0.03337889 -0.03205703 -0.09401319 -0.11516328 -0.18069835  0.26661395
  -0.0869404   0.25256506  0.08076491 -0.17653852 -0.06039403 -0.14778683
   0.01996773  0.24990865  0.12140778 -0.04486668  0.07088439 -0.05998933
   0.04895831  0.15612273  0.01197389  0.04727315 -0.23609572  0.01227206
   0.01966651 -0.00133615 -0.15589929  0.26982479  0.0503862  -0.12805968
   0.2507754  -0.20157375  0.34856911  0.14037509  0.13832306 -0.10523301
  -0.16073477 -0.12013601 -0.03894131  0.00813608 -0.05162158  0.23581517
  -0.21543215  0.12695366 -0.17548977  0.27976434  0.30023171  0.09630712
   0.15459323  0.07807797  0.21997077  0.12111022  0.11815806  0.24153318
   0.07082826 -0.17578171  0.03554249 -0.05663612]]"
134,网上选课系统-进度," 开始的一些时间记不清了，不过因为过去的时间不长，我觉得有必要小小总结一下系统名称：网上选课系统开发方式：PHP+MYSQL具体经历：1、2009年末，在还没有结束紧张的考研的时候，学校公布了网上选毕设的通知，要在网上选，记得当天和在三楼一起自习的几个同学，mu、zhou、lin、guo、wang，都回到宿舍选课，并于当天经过一个一个查看，选了一个我觉得能做了的：基于WEB的网上选课系统2、2010年3月来学，第二周见老师，樊老师大致给几个跟她做毕设的同学介绍了情况，让大家好好做，不过也说明做不好也有分的。呵呵3、见了老师的第二周，我开始对系统总体设计，主要是功能，画了一个框图，还有列表，拿给老师看，樊老师说不错，并给出了改进意见4、又过了两周，我把完善后的功能流程图给老师看，老师对我说，做得非常好，做的好的话，你这个可以实际使用，要我好好做5、之后又去了两次，功能一步一步完善，等到5月中旬，老师说写代码吧，快到答辩时间了6、之后一直在E-311写代码，每天写的很火，樊老师也经常来看，也见到了王老师，两个老师一起给我说需求7、答辩前，樊老师和王老师叫我过来，说我可以毕业答辩得个优，说这个软件可能准备用，要我暑假继续做，同时给我很多鼓励，我也感觉信心满满8、答辩结束，老师又叫我过去，说已经申请了这个软件的开发经费，要我好好做，暑假在家做一点，8月10号来学做到20号，等新学期开学了，要用这个软件9、暑假回去，主要是玩玩游戏，看看小说，后来学了点Android，不过也写代码，很少的量。然后大概7月12号去了山东女朋友家，回来后也没做多少<!--以下是近期，比较清楚-->10、按照放假时和王老师说过的，8月10号我回到西安，8月12号入住新区E-320，开始开发11、之后每天有时开发近14小时以上，软件逐步完善12、时不时的樊老师、王老师给我说要添加的新功能，心态良好，代码量巨大13、8月20号，经过紧张的几次调试，忐忑不安的我让系统上了线，当时数据还出了问题，原因是我测试的时候改变了数据库的数据，上线时忘了改过来，QUDINGDIGN同学第一个使用本系统，记住他14、从8月20号到现在的8月28号，一直做系统的完善，包括后台管理员补选课、超级管理员的设置、普通管理员删除的限制等等。随着8月30号研究生开学报到日期的临近，老师们又一遇到问题就给我说，并且不时的说一些我觉得不必要的功能，自己心态稍微有点变化，好像碰到了自己的心理舒适区域，有时老师说问题时，心里稍有不适，不过都坚持了下来，觉得这其实就是真实工作，老师是客户，客户是衣食父母，是上帝，还是要按照他们所需来进行开发的，因此代码照需求进行，自己的心态也算有了磨练。15，到了今天，现在2010-08-28 下午18：17，做完了超级管理员模块，具有级联删除几个主要表的功能后，我突然觉的，这个能称为项目的大软件，在我一手的做需求，做分析，做设计，做代码，做测试的流程做下来，经历快4个月的历程后，就要结束，之后可能还有小问题，有BUG要解决，不过我感觉，是已经到了结束的时候了。。。经过这次的经历，感觉自己PHP的开发，MYSQL数据库，AJAX，JAVASCRPT，插件如：feckeditor,phpexcel,分页，等等都得到了快速的掌握，尤其是遇到新问题时，直接上网找答案的，快速解决问题的能力，有很大的提升，对自己提升极大，并且同时在对系统的美化过程中，页面设计水平也有所提高，呵呵，这是一次锻炼的机会，我抓住了这个机会，我为自己感到骄傲。老师这几天给我说过，要给我发补助，我好高兴啊，我想不管钱多钱少，这都是我人生第一笔靠自己实力挣的钱，我感到很兴奋，很快乐，也充满了对人生下一步走好的信心，我学习，我努力，我奋斗，我会变的越来越有实力，生活会越来越美好。。。。。","['网上', '选课', '系统', '进度', '开始', '一些', '时间', '记不清', '不过', '因为', '过去', '时间', '觉得', '必要', '小小', '总结', '一下', '系统', '名称', '网上', '选课', '系统', '开发方式', 'php', 'mysql', '具体', '经历', '2009', '年末', '没有', '结束', '紧张', '考研', '时候', '学校', '公布', '网上', '选毕设', '通知', '网上', '记得', '当天', '三楼', '一起', '自习', '几个', '同学', 'mu', 'zhou', 'lin', 'guo', 'wang', '回到', '宿舍', '选课', '当天', '经过', '一个', '一个', '查看', '一个', '觉得', '基于', 'web', '网上', '选课', '系统', '2010', '来学', '第二周', '老师', '老师', '大致', '几个', '毕设', '同学', '介绍', '情况', '大家', '好好', '不过', '说明', '不好', '呵呵', '老师', '第二周', '开始', '对系统', '总体设计', '主要', '功能', '一个', '框图', '还有', '列表', '拿给', '老师', '老师', '不错', '给出', '改进', '意见', '两周', '完善', '功能', '流程图', '老师', '老师', '非常', '的话', '这个', '可以', '实际', '使用', '好好', '之后', '两次', '功能', '一步', '一步', '完善', '等到', '中旬', '老师', '代码', '快到', '答辩', '时间', '之后', '一直', '311', '代码', '每天', '老师', '经常', '来看', '见到', '王老师', '两个', '老师', '一起', '需求', '答辩', '老师', '王老师', '过来', '可以', '毕业', '答辩', '得个', '这个', '软件', '可能', '准备', '暑假', '继续', '同时', '很多', '鼓励', '感觉', '信心', '满满', '答辩', '结束', '老师', '过去', '已经', '申请', '这个', '软件', '开发', '经费', '好好', '暑假', '在家', '一点', '10', '来学', '做到', '20', '新学期', '开学', '这个', '软件', '暑假', '回去', '主要', '玩玩', '游戏', '看看', '小说', '后来', 'android', '不过', '代码', '很少', '然后', '大概', '12', '山东', '女朋友', '回来', '多少', '--', '以下', '近期', '比较清楚', '--', '10', '按照', '放假', '王老师', '10', '回到', '西安', '12', '入住', '新区', '320', '开始', '开发', '11', '之后', '每天', '有时', '开发', '14', '小时', '以上', '软件', '逐步完善', '12', '时不时', '老师', '王老师', '添加', '功能', '心态', '良好', '代码', '巨大', '13', '20', '经过', '紧张', '几次', '调试', '忐忑不安', '系统', '当时', '数据', '问题', '原因', '测试', '时候', '改变', '数据库', '数据', '上线', '改过来', 'qudingdign', '同学', '第一个', '使用', '系统', '记住', '14', '20', '现在', '28', '一直', '系统', '完善', '包括', '后台', '管理员', '补选', '超级', '管理员', '设置', '普通', '管理员', '删除', '限制', '等等', '随着', '30', '研究生', '开学', '日期', '临近', '老师', '遇到', '问题', '并且', '不时', '一些', '觉得', '不必要', '功能', '自己', '心态', '稍微', '有点', '变化', '好像', '碰到', '自己', '心理', '舒适', '区域', '有时', '老师', '问题', '心里', '不适', '不过', '坚持', '下来', '觉得', '其实', '就是', '真实', '工作', '老师', '客户', '客户', '衣食父母', '上帝', '还是', '按照', '他们', '需来', '进行', '开发', '因此', '代码', '需求', '进行', '自己', '心态', '磨练', '15', '今天', '现在', '2010', '08', '28', '下午', '18', '17', '超级', '管理员', '模块', '具有', '级联', '删除', '几个', '主要', '功能', '突然', '这个', '称为', '项目', '软件', '一手', '需求', '分析', '设计', '代码', '测试', '流程', '下来', '经历', '历程', '就要', '结束', '之后', '可能', '还有', '问题', 'bug', '解决', '不过', '感觉', '已经', '结束', '时候', '经过', '这次', '经历', '感觉', '自己', 'php', '开发', 'mysql', '数据库', 'ajax', 'javascrpt', '插件', 'feckeditor', 'phpexcel', '分页', '等等', '得到', '快速', '掌握', '尤其', '遇到', '问题', '直接', '上网', '答案', '快速', '解决问题', '能力', '很大', '提升', '自己', '提升', '极大', '并且', '同时', '对系统', '美化', '过程', '页面', '设计', '水平', '有所提高', '呵呵', '这是', '一次', '锻炼', '机会', '抓住', '这个', '机会', '自己', '感到', '骄傲', '老师', '几天', '给我发', '补助', '高兴', '不管', '人生', '第一笔', '自己', '实力', '感到', '兴奋', '快乐', '充满', '人生', '一步', '信心', '学习', '努力', '奋斗', '我会', '越来越', '实力', '生活', '越来越', '美好']","[[-0.23856401 -0.11550299  0.20847422  0.15275213  0.25513173 -0.32322719
  -0.15003227  0.43478706 -0.01468404 -0.03091098 -0.05499611 -0.30937438
  -0.15238695  0.53181524  0.13019398 -0.10398081 -0.12683239 -0.0106483
  -0.07761111 -0.40099887  0.02043548  0.22526581 -0.01023778 -0.09285865
   0.09693865 -0.48684514 -0.2526021   0.06360542 -0.18134301 -0.05796097
   0.21949595  0.02723422 -0.01022782 -0.1198894  -0.10006376  0.29868187
  -0.12180189 -0.20661361  0.10002986 -0.68094508 -0.1450354  -0.51990972
  -0.03754387 -0.07377651 -0.14802711 -0.13875285 -0.24861021  0.41736122
  -0.15489048  0.35769409  0.16979208 -0.23606102 -0.09898331 -0.21295554
   0.04508415  0.34679119  0.20896442 -0.06134545  0.0865359  -0.08570886
   0.04336318  0.26205789  0.01721912  0.06956508 -0.34674864 -0.00699508
   0.04002575 -0.01989334 -0.21589144  0.39728704  0.10942665 -0.21638976
   0.35857228 -0.29906781  0.52175471  0.16729711  0.19444051 -0.13609647
  -0.23122148 -0.18648642 -0.06823997  0.005931   -0.06565176  0.31496378
  -0.33318635  0.18010954 -0.25724492  0.38121334  0.41724608  0.12255889
   0.26559202  0.11226665  0.31926474  0.16318549  0.16951913  0.3405752
   0.09608539 -0.26997529  0.0058494  -0.07399771]]"
136,php实现当前用户在线人数,"本文转自：http://www.php100.com/html/webkaifa/PHP/PHPyingyong/2010/0508/4462.html 原理：根据不同的IP统计出当前有多少人在线。实现方式：可以用数据库，也可以用文本。我这里用了文本实现。<?php/***@ Date         2010.04.07*@ Author       华夏之星 PHP100.com*@ Blog         http://hi.baidu.com/woaidelphi/blog*/$user_online = ""count.php""; //保存人数的文件touch($user_online);//如果没有此文件，则创建$timeout = 30;//30秒内没动作者,认为掉线$user_arr = file_get_contents($user_online);$user_arr = explode('#',rtrim($user_arr,'#'));print_r($user_arr);$temp = array();foreach($user_arr as $value){$user = explode("","",trim($value));if (($user[0] != getenv('REMOTE_ADDR')) && ($user[1] > time())) {//如果不是本用户IP并时间没有超时则放入到数组中array_push($temp,$user[0]."","".$user[1]);}}array_push($temp,getenv('REMOTE_ADDR')."","".(time() + ($timeout)).'#'); //保存本用户的信息$user_arr = implode(""#"",$temp);//写入文件$fp = fopen($user_online,""w"");flock($fp,LOCK_EX); //flock() 不能在NFS以及其他的一些网络文件系统中正常工作fputs($fp,$user_arr);flock($fp,LOCK_UN);fclose($fp);echo ""当前有"".count($temp).""人在线""; ?>  ","['php', '实现', '当前', '用户', '在线', '人数', '本文', '转自', 'http', 'www', 'php100', 'com', 'html', 'webkaifa', 'php', 'phpyingyong', '2010', '0508', '4462', 'html', '原理', '根据', '不同', 'ip', '统计', '当前', '多少', '在线', '实现', '方式', '可以', '数据库', '可以', '文本', '这里', '文本', '实现', 'php', 'date', '2010.04', '07', 'author', '华夏', '之星', 'php100', 'com', 'blog', 'http', 'hi', 'baidu', 'com', 'woaidelphi', 'blog', 'user', 'online', 'count', 'php', '保存', '人数', '文件', 'touch', 'user', 'online', '如果', '没有', '文件', '创建', 'timeout', '30', '30', '动作', '认为', '掉线', 'user', 'arr', 'file', 'get', 'contents', 'user', 'online', 'user', 'arr', 'explode', 'rtrim', 'user', 'arr', 'print', 'user', 'arr', 'temp', 'array', 'foreach', 'user', 'arr', 'as', 'value', 'user', 'explode', 'trim', 'value', 'if', 'user', 'getenv', 'remote', 'addr', '&&', 'user', 'time', '如果', '不是', '用户', 'ip', '时间', '没有', '超时', '放入', '数组', 'array', 'push', 'temp', 'user', 'user', 'array', 'push', 'temp', 'getenv', 'remote', 'addr', 'time', 'timeout', '保存', '用户', '信息', 'user', 'arr', 'implode', 'temp', '写入', '文件', 'fp', 'fopen', 'user', 'online', 'flock', 'fp', 'lock', 'ex', 'flock', '不能', 'nfs', '以及', '其他', '一些', '网络', '文件系统', '正常', '工作', 'fputs', 'fp', 'user', 'arr', 'flock', 'fp', 'lock', 'un', 'fclose', 'fp', 'echo', '当前', 'count', 'temp', '在线']","[[-2.30547628e-01 -1.20297048e-01  2.65483442e-01  1.93845612e-01
   2.42141189e-01 -4.01950370e-01 -1.18637837e-01  4.92327908e-01
  -5.50431251e-02 -1.16787395e-01 -5.84936105e-02 -3.90973832e-01
  -1.42096122e-01  5.53441165e-01  1.32209275e-01 -1.24746453e-01
  -1.27977429e-01  6.72124672e-03 -3.49572843e-02 -4.88669408e-01
  -3.73820847e-02  2.72597698e-01 -7.45614556e-02 -2.17920981e-01
   4.49553706e-02 -4.68230378e-01 -3.25892190e-01  5.93623729e-02
  -2.29158734e-01 -7.71596599e-02  1.69892641e-01  5.38964276e-02
   2.16134489e-02 -1.22886045e-01 -2.01396534e-01  3.45667822e-01
  -1.97126269e-01 -2.76656920e-01  7.00100272e-02 -7.06919761e-01
  -1.16284154e-01 -5.85490540e-01 -5.61566954e-02 -1.39174096e-02
  -1.19595904e-01 -2.60045202e-01 -2.74145705e-01  3.78062940e-01
  -1.12824168e-01  4.48320975e-01  1.13288969e-01 -2.91397725e-01
  -7.12850662e-02 -1.97699663e-01 -2.90714692e-02  4.13411575e-01
   1.55498912e-01 -1.06114276e-01  1.29015721e-01 -1.45115442e-01
   1.30792402e-01  2.28417982e-01  5.83274323e-03  9.26897713e-02
  -3.62772881e-01  5.70891989e-02  1.92388211e-02 -5.08552314e-04
  -2.75382449e-01  4.43529752e-01  8.11882079e-02 -1.73361229e-01
   4.08481204e-01 -3.30625438e-01  5.74226068e-01  3.04975288e-01
   1.97895676e-01 -1.95917087e-01 -2.86809703e-01 -1.52386099e-01
  -2.75326619e-02  5.91802559e-02 -1.38681239e-01  4.03198119e-01
  -3.62735306e-01  1.94170784e-01 -2.98267202e-01  4.95408576e-01
   5.32332846e-01  1.77552085e-01  2.14793435e-01  1.21186518e-01
   3.43484132e-01  1.77744644e-01  2.03575581e-01  4.02978359e-01
   1.03322824e-01 -2.83566877e-01  4.82045733e-02 -1.20583784e-01]]"
138,获取服务器传来的数据-必须用JS去空格,"今天早上到现在，一直在搞一个很愚蠢的问题，竟然一直没发现如果$str="""";$str = ""$str-$sno"";这样下来，$str前面会有个空格，js获取此值后，必须去掉空格去空格函数rstr=rstr.replace(/(^\s*)|(\s*$)/g,"""");另：去左空格replace(/(^\s*)/g, """");去右空格replace(/(\s*$)/g, """");另外，如果进行程序流程的一步一步核对，在if处停下是，一定要同时输出if里面的两个值，进行对比，或者在前面加上#来看是否有空格总结一下1、凡是用字符串连接的地方，可能就会产生空格，再拆分的时候，就出现了与原来不想等情况，因此，一定要去掉前后空格2、尤其在获得从服务器传来的数据的时候，JS一定要注意空格的发生可能","['获取', '服务器', '传来', '数据', '必须', 'js', '空格', '今天', '早上', '现在', '一直', '一个', '愚蠢', '问题', '竟然', '一直', '发现', '如果', 'str', 'str', 'str', 'sno', '这样', '下来', 'str', '前面', '空格', 'js', '获取', '此值', '必须', '去掉', '空格', '空格', '函数', 'rstr', 'rstr', 'replace', '空格', 'replace', '空格', 'replace', '另外', '如果', '进行', '程序流程', '一步', '一步', '核对', 'if', '停下', '一定', '同时', '输出', 'if', '里面', '两个', '进行', '对比', '或者', '前面', '加上', '来看', '是否', '空格', '总结', '一下', '凡是', '字符串', '连接', '地方', '可能', '产生', '空格', '拆分', '时候', '出现', '原来', '不想', '情况', '因此', '一定', '去掉', '前后', '空格', '尤其', '获得', '服务器', '传来', '数据', '时候', 'js', '一定', '注意', '空格', '发生', '可能']","[[-2.32184845e-01 -1.21442094e-01  2.28469976e-01  1.19487762e-01
   3.02910779e-01 -3.36791554e-01 -1.72438523e-01  4.63307208e-01
  -1.40549992e-02 -5.56740906e-02 -4.48093782e-02 -3.30197861e-01
  -1.70598472e-01  5.63780295e-01  1.59925461e-01 -9.60476536e-02
  -1.46453148e-01 -6.44285686e-03 -1.00274756e-01 -4.91718190e-01
  -3.51457205e-04  2.22675406e-01 -8.90889131e-03 -1.20584020e-01
   1.10392329e-01 -5.14326208e-01 -2.77473945e-01  7.15318159e-02
  -2.22044688e-01 -6.47423913e-02  2.07280931e-01  2.56370608e-04
  -8.83383582e-03 -1.39676280e-01 -1.14265762e-01  3.08725854e-01
  -1.53557829e-01 -2.32324572e-01  1.07362355e-01 -7.45050572e-01
  -1.76527136e-01 -5.91150711e-01 -5.40695512e-02 -4.63072706e-02
  -1.55582432e-01 -1.70959132e-01 -2.21609133e-01  4.13789702e-01
  -2.02828800e-01  4.24348508e-01  1.95092778e-01 -2.47650075e-01
  -1.34395102e-01 -1.91731775e-01  4.27368197e-02  3.70482282e-01
   2.13537705e-01 -7.32937346e-02  8.75375448e-02 -1.11501153e-01
   4.96026850e-02  2.74622390e-01  2.34396029e-02  8.85858322e-02
  -3.80305051e-01 -2.87642733e-04  5.70568882e-02 -3.95581236e-02
  -2.65883197e-01  4.25900235e-01  1.43756866e-01 -2.25039630e-01
   3.76931581e-01 -3.08038969e-01  5.53914666e-01  1.88652959e-01
   1.58469985e-01 -1.29044279e-01 -2.97928195e-01 -1.63257086e-01
  -3.72384088e-02  1.33553904e-02 -8.13220777e-02  3.24244594e-01
  -3.49770758e-01  2.07818743e-01 -2.81473638e-01  3.99945300e-01
   4.49504808e-01  1.26689643e-01  2.85719039e-01  1.13644554e-01
   3.61642842e-01  1.86195542e-01  1.82934951e-01  3.35308195e-01
   1.09604611e-01 -3.17402162e-01 -7.04772642e-02 -9.99221416e-02]]"
142,mysql-修改root密码的方法,首先以root账户登录命令行Enter password: **************Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 384Server version: 5.0.51b-community-nt-log MySQL Community Edition (GPL)Type 'help;' or '\h' for help. Type '\c' to clear the buffer//就下面这一行而已，把单引号里面的内容改成自己的新密码，OK.mysql> set password = password('newpassword');,"['mysql', '修改', 'root', '密码', '方法', '首先', 'root', '账户', '登录', '命令行', 'enter', 'password', 'welcome', 'to', 'the', 'mysql', 'monitor', 'commands', 'end', 'with', 'or', 'your', 'mysql', 'connection', 'id', 'is', '384server', 'version', '5.0', '51b', 'community', 'nt', 'log', 'mysql', 'community', 'edition', 'gpl', 'type', 'help', 'or', 'for', 'help', 'type', 'to', 'clear', 'the', 'buffer', '下面', '一行', '而已', '单引号', '里面', '内容', '改成', '自己', '新密码', 'ok', 'mysql', 'set', 'password', 'password', 'newpassword']","[[-0.20709084 -0.09444889  0.23773095  0.12422649  0.25865947 -0.33880258
  -0.10101216  0.44116903 -0.07731768 -0.13595485 -0.03685348 -0.34990408
  -0.11955403  0.47079451  0.14894079 -0.08768823 -0.10181722 -0.01313095
  -0.0486816  -0.49480477 -0.05342916  0.24267965 -0.06610475 -0.22258524
   0.04381608 -0.41578825 -0.2947104   0.02891018 -0.22084823 -0.08561656
   0.13229666  0.01501243 -0.00661035 -0.10662792 -0.16972972  0.30984857
  -0.20392826 -0.26883838  0.05956354 -0.65886655 -0.10602981 -0.54330885
  -0.06865936  0.0172059  -0.11173665 -0.22931523 -0.21287675  0.30504703
  -0.17044782  0.44142908  0.11536595 -0.25069713 -0.11952363 -0.15248773
  -0.0326339   0.35207311  0.11131055 -0.0842536   0.11579536 -0.13222065
   0.10173881  0.18941576  0.01027915  0.07503287 -0.33869076  0.05248083
   0.05372576 -0.02111167 -0.29113754  0.39273742  0.08584416 -0.13847023
   0.34467309 -0.29481706  0.49835006  0.27445111  0.12526596 -0.15560606
  -0.31830478 -0.10048686  0.02618852  0.06526968 -0.11768851  0.36463811
  -0.28777064  0.19981627 -0.2529709   0.42147302  0.45858714  0.16170493
   0.19673706  0.09209413  0.33873035  0.17973431  0.17748533  0.31317897
   0.10897179 -0.29362656 -0.00111    -0.12458938]]"
144,PHP验证码-类," 原文地址：http://www.windsfly.cn/blog/article.asp?id=10131、验证码类文件 CreateImg.class.php<?php/*** @version 1.0* @author   Ben* @date 2008-1-30* @email jinmaodao116@163.com* @验证码文件类* int function imagecolorallocate(resource image, int red, int green, int blue) //为一幅图像分配颜色* bool function imagefilledrectangle(resource image, int x1, int y1, int x2, int y2, int color) //画一矩形并填充* bool function imagerectangle(resource image, int x1, int y1, int x2, int y2, int col)   //画一个矩形* bool function imagesetpixel(resource image, int x, int y, int color)   //画一个单一像素*/class ValidationCode{private $width,$height,$codenum;public $checkcode;     //产生的验证码private $checkimage;    //验证码图片private $disturbColor = ''; //干扰像素/** 参数：（宽度，高度，字符个数）*/function __construct($width='80',$height='20',$codenum='4'){   $this->width=$width;   $this->height=$height;   $this->codenum=$codenum;}function outImg(){   //输出头   $this->outFileHeader();   //产生验证码   $this->createCode();   //产生图片   $this->createImage();   //设置干扰像素   $this->setDisturbColor();   //往图片上写验证码   $this->writeCheckCodeToImage();   imagepng($this->checkimage);   imagedestroy($this->checkimage);}/*   * @brief 输出头   */private function outFileHeader(){   header (""Content-type: image/png"");}/**   * 产生验证码   */private function createCode(){   $this->checkcode = strtoupper(substr(md5(rand()),0,$this->codenum));}/**   * 产生验证码图片   */private function createImage(){   $this->checkimage = @imagecreate($this->width,$this->height);   $back = imagecolorallocate($this->checkimage,255,255,255);   $border = imagecolorallocate($this->checkimage,0,0,0);   imagefilledrectangle($this->checkimage,0,0,$this->width - 1,$this->height - 1,$back); // 白色底   imagerectangle($this->checkimage,0,0,$this->width - 1,$this->height - 1,$border);   // 黑色边框}/**   * 设置图片的干扰像素   */private function setDisturbColor(){   for ($i=0;$i<=200;$i++)   {    $this->disturbColor = imagecolorallocate($this->checkimage, rand(0,255), rand(0,255), rand(0,255));    imagesetpixel($this->checkimage,rand(2,128),rand(2,38),$this->disturbColor);   }}/**   *   * 在验证码图片上逐个画上验证码   *   */private function writeCheckCodeToImage(){   for ($i=0;$i<=$this->codenum;$i++)   {    $bg_color = imagecolorallocate ($this->checkimage, rand(0,255), rand(0,128), rand(0,255));    $x = floor($this->width/$this->codenum)*$i;    $y = rand(0,$this->height-15);    imagechar ($this->checkimage, rand(5,8), $x, $y, $this->checkcode[$i], $bg_color);   }}function __destruct(){   unset($this->width,$this->height,$this->codenum);}}?> 2、包含文件 imgcode.php <?phpsession_start();require_once('CreateImg.class.php');$image = new ValidationCode('80','20','4');    //图片长度、宽度、字符个数$image->outImg();$_SESSION['validationcode'] = $image->checkcode; //存贮验证码到 $_SESSION 中?> 3、前台文件 image.php<?phpsession_start();$test = $_POST['test'];$test = strtoupper(trim($test));$submit = $_POST['submit'];if(isset($submit)){if($test==$_SESSION['validationcode']){   echo 'true';} else {   echo 'false';}}?><html><head><title>Image</title><meta http-equiv=""content-type"" content=""text/html;charset=utf-8""><script language=""javascript"">function newgdcode(obj,url) {obj.src = url+ '?nowtime=' + new Date().getTime();//后面传递一个随机参数，否则在IE7和火狐下，不刷新图片}</script><body><img src=""imgcode.php"" alt=""看不清楚，换一张"" align=""absmiddle"" style=""cursor: pointer;"" onclick=""javascript:newgdcode(this,""http://blog.51cto.com/viewpic.php?refimg="" + this.src);"" /><form method=""POST"" name=""form1"" action=""image.php""><input type=""text"" name=""test""><br /><input type=""submit"" name=""submit"" value=""提交""></form></body></head></html> ","['php', '验证码', '原文', '地址', 'http', 'www', 'windsfly', 'cn', 'blog', 'article', 'asp', 'id', '10131', '验证码', '文件', 'createimg', 'class', 'php', 'php', 'version', '1.0', 'author', 'ben', 'date', '2008', '30', 'email', 'jinmaodao116', '163', 'com', '验证码', '文件', 'int', 'function', 'imagecolorallocate', 'resource', 'image', 'int', 'red', 'int', 'green', 'int', 'blue', '一幅', '图像', '分配', '颜色', 'bool', 'function', 'imagefilledrectangle', 'resource', 'image', 'int', 'x1', 'int', 'y1', 'int', 'x2', 'int', 'y2', 'int', 'color', '画一', '矩形', '填充', 'bool', 'function', 'imagerectangle', 'resource', 'image', 'int', 'x1', 'int', 'y1', 'int', 'x2', 'int', 'y2', 'int', 'col', '一个', '矩形', 'bool', 'function', 'imagesetpixel', 'resource', 'image', 'int', 'int', 'int', 'color', '一个', '单一', '像素', 'class', 'validationcode', 'private', 'width', 'height', 'codenum', 'public', 'checkcode', '产生', '验证码', 'private', 'checkimage', '验证码', '图片', 'private', 'disturbcolor', '干扰', '像素', '参数', '宽度', '高度', '字符', '个数', 'function', '__', 'construct', 'width', '80', 'height', '20', 'codenum', 'this', 'width', 'width', 'this', 'height', 'height', 'this', 'codenum', 'codenum', 'function', 'outimg', '输出', 'this', 'outfileheader', '产生', '验证码', 'this', 'createcode', '产生', '图片', 'this', 'createimage', '设置', '干扰', '像素', 'this', 'setdisturbcolor', '图片', '验证码', 'this', 'writecheckcodetoimage', 'imagepng', 'this', 'checkimage', 'imagedestroy', 'this', 'checkimage', 'brief', '输出', 'private', 'function', 'outfileheader', 'header', 'content', 'type', 'image', 'png', '产生', '验证码', 'private', 'function', 'createcode', 'this', 'checkcode', 'strtoupper', 'substr', 'md5', 'rand', 'this', 'codenum', '产生', '验证码', '图片', 'private', 'function', 'createimage', 'this', 'checkimage', 'imagecreate', 'this', 'width', 'this', 'height', 'back', 'imagecolorallocate', 'this', 'checkimage', '255', '255', '255', 'border', 'imagecolorallocate', 'this', 'checkimage', 'imagefilledrectangle', 'this', 'checkimage', 'this', 'width', 'this', 'height', 'back', '白色', 'imagerectangle', 'this', 'checkimage', 'this', 'width', 'this', 'height', 'border', '黑色', '边框', '设置', '图片', '干扰', '像素', 'private', 'function', 'setdisturbcolor', 'for', '200', '++', 'this', 'disturbcolor', 'imagecolorallocate', 'this', 'checkimage', 'rand', '255', 'rand', '255', 'rand', '255', 'imagesetpixel', 'this', 'checkimage', 'rand', '128', 'rand', '38', 'this', 'disturbcolor', '验证码', '图片', '逐个', '画上', '验证码', 'private', 'function', 'writecheckcodetoimage', 'for', 'this', 'codenum', '++', 'bg', 'color', 'imagecolorallocate', 'this', 'checkimage', 'rand', '255', 'rand', '128', 'rand', '255', 'floor', 'this', 'width', 'this', 'codenum', 'rand', 'this', 'height', '15', 'imagechar', 'this', 'checkimage', 'rand', 'this', 'checkcode', 'bg', 'color', 'function', '__', 'destruct', 'unset', 'this', 'width', 'this', 'height', 'this', 'codenum', '包含', '文件', 'imgcode', 'php', 'phpsession', 'start', 'require', 'once', 'createimg', 'class', 'php', 'image', 'new', 'validationcode', '80', '20', '图片', '长度', '宽度', '字符', '个数', 'image', 'outimg', 'session', 'validationcode', 'image', 'checkcode', '存贮', '验证码', 'session', '前台', '文件', 'image', 'php', 'phpsession', 'start', 'test', 'post', 'test', 'test', 'strtoupper', 'trim', 'test', 'submit', 'post', 'submit', 'if', 'isset', 'submit', 'if', 'test', 'session', 'validationcode', 'echo', 'true', 'else', 'echo', 'false', 'html', 'head', 'title', 'image', 'title', 'meta', 'http', 'equiv', 'content', 'type', 'content', 'text', 'html', 'charset', 'utf', 'script', 'language', 'javascript', 'function', 'newgdcode', 'obj', 'url', 'obj', 'src', 'url', 'nowtime', 'new', 'date', 'gettime', '后面', '传递', '一个', '随机', '参数', '否则', 'ie7', '火狐', '刷新', '图片', 'script', 'body', 'img', 'src', 'imgcode', 'php', 'alt', '看不清楚', '一张', 'align', 'absmiddle', 'style', 'cursor', 'pointer', 'onclick', 'javascript', 'newgdcode', 'this', 'http', 'blog.51', 'cto', 'com', 'viewpic', 'php', 'refimg', 'this', 'src', 'form', 'method', 'post', 'name', 'form1', 'action', 'image', 'php', 'input', 'type', 'text', 'name', 'test', 'br', 'input', 'type', 'submit', 'name', 'submit', 'value', '提交', 'form', 'body', 'head', 'html']","[[-2.50185838e-01 -6.91328566e-02  3.85931920e-01  1.00701880e-01
   3.19417319e-01 -3.95327412e-01  3.21803922e-03  4.06118220e-01
  -1.60019327e-01 -2.25492018e-01 -1.31200776e-02 -4.78751766e-01
  -5.35135044e-02  3.82812147e-01  2.11694326e-01 -7.70078084e-02
  -1.17678987e-01 -9.32191840e-02 -5.79980181e-02 -6.14291156e-01
  -8.04361227e-02  2.72167905e-01 -1.13496974e-01 -2.84086326e-01
  -5.98009041e-02 -3.78840708e-01 -3.49974803e-01 -5.37889579e-02
  -3.05741155e-01 -1.64154626e-01  4.98942822e-02 -1.09130086e-02
  -1.36459823e-02 -6.69882645e-02 -2.49498680e-01  3.40632598e-01
  -2.84888981e-01 -3.43127387e-01  3.84467339e-04 -6.88341476e-01
  -9.21849879e-02 -6.45085471e-01 -1.20857226e-01  2.54661495e-02
  -7.24362849e-02 -2.79006980e-01 -2.95329948e-01  2.27256290e-01
  -2.45022096e-01  5.90684051e-01  7.73607041e-02 -2.52203446e-01
  -7.71055645e-02 -1.91700918e-01 -8.68301393e-02  3.36471758e-01
   7.00716516e-03 -6.70860201e-02  1.18175304e-01 -1.29597597e-01
   1.00711272e-01  1.52063670e-01  1.49498101e-02  4.90411973e-02
  -3.31228028e-01  9.70378428e-02  1.05638384e-01 -2.01979741e-03
  -2.95685154e-01  4.65883237e-01  5.46447577e-02 -1.06657394e-01
   3.69342564e-01 -3.29787725e-01  5.51191252e-01  3.55305688e-01
   1.49431734e-01 -1.56071426e-01 -3.17512790e-01 -1.61090414e-01
   1.36158322e-01  1.92880551e-01 -2.11982200e-01  4.17737716e-01
  -3.57368272e-01  2.55530560e-01 -2.92334279e-01  4.83661585e-01
   5.59676872e-01  2.05416253e-01  1.59569037e-01  4.70629049e-02
   4.06803593e-01  1.94292265e-01  1.94069138e-01  3.73258243e-01
   1.06071554e-01 -3.49594037e-01  5.18051406e-02 -1.41153328e-01]]"
146,Fckeditor-动态增减按钮的方法,"在使用fckeditor 的过程中，经常需要根据实际需要来设置工具栏，显示或隐藏工具栏上的部分按钮。 在默认情况下，fckeditor显示了全部的工具栏。在fckconfig.js中有两个工具栏的配置方案，一个是Default，一个是Basic。我们可以按照他的格式自定义几个选项。FCKConfig.ToolbarSets[""c1""] = [ ['Source','DocProps','-','Save','NewPage','Preview','-','Templates'], ['Cut','Copy','Paste','PasteText','PasteWord','-','Print','SpellCheck'], ['Undo','Redo','-','Find','Replace','-','SelectAll','RemoveFormat'], '/', ['Bold','Italic','Underline','StrikeThrough','-','Subscript','Superscript'], ['JustifyLeft','JustifyCenter','JustifyRight','JustifyFull'], ['Link','Unlink','Anchor'], '/', ['Style','FontFormat','FontName','FontSize'], ['TextColor','BGColor'], ['FitWindow','ShowBlocks','-','About']  // No comma for the last row.] ; 在页面中使用fckeditor时可以写成这样var oFCKeditor = new FCKeditor( 'FCKeditor1' ) ;oFCKeditor.ToolbarSet=""c1"";  ","['fckeditor', '动态', '增减', '按钮', '方法', '使用', 'fckeditor', '过程', '经常', '需要', '根据', '实际', '需要', '设置', '工具栏', '显示', '隐藏', '工具栏', '部分', '按钮', '默认', '情况', 'fckeditor', '显示', '全部', '工具栏', 'fckconfig', 'js', '中有', '两个', '工具栏', '配置', '方案', '一个', 'default', '一个', 'basic', '我们', '可以', '按照', '格式', '自定义', '几个', '选项', 'fckconfig', 'toolbarsets', 'c1', 'source', 'docprops', 'save', 'newpage', 'preview', 'templates', 'cut', 'copy', 'paste', 'pastetext', 'pasteword', 'print', 'spellcheck', 'undo', 'redo', 'find', 'replace', 'selectall', 'removeformat', 'bold', 'italic', 'underline', 'strikethrough', 'subscript', 'superscript', 'justifyleft', 'justifycenter', 'justifyright', 'justifyfull', 'link', 'unlink', 'anchor', 'style', 'fontformat', 'fontname', 'fontsize', 'textcolor', 'bgcolor', 'fitwindow', 'showblocks', 'about', 'no', 'comma', 'for', 'the', 'last', 'row', '页面', '使用', 'fckeditor', '可以', '写成', '这样', 'var', 'ofckeditor', 'new', 'fckeditor', 'fckeditor1', 'ofckeditor', 'toolbarset', 'c1']","[[-2.06610016e-01 -1.18137052e-01  1.93373803e-01  1.19819721e-01
   2.70069074e-01 -2.96116936e-01 -1.58001123e-01  4.20832597e-01
  -1.42864035e-02 -4.09718854e-02 -4.37588321e-02 -2.91251279e-01
  -1.65476838e-01  5.08684818e-01  1.38986687e-01 -8.45996173e-02
  -1.30371411e-01 -3.73416673e-03 -9.26843907e-02 -4.28597282e-01
   4.36294690e-03  2.07259192e-01 -3.99658559e-04 -1.05106910e-01
   1.03136165e-01 -4.71581861e-01 -2.49745740e-01  6.54453591e-02
  -1.96618207e-01 -5.51511008e-02  1.95749742e-01  5.53327503e-03
  -8.62901715e-03 -1.30119173e-01 -1.03820666e-01  2.82750440e-01
  -1.36260717e-01 -2.04059375e-01  9.79681160e-02 -6.66291200e-01
  -1.53701010e-01 -5.20610512e-01 -4.27030182e-02 -4.31174022e-02
  -1.41133505e-01 -1.41146692e-01 -2.03252351e-01  3.81557790e-01
  -1.76235502e-01  3.68603510e-01  1.83220044e-01 -2.28273293e-01
  -1.18240818e-01 -1.79399969e-01  4.63992693e-02  3.33856440e-01
   1.99188776e-01 -5.98611968e-02  8.57349563e-02 -9.84272212e-02
   4.22160243e-02  2.48342886e-01  2.26262589e-02  8.14464744e-02
  -3.41647795e-01 -4.92730830e-03  4.76844071e-02 -2.73523806e-02
  -2.33821316e-01  3.82487486e-01  1.27115827e-01 -2.03714347e-01
   3.41224456e-01 -2.82075855e-01  4.99250404e-01  1.56137054e-01
   1.50863118e-01 -1.14289622e-01 -2.67286632e-01 -1.53773314e-01
  -4.35354517e-02  7.55563035e-03 -6.57887623e-02  2.89543459e-01
  -3.15586434e-01  1.84230108e-01 -2.50045674e-01  3.56802945e-01
   3.99362273e-01  1.13858612e-01  2.62665753e-01  1.02671391e-01
   3.20492200e-01  1.69989131e-01  1.65548220e-01  3.10777808e-01
   9.57634278e-02 -2.75857534e-01 -5.25693485e-02 -9.18397974e-02]]"
149,phpexcel-自己写的几个非常好用的函数," 在写一个用到PHPEXCEL的程序时，发现总是得去找相关的PHPEXCEL操作的代码复制过来，下次再找，影响了速度不说，打乱了原来的程序思路，于是干脆把常用操作写成了函数，函数名简单易记，这样就不用考虑PHPEXCEL的相关问题了，更容易回到原来的程序开发思路上，顺风顺雨，一路帆风，其实应该自己整理成一个类的，这样更好用了$objExcel->setActiveSheetIndex(0);$objActSheet = $objExcel->getActiveSheet(); //函数：设置borderfunction setBorder($index){    global $objActSheet;    $objActSheet->getStyle($index)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );    $objActSheet->getStyle($index)->getBorders()->getLeft()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );    $objActSheet->getStyle($index)->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );    $objActSheet->getStyle($index)->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN );    $objActSheet->getStyle($index)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);    $objActSheet->getStyle($index)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);    $objActSheet->getStyle($index)->getAlignment()->setWrapText(true);}//设置宽度function setWidth($index,$width=5){    global $objActSheet;    $objActSheet->getColumnDimension(gbkToUtf8($index))->setWidth($width);}//设置背景function setBg($index){    global $objActSheet;    $objActSheet->getStyle($index)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_PATTERN_DARKUP);    $objActSheet->getStyle($index)->getFill()->getStartColor()->setARGB('FFFFFFFF' );}//设置值function setValue($index,$value){    global $objActSheet;    $objActSheet->setCellValue($index,gbkToUtf8($value) );}//合并单元格function mergeCell($fc,$lc){    global $objActSheet;    $objActSheet->mergeCells($fc."":"".$lc);}  ","['phpexcel', '自己', '几个', '非常', '好用', '函数', '一个', '用到', 'phpexcel', '程序', '发现', '总是', '相关', 'phpexcel', '操作', '代码', '复制', '过来', '下次', '影响', '速度', '不说', '打乱', '原来', '程序', '思路', '于是', '干脆', '常用', '操作', '写成', '函数', '函数', '简单', '易记', '这样', '不用', '考虑', 'phpexcel', '相关', '问题', '容易', '回到', '原来', '程序开发', '思路', '顺风', '顺雨', '一路', '帆风', '其实', '应该', '自己', '整理', '一个', '这样', '更好', 'objexcel', 'setactivesheetindex', 'objactsheet', 'objexcel', 'getactivesheet', '函数', '设置', 'borderfunction', 'setborder', 'index', 'global', 'objactsheet', 'objactsheet', 'getstyle', 'index', 'getborders', 'gettop', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objactsheet', 'getstyle', 'index', 'getborders', 'getleft', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objactsheet', 'getstyle', 'index', 'getborders', 'getright', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objactsheet', 'getstyle', 'index', 'getborders', 'getbottom', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objactsheet', 'getstyle', 'index', 'getalignment', 'sethorizontal', 'phpexcel', 'style', 'alignment', 'horizontal', 'center', 'objactsheet', 'getstyle', 'index', 'getalignment', 'setvertical', 'phpexcel', 'style', 'alignment', 'vertical', 'center', 'objactsheet', 'getstyle', 'index', 'getalignment', 'setwraptext', 'true', '设置', '宽度', 'function', 'setwidth', 'index', 'width', 'global', 'objactsheet', 'objactsheet', 'getcolumndimension', 'gbktoutf8', 'index', 'setwidth', 'width', '设置', '背景', 'function', 'setbg', 'index', 'global', 'objactsheet', 'objactsheet', 'getstyle', 'index', 'getfill', 'setfilltype', 'phpexcel', 'style', 'fill', 'fill', 'pattern', 'darkup', 'objactsheet', 'getstyle', 'index', 'getfill', 'getstartcolor', 'setargb', 'ffffffff', '设置', 'function', 'setvalue', 'index', 'value', 'global', 'objactsheet', 'objactsheet', 'setcellvalue', 'index', 'gbktoutf8', 'value', '合并', '单元格', 'function', 'mergecell', 'fc', 'lc', 'global', 'objactsheet', 'objactsheet', 'mergecells', 'fc', 'lc']","[[-0.22583196 -0.11277756  0.23842044  0.14192046  0.25750254 -0.34918613
  -0.10751328  0.42218191 -0.04215043 -0.10645491 -0.03453527 -0.34388489
  -0.14022248  0.51703869  0.13307401 -0.09875855 -0.1301602  -0.01685316
  -0.06138805 -0.45725422 -0.03771833  0.25681576 -0.04682456 -0.17057112
   0.05954814 -0.46851925 -0.27842634  0.04118793 -0.21676085 -0.07900075
   0.18097186  0.01139449 -0.00659485 -0.11363134 -0.14389241  0.30300793
  -0.18516543 -0.25420774  0.08762413 -0.6756172  -0.12002946 -0.55878251
  -0.06667803 -0.01362689 -0.14295496 -0.21280882 -0.21099585  0.35814953
  -0.18442727  0.42961197  0.13464812 -0.23892827 -0.11407529 -0.17498561
  -0.01290688  0.37667049  0.16488083 -0.07913518  0.11705749 -0.12952989
   0.06947136  0.21029216  0.00813563  0.07711863 -0.3522262   0.028574
   0.04157037 -0.04405716 -0.26938781  0.40107546  0.1010523  -0.17169922
   0.35386017 -0.31382441  0.52282679  0.22126555  0.15439804 -0.15279015
  -0.30264125 -0.12309995  0.00579003  0.06128987 -0.11036718  0.35152379
  -0.31852538  0.19216526 -0.26296388  0.40990614  0.43860022  0.14980031
   0.22710033  0.08641961  0.3348527   0.16227892  0.16824797  0.34137113
   0.11920172 -0.29602248 -0.0088272  -0.09417561]]"
151,PHP操作EXCEL相关,"phpExcel，操作excel很方便，尤其是可以方便的加入图片，支持jpg gif png格式。下载地址：http://www.codeplex.com/PHPExcel下面是总结的几个使用方法include ‘PHPExcel.php’;include ‘PHPExcel/Writer/Excel2007.php’;//或者include ‘PHPExcel/Writer/Excel5.php’; 用于输出.xls的创建一个excel$objPHPExcel = new PHPExcel();保存excel—2007格式$objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);//或者$objWriter = new PHPExcel_Writer_Excel5($objPHPExcel); 非2007格式$objWriter->save(”xxx.xlsx”);直接输出到浏览器$objWriter = new PHPExcel_Writer_Excel5($objPHPExcel);header(”Pragma: public”);header(”Expires: 0″);header(”Cache-Control:must-revalidate, post-check=0, pre-check=0″);header(”Content-Type:application/force-download”);header(”Content-Type:application/vnd.ms-execl”);header(”Content-Type:application/octet-stream”);header(”Content-Type:application/download”);;header(’Content-Disposition:attachment;filename=”resume.xls”‘);header(”Content-Transfer-Encoding:binary”);$objWriter->save(’php://output’);——————————————————————————————————————–设置excel的属性：创建人$objPHPExcel->getProperties()->setCreator(”Maarten Balliauw”);最后修改人$objPHPExcel->getProperties()->setLastModifiedBy(”Maarten Balliauw”);标题$objPHPExcel->getProperties()->setTitle(”Office 2007 XLSX Test Document”);题目$objPHPExcel->getProperties()->setSubject(”Office 2007 XLSX Test Document”);描述$objPHPExcel->getProperties()->setDescription(”Test document for Office 2007 XLSX, generated using PHP classes.”);关键字$objPHPExcel->getProperties()->setKeywords(”office 2007 openxml php”);种类$objPHPExcel->getProperties()->setCategory(”Test result file”);——————————————————————————————————————–设置当前的sheet$objPHPExcel->setActiveSheetIndex(0);设置sheet的name$objPHPExcel->getActiveSheet()->setTitle(’Simple’);设置单元格的值$objPHPExcel->getActiveSheet()->setCellValue(’A1′, ‘String’);$objPHPExcel->getActiveSheet()->setCellValue(’A2′, 12);$objPHPExcel->getActiveSheet()->setCellValue(’A3′, true);$objPHPExcel->getActiveSheet()->setCellValue(’C5′, ‘=SUM(C2:C4)’);$objPHPExcel->getActiveSheet()->setCellValue(’B8′, ‘=MIN(B2:C5)’);合并单元格$objPHPExcel->getActiveSheet()->mergeCells(’A18:E22′);分离单元格$objPHPExcel->getActiveSheet()->unmergeCells(’A28:B28′);保护cell$objPHPExcel->getActiveSheet()->getProtection()->setSheet(true); // Needs to be set to true in order to enable any worksheet protection!$objPHPExcel->getActiveSheet()->protectCells(’A3:E13′, ‘PHPExcel’);设置格式// Set cell number formatsecho date(’H:i:s’) . ” Set cell number formats\n”;$objPHPExcel->getActiveSheet()->getStyle(’E4′)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_EUR_SIMPLE);$objPHPExcel->getActiveSheet()->duplicateStyle( $objPHPExcel->getActiveSheet()->getStyle(’E4′), ‘E5:E13′ );设置宽width// Set column widths$objPHPExcel->getActiveSheet()->getColumnDimension(’B’)->setAutoSize(true);$objPHPExcel->getActiveSheet()->getColumnDimension(’D’)->setWidth(12);设置font$objPHPExcel->getActiveSheet()->getStyle(’B1′)->getFont()->setName(’Candara’);$objPHPExcel->getActiveSheet()->getStyle(’B1′)->getFont()->setSize(20);$objPHPExcel->getActiveSheet()->getStyle(’B1′)->getFont()->setBold(true);$objPHPExcel->getActiveSheet()->getStyle(’B1′)->getFont()->setUnderline(PHPExcel_Style_Font::UNDERLINE_SINGLE);$objPHPExcel->getActiveSheet()->getStyle(’B1′)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_WHITE);$objPHPExcel->getActiveSheet()->getStyle(’E1′)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_WHITE);$objPHPExcel->getActiveSheet()->getStyle(’D13′)->getFont()->setBold(true);$objPHPExcel->getActiveSheet()->getStyle(’E13′)->getFont()->setBold(true);设置align$objPHPExcel->getActiveSheet()->getStyle(’D11′)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);$objPHPExcel->getActiveSheet()->getStyle(’D12′)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);$objPHPExcel->getActiveSheet()->getStyle(’D13′)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);$objPHPExcel->getActiveSheet()->getStyle(’A18′)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY);//垂直居中$objPHPExcel->getActiveSheet()->getStyle(’A18′)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);设置column的border$objPHPExcel->getActiveSheet()->getStyle(’A4′)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);$objPHPExcel->getActiveSheet()->getStyle(’B4′)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);$objPHPExcel->getActiveSheet()->getStyle(’C4′)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);$objPHPExcel->getActiveSheet()->getStyle(’D4′)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);$objPHPExcel->getActiveSheet()->getStyle(’E4′)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);设置border的color$objPHPExcel->getActiveSheet()->getStyle(’D13′)->getBorders()->getLeft()->getColor()->setARGB(’FF993300′);$objPHPExcel->getActiveSheet()->getStyle(’D13′)->getBorders()->getTop()->getColor()->setARGB(’FF993300′);$objPHPExcel->getActiveSheet()->getStyle(’D13′)->getBorders()->getBottom()->getColor()->setARGB(’FF993300′);$objPHPExcel->getActiveSheet()->getStyle(’E13′)->getBorders()->getTop()->getColor()->setARGB(’FF993300′);$objPHPExcel->getActiveSheet()->getStyle(’E13′)->getBorders()->getBottom()->getColor()->setARGB(’FF993300′);$objPHPExcel->getActiveSheet()->getStyle(’E13′)->getBorders()->getRight()->getColor()->setARGB(’FF993300′);设置填充颜色$objPHPExcel->getActiveSheet()->getStyle(’A1′)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);$objPHPExcel->getActiveSheet()->getStyle(’A1′)->getFill()->getStartColor()->setARGB(’FF808080′);$objPHPExcel->getActiveSheet()->getStyle(’B1′)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);$objPHPExcel->getActiveSheet()->getStyle(’B1′)->getFill()->getStartColor()->setARGB(’FF808080′);加图片$objDrawing = new PHPExcel_Worksheet_Drawing();$objDrawing->setName(’Logo’);$objDrawing->setDescription(’Logo’);$objDrawing->setPath(’./images/officelogo.jpg’);$objDrawing->setHeight(36);$objDrawing->setWorksheet($objPHPExcel->getActiveSheet());$objDrawing = new PHPExcel_Worksheet_Drawing();$objDrawing->setName(’Paid’);$objDrawing->setDescription(’Paid’);$objDrawing->setPath(’./images/paid.png’);$objDrawing->setCoordinates(’B15′);$objDrawing->setOffsetX(110);$objDrawing->setRotation(25);$objDrawing->getShadow()->setVisible(true);$objDrawing->getShadow()->setDirection(45);$objDrawing->setWorksheet($objPHPExcel->getActiveSheet());在默认sheet后，创建一个worksheetecho date(’H:i:s’) . ” Create new Worksheet object\n”;$objPHPExcel->createSheet(); PHPEXCEL是一个国外的站点，地址：http://phpexcel.codeplex.com/","['php', '操作', 'excel', '相关', 'phpexcel', '操作', 'excel', '方便', '尤其', '可以', '方便', '加入', '图片', '支持', 'jpg', 'gif', 'png', '格式', '下载', '地址', 'http', 'www', 'codeplex', 'com', 'phpexcel', '下面', '总结', '几个', '使用', '方法', 'include', 'phpexcel', 'php', 'include', 'phpexcel', 'writer', 'excel2007', 'php', '或者', 'include', 'phpexcel', 'writer', 'excel5', 'php', '用于', '输出', 'xls', '创建', '一个', 'excel', 'objphpexcel', 'new', 'phpexcel', '保存', 'excel', '2007', '格式', 'objwriter', 'new', 'phpexcel', 'writer', 'excel2007', 'objphpexcel', '或者', 'objwriter', 'new', 'phpexcel', 'writer', 'excel5', 'objphpexcel', '2007', '格式', 'objwriter', 'save', 'xxx', 'xlsx', '直接', '输出', '浏览器', 'objwriter', 'new', 'phpexcel', 'writer', 'excel5', 'objphpexcel', 'header', 'pragma', 'public', 'header', 'expires', 'header', 'cache', 'control', 'must', 'revalidate', 'post', 'check', 'pre', 'check', 'header', 'content', 'type', 'application', 'force', 'download', 'header', 'content', 'type', 'application', 'vnd', 'ms', 'execl', 'header', 'content', 'type', 'application', 'octet', 'stream', 'header', 'content', 'type', 'application', 'download', 'header', 'content', 'disposition', 'attachment', 'filename', 'resume', 'xls', 'header', 'content', 'transfer', 'encoding', 'binary', 'objwriter', 'save', 'php', 'output', '设置', 'excel', '属性', '创建人', 'objphpexcel', 'getproperties', 'setcreator', 'maarten', 'balliauw', '最后', '修改', 'objphpexcel', 'getproperties', 'setlastmodifiedby', 'maarten', 'balliauw', '标题', 'objphpexcel', 'getproperties', 'settitle', 'office', '2007', 'xlsx', 'test', 'document', '题目', 'objphpexcel', 'getproperties', 'setsubject', 'office', '2007', 'xlsx', 'test', 'document', '描述', 'objphpexcel', 'getproperties', 'setdescription', 'test', 'document', 'for', 'office', '2007', 'xlsx', 'generated', 'using', 'php', 'classes', '关键字', 'objphpexcel', 'getproperties', 'setkeywords', 'office', '2007', 'openxml', 'php', '种类', 'objphpexcel', 'getproperties', 'setcategory', 'test', 'result', 'file', '设置', '当前', 'sheet', 'objphpexcel', 'setactivesheetindex', '设置', 'sheet', 'name', 'objphpexcel', 'getactivesheet', 'settitle', 'simple', '设置', '单元格', 'objphpexcel', 'getactivesheet', 'setcellvalue', 'a1', 'string', 'objphpexcel', 'getactivesheet', 'setcellvalue', 'a2', '12', 'objphpexcel', 'getactivesheet', 'setcellvalue', 'a3', 'true', 'objphpexcel', 'getactivesheet', 'setcellvalue', 'c5', 'sum', 'c2', 'c4', 'objphpexcel', 'getactivesheet', 'setcellvalue', 'b8', 'min', 'b2', 'c5', '合并', '单元格', 'objphpexcel', 'getactivesheet', 'mergecells', 'a18', 'e22', '分离单元', 'objphpexcel', 'getactivesheet', 'unmergecells', 'a28', 'b28', '保护', 'cell', 'objphpexcel', 'getactivesheet', 'getprotection', 'setsheet', 'true', 'needs', 'to', 'be', 'set', 'to', 'true', 'in', 'order', 'to', 'enable', 'any', 'worksheet', 'protection', 'objphpexcel', 'getactivesheet', 'protectcells', 'a3', 'e13', 'phpexcel', '设置', '格式', 'set', 'cell', 'number', 'formatsecho', 'date', 'set', 'cell', 'number', 'formats', 'objphpexcel', 'getactivesheet', 'getstyle', 'e4', 'getnumberformat', 'setformatcode', 'phpexcel', 'style', 'numberformat', 'format', 'currency', 'eur', 'simple', 'objphpexcel', 'getactivesheet', 'duplicatestyle', 'objphpexcel', 'getactivesheet', 'getstyle', 'e4', 'e5', 'e13', '设置', 'width', 'set', 'column', 'widths', 'objphpexcel', 'getactivesheet', 'getcolumndimension', 'setautosize', 'true', 'objphpexcel', 'getactivesheet', 'getcolumndimension', 'setwidth', '12', '设置', 'font', 'objphpexcel', 'getactivesheet', 'getstyle', 'b1', 'getfont', 'setname', 'candara', 'objphpexcel', 'getactivesheet', 'getstyle', 'b1', 'getfont', 'setsize', '20', 'objphpexcel', 'getactivesheet', 'getstyle', 'b1', 'getfont', 'setbold', 'true', 'objphpexcel', 'getactivesheet', 'getstyle', 'b1', 'getfont', 'setunderline', 'phpexcel', 'style', 'font', 'underline', 'single', 'objphpexcel', 'getactivesheet', 'getstyle', 'b1', 'getfont', 'getcolor', 'setargb', 'phpexcel', 'style', 'color', 'color', 'white', 'objphpexcel', 'getactivesheet', 'getstyle', 'e1', 'getfont', 'getcolor', 'setargb', 'phpexcel', 'style', 'color', 'color', 'white', 'objphpexcel', 'getactivesheet', 'getstyle', 'd13', 'getfont', 'setbold', 'true', 'objphpexcel', 'getactivesheet', 'getstyle', 'e13', 'getfont', 'setbold', 'true', '设置', 'align', 'objphpexcel', 'getactivesheet', 'getstyle', 'd11', 'getalignment', 'sethorizontal', 'phpexcel', 'style', 'alignment', 'horizontal', 'right', 'objphpexcel', 'getactivesheet', 'getstyle', 'd12', 'getalignment', 'sethorizontal', 'phpexcel', 'style', 'alignment', 'horizontal', 'right', 'objphpexcel', 'getactivesheet', 'getstyle', 'd13', 'getalignment', 'sethorizontal', 'phpexcel', 'style', 'alignment', 'horizontal', 'right', 'objphpexcel', 'getactivesheet', 'getstyle', 'a18', 'getalignment', 'sethorizontal', 'phpexcel', 'style', 'alignment', 'horizontal', 'justify', '垂直', '居中', 'objphpexcel', 'getactivesheet', 'getstyle', 'a18', 'getalignment', 'setvertical', 'phpexcel', 'style', 'alignment', 'vertical', 'center', '设置', 'column', 'border', 'objphpexcel', 'getactivesheet', 'getstyle', 'a4', 'getborders', 'gettop', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objphpexcel', 'getactivesheet', 'getstyle', 'b4', 'getborders', 'gettop', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objphpexcel', 'getactivesheet', 'getstyle', 'c4', 'getborders', 'gettop', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objphpexcel', 'getactivesheet', 'getstyle', 'd4', 'getborders', 'gettop', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', 'objphpexcel', 'getactivesheet', 'getstyle', 'e4', 'getborders', 'gettop', 'setborderstyle', 'phpexcel', 'style', 'border', 'border', 'thin', '设置', 'border', 'color', 'objphpexcel', 'getactivesheet', 'getstyle', 'd13', 'getborders', 'getleft', 'getcolor', 'setargb', 'ff993300', 'objphpexcel', 'getactivesheet', 'getstyle', 'd13', 'getborders', 'gettop', 'getcolor', 'setargb', 'ff993300', 'objphpexcel', 'getactivesheet', 'getstyle', 'd13', 'getborders', 'getbottom', 'getcolor', 'setargb', 'ff993300', 'objphpexcel', 'getactivesheet', 'getstyle', 'e13', 'getborders', 'gettop', 'getcolor', 'setargb', 'ff993300', 'objphpexcel', 'getactivesheet', 'getstyle', 'e13', 'getborders', 'getbottom', 'getcolor', 'setargb', 'ff993300', 'objphpexcel', 'getactivesheet', 'getstyle', 'e13', 'getborders', 'getright', 'getcolor', 'setargb', 'ff993300', '设置', '填充', '颜色', 'objphpexcel', 'getactivesheet', 'getstyle', 'a1', 'getfill', 'setfilltype', 'phpexcel', 'style', 'fill', 'fill', 'solid', 'objphpexcel', 'getactivesheet', 'getstyle', 'a1', 'getfill', 'getstartcolor', 'setargb', 'ff808080', 'objphpexcel', 'getactivesheet', 'getstyle', 'b1', 'getfill', 'setfilltype', 'phpexcel', 'style', 'fill', 'fill', 'solid', 'objphpexcel', 'getactivesheet', 'getstyle', 'b1', 'getfill', 'getstartcolor', 'setargb', 'ff808080', '图片', 'objdrawing', 'new', 'phpexcel', 'worksheet', 'drawing', 'objdrawing', 'setname', 'logo', 'objdrawing', 'setdescription', 'logo', 'objdrawing', 'setpath', 'images', 'officelogo', 'jpg', 'objdrawing', 'setheight', '36', 'objdrawing', 'setworksheet', 'objphpexcel', 'getactivesheet', 'objdrawing', 'new', 'phpexcel', 'worksheet', 'drawing', 'objdrawing', 'setname', 'paid', 'objdrawing', 'setdescription', 'paid', 'objdrawing', 'setpath', 'images', 'paid', 'png', 'objdrawing', 'setcoordinates', 'b15', 'objdrawing', 'setoffsetx', '110', 'objdrawing', 'setrotation', '25', 'objdrawing', 'getshadow', 'setvisible', 'true', 'objdrawing', 'getshadow', 'setdirection', '45', 'objdrawing', 'setworksheet', 'objphpexcel', 'getactivesheet', '默认', 'sheet', '创建', '一个', 'worksheetecho', 'date', 'create', 'new', 'worksheet', 'object', 'objphpexcel', 'createsheet', 'phpexcel', '一个', '国外', '站点', '地址', 'http', 'phpexcel', 'codeplex', 'com']","[[-0.22487972 -0.10892749  0.25033597  0.15496631  0.23783026 -0.370845
  -0.08607259  0.42742134 -0.06186572 -0.13470674 -0.03954056 -0.3679827
  -0.12191237  0.49334173  0.12067983 -0.10766305 -0.11856536 -0.02044513
  -0.03921206 -0.45566831 -0.05279276  0.27137472 -0.0691395  -0.1950749
   0.03564689 -0.45019084 -0.28848397  0.03082825 -0.22060648 -0.08944463
   0.15657435  0.02505236  0.00176387 -0.10151768 -0.16290856  0.3108918
  -0.19857707 -0.27128182  0.06938145 -0.6535039  -0.09146511 -0.54947505
  -0.06599677 -0.003804   -0.13136576 -0.23225607 -0.22533022  0.33646053
  -0.15777141  0.4373076   0.10254874 -0.25316069 -0.09538958 -0.17109463
  -0.04004519  0.38519189  0.13700383 -0.09223371  0.13261894 -0.1380428
   0.08986146  0.19650037 -0.00225109  0.07348042 -0.34259308  0.04558038
   0.03297239 -0.03741037 -0.26506707  0.39717848  0.08078389 -0.15263537
   0.36234338 -0.31249129  0.52026906  0.26373052  0.16347107 -0.1768958
  -0.29869801 -0.10903343  0.00586617  0.0750155  -0.12046295  0.37642847
  -0.31811696  0.18531812 -0.25908468  0.43221759  0.45555548  0.16292451
   0.20299643  0.08875989  0.32577154  0.16686601  0.17040293  0.35417085
   0.12101719 -0.28758138  0.02905391 -0.10309231]]"
153,Apache禁止目录访问方法介绍,"本文原文出处http://www.leapsoul.cn/?p=453在 PHP网站开发中，基于WEB服务器和PHP网站程序代码的安全考虑，我们需要对相关的目录或者文件访问权限进行控制，以防止意外情况的发生，那么我们如 何来实现这种功能呢？我们可以通过Apache来实现禁止目录访问(禁止游览列出的目录或文件列表)、禁止或允许IP与域名访问目录的功能。环境说明　　我使用的是DedeCMS DedeAmpz的PHP运行环境，PHP版本5.2.4，Apache版本2.2.4在Apache中配置禁止目录访问，即禁止游览列出的目录/文件列表的方法　　访问网站目录时Apache默认配置为可列出目录/文件列表，即当你访问http://localhost时会列出相关的目录和文件列表，我们可以通过修改Apache配置文件httpd.conf来实现禁止列出目录/文件列表，方法如下：1、打开apache配置文件httpd.conf2、找到<Directory />Options IndexesAllowOverride NoneOrder allow,denyAllow from all</Directory>需要修改Options Indexes为Options None即可，注：根据PHP运行环境安装包的不同，Options Indexes也有可能是Options Indexes FollowSymLinks，一并改为Options None即可。3、保存httpd.conf，并重启Apache即可，此时再访问http://localhost时， 报apache http 403 禁止访问错误信息ForbiddenYou don’t have permission to access / on this server.Apache单个或多个目录禁止访问方法这种方法通常用来禁止访问者访问后台管理目录或者程序目录，方法如下1、打开apache配置文件httpd.conf2、创建Directory块，比如禁止访问某个类库目录，可以这样实现Directory /var/www/www.leapsoul.cn/inc>Order Deny,AllowDeny from all</Directory>上述代码实现了禁止所有用户访问www.leapsoul.cn下inc目录的功能。如要实现禁止访问所有目录中inc目录的功能，只要将<Directory /var/www/www.leapsoul.cn/inc>更改为<Directory /var/www/www.leapsoul.cn/*/inc>即可。3、重启Apache服务器。其他说明1、只允许或禁止某个域名进行目录访问<Directory /var/www/www.leapsoul.cn/inc>Order Deny,AllowDeny from abc.comAllow from apache.org</Directory>上述代码实现禁止abc.com域中主机访问inc目录，允许apache.org域中主机访问inc目录的功能。2、只允许或禁止某个IP进行目录访问<Directory /var/www/www.leapsoul.cn/inc>Order Deny,AllowDeny from 10.1.1.2Allow from 192.168.1.0/255.255.255.0</Directory>上述代码实现禁止IP10.1.1.2访问www.leapsoul.cn/inc目录，允许IP192.168.1子网中的主机访问www.leapsoul.cn/inc目录的功能。注意：Allow from 192.168.1.0/255.255.255.0等同于Allow from 192.168.1或Allow from 192.168.1.0/24　　至此，通过配置Apache服务器我们可以实现禁止目录访问(列出目录或文件列表)，也可以实现禁止访问单个或者多个目录，更可以对访问者进行控制，比如允许或禁止某个IP或者域名对目录进行访问，这些功能对提高和优化WEB服务器的安全性能是必不可少的方法。 本人注：我试了试，发现只注掉<Directory>那一项，是不可以的，还要吧网站的根目录给注掉","['apache', '禁止', '目录', '访问', '方法', '介绍', '本文', '原文', '出处', 'http', 'www', 'leapsoul', 'cn', '453', 'php', '网站', '开发', '基于', 'web', '服务器', 'php', '网站', '程序代码', '安全', '考虑', '我们', '需要', '相关', '目录', '或者', '文件', '访问', '权限', '进行', '控制', '防止', '意外', '情况', '发生', '那么', '我们', '何来', '实现', '这种', '功能', '我们', '可以', '通过', 'apache', '实现', '禁止', '目录', '访问', '禁止', '游览', '列出', '目录', '文件', '列表', '禁止', '允许', 'ip', '域名', '访问', '目录', '功能', '环境', '说明', '使用', 'dedecms', 'dedeampz', 'php', '运行', '环境', 'php', '版本', '5.2', 'apache', '版本', '2.2', 'apache', '配置', '禁止', '目录', '访问', '禁止', '游览', '列出', '目录', '文件', '列表', '方法', '访问', '网站', '目录', 'apache', '默认', '配置', '列出', '目录', '文件', '列表', '访问', 'http', 'localhost', '时会', '列出', '相关', '目录', '文件', '列表', '我们', '可以', '通过', '修改', 'apache', '配置文件', 'httpd', 'conf', '实现', '禁止', '列出', '目录', '文件', '列表', '方法', '如下', '打开', 'apache', '配置文件', 'httpd', 'conf2', '找到', 'directory', 'options', 'indexesallowoverride', 'noneorder', 'allow', 'denyallow', 'from', 'all', 'directory', '需要', '修改', 'options', 'indexes', 'options', 'none', '即可', '根据', 'php', '运行', '环境', '安装包', '不同', 'options', 'indexes', '可能', 'options', 'indexes', 'followsymlinks', '一并', '改为', 'options', 'none', '即可', '保存', 'httpd', 'conf', '重启', 'apache', '即可', '此时', '访问', 'http', 'localhost', 'apache', 'http', '403', '禁止', '访问', '错误信息', 'forbiddenyou', 'don', 'have', 'permission', 'to', 'access', 'on', 'this', 'server', 'apache', '单个', '多个', '目录', '禁止', '访问', '方法', '这种', '方法', '通常', '用来', '禁止', '访问者', '访问', '后台', '管理', '目录', '或者', '程序', '目录', '方法', '如下', '打开', 'apache', '配置文件', 'httpd', 'conf2', '创建', 'directory', '比如', '禁止', '访问', '某个', '类库', '目录', '可以', '这样', '实现', 'directory', 'var', 'www', 'www', 'leapsoul', 'cn', 'inc', 'order', 'deny', 'allowdeny', 'from', 'all', 'directory', '上述', '代码', '实现', '禁止', '所有', '用户', '访问', 'www', 'leapsoul', 'cn', 'inc', '目录', '功能', '实现', '禁止', '访问', '所有', '目录', 'inc', '目录', '功能', '只要', 'directory', 'var', 'www', 'www', 'leapsoul', 'cn', 'inc', '改为', 'directory', 'var', 'www', 'www', 'leapsoul', 'cn', 'inc', '即可', '重启', 'apache', '服务器', '其他', '说明', '允许', '禁止', '某个', '域名', '进行', '目录', '访问', 'directory', 'var', 'www', 'www', 'leapsoul', 'cn', 'inc', 'order', 'deny', 'allowdeny', 'from', 'abc', 'comallow', 'from', 'apache', 'org', 'directory', '上述', '代码', '实现', '禁止', 'abc', 'com', '主机', '访问', 'inc', '目录', '允许', 'apache', 'org', '主机', '访问', 'inc', '目录', '功能', '允许', '禁止', '某个', 'ip', '进行', '目录', '访问', 'directory', 'var', 'www', 'www', 'leapsoul', 'cn', 'inc', 'order', 'deny', 'allowdeny', 'from', '10.1', '1.2', 'allow', 'from', '192.168', '1.0', '255.255', '255.0', 'directory', '上述', '代码', '实现', '禁止', 'ip10.1', '1.2', '访问', 'www', 'leapsoul', 'cn', 'inc', '目录', '允许', 'ip192.168', '子网', '主机', '访问', 'www', 'leapsoul', 'cn', 'inc', '目录', '功能', '注意', 'allow', 'from', '192.168', '1.0', '255.255', '255.0', '等同于', 'allow', 'from', '192.168', 'allow', 'from', '192.168', '1.0', '24', '至此', '通过', '配置', 'apache', '服务器', '我们', '可以', '实现', '禁止', '目录', '访问', '列出', '目录', '文件', '列表', '可以', '实现', '禁止', '访问', '单个', '或者', '多个', '目录', '可以', '访问者', '进行', '控制', '比如', '允许', '禁止', '某个', 'ip', '或者', '域名', '目录', '进行', '访问', '这些', '功能', '提高', '优化', 'web', '服务器', '安全', '性能', '必不可少', '方法', '本人', '试了试', '发现', '只注', 'directory', '一项', '可以', '还要', '网站', '根目录', '注掉']","[[-2.73827032e-01 -1.21997715e-01  2.38376561e-01  2.66380689e-01
   2.25764373e-01 -3.58509078e-01 -1.44215178e-01  5.01237390e-01
  -4.28627802e-02 -4.45458704e-02 -8.12824915e-02 -3.70849236e-01
  -1.17925243e-01  5.61718079e-01  1.30132778e-01 -1.32539581e-01
  -1.29814544e-01 -1.14835663e-02 -4.91917926e-02 -4.16652247e-01
   2.43268696e-02  2.86917064e-01 -5.47591638e-02 -1.39760946e-01
   5.71032043e-02 -4.87661411e-01 -3.14098143e-01  7.88578402e-02
  -1.86875150e-01 -7.39913719e-02  2.20157939e-01  8.90421897e-02
  -1.86809050e-02 -1.21889925e-01 -1.53578056e-01  3.82315511e-01
  -1.54516597e-01 -2.44901929e-01  8.89733933e-02 -7.16808257e-01
  -1.08609809e-01 -5.13813862e-01 -2.66269572e-02 -5.95899560e-02
  -1.48844686e-01 -1.85703606e-01 -3.27208579e-01  4.58715512e-01
  -8.01156773e-02  3.55516812e-01  1.21863170e-01 -3.08059058e-01
  -4.97419171e-02 -2.58188190e-01  4.50150157e-02  4.19399012e-01
   2.04799682e-01 -6.43232497e-02  1.26466361e-01 -9.25157991e-02
   1.03205825e-01  2.38153129e-01  2.16481776e-02  6.87017842e-02
  -3.68910375e-01  2.72374060e-02 -5.84342053e-03  3.93252378e-02
  -2.19989636e-01  4.33829211e-01  7.30948835e-02 -1.99581616e-01
   4.21371925e-01 -3.34535925e-01  5.48774486e-01  2.31581469e-01
   2.69045083e-01 -1.84237142e-01 -2.34275518e-01 -2.26553353e-01
  -1.06312756e-01  5.89761323e-04 -8.58334214e-02  3.81125117e-01
  -3.64295885e-01  1.88651939e-01 -2.77304177e-01  4.61232412e-01
   5.08649707e-01  1.58788294e-01  2.45589657e-01  1.23274546e-01
   3.31262796e-01  1.92027387e-01  1.88984697e-01  4.35309395e-01
   7.44577522e-02 -2.41385093e-01  1.18030289e-01 -9.63243662e-02]]"
155,php函数-计算两个日期相差多少天,"<?PHP /***函数功能：计算两个以YYYY-MM-DD为格式的日期，相差几天**/function getChaBetweenTwoDate($date1,$date2){    $Date_List_a1=explode(""-"",$date1);    $Date_List_a2=explode(""-"",$date2);     $d1=mktime(0,0,0,$Date_List_a1[1],$Date_List_a1[2],$Date_List_a1[0]);     $d2=mktime(0,0,0,$Date_List_a2[1],$Date_List_a2[2],$Date_List_a2[0]);     $Days=round(($d1-$d2)/3600/24);     return $Days;}echo getChaBetweenTwoDate('2010-08-11','2010-08-16');echo ""<br>"";echo getChaBetweenTwoDate('2010-08-16','2010-08-11');?> ","['php', '函数', '计算', '两个', '日期', '相差', '多少', 'php', '函数', '功能', '计算', '两个', 'yyyy', 'mm', 'dd', '格式', '日期', '相差', '几天', 'function', 'getchabetweentwodate', 'date1', 'date2', 'date', 'list', 'a1', 'explode', 'date1', 'date', 'list', 'a2', 'explode', 'date2', 'd1', 'mktime', 'date', 'list', 'a1', 'date', 'list', 'a1', 'date', 'list', 'a1', 'd2', 'mktime', 'date', 'list', 'a2', 'date', 'list', 'a2', 'date', 'list', 'a2', 'days', 'round', 'd1', 'd2', '3600', '24', 'return', 'days', 'echo', 'getchabetweentwodate', '2010', '08', '11', '2010', '08', '16', 'echo', 'br', 'echo', 'getchabetweentwodate', '2010', '08', '16', '2010', '08', '11']","[[-0.23439847 -0.08209717  0.27149122  0.09932527  0.24647747 -0.37563587
  -0.07550374  0.42219052 -0.07399289 -0.16337126 -0.02010436 -0.3690467
  -0.10721612  0.48494176  0.14658552 -0.12049588 -0.1064442  -0.01804965
  -0.04633622 -0.49568245 -0.06407217  0.25139461 -0.08266143 -0.22145755
   0.03835757 -0.42246301 -0.27858398  0.00274977 -0.22345356 -0.0803085
   0.13167671 -0.02323119  0.02467857 -0.10119716 -0.17892981  0.29145636
  -0.20284097 -0.29045594  0.07146552 -0.66321298 -0.12167151 -0.55498903
  -0.08409138 -0.01901091 -0.1061179  -0.24104455 -0.20538625  0.30073242
  -0.19243031  0.46806051  0.11556688 -0.23169258 -0.11978699 -0.15493372
  -0.06437691  0.35323963  0.09324704 -0.12269828  0.10786561 -0.16454603
   0.1008562   0.21426273 -0.00518078  0.06469088 -0.34897058  0.06439691
   0.06295917 -0.05777704 -0.28549853  0.40520893  0.05961076 -0.14253685
   0.34397268 -0.30285955  0.50820876  0.30203926  0.11918579 -0.17298446
  -0.28085874 -0.06962621  0.03425313  0.09046724 -0.13599108  0.37920888
  -0.28410864  0.17850571 -0.26789388  0.43191882  0.45250157  0.16548572
   0.18307331  0.11098594  0.32414686  0.15774138  0.18149777  0.30956244
   0.12704246 -0.30637191 -0.01809668 -0.11778464]]"
157,毕业设计出现的一个严重错误----文件不能相互引用, 昨晚大概1点，突然点某几个链接，出现了“你指定的网站不能访问，链接错误”这样的情况，然点击其它的网页却没有错误，一段时间极度郁闷，知道1点半没弄出来今天下午经过一番删除测试，终于发现了错因：解决突然不能访问，说指定的网站不存在的问题的解决方法1、 发现paike表中注释掉xuanke类的引用后，排课正常2、 由1可以知道，paike表没有问题，xuanke表有问题3、 猜测原因：两个类文件相互引用，造成了引用的死循环 错误原因已经出来了，就是两个文件如果相互引用的话，就会造成引用的死循环，使得程序崩溃,"['毕业设计', '出现', '一个', '严重错误', '----', '文件', '不能', '相互', '引用', '昨晚', '大概', '突然', '几个', '链接', '出现', '指定', '网站', '不能', '访问', '链接', '错误', '这样', '情况', '点击', '其它', '网页', '没有', '错误', '一段时间', '极度', '郁闷', '知道', '点半', '弄出来', '今天下午', '经过', '一番', '删除', '测试', '终于', '发现', '解决', '突然', '不能', '访问', '指定', '网站', '存在', '问题', '解决', '方法', '发现', 'paike', '表中', '注释', 'xuanke', '引用', '排课', '正常', '可以', '知道', 'paike', '没有', '问题', 'xuanke', '表有', '问题', '猜测', '原因', '两个', '文件', '相互', '引用', '造成', '引用', '死循环', '错误', '原因', '已经', '出来', '就是', '两个', '文件', '如果', '相互', '引用', '的话', '造成', '引用', '死循环', '使得', '程序', '崩溃']","[[-2.53719943e-01 -1.48697204e-01  2.11551941e-01  1.72249302e-01
   2.97511619e-01 -3.37838804e-01 -1.98153744e-01  4.92545827e-01
   7.03209651e-04 -5.32186272e-03 -6.39961247e-02 -3.22575860e-01
  -2.01319443e-01  6.11116417e-01  1.50064822e-01 -1.06912479e-01
  -1.62247236e-01 -8.08011437e-04 -1.09892122e-01 -4.53092233e-01
   3.72826800e-02  2.40969025e-01  1.54584105e-02 -7.29339769e-02
   1.32778524e-01 -5.70595960e-01 -2.80816906e-01  9.23289343e-02
  -2.08147542e-01 -5.53964314e-02  2.59090720e-01  2.89909226e-02
  -1.90379776e-02 -1.53576934e-01 -9.70564511e-02  3.35466681e-01
  -1.33197212e-01 -2.15543322e-01  1.24348593e-01 -7.76003966e-01
  -1.82077275e-01 -5.88265975e-01 -3.46683350e-02 -8.01661170e-02
  -1.79359086e-01 -1.31155989e-01 -2.65092619e-01  4.93980052e-01
  -1.75485065e-01  3.85040419e-01  2.22266597e-01 -2.72197644e-01
  -1.17730438e-01 -2.38580126e-01  8.76262466e-02  3.94032347e-01
   2.65341944e-01 -5.79509425e-02  9.86445272e-02 -9.24761894e-02
   3.61346962e-02  3.08585450e-01  2.64010019e-02  8.90066878e-02
  -3.96168783e-01 -2.34696914e-02  4.02885029e-02 -1.56904380e-02
  -2.39245734e-01  4.47380368e-01  1.53082687e-01 -2.58847023e-01
   4.08612305e-01 -3.29722868e-01  5.88107101e-01  1.48860408e-01
   2.17285384e-01 -1.31890510e-01 -2.71313955e-01 -2.28381954e-01
  -9.33419082e-02 -1.80442659e-02 -6.09666463e-02  3.23291566e-01
  -3.85631057e-01  2.01817590e-01 -2.91625418e-01  4.09402873e-01
   4.62424444e-01  1.19581666e-01  3.21797306e-01  1.27410266e-01
   3.59592944e-01  1.94164939e-01  1.87925310e-01  3.82886002e-01
   1.00658982e-01 -3.00303000e-01 -2.98792434e-02 -9.01149549e-02]]"
159,PHP从checkbox取值,"在用到checkbox的时候发现php只能取一个值，查了相关资料，原因如下： Php代码<input type=""checkbox"" name=""weeks[]"" id=""weeks"" value=1>  <input type=""checkbox"" name=""weeks[]"" id=""weeks"" value=2>  <input type=""checkbox"" name=""weeks[]"" id=""weeks"" value=3> weeks后的中括号不可漏，否则用PHP获取的时候只能取到最后一个值。之后PHP就很好处理了，如下:Php代码方法一：  $weeks = $_POST['weeks'];  for($i=0;$i<count($weeks);$i++)  echo $weeks[$i].""<br>"";     方法二：  $array = $this->request->getParameter(""weeks[]"");  $str =implode(',',$array);  echo $str;  ","['php', 'checkbox', '取值', '用到', 'checkbox', '时候', '发现', 'php', '只能', '一个', '相关', '资料', '原因', '如下', 'php', '代码', 'input', 'type', 'checkbox', 'name', 'weeks', 'id', 'weeks', 'value', 'input', 'type', 'checkbox', 'name', 'weeks', 'id', 'weeks', 'value', 'input', 'type', 'checkbox', 'name', 'weeks', 'id', 'weeks', 'value', 'weeks', '中括号', '不可', '否则', 'php', '获取', '时候', '只能', '最后', '一个', '之后', 'php', '处理', '如下', 'php', '代码', '方法', 'weeks', 'post', 'weeks', 'for', 'count', 'weeks', '++', 'echo', 'weeks', 'br', '方法', 'array', 'this', 'request', 'getparameter', 'weeks', 'str', 'implode', 'array', 'echo', 'str']","[[-2.03569284e-01 -1.13877852e-01  2.74862915e-01  1.00343127e-01
   3.15087658e-01 -3.89133885e-01 -1.26481726e-01  4.89522986e-01
  -7.47645070e-02 -1.58707802e-01 -2.29465084e-02 -3.84619271e-01
  -1.68735403e-01  5.39457763e-01  1.77411092e-01 -9.45217916e-02
  -1.24052222e-01 -3.05345266e-05 -7.86770132e-02 -6.01295924e-01
  -8.11416285e-02  2.55507431e-01 -6.49583178e-02 -2.52161025e-01
   5.80059099e-02 -4.76503163e-01 -3.32457213e-01  3.00850487e-02
  -2.75573849e-01 -8.30877907e-02  1.44428284e-01 -2.12929856e-02
   2.23538460e-02 -1.37573874e-01 -2.06259549e-01  3.24600327e-01
  -2.48858633e-01 -3.11341452e-01  8.14259807e-02 -7.56915993e-01
  -1.54083890e-01 -6.49439829e-01 -9.10657586e-02  2.39519754e-02
  -1.19101151e-01 -2.67427793e-01 -1.88642022e-01  3.16340982e-01
  -2.17695328e-01  5.39966144e-01  1.56873128e-01 -2.73095208e-01
  -1.51463460e-01 -1.37417093e-01 -3.73339849e-02  3.95883736e-01
   1.23287647e-01 -1.17342244e-01  1.25872970e-01 -1.77774386e-01
   1.17566184e-01  2.25988258e-01  1.95185581e-02  1.11932461e-01
  -3.85201372e-01  6.52465757e-02  7.95740648e-02 -5.71342962e-02
  -3.46945616e-01  4.56227368e-01  1.04959698e-01 -1.62467212e-01
   3.86483548e-01 -3.37891804e-01  5.74695733e-01  3.11266473e-01
   9.86074777e-02 -1.52911314e-01 -3.71936175e-01 -8.49597724e-02
   5.72436892e-02  9.20883251e-02 -1.60749115e-01  3.91041057e-01
  -3.38320560e-01  2.20126633e-01 -3.05498087e-01  4.62601343e-01
   5.21352375e-01  1.62367086e-01  2.31799481e-01  9.30207361e-02
   3.79293279e-01  1.98951946e-01  2.08889848e-01  3.28933707e-01
   1.31924095e-01 -3.43479549e-01 -8.65034848e-02 -1.46668980e-01]]"
161,PHP-浏览器参数防注入检测函数," 对浏览器的URL的字段进行过滤，防止进行SQL注入function inject_check($sql_str) {   $check=eregi('select|insert|update|delete|\'|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile', $sql_str);     // 进行过滤   if($check){       echo ""你输入了非法内容！"";       exit();   } else {       return $sql_str;   }}    ","['php', '浏览器', '参数', '注入', '检测', '函数', '浏览器', 'url', '进行', '过滤', '防止', '进行', 'sql', '注入', 'function', 'inject', 'check', 'sql', 'str', 'check', 'eregi', 'select', 'insert', 'update', 'delete', 'union', 'into', 'load', 'file', 'outfile', 'sql', 'str', '进行', '过滤', 'if', 'check', 'echo', '输入', '非法', '内容', 'exit', 'else', 'return', 'sql', 'str']","[[-0.23033262 -0.12227008  0.25863105  0.09771438  0.33166556 -0.37245816
  -0.14648586  0.50619425 -0.04502561 -0.13362526 -0.03609155 -0.37381719
  -0.16399958  0.56263576  0.17187407 -0.09398742 -0.13644952 -0.00158126
  -0.08025442 -0.58425106 -0.04504717  0.25077935 -0.05366041 -0.21285083
   0.08761218 -0.50575816 -0.32466456  0.05260732 -0.27063017 -0.08450611
   0.16102931 -0.01035205 -0.00856273 -0.13490043 -0.16963094  0.33742699
  -0.21599511 -0.28573695  0.09271008 -0.78037237 -0.16617791 -0.6473631
  -0.07669781  0.0015446  -0.13154639 -0.24432946 -0.20668336  0.36630483
  -0.22166275  0.5104047   0.17908557 -0.26685711 -0.15549104 -0.15885347
  -0.01049484  0.39140035  0.16519353 -0.09844171  0.10859726 -0.15754331
   0.09345232  0.24460184  0.0201982   0.09690941 -0.39716718  0.03617562
   0.0760011  -0.04989796 -0.32613298  0.45097171  0.14554332 -0.18457207
   0.38642959 -0.32776137  0.58125823  0.28224217  0.1270325  -0.15344919
  -0.37464884 -0.10547635  0.02576244  0.06526933 -0.12319962  0.3780716
  -0.35473169  0.23373706 -0.30522464  0.45589706  0.50721246  0.15866885
   0.26990926  0.11125938  0.39541984  0.20465517  0.20198377  0.33846043
   0.12160286 -0.35805633 -0.08566329 -0.13745843]]"
179,筛选出来的常用jQuery幻灯片插件,"s3Slider(Demo)本款插件是我在朋友的网站上看到的，当时就感觉十分好用coin-slider 页面上也有演示这款幻灯片插件感觉好酷啊，看着很简单，却觉那么得体适当，我一眼就喜欢上了jQuery Easy Slides话说使用最简单，一眼看上去，与s3Slider有点像，就收下了，我喜欢这种简单的 Nivo Slider号称""the most awesome""，大家可以试试看其它的总结jquery插件的网址如下：l  14个基于jQuery的图片展示和幻灯片插件l  15个幻灯片效果的JQuery插件l  15款jQuery幻灯片插件l  十个jQuery图片画廊插件推荐l  2010年十佳jquery插件  ","['筛选', '出来', '常用', 'jquery', '幻灯片', '插件', 's3slider', 'demo', '本款', '插件', '朋友', '网站', '看到', '当时', '感觉', '十分', '好用', 'coin', 'slider', '页面', '演示', '幻灯片', '插件', '感觉', '好酷', '看着', '简单', '却觉', '那么', '得体', '适当', '一眼', '喜欢', 'jquery', 'easy', 'slides', '使用', '简单', '一眼', '看上去', 's3slider', '有点像', '收下', '喜欢', '这种', '简单', 'nivo', 'slider', '号称', 'the', 'most', 'awesome', '大家', '可以', '试试看', '其它', '总结', 'jquery', '插件', '网址', '如下', '14', '基于', 'jquery', '图片', '展示', '幻灯片', '插件', '15', '幻灯片', '效果', 'jquery', '插件', '15', 'jquery', '幻灯片', '插件', '十个', 'jquery', '图片', '画廊', '插件', '推荐', '2010', '十佳', 'jquery', '插件']","[[-0.2140677  -0.10068369  0.20086375  0.15230192  0.22378287 -0.29982375
  -0.12605372  0.40026745 -0.02545393 -0.04151862 -0.0549164  -0.30101684
  -0.12907063  0.47933137  0.12008167 -0.09636023 -0.11570226 -0.01531486
  -0.06113137 -0.3715791   0.01353499  0.21500982 -0.02446943 -0.11094546
   0.0741166  -0.42916701 -0.24579623  0.05666112 -0.16993651 -0.05594832
   0.18090045  0.03480355 -0.01128828 -0.10864683 -0.11292171  0.28402399
  -0.12547558 -0.19848055  0.08409695 -0.61669261 -0.11811161 -0.47585572
  -0.03457748 -0.05262737 -0.12669987 -0.15046454 -0.23548003  0.36610679
  -0.12619052  0.33237773  0.13506028 -0.22439044 -0.07957528 -0.19217212
   0.03222147  0.32306499  0.17440532 -0.05740645  0.08859099 -0.08105413
   0.05658686  0.22306048  0.01316056  0.06480674 -0.30935043  0.00351324
   0.02796519 -0.00116314 -0.20173065  0.36113433  0.09161502 -0.1831383
   0.33239012 -0.27618927  0.47691576  0.17160356  0.17772219 -0.13324967
  -0.21606435 -0.16534116 -0.05849593  0.01211547 -0.06766492  0.30340638
  -0.30856603  0.16633935 -0.23882478  0.36389359  0.39544151  0.12145729
   0.22287639  0.10108668  0.29443027  0.15307179  0.15569656  0.322602
   0.08065031 -0.24438879  0.02159725 -0.07726053]]"
191,jQuery圆角工具jQuery Corner,今天设计一个页面用到圆角，搜了一下，jQuery Corner实在是强大：官网：http://jquery.malsup.com/corner/,"['jquery', '圆角', '工具', 'jquery', 'corner', '今天', '设计', '一个', '页面', '用到', '圆角', '一下', 'jquery', 'corner', '实在', '强大', '官网', 'http', 'jquery', 'malsup', 'com', 'corner']","[[-0.21507691 -0.11136197  0.24195047  0.29425914  0.12250458 -0.37232028
  -0.09295087  0.44508504 -0.05162086 -0.0739681  -0.09909055 -0.37543931
  -0.09116692  0.48965109  0.06697455 -0.1472712  -0.11754958  0.01544557
   0.02285041 -0.32035442  0.00468166  0.26307218 -0.10043237 -0.1780865
  -0.00746033 -0.37972949 -0.30881122  0.07986225 -0.15772612 -0.05798974
   0.15721645  0.14840318  0.02315635 -0.09099958 -0.1973118   0.34771764
  -0.1384184  -0.21444135  0.04225334 -0.5614993  -0.03344427 -0.45863061
  -0.02753726 -0.03605691 -0.10048839 -0.24154247 -0.34846306  0.37752993
   0.03613861  0.29536894  0.0291539  -0.28357476  0.05747698 -0.24244645
  -0.02400139  0.40378598  0.15568302 -0.08780895  0.12825475 -0.07484323
   0.14542848  0.17885287 -0.00209601  0.07353785 -0.28907449  0.04837641
  -0.06536415  0.07139642 -0.16328815  0.37833917  0.024867   -0.15014172
   0.39585592 -0.30152716  0.51062962  0.28218305  0.28853515 -0.21797595
  -0.14767569 -0.2218357  -0.12445068  0.02902781 -0.10814837  0.38194864
  -0.36039717  0.14301863 -0.24699246  0.48357282  0.50655729  0.17952889
   0.14731262  0.11266999  0.2634746   0.13268972  0.17678166  0.4482383
   0.05463941 -0.17853353  0.21682102 -0.07778943]]"
195,非常好用的一款磁盘管理工具Acronis Disk Director Suite,因为想硬盘装fedora14，结果发现所有的盘都是ntfs，转化成fat32难以进行，网上搜了一下，需要用磁盘管理工具进行，试了好几个，发现这个真的很好用：Acronis Disk Director Suite提供一个下载地址： http://down.vista123.com/AcronisDiskDirector10.rar和网上搜来的注册码：KMVGL-NWAPW-5JFCE-K3JC5-LSSFMZQ9U6-L9D4W-ZMT7T-5BN65-GHM264KTAF-35W78-57G6J-EAEJL-NJSC2V4WPG-KUTCT-TAPKQ-58EEA-KR7BH74PEV-MQVEL-R97EW-MR9PP-V76U42LYDD-QAZXB-67ZJ2-XMMQ3-L37EL ,"['非常', '好用', '一款', '磁盘', '管理工具', 'acronis', 'disk', 'director', 'suite', '因为', '硬盘', 'fedora14', '结果', '发现', '所有', 'ntfs', '转化成', 'fat32', '难以', '进行', '网上', '一下', '需要', '磁盘', '管理工具', '进行', '好几个', '发现', '这个', '真的', 'acronis', 'disk', 'director', 'suite', '提供', '一个', '下载', '地址', 'http', 'down', 'vista123', 'com', 'acronisdiskdirector10', 'rar', '网上', '搜来', '注册码', 'kmvgl', 'nwapw', '5jfce', 'k3jc5', 'lssfmzq9u6', 'l9d4w', 'zmt7t', '5bn65', 'ghm264ktaf', '35w78', '57g6j', 'eaejl', 'njsc2v4wpg', 'kutct', 'tapkq', '58eea', 'kr7bh74pev', 'mqvel', 'r97ew', 'mr9pp', 'v76u42lydd', 'qazxb', '67zj2', 'xmmq3', 'l37el']","[[-0.25468561 -0.15416147  0.23742762  0.27975504  0.21702335 -0.38446005
  -0.17369526  0.52018408 -0.00763272 -0.01454593 -0.10266228 -0.37049012
  -0.16606078  0.61771061  0.10072596 -0.1389066  -0.15682841  0.01833249
  -0.04111832 -0.38621097  0.04868797  0.26565739 -0.04120945 -0.11503055
   0.06982433 -0.52735491 -0.31967464  0.11264496 -0.18640359 -0.05656928
   0.24519723  0.12842682 -0.00210356 -0.13539326 -0.15188868  0.37638023
  -0.1244905  -0.21082378  0.09445021 -0.71682556 -0.1166692  -0.56012588
  -0.01780701 -0.07878029 -0.15914185 -0.19158035 -0.35772925  0.50676986
  -0.04222811  0.33752479  0.13851304 -0.30244831 -0.00289909 -0.28316816
   0.05323625  0.43961911  0.25098444 -0.06956571  0.12072492 -0.07281512
   0.09382703  0.27077359  0.01195081  0.09315131 -0.36218591  0.00330511
  -0.03024286  0.04741376 -0.18763231  0.44958366  0.11118997 -0.23887753
   0.44192566 -0.34077245  0.60259856  0.21433937  0.3157176  -0.19709017
  -0.19533846 -0.27853823 -0.15023077 -0.00861049 -0.08384817  0.37240887
  -0.43075392  0.18249722 -0.29618734  0.49089517  0.53365845  0.1608606
   0.26928408  0.13457582  0.33228533  0.16910744  0.19749775  0.4740235
   0.06472059 -0.24171658  0.13296263 -0.07838599]]"
198,ubuntu官方live cd和dvd下载地址,官方DVD和CD的ISO镜像下载地址，包括各种版本的正式版以及最新测试版： http://cdimage.ubuntu.com/releases/,"['ubuntu', '官方', 'live', 'cd', 'dvd', '下载', '地址', '官方', 'dvd', 'cd', 'iso', '镜像', '下载', '地址', '包括', '各种', '版本', '正式版', '以及', '最新', '测试版', 'http', 'cdimage', 'ubuntu', 'com', 'releases']","[[-0.24723925 -0.132971    0.31071074  0.45475723  0.0431729  -0.4921817
  -0.05361661  0.53364308 -0.09093846 -0.12411848 -0.15467144 -0.49100205
  -0.052673    0.53467088  0.02049338 -0.21543948 -0.11397024  0.04852832
   0.11619012 -0.29509006 -0.00735842  0.33811216 -0.19263767 -0.2862315
  -0.09727943 -0.34776792 -0.39829903  0.09146774 -0.16542391 -0.07325481
   0.13995387  0.28305754  0.05724526 -0.07768753 -0.31082295  0.43733417
  -0.18108107 -0.26521942  0.01458526 -0.55495973  0.05600789 -0.48690183
  -0.01855484 -0.01629195 -0.07928432 -0.36193294 -0.48768592  0.4063431
   0.19379176  0.29683744 -0.07048284 -0.36667963  0.1900792  -0.31287104
  -0.10240367  0.50415978  0.12395923 -0.1240993   0.18269766 -0.08247529
   0.2567426   0.14677319 -0.01682673  0.07956427 -0.2966276   0.11183762
  -0.14994561  0.14615714 -0.14427875  0.43062165 -0.04161427 -0.11649366
   0.48130174 -0.34989374  0.58621805  0.43714129  0.41350694 -0.32198296
  -0.09822982 -0.27186411 -0.17394315  0.06195944 -0.17232756  0.50881677
  -0.43807065  0.12919463 -0.28457226  0.6592281   0.66306839  0.25316
   0.07956336  0.13742912  0.25412773  0.12410784  0.22058935  0.60270179
   0.04182642 -0.13671482  0.43711359 -0.09321202]]"
204,"推荐一个可以用u盘安装fedora,ubuntu等Linux的工具",名字叫做：universal-usb-installer，上网可以搜出来下载地址,"['推荐', '一个', '可以', '安装', 'fedora', 'ubuntu', 'linux', '工具', '名字', '叫做', 'universal', 'usb', 'installer', '上网', '可以', '出来', '下载', '地址']","[[-0.28685417 -0.18227709  0.2445124   0.31616381  0.24715851 -0.416511
  -0.20518043  0.57656171 -0.00286828  0.00294547 -0.12604474 -0.39831897
  -0.19228289  0.68959337  0.10725884 -0.15542029 -0.17461013  0.0262426
  -0.05673214 -0.40928886  0.06283648  0.292738   -0.03301555 -0.10959475
   0.09879043 -0.5899716  -0.34521685  0.13196615 -0.20052523 -0.06369024
   0.28899862  0.14956726 -0.00960397 -0.1549109  -0.16000424  0.41544229
  -0.13254905 -0.22209461  0.11931839 -0.80069108 -0.13010632 -0.6089885
  -0.00572029 -0.09455905 -0.18359702 -0.18949554 -0.39438015  0.58012953
  -0.0508535   0.35428575  0.17191019 -0.34140995 -0.00576772 -0.32367916
   0.07388591  0.47923264  0.29381425 -0.06909119  0.13139998 -0.06859287
   0.09574671  0.30912017  0.02753626  0.09998401 -0.41269784 -0.00812227
  -0.0368579   0.05827586 -0.20019639  0.49658077  0.12689834 -0.27508296
   0.49038572 -0.37273807  0.66793636  0.22101166  0.35105557 -0.20200559
  -0.21623346 -0.31572898 -0.18032011 -0.022063   -0.0759943   0.40716741
  -0.482739    0.19888645 -0.32488978  0.52889191  0.57855361  0.16446865
   0.31038211  0.15319362  0.36826207  0.19382216  0.21982824  0.52555251
   0.07646283 -0.26490308  0.14140245 -0.09181084]]"
206,对自己将来的一些思考,       今天看到一篇文章，名字很直白：“可以鞭策你一辈子的好文章，不看绝对是你的损失！”，讲的是人要思考自己的未来，要好好想想自己想要什么，想要什么样的将来，然后指导自己选择什么样的职业。       自己静下来想想，感觉对于我自己人生的最终，我想要稳定那种生活，可并不想最终还是在别人手下打工到最后，心里感觉开始10年二十年可以打工，到职业生涯后期，不想以此结尾，太不自由。拿爸爸来说，他一生没给别人打过工，都是自己干，我很羡慕，因为很轻松，很随意，现在生活也很好，可是因为资本问题，爸爸妈妈很累并且处于社会底层，现在也一直累。       想来一会，我可以这么规划我的一生：       首先就是工作了，毕竟刚开始什么都没有，没有资本，没有经验，没有经历，没有人缘，这段时间，我可以工作，可以冒险，10年到15年的样子，这期间主要有两个任务，就是积累资本和经历，经验和人脉。       然后我想在40岁左右，就是职业后期，开自己的貌似个体户类型的事业，不要很大，不要很累，不要很风险，要很符合自己心性的一些事业，孝敬爸妈，稳定的过日子，而不是劳累啊劳累。这样想想感觉很不错。呵呵，貌似云雾散去一些了，以后判断什么事情，有个大概的准绳。,"['自己', '将来', '一些', '思考', '今天', '看到', '一篇', '文章', '名字', '直白', '可以', '鞭策', '一辈子', '文章', '不看', '绝对', '损失', '思考', '自己', '未来', '好好', '想想', '自己', '想要', '什么', '想要', '什么样', '将来', '然后', '指导', '自己', '选择', '什么样', '职业', '自己', '静下来', '想想', '感觉', '对于', '自己', '人生', '最终', '想要', '稳定', '那种', '生活', '不想', '最终', '还是', '别人', '手下', '打工', '最后', '心里', '感觉', '开始', '10', '二十年', '可以', '打工', '职业生涯', '后期', '不想', '以此', '结尾', '自由', '爸爸', '来说', '一生', '别人', '打过工', '自己', '羡慕', '因为', '轻松', '随意', '现在', '生活', '可是', '因为', '资本', '问题', '爸爸妈妈', '很累', '并且', '处于', '社会底层', '现在', '一直', '想来', '一会', '可以', '这么', '规划', '一生', '首先', '就是', '工作', '毕竟', '开始', '什么', '没有', '没有', '资本', '没有', '经验', '没有', '经历', '没有', '人缘', '段时间', '可以', '工作', '可以', '冒险', '10', '15', '样子', '期间', '主要', '两个', '任务', '就是', '积累', '资本', '经历', '经验', '人脉', '然后', '40', '左右', '就是', '职业', '后期', '自己', '貌似', '个体户', '类型', '事业', '不要', '很大', '不要', '很累', '不要', '风险', '符合', '自己', '心性', '一些', '事业', '孝敬', '爸妈', '稳定', '过日子', '不是', '劳累', '劳累', '这样', '想想', '感觉', '不错', '呵呵', '貌似', '云雾', '一些', '以后', '判断', '什么', '事情', '有个', '大概', '准绳']","[[-0.24025658 -0.12751063  0.19906446  0.15312735  0.27595162 -0.31111197
  -0.18289723  0.44411051  0.00459053  0.00591005 -0.05964007 -0.29560616
  -0.17610916  0.56445551  0.14012715 -0.09529599 -0.14360307 -0.0140832
  -0.09890879 -0.40149806  0.04122797  0.22050568  0.0162791  -0.05907792
   0.1228941  -0.52300185 -0.24979829  0.08511448 -0.17913596 -0.04964343
   0.25136239  0.02790559 -0.02404174 -0.1303643  -0.07459201  0.30503553
  -0.10411375 -0.18729754  0.11023021 -0.71477502 -0.16910184 -0.53697386
  -0.03054277 -0.08812157 -0.16552037 -0.11275156 -0.25372187  0.45677829
  -0.17211244  0.34705562  0.20334045 -0.23604852 -0.10914149 -0.22803385
   0.08156177  0.34959231  0.25053616 -0.04500724  0.07622798 -0.06778257
   0.01881003  0.28760009  0.02123421  0.07973828 -0.35843816 -0.0297855
   0.04594337 -0.02083046 -0.20528171  0.41028727  0.13858186 -0.24780967
   0.36854721 -0.30200341  0.53823777  0.12784786  0.21299263 -0.12211796
  -0.23459469 -0.22000034 -0.08987548 -0.01899801 -0.04452436  0.29632652
  -0.35441869  0.1921968  -0.26800967  0.37150018  0.4127503   0.11566577
   0.30418197  0.1177075   0.33582426  0.16962684  0.16806714  0.34564733
   0.09095408 -0.27690485 -0.01867447 -0.06806688]]"
210,使用DEDE的全国地区分类导入到其它CMS," 因为要用到全国地区分类，直接查看了DEDE的数据库，发现有个表已经帮我们搞定了，那就是dede_area表,利用这个表，我们可以将其处理后，变成任何我们需要的格式的地区分类处理过程是这样的，分两步进行，第一步，先将一个地区和它的所有地区插入表格，不处理父子关系；第二步，专门去用update去处理父子关系，对应到本表格，是将一个节点的所有孩子的ID保存到本节点的一个字段，程序如下：<?phprequire_once './db.class.php';$db = new DB();$sql = ""select * from dede_area where reid='0';"";$rs = $db->query($sql);while($row = $db->getRows($rs)){    $sql1 = ""insert into brand_categories(upid,type,name,note,subcatid) values(0,'region','"".$row['name'].""','','')"";    $db->query($sql1);    $insertId = mysql_insert_id();    $sql2 = ""select * from dede_area where reid='"".$row['id'].""';"";    $rs2 = $db->query($sql2);    while($row2= $db->getRows($rs2)){        $sql3 = ""insert into brand_categories(upid,type,name,note,subcatid) values('"".$insertId.""','region','"".$row2['name'].""','','')"";        $db->query($sql3);    }}$sql = ""select * from brand_categories where type='region';"";$rs = $db->query($sql);while($row = $db->getRows($rs)){    $str = '';    $str .= $row['catid'];    $sql = ""select * from brand_categories where upid='"".$row['catid'].""';"";    $rs2 = $db->query($sql);    while ($row2 = $db->getRows($rs2)){        $str .= "", "".$row2['catid'];    }    $sql2 = ""update brand_categories set subcatid='"".$str.""' where catid='"".$row['catid'].""'"";    $db->query($sql2);}?> ","['使用', 'dede', '全国', '地区', '分类', '导入到', '其它', 'cms', '因为', '用到', '全国', '地区', '分类', '直接', '查看', 'dede', '数据库', '发现', '有个表', '已经', '我们', '搞定', '就是', 'dede', 'area', '利用', '这个', '我们', '可以', '处理', '变成', '任何', '我们', '需要', '格式', '地区', '分类', '处理过程', '这样', '两步', '进行', '第一步', '一个', '地区', '所有', '地区', '插入', '表格', '处理', '父子关系', '第二步', '专门', 'update', '处理', '父子关系', '对应', '表格', '一个', '节点', '所有', '孩子', 'id', '保存', '节点', '一个', '程序', '如下', 'phprequire', 'once', 'db', 'class', 'php', 'db', 'new', 'db', 'sql', 'select', 'from', 'dede', 'area', 'where', 'reid', 'rs', 'db', 'query', 'sql', 'while', 'row', 'db', 'getrows', 'rs', 'sql1', 'insert', 'into', 'brand', 'categories', 'upid', 'type', 'name', 'note', 'subcatid', 'values', 'region', 'row', 'name', 'db', 'query', 'sql1', 'insertid', 'mysql', 'insert', 'id', 'sql2', 'select', 'from', 'dede', 'area', 'where', 'reid', 'row', 'id', 'rs2', 'db', 'query', 'sql2', 'while', 'row2', 'db', 'getrows', 'rs2', 'sql3', 'insert', 'into', 'brand', 'categories', 'upid', 'type', 'name', 'note', 'subcatid', 'values', 'insertid', 'region', 'row2', 'name', 'db', 'query', 'sql3', 'sql', 'select', 'from', 'brand', 'categories', 'where', 'type', 'region', 'rs', 'db', 'query', 'sql', 'while', 'row', 'db', 'getrows', 'rs', 'str', 'str', 'row', 'catid', 'sql', 'select', 'from', 'brand', 'categories', 'where', 'upid', 'row', 'catid', 'rs2', 'db', 'query', 'sql', 'while', 'row2', 'db', 'getrows', 'rs2', 'str', 'row2', 'catid', 'sql2', 'update', 'brand', 'categories', 'set', 'subcatid', 'str', 'where', 'catid', 'row', 'catid', 'db', 'query', 'sql2']","[[-0.19508429 -0.10523367  0.22610071  0.08273639  0.30926267 -0.34237408
  -0.13197689  0.46866481 -0.06097948 -0.12834362 -0.03142218 -0.33776588
  -0.16255108  0.51223938  0.16725837 -0.07994733 -0.11664028 -0.00121547
  -0.07933349 -0.54222756 -0.05545245  0.23248602 -0.04106921 -0.21395152
   0.0690548  -0.45964397 -0.30081299  0.03797971 -0.2478377  -0.06932079
   0.15816819 -0.00856357  0.00522834 -0.12873611 -0.16050195  0.30853714
  -0.21473352 -0.26416948  0.0819447  -0.71092334 -0.14654852 -0.59146429
  -0.08125399  0.01807569 -0.11930941 -0.21836922 -0.17561784  0.31224764
  -0.20790215  0.47459259  0.15998062 -0.25461085 -0.15123768 -0.13292266
  -0.01441146  0.3605843   0.14321759 -0.08457482  0.10217322 -0.14450147
   0.09244446  0.21755616  0.01561054  0.09994634 -0.35970192  0.03641057
   0.07691028 -0.05155204 -0.31801111  0.41166668  0.11064946 -0.16524467
   0.34310636 -0.31196831  0.52643309  0.25467027  0.09201084 -0.12723437
  -0.35279601 -0.07985327  0.03697737  0.0731035  -0.12158652  0.34915402
  -0.31128605  0.21123546 -0.26589991  0.40897278  0.46771796  0.13939033
   0.24567069  0.08888394  0.35815605  0.18618638  0.18722133  0.2999029
   0.12577092 -0.32333246 -0.09033173 -0.11961523]]"
215,17个非常有用的PHP类和库,"本文转自互联网。在我们日常程序开发当中，使用一个好的而且成熟的PHP类，可以减少很多手工编码，通过这些通用API的使用，可以大大减轻我们的开发工作。今天，我们将重点介绍了一些很少见却又非常实用的PHP类、库和组件，这将有助于您提高程序功能，更重要是减少应用程序的开发时间。 一、数据库1、ADOdb – 数据库抽象类官网地址：http://adodb.sourceforge.net/ADOdb是一个PHP数据库抽象类，它支持数据库包括：MySQL,、PostgreSQL、Oracle、 MS SQL、SQLite等，它基本上涵盖了目前最流行的数据库，而且完全开源和免费，可以方便快捷的应用到您的程序当中，它还具有非常强的可移植性，最重要的是它有中文使用方法！ 2、PHP DB Class – MySQL数据库类官网地址：http://slaout.linux62.org/php/index.html PHP DB Class是一个方便的PHP / MySQL开发类，它非常简单和灵活，而且代码很少。它还提供了调试功能，您只需添加简单的参数，就可以查询相关数据表，以及输出调试过程中出现的错误。3、SQLCache – 缓存数据库查询结果类下载地址：http://www.phpclasses.org/package/2646-PHP-Cache-database-query-results-in-files-.htmlSQLCache只有一个PHP类文件，它主要作用是缓存SQL数据库查询结果，这样做的目的是为了避免增加数据库访问压力，减少重复查询语言的执行，从而加快网站访问速度。4、IAM Backup – MySQL数据库备份和恢复类 下载地址：http://freshmeat.net/projects/iambackup/IAM Backup是一个MySQL数据库备份和恢复类，它支持gzip在线压缩文件，提高数据库备份和恢复性能。5、DataGrid – 数据库输出显示控件下载地址：http://www.apphp.com/php-datagrid/index.phpDataGrid是一个使用PHP开发的数据库显示控件，它简单、新颖、功能强大，而且是专门为Web开发人员而准备的。DataGrid绑定数据库后，只需要修改数据库，就可以修改输出方式，也就是说只用修改数据，而不用管如何去显示！二、安全1、PhpCaptcha – 生成图片验证码下载地址：http://www.ejeliot.com/pages/2PhpCaptcha可以生成图片验证码，该类需要PHP 4版本以上的GD1或2支持，还而要FreeType字体的支持。2、用户输入安全处理类下载地址：http://codeassembly.com/How-to-sanitize-your-php-input/ 一个简单实用的类，可以保证用户输入的数据是安全的，它通过检查$ _GET、$ _POST、$ _REQUEST及$ _COOKIE提交的数据，并过滤掉其中的危险字符，确保它们提交的数据符合程序要求。3、HTML Purifier下载地址：http://www.ecisp.cn/download/htmlpurifier-4.2.0.zipHTML Purifier是一个标准的HTML过滤类，使用PHP5编写。 它具有删除、验证、设置安全的白名单代码、及过滤除清恶意代码（如），它也可以验证当前HTML文件是否符合标准。4、phpAES - PHP加密类 下载地址：http://www.ecisp.cn/download/phpAES.zipphpAES可以实现128、192和256位AES加密，它不需要mcrypt扩展，可以用于任何PHP程序中，它使用100％的PHP开发，并完全符合FIPS 197的标准。三、图像处理1、PHPTHUMB - PHP缩略图下载地址：http://phpthumb.gxdlabs.com/PHPTHUBM是一个轻量级的图像处理类，它主要的功能是生成缩略图，它具有通过调整宽度和高度等比缩放图片、建立新图、剪切或旋转图像。2、WideImage- 图片处理类下载地址：http://wideimage.sourceforge.net/demos/WideImage是一种使用PHP5面向对像编写的图像处理类，它是一个纯PHP类，优点是不需要GD2就可以处理任何图片，该类具有常见的图像操作功能，并且简单易用。3、PHP 将文本生成图像类下载地址：http://www.daftlogic.com/projects-text-to-image.htm这个类可以将文本转换成图片，比如将电子邮件地址转换成图片，或者将数字电话号码转换成图片等，这可以帮助减少您的信息被互联网非法收集。四、文件处理1、TCPDF – 生成PDF文件下载地址：http://www.tcpdf.org/TCPDF是一个生成PDF文档的类，而且是目前互联网中唯一的生成PDF的PHP类，支持UTF - 8编码、支持双向加密PDF文件算法。2、parseCSV下载地址：http://code.google.com/p/parsecsv-for-php/parseCSV是一个用于读取CSV文件的PHP类， 它能够轻松处理CSV数据，它支持识别逗号、双引号和空格分割的数据。3、导出EXCEL文件类下载地址：http://phpexcel.codeplex.com/一个轻量级的、简单而快速的PHP数据导出到Excel文件类，它支持设置EXCEL文件的标题（作者、标题、描述、...）、多个工作表、不同的字体和样式、单元格边框样式、填充、渐变等功能，还可以添加图片到电子表格等，五、图表和图形1、XML/SWF Charts  - 图表生成类  下载地址：http://www.maani.us/xml_charts/XML/SWF Charts是一个简单但功能强大图表生成工具，它能从XML文件读取生成具有吸引力的数据图，XML数据源可以使用任何语言脚本生成，如（PHP、ASP、JSP等）2、jpGraph  - 图表生成类 下载地址：http://jpgraph.net/JpGraph是一个使用PHP5面向对象开发的图形库，它可以生成常用的数据图表，可很容易的整合到您的PHP脚本中。 ","['17', '非常', '有用', 'php', '类和库', '本文', '转自', '互联网', '我们', '日常', '程序开发', '当中', '使用', '一个', '而且', '成熟', 'php', '可以', '减少', '很多', '手工', '编码', '通过', '这些', '通用', 'api', '使用', '可以', '大大', '减轻', '我们', '开发', '工作', '今天', '我们', '重点', '介绍', '一些', '很少', '非常', '实用', 'php', '组件', '有助于', '提高', '程序', '功能', '重要', '减少', '应用程序', '开发', '时间', '数据库', 'adodb', '数据库', '抽象类', '官网', '地址', 'http', 'adodb', 'sourceforge', 'net', 'adodb', '一个', 'php', '数据库', '抽象类', '支持', '数据库', '包括', 'mysql', 'postgresql', 'oracle', 'ms', 'sql', 'sqlite', '基本上', '涵盖', '目前', '流行', '数据库', '而且', '完全', '开源', '免费', '可以', '方便快捷', '应用', '程序', '当中', '具有', '非常', '可移植性', '重要', '中文', '使用', '方法', 'php', 'db', 'class', 'mysql', '数据库', '类官', '地址', 'http', 'slaout', 'linux62', 'org', 'php', 'index', 'html', 'php', 'db', 'class', '一个', '方便', 'php', 'mysql', '开发', '非常简单', '灵活', '而且', '代码', '很少', '提供', '调试', '功能', '添加', '简单', '参数', '可以', '查询', '相关', '数据表', '以及', '输出', '调试', '过程', '出现', '错误', 'sqlcache', '缓存', '数据库', '查询', '结果', '下载', '地址', 'http', 'www', 'phpclasses', 'org', 'package', '2646', 'php', 'cache', 'database', 'query', 'results', 'in', 'files', '-.', 'htmlsqlcache', '只有', '一个', 'php', '文件', '主要', '作用', '缓存', 'sql', '数据库', '查询', '结果', '这样', '目的', '为了', '避免', '增加', '数据库', '访问', '压力', '减少', '重复', '查询语言', '执行', '从而', '加快', '网站', '访问速度', 'iam', 'backup', 'mysql', '数据库', '备份', '恢复', '下载', '地址', 'http', 'freshmeat', 'net', 'projects', 'iambackup', 'iam', 'backup', '一个', 'mysql', '数据库', '备份', '恢复', '支持', 'gzip', '在线', '压缩文件', '提高', '数据库', '备份', '恢复', '性能', 'datagrid', '数据库', '输出', '显示', '控件', '下载', '地址', 'http', 'www', 'apphp', 'com', 'php', 'datagrid', 'index', 'phpdatagrid', '一个', '使用', 'php', '开发', '数据库', '显示', '控件', '简单', '新颖', '功能强大', '而且', '专门', 'web', '开发人员', '准备', 'datagrid', '绑定', '数据库', '需要', '修改', '数据库', '可以', '修改', '输出', '方式', '也就是说', '只用', '修改', '数据', '不用', '如何', '显示', '安全', 'phpcaptcha', '生成', '图片', '验证码', '下载', '地址', 'http', 'www', 'ejeliot', 'com', 'pages', '2phpcaptcha', '可以', '生成', '图片', '验证码', '该类', '需要', 'php', '版本', '以上', 'gd1', '支持', 'freetype', '字体', '支持', '用户', '输入', '安全', '处理', '下载', '地址', 'http', 'codeassembly', 'com', 'how', 'to', 'sanitize', 'your', 'php', 'input', '一个', '简单', '实用', '可以', '保证', '用户', '输入', '数据', '安全', '通过', '检查', 'get', 'post', 'request', 'cookie', '提交', '数据', '过滤', '其中', '危险', '字符', '确保', '它们', '提交', '数据', '符合', '程序', '要求', 'html', 'purifier', '下载', '地址', 'http', 'www', 'ecisp', 'cn', 'download', 'htmlpurifier', '4.2', 'ziphtml', 'purifier', '一个', '标准', 'html', '过滤', '使用', 'php5', '编写', '具有', '删除', '验证', '设置', '安全', '白名单', '代码', '过滤', '除清', '恶意代码', '可以', '验证', '当前', 'html', '文件', '是否', '符合标准', 'phpaes', 'php', '加密', '下载', '地址', 'http', 'www', 'ecisp', 'cn', 'download', 'phpaes', 'zipphpaes', '可以', '实现', '128', '192', '256', 'aes', '加密', '需要', 'mcrypt', '扩展', '可以', '用于', '任何', 'php', '程序', '使用', '100', 'php', '开发', '完全符合', 'fips', '197', '标准', '图像处理', 'phpthumb', 'php', '缩略图', '下载', '地址', 'http', 'phpthumb', 'gxdlabs', 'com', 'phpthubm', '一个', '轻量级', '图像处理', '主要', '功能', '生成', '缩略图', '具有', '通过', '调整', '宽度', '高度', '缩放', '图片', '建立', '剪切', '旋转', '图像', 'wideimage', '图片', '处理', '下载', '地址', 'http', 'wideimage', 'sourceforge', 'net', 'demos', 'wideimage', '一种', '使用', 'php5', '面向', '编写', '图像处理', '一个', 'php', '优点', '需要', 'gd2', '可以', '处理', '任何', '图片', '该类', '具有', '常见', '图像', '操作', '功能', '并且', '简单', '易用', 'php', '文本', '生成', '图像', '下载', '地址', 'http', 'www', 'daftlogic', 'com', 'projects', 'text', 'to', 'image', 'htm', '这个', '可以', '文本', '转换成', '图片', '比如', '电子邮件', '地址', '转换成', '图片', '或者', '数字', '电话号码', '转换成', '图片', '可以', '帮助', '减少', '信息', '互联网', '非法', '收集', '文件', '处理', 'tcpdf', '生成', 'pdf', '文件', '下载', '地址', 'http', 'www', 'tcpdf', 'org', 'tcpdf', '一个', '生成', 'pdf', '文档', '而且', '目前', '互联网', '唯一', '生成', 'pdf', 'php', '支持', 'utf', '编码', '支持', '双向', '加密', 'pdf', '文件', '算法', 'parsecsv', '下载', '地址', 'http', 'code', 'google', 'com', 'parsecsv', 'for', 'php', 'parsecsv', '一个', '用于', '读取', 'csv', '文件', 'php', '能够', '轻松', '处理', 'csv', '数据', '支持', '识别', '逗号', '双引号', '空格', '分割', '数据', '导出', 'excel', '文件', '下载', '地址', 'http', 'phpexcel', 'codeplex', 'com', '一个', '轻量级', '简单', '快速', 'php', '数据', '导出', 'excel', '文件', '支持', '设置', 'excel', '文件', '标题', '作者', '标题', '描述', '...', '多个', '工作', '不同', '字体', '样式', '单元格', '边框', '样式', '填充', '渐变', '功能', '可以', '添加', '图片', '电子表格', '图表', '图形', 'xml', 'swf', 'charts', '图表', '生成', '下载', '地址', 'http', 'www', 'maani', 'us', 'xml', 'charts', 'xml', 'swf', 'charts', '一个', '简单', '功能强大', '图表', '生成', '工具', 'xml', '文件', '读取', '生成', '具有', '吸引力', '数据', 'xml', '数据源', '可以', '使用', '任何', '语言', '脚本', '生成', 'php', 'asp', 'jsp', 'jpgraph', '图表', '生成', '下载', '地址', 'http', 'jpgraph', 'net', 'jpgraph', '一个', '使用', 'php5', '面向对象', '开发', '图形库', '可以', '生成', '常用', '数据', '图表', '容易', '整合', 'php', '脚本']","[[-2.72916642e-01 -1.50717937e-01  2.51923820e-01  3.06071097e-01
   2.11407778e-01 -4.08866534e-01 -1.58663800e-01  5.44677976e-01
  -2.53035796e-02 -4.47203431e-02 -1.07700808e-01 -4.02144630e-01
  -1.48146226e-01  6.19548264e-01  1.04595844e-01 -1.49443532e-01
  -1.52567769e-01  1.49310585e-02 -2.75607725e-02 -4.07960776e-01
   3.65061461e-02  2.89596683e-01 -6.66490444e-02 -1.50535258e-01
   5.39724591e-02 -5.21273210e-01 -3.46419058e-01  1.08753148e-01
  -1.95908874e-01 -7.08514799e-02  2.35180209e-01  1.36890252e-01
  -7.11444611e-04 -1.31315244e-01 -1.83502750e-01  4.02156196e-01
  -1.51027830e-01 -2.35298805e-01  9.00468970e-02 -7.32042822e-01
  -9.85797971e-02 -5.64593075e-01 -1.90627954e-02 -7.00773899e-02
  -1.52272191e-01 -2.21558279e-01 -3.72706125e-01  5.06034012e-01
  -2.71274608e-02  3.59376672e-01  1.18224002e-01 -3.27676892e-01
   2.56958875e-03 -2.91520499e-01  3.53198180e-02  4.64054672e-01
   2.34410851e-01 -7.91251432e-02  1.39983371e-01 -9.25996104e-02
   1.22360933e-01  2.61318961e-01  1.95067272e-02  8.51578997e-02
  -3.78302095e-01  2.53096079e-02 -3.47970723e-02  5.67074989e-02
  -2.07664488e-01  4.63865029e-01  9.50418907e-02 -2.20517320e-01
   4.60310130e-01 -3.53485624e-01  6.16078147e-01  2.59211134e-01
   3.23882418e-01 -2.16235701e-01 -2.13569851e-01 -2.71714190e-01
  -1.43756773e-01  5.29005480e-03 -1.03530824e-01  4.12209513e-01
  -4.33096802e-01  1.84022302e-01 -3.06124819e-01  5.25147839e-01
   5.68227837e-01  1.78275211e-01  2.49490696e-01  1.36727332e-01
   3.40861830e-01  1.84382394e-01  2.07747778e-01  4.98168975e-01
   6.80028952e-02 -2.42007884e-01  1.67320616e-01 -9.50852620e-02]]"
219,navicat-MySQL前台管理工具利器,"官方网站： http://www.navicat.com/  Navicat MySQL是一个强大的MySQL数据库服务器管理和开发工具。它可以与任何3.21或以上版本的MySQL一起工作，并支持大部分的MySQL最新功能，包括触发器、存储过程、函数、事件、视图、管理用户，等等。它不仅对专业开发人员来说是非常尖端的技术，而且对于新手来说也易学易用。其精心设计的图形用户界面（GUI），Navicat MySQL可以让你用一种安全简便的方式快速并容易地创建，组织，访问和共享信息。　　Navicat MySQL使用户连接到本地/远程服务器，提供了几种实用工具，例如数据结构同步、导入/导出、备份和报告，使维护数据的过程很容易。　　自从2001年初以来，Navicat在全世界范围内已被下载了数百万次；Navicat是公认最受欢迎的MySQL前端图形用户界面，而且它对于本地或远程的MySQL管理和开发，在三种操作系统平台上——Windows、Mac OS X和Linux都是可用的。在过去的5年中，Navicat已在最好的服务器管理工具类别的几个奖项中被提名，并且被许多托管公司选为一种标准的托管工具，例如Rackspace公司，是最成功的管理托管公司之一。　　在世界各地的全球企业，政府机构和教育机构，Navicat是众所周知的，可以信任并且每天都要使用的。通常世界500强的公司中100多个都使用Navicat。编辑本段主要功能　　－表单检视(新增)　　－虚拟群组(新增)　　－自动完码(新增)　　－排程工作结果自动传送电子邮件(新增)　　－查询、 检视及事件自动完码(新增)　　－报告可汇出成各种格式，PDF, Excel, HTML 等(新增)　　－超时自动重新连接到SQL服务器　　－数据和结构同步　　－导出注册文件以传送到另外的计算机　　－新查询创建器--为不同的数据库创建查询　　－查询参数　　－SQL控制台　　－建立查看　　－SSH密钥　　－支持所有MySQL版本　　－SSH及HTTP隧道　　－汇入/汇出数据　　－报表设计及建立   ","['navicat', 'mysql', '前台', '管理工具', '利器', '官方网站', 'http', 'www', 'navicat', 'com', 'navicat', 'mysql', '一个', '强大', 'mysql', '数据库', '服务器', '管理', '开发工具', '可以', '任何', '3.21', '以上', '版本', 'mysql', '一起', '工作', '支持', '大部分', 'mysql', '最新', '功能', '包括', '触发器', '存储', '过程', '函数', '事件', '视图', '管理', '用户', '等等', '不仅', '专业', '开发人员', '来说', '非常', '尖端', '技术', '而且', '对于', '新手', '来说', '易学', '易用', '精心设计', '图形用户界面', 'gui', 'navicat', 'mysql', '可以', '一种', '安全', '简便', '方式', '快速', '容易', '创建', '组织', '访问', '共享', '信息', 'navicat', 'mysql', '用户', '连接', '本地', '远程', '服务器', '提供', '几种', '实用工具', '例如', '数据结构', '同步', '导入', '导出', '备份', '报告', '维护', '数据', '过程', '容易', '自从', '2001', '年初', '以来', 'navicat', '全世界', '范围', '下载', '数百万', 'navicat', '公认', '受欢迎', 'mysql', '前端', '图形用户界面', '而且', '对于', '本地', '远程', 'mysql', '管理', '开发', '三种', '操作系统', '平台', 'windows', 'mac', 'os', 'linux', '可用', '过去', 'navicat', '最好', '服务器', '管理工具', '类别', '几个', '奖项', '提名', '并且', '许多', '托管', '公司', '一种', '标准', '托管', '工具', '例如', 'rackspace', '公司', '成功', '管理', '托管', '公司', '之一', '世界各地', '全球', '企业', '政府', '机构', '教育', '机构', 'navicat', '众所周知', '可以', '信任', '并且', '每天', '使用', '通常', '世界', '500', '公司', '100', '多个', '使用', 'navicat', '编辑', '主要', '功能', '表单', '检视', '新增', '虚拟', '群组', '新增', '自动', '完码', '新增', '排程', '工作', '结果', '自动', '传送', '电子邮件', '新增', '查询', '检视', '事件', '自动', '完码', '新增', '报告', '汇出', '各种', '格式', 'pdf', 'excel', 'html', '新增', '超时', '自动', '重新', '连接', 'sql', '服务器', '数据', '结构', '同步', '导出', '注册', '文件', '传送', '另外', '计算机', '查询', '创建', '--', '不同', '数据库', '创建', '查询', '查询', '参数', 'sql', '控制台', '建立', '查看', 'ssh', '密钥', '支持', '所有', 'mysql', '版本', 'ssh', 'http', '隧道', '汇入', '汇出', '数据', '报表', '设计', '建立']","[[-2.36505227e-01 -1.23666497e-01  2.04670499e-01  1.88532914e-01
   2.45940078e-01 -3.28973607e-01 -1.57158770e-01  4.60771264e-01
  -1.23095043e-02 -2.82675674e-02 -7.24092069e-02 -3.16547511e-01
  -1.49859013e-01  5.42276311e-01  1.20268785e-01 -1.06298200e-01
  -1.34572357e-01  6.71446603e-04 -6.92136927e-02 -3.93737065e-01
   3.08525353e-02  2.28590161e-01 -2.16860537e-02 -1.01273662e-01
   9.11616929e-02 -4.87123597e-01 -2.75481603e-01  8.29861472e-02
  -1.81049808e-01 -6.18859245e-02  2.20771337e-01  6.01562592e-02
  -1.65618537e-02 -1.22913661e-01 -1.17076056e-01  3.23102881e-01
  -1.22777377e-01 -2.01309446e-01  9.62032932e-02 -6.80749646e-01
  -1.31375329e-01 -5.17831919e-01 -2.63776651e-02 -6.44723815e-02
  -1.46700250e-01 -1.50983464e-01 -2.72859211e-01  4.35205002e-01
  -1.17839268e-01  3.44810228e-01  1.56467678e-01 -2.57679677e-01
  -7.14436818e-02 -2.25155232e-01  5.20901959e-02  3.69105172e-01
   2.17141887e-01 -5.69506594e-02  9.81180381e-02 -8.11803208e-02
   6.00266158e-02  2.53067311e-01  2.21036365e-02  7.35249912e-02
  -3.48011240e-01 -4.02771618e-03  1.89864115e-02  5.60471753e-03
  -2.09590675e-01  4.01974037e-01  1.15894367e-01 -2.16337723e-01
   3.73596383e-01 -3.01922235e-01  5.29728453e-01  1.78831289e-01
   2.18915204e-01 -1.46222546e-01 -2.32839931e-01 -2.06475126e-01
  -8.79169801e-02  4.18568696e-03 -6.66661201e-02  3.28172568e-01
  -3.53461514e-01  1.82478363e-01 -2.63220444e-01  4.02037486e-01
   4.47440401e-01  1.31844838e-01  2.65553893e-01  1.13145177e-01
   3.21469416e-01  1.71829807e-01  1.74520502e-01  3.72788869e-01
   8.08339759e-02 -2.54466317e-01  4.00629499e-02 -8.12536868e-02]]"
224,9个高质量图标的最佳搜索引擎,原文链接：8个高质量图标的最佳搜索引擎对于每个网站开发者来说，设计是很重要的一部分。图标是设计中一个环节。你可以找到许多集合图标的网站。但很难找到免费的高质量图标。这是我在此分享一些免费的高质量图标搜索引擎的原因。你要访问这些引擎以找到高质量图标。如果你知道更多的网站，也请与我们分享！IconFinder以简便并且有效的方式为网站设计者和开发人员提供高质量的图标。 Iconlet是一个单纯的免费图标和图像的搜索引擎。IconScanIconSeeker是最好的在线图标搜索引擎，它有5万多个高质量的图标，每个图标都有适合 Windows、Macintosh和Linux系统的PNG、ICO和ICNS 格式。Icons Search是有助于你在网上找到高质量图标的图标搜索引擎。MrIconsVeryIcon也是一个非常有用的网站，你可以用它找到高质量的图标，它有1千多个图标包共2万多个高质量的网络图标。IconLook在ICONlook.com 上你可以找到你想要的图标。我自己再加一个：http://www.easyicon.cn/  ,"['高质量', '图标', '最佳', '搜索引擎', '原文', '链接', '高质量', '图标', '最佳', '搜索引擎', '对于', '每个', '网站', '开发者', '来说', '设计', '重要', '一部分', '图标', '设计', '一个', '环节', '可以', '找到', '许多', '集合', '图标', '网站', '找到', '免费', '高质量', '图标', '分享', '一些', '免费', '高质量', '图标', '搜索引擎', '原因', '访问', '这些', '引擎', '找到', '高质量', '图标', '如果', '知道', '网站', '我们', '分享', 'iconfinder', '简便', '并且', '有效', '方式', '网站', '设计者', '开发人员', '提供', '高质量', '图标', 'iconlet', '一个', '单纯', '免费', '图标', '图像', '搜索引擎', 'iconscaniconseeker', '最好', '在线', '图标', '搜索引擎', '万多个', '高质量', '图标', '每个', '图标', '适合', 'windows', 'macintosh', 'linux', '系统', 'png', 'ico', 'icns', '格式', 'icons', 'search', '有助于', '网上', '找到', '高质量', '图标', '图标', '搜索引擎', 'mriconsveryicon', '一个', '非常', '有用', '网站', '可以', '找到', '高质量', '图标', '千多个', '图标', '包共', '万多个', '高质量', '网络', '图标', 'iconlook', 'iconlook', 'com', '可以', '找到', '想要', '图标', '自己', '一个', 'http', 'www', 'easyicon', 'cn']","[[-0.21210507 -0.11728397  0.19351209  0.18123268  0.212331   -0.30296792
  -0.14385427  0.41472809 -0.01424093 -0.01613184 -0.06384357 -0.29412738
  -0.14208069  0.49941737  0.10667182 -0.10207409 -0.12527159 -0.00348595
  -0.06520146 -0.35948665  0.02613855  0.21644351 -0.01773476 -0.09037484
   0.08020157 -0.44659503 -0.24950456  0.07732802 -0.16336466 -0.05174132
   0.20412715  0.05653305 -0.00738459 -0.11513696 -0.10506303  0.29347556
  -0.11404354 -0.18542197  0.08373314 -0.61863579 -0.1220229  -0.47656511
  -0.02696231 -0.06358318 -0.13409279 -0.13883692 -0.25537156  0.39684682
  -0.10242757  0.3139465   0.14040442 -0.23777563 -0.06067291 -0.20701943
   0.04809312  0.34259686  0.19951399 -0.05738529  0.08866667 -0.06811611
   0.05616775  0.23222532  0.01619926  0.07385944 -0.31527863  0.00133439
   0.0109314   0.00463244 -0.18550328  0.37183512  0.09674375 -0.20033972
   0.34707572 -0.27937695  0.48727325  0.1630119   0.21067202 -0.14264695
  -0.20076844 -0.19506286 -0.08867484 -0.00200848 -0.06517306  0.29942642
  -0.32511459  0.1646189  -0.24075515  0.37478081  0.4085409   0.12182089
   0.23853853  0.10832429  0.29091734  0.14887904  0.15857935  0.34806538
   0.0752434  -0.23227022  0.03785483 -0.0695728 ]]"
234,C++标准库string类型学习笔记," String类型支持长度可变的字符串，需要包含头文件#include<string>1、string对象的定义和初始化string支持好几种初始化方式：初始化方式说明String s1;默认构造函数，s1是空串String s2(s1)将s2初始化为s1的一个副本String s3(“value”)将s3初始化为一个字符串字面值的副本String s4(n, ‘c’)将s4初始化为字符’c’的n个副本 C++ primer4标注：字符串字面值和标准库string类型不是同一种类型2、string对象上可以进行的操作可执行的操作(string s)操作说明s.empty()判断s是否为空串，若为空，返回trues.size()返回s中字符的个数S[n]返回s中位置为n的字符，位置从0开始S1+s2字符串连接，可以用+操作符S1=s2字符串拷贝，将s1内容替换成s2的副本V1==v2比较v1与v2的内容，相等则返回true！=，<，<=，>和>=保持这些操作符惯有的含义 3、string类型的其他操作Ø  可以用cin>>str从命令端读入字符串，是以空格分开读入的Ø  可以用cout<<str输出字符串到命令端Ø  可以用getline(cin,str)从命令端读入一行字符串，包括空格也会读入Ø  循环遍历string的时候，下表值不要用Int类型，因为string的内置的长度函数size()返回的是string::size_type类型，这是一个unsingned类型，在有的机器上，int类型的范围太小了，因此需要这样遍历string，For(size_type i=0; i<str.size(); i++)Ø  可以用str[i]=’x’这样的方式，将str的某一位覆盖掉新值","['c++', '标准', 'string', '类型', '学习', '笔记', 'string', '类型', '支持', '长度', '可变', '字符串', '需要', '包含', '头文件', 'include', 'string', 'string', '对象', '定义', '初始化', 'string', '支持', '好几种', '初始化', '方式', '初始化', '方式', '说明', 'string', 's1', '默认', '构造函数', 's1', '空串', 'string', 's2', 's1', 's2', '初始化', 's1', '一个', '副本', 'string', 's3', 'value', 's3', '初始化', '一个', '字符串', '面值', '副本', 'string', 's4', 's4', '初始化', '字符', '副本', 'c++', 'primer4', '标注', '字符串', '面值', '标准', 'string', '类型', '不是', '一种', '类型', 'string', '对象', '可以', '进行', '操作', '执行', '操作', 'string', '操作', '说明', 'empty', '判断', '是否', '空串', '若为', '返回', 'trues', 'size', '返回', '字符', '个数', '返回', '位置', '字符', '位置', '开始', 's1', 's2', '字符串', '连接', '可以', '操作符', 's1', 's2', '字符串', '拷贝', 's1', '内容', '替换成', 's2', '副本', 'v1', 'v2', '比较', 'v1', 'v2', '内容', '相等', '返回', 'true', '保持', '这些', '操作符', '惯有', '含义', 'string', '类型', '其他', '操作', '可以', 'cin', 'str', '命令', '读入', '字符串', '空格', '分开', '读入', '可以', 'cout', 'str', '输出', '字符串', '命令', '可以', 'getline', 'cin', 'str', '命令', '读入', '一行', '字符串', '包括', '空格', '读入', '循环', '遍历', 'string', '时候', '下表值', '不要', 'int', '类型', '因为', 'string', '内置', '长度', '函数', 'size', '返回', 'string', 'size', 'type', '类型', '这是', '一个', 'unsingned', '类型', '机器', 'int', '类型', '范围', '太小', '因此', '需要', '这样', '遍历', 'string', 'for', 'size', 'type', 'str', 'size', '++', '可以', 'str', '这样', '方式', 'str', '一位', '覆盖', '新值']","[[-0.22402405 -0.10874184  0.27486997  0.0707512   0.35263776 -0.35918836
  -0.18072382  0.48449424 -0.03403359 -0.09568453 -0.01214133 -0.37345559
  -0.16581781  0.61141782  0.21193014 -0.09179112 -0.16049207 -0.00877256
  -0.13493078 -0.61452055 -0.03179577  0.23001782 -0.02484661 -0.15007317
   0.10155371 -0.54325807 -0.3079106   0.06633512 -0.25673901 -0.07026604
   0.18127135 -0.05635385 -0.00952808 -0.14863651 -0.13118573  0.31879874
  -0.18432709 -0.27081201  0.10951332 -0.83170811 -0.21969412 -0.67800269
  -0.10375516 -0.02174437 -0.1744878  -0.22093158 -0.20613196  0.40130976
  -0.2715857   0.5238812   0.21518175 -0.26964915 -0.18786382 -0.17182991
   0.04571852  0.41166642  0.2013057  -0.09891372  0.10273553 -0.15138544
   0.04251008  0.28367442  0.02973709  0.10929704 -0.42149433  0.02449663
   0.08144714 -0.06938484 -0.33332424  0.46159987  0.18614046 -0.22394223
   0.40006925 -0.32493867  0.57555059  0.25520292  0.10966306 -0.13880719
  -0.36400458 -0.12693314  0.01105567  0.02506816 -0.08160353  0.35613211
  -0.35818724  0.25486862 -0.31930729  0.43169911  0.49978496  0.15996979
   0.31014967  0.12209242  0.41865061  0.20737678  0.19598183  0.31933768
   0.13242396 -0.38068614 -0.138926   -0.15166835]]"
236,C++数组类型学习笔记,"现代C++程序应尽量使用vector和迭代器类型，而避免使用低级的数组和指针。设计良好的程序只有在强调速度时才在类实现的内部使用数组和指针。1、数组的缺陷： Ø 数组的长度是固定的Ø 程序员无法知道一个给定数组的长度Ø 没有提供size操作返回大小，也没有提供push_back操作添加元素Ø 如果要更改数组长度，我们不得不先建立一个更大的数组，再将原来的数组元素拷贝进去Ø 容易出错，难以调试总之数组很烂，而我们还要学习数组的原因，是依赖于数组的程序还大量存在。 2、数组的定义 数组的维数必须用在编译时就能确定的值，例如整形字面值常量、枚举常量或者用常量表达式初始化的整形const对象。非const变量以及要到运行时才能知道其值的const变量都不能用于数组的维数。 3、数组的初始化 int ia[] = {0,1,2}；//直接给出初始化列表       int ia[3];//没有初始化       初始化相关： 初始化情况  说明  函数体外定义的数组 元素初始化为0  函数体内定义的内置数组 不提供初始化 函数体内或者外面的自定义类型 自动调用默认构造函数初始化 4、字符数组的初始化 char ca1[] = {‘a’,’b’,’+’};//给出初始化列表 char ca2[] = {‘a’,’b’,’+’,’\0’}//初始化末尾有个空字符’\0’，因此该字符数组是字符串char ca3[] = “ab+”//用字符串字面量初始化字符数组，末尾将自动填’\0’ char ca3[3] = “ab+”//错误，因为字符串字面量带有’\0’,现在却放不下 5、数组的操作 数组下标的正确类型是size_t，遍历时应生命为该类型数组相关操作，要仔细检查下标是否越界 ","['c++', '数组', '类型', '学习', '笔记', '现代', 'c++', '程序', '尽量', '使用', 'vector', '迭代', '类型', '避免', '使用', '低级', '数组', '指针', '设计', '良好', '程序', '只有', '强调', '速度', '时才', '实现', '内部', '使用', '数组', '指针', '数组', '缺陷', '数组', '长度', '固定', '程序员', '无法', '知道', '一个', '给定', '数组', '长度', '没有', '提供', 'size', '操作', '返回', '大小', '没有', '提供', 'push', 'back', '操作', '添加', '元素', '如果', '更改', '数组', '长度', '我们', '不得不', '建立', '一个', '更大', '数组', '原来', '数组', '元素', '拷贝', '进去', '容易', '出错', '难以', '调试', '总之', '数组', '很烂', '我们', '还要', '学习', '数组', '原因', '依赖于', '数组', '程序', '大量', '存在', '数组', '定义', '数组', '维数', '必须', '编译', '确定', '例如', '整形', '面值', '常量', '枚举', '常量', '或者', '常量', '表达式', '初始化', '整形', 'const', '对象', 'const', '变量', '以及', '运行', '才能', '知道', '其值', 'const', '变量', '不能', '用于', '数组', '维数', '数组', '初始化', 'int', 'ia', '直接', '给出', '初始化', '列表', 'int', 'ia', '没有', '初始化', '初始化', '相关', '初始化', '情况', '说明', '函数', '体外', '定义', '数组', '元素', '初始化', '函数', '体内', '定义', '内置', '数组', '提供', '初始化', '函数', '体内', '或者', '外面', '自定义', '类型', '自动', '调用', '默认', '构造函数', '初始化', '字符', '数组', '初始化', 'char', 'ca1', '给出', '初始化', '列表', 'char', 'ca2', '初始化', '末尾', '有个', '空字符', '因此', '字符', '数组', '字符串', 'char', 'ca3', 'ab', '字符串', '字面', '初始化', '字符', '数组', '末尾', '自动', 'char', 'ca3', 'ab', '错误', '因为', '字符串', '字面', '带有', '现在', '放不下', '数组', '操作', '数组', '标的', '正确', '类型', 'size', '历时', '生命', '类型', '数组', '相关', '操作', '仔细检查', '下标', '是否', '越界']","[[-0.22606122 -0.1201729   0.21396109  0.12156104  0.31656159 -0.31304361
  -0.21752874  0.45600102  0.01291384 -0.00153635 -0.03844237 -0.2934458
  -0.18396043  0.61711427  0.18419911 -0.08652222 -0.16981506  0.00285205
  -0.14680086 -0.48710157  0.03077767  0.20359276  0.02095896 -0.05329461
   0.13191633 -0.56068604 -0.27327249  0.10146939 -0.20848695 -0.04862335
   0.24364812 -0.0184002  -0.0196958  -0.15027806 -0.08157349  0.30006897
  -0.11716591 -0.19242229  0.12929725 -0.77441325 -0.21754831 -0.59047297
  -0.06026801 -0.0773042  -0.18566376 -0.13742084 -0.22451226  0.46527043
  -0.22311114  0.4094707   0.22763595 -0.25670409 -0.15306362 -0.21030393
   0.11340439  0.38284206  0.26235195 -0.05600702  0.07938053 -0.10760488
   0.01067357  0.30684256  0.03004675  0.11102725 -0.37769345 -0.02384771
   0.06020718 -0.04004223 -0.24848603  0.43964998  0.18267878 -0.26445623
   0.37915415 -0.30867552  0.54253392  0.14806502  0.16140917 -0.11145895
  -0.27678047 -0.20307227 -0.06164333 -0.02647304 -0.0443174   0.30060999
  -0.3733098   0.21519728 -0.29209546  0.36644912  0.43746427  0.11918927
   0.33672686  0.1184021   0.36632849  0.19161084  0.18102497  0.3409488
   0.08813259 -0.31120722 -0.1099335  -0.10404962]]"
245,数据采集利器-PHP用DOM方式处理HTML之《Simple HTML DOM》,"最近经常需要采集一些网上的数据，发现一个PHP处理HTML的利器 simple html dom，官方网址是http://simplehtmldom.sourceforge.net/看了一下文档，使用非常方便，关键是能够用CSS选择器来访问DOM树，和jquery相似，实在是难得的利器以下是一个测试代码，用于抓取大众点评网上的咖啡分类的所有店铺：程序： <?phprequire_once(""simple_html_dom.php"");ini_set('memory_limit','1000M');ini_set(""max_execution_time"",6000000);for($i=1;$i<=21;$i++){    $html = file_get_html(""http://www.dianping.com/search/category/17/30/g1498p$i/g30g1498"");    $as = $html->find('.shopname a');    $sum = 0;    foreach($as as $a)    {        if($a->plaintext != ""分店""){            $a->href = ""http://www.dianping.com"".$a->href;            echo $a->outertext.""------"".$a->href.""-------<br>"";            $sum++;        }    }    echo ""<br><br>第 {$i} 页结束 ，数目：{$sum}<hr>"";}?> 数据采集结果，共采集了21页的数据另外，还有一个更强大的PHP处理HTML的利器，号称和jquery更相似，并且比simplehtmldom强大，但是难学，叫做 phpquery，地址是：http://code.google.com/p/phpquery/","['数据', '采集', '利器', 'php', 'dom', '方式', '处理', 'html', 'simple', 'html', 'dom', '最近', '经常', '需要', '采集', '一些', '网上', '数据', '发现', '一个', 'php', '处理', 'html', '利器', 'simple', 'html', 'dom', '官方', '网址', 'http', 'simplehtmldom', 'sourceforge', 'net', '一下', '文档', '使用', '非常', '方便', '关键', '能够', 'css', '选择器', '访问', 'dom', 'jquery', '相似', '实在', '难得', '利器', '以下', '一个', '测试代码', '用于', '抓取', '大众', '点评', '网上', '咖啡', '分类', '所有', '店铺', '程序', 'phprequire', 'once', 'simple', 'html', 'dom', 'php', 'ini', 'set', 'memory', 'limit', '1000m', 'ini', 'set', 'max', 'execution', 'time', '6000000', 'for', '21', '++', 'html', 'file', 'get', 'html', 'http', 'www', 'dianping', 'com', 'search', 'category', '17', '30', 'g1498p', 'g30g1498', 'as', 'html', 'find', 'shopname', 'sum', 'foreach', 'as', 'as', 'if', 'plaintext', '分店', 'href', 'http', 'www', 'dianping', 'com', 'href', 'echo', 'outertext', '------', 'href', '-------', 'br', 'sum', '++', 'echo', 'br', 'br', '结束', '数目', 'sum', 'hr', '数据', '采集', '结果', '采集', '21', '数据', '另外', '还有', '一个', '强大', 'php', '处理', 'html', '利器', '号称', 'jquery', '相似', '并且', 'simplehtmldom', '强大', '但是', '叫做', 'phpquery', '地址', 'http', 'code', 'google', 'com', 'phpquery']","[[-0.24992071 -0.13306429  0.28156516  0.29459204  0.17813486 -0.4393283
  -0.11366357  0.52419864 -0.05114818 -0.10633571 -0.09693443 -0.43467777
  -0.12419922  0.57399348  0.09153401 -0.16013579 -0.13312515  0.02070812
   0.01360065 -0.42494799 -0.01109875  0.29646183 -0.11183455 -0.2269275
   0.00286667 -0.45737419 -0.36407689  0.08247791 -0.21019831 -0.07573255
   0.17546561  0.14068818  0.02651603 -0.11247786 -0.23242304  0.38986408
  -0.18217249 -0.26480332  0.05829849 -0.67644936 -0.06574282 -0.56954857
  -0.04039374 -0.03540975 -0.11418906 -0.29315081 -0.36511     0.42768114
   0.00277094  0.39530912  0.06560956 -0.32140808  0.02853205 -0.25806163
  -0.03725043  0.46112058  0.16863437 -0.10956696  0.14755882 -0.12718585
   0.16347029  0.21960706 -0.00378224  0.08637268 -0.34791101  0.07026944
  -0.04178173  0.05398541 -0.22139819  0.45600688  0.05710317 -0.16978975
   0.45216612 -0.34481004  0.60199772  0.3397116   0.29989805 -0.24928086
  -0.21092544 -0.22049405 -0.10575357  0.05073103 -0.14675958  0.44557489
  -0.41241872  0.17176246 -0.30139949  0.56355739  0.58885037  0.20302233
   0.18559085  0.13183753  0.32498895  0.15989995  0.21299327  0.49596871
   0.07653001 -0.24070622  0.19228342 -0.10704528]]"
251,"c++字符集之间转换(UTF-8,UNICODE,Gb2312)","玩C++的同学经常要遇到汉字编码问题的处理，这是个大麻烦，本博文转了一篇文章介绍这个问题。UTF-8:   3字节一个字符UNICODE: 2字节一个字符 GB2312:  1字节一个字符 例子：“你”字的UTF-8编码: E4 BD A0　　　　　　　　11100100 10111101 10100000“你”的Unicode编码: 4F 60　　　　　　　　　   01001111 01100000按照UTF-8的编码规则，分解如下：xxxx0100 xx111101 xx100000,把除了x之外的数字拼接在一起，就变成“你”的Unicode编码了。注意UTF-8的最前面３个1，表示整个UTF-8串是由３个字节构成的。经过UTF-8编码之后，再也不会出现敏感字符了，因为最高位始终为1。类定义class CChineseCode{public:    static void UTF_8ToUnicode(wchar_t* pOut,char *pText);  // 把UTF-8转换成Unicode    static void UnicodeToUTF_8(char* pOut,wchar_t* pText);  //Unicode 转换成UTF-8    static void UnicodeToGB2312(char* pOut,wchar_t uData);  // 把Unicode 转换成 GB2312     static void Gb2312ToUnicode(wchar_t* pOut,char *gbBuffer);// GB2312 转换成　Unicode    static void GB2312ToUTF_8(string& pOut,char *pText, int pLen);//GB2312 转为 UTF-8    static void UTF_8ToGB2312(string &pOut, char *pText, int pLen);//UTF-8 转为 GB2312};//类实现void CChineseCode::UTF_8ToUnicode(wchar_t* pOut,char *pText){    char* uchar = (char *)pOut;    uchar[1] = ((pText[0] & 0x0F) << 4) + ((pText[1] >> 2) & 0x0F);    uchar[0] = ((pText[1] & 0x03) << 6) + (pText[2] & 0x3F);    return;}void CChineseCode::UnicodeToUTF_8(char* pOut,wchar_t* pText){    // 注意 WCHAR高低字的顺序,低字节在前，高字节在后    char* pchar = (char *)pText;    pOut[0] = (0xE0 | ((pchar[1] & 0xF0) >> 4));    pOut[1] = (0x80 | ((pchar[1] & 0x0F) << 2)) + ((pchar[0] & 0xC0) >> 6);    pOut[2] = (0x80 | (pchar[0] & 0x3F));    return;}void CChineseCode::UnicodeToGB2312(char* pOut,wchar_t uData){    WideCharToMultiByte(CP_ACP,NULL,&uData,1,pOut,sizeof(wchar_t),NULL,NULL);    return;}     void CChineseCode::Gb2312ToUnicode(wchar_t* pOut,char *gbBuffer){    ::MultiByteToWideChar(CP_ACP,MB_PRECOMPOSED,gbBuffer,2,pOut,1);    return ;}void CChineseCode::GB2312ToUTF_8(string& pOut,char *pText, int pLen){    char buf[4];    int nLength = pLen* 3;    char* rst = new char[nLength];        memset(buf,0,4);    memset(rst,0,nLength);        int i = 0;    int j = 0;          while(i < pLen){        //如果是英文直接复制就能        if( *(pText + i) >= 0){            rst[j++] = pText[i++];         }else{              wchar_t pbuffer;              Gb2312ToUnicode(&pbuffer,pText+i);              UnicodeToUTF_8(buf,&pbuffer);              unsigned short int tmp = 0;              tmp = rst[j] = buf[0];              tmp = rst[j+1] = buf[1];              tmp = rst[j+2] = buf[2];                  j += 3;                          i += 2;                }        }        rst[j] = ’’;    //返回结果    pOut = rst;                 delete []rst;         return;}void CChineseCode::UTF_8ToGB2312(string &pOut, char *pText, int pLen){    char * newBuf = new char[pLen];    char Ctemp[4];    memset(Ctemp,0,4);    int i =0;    int j = 0;    while(i < pLen){            if(pText > 0){                 newBuf[j++] = pText[i++];                               }else{              WCHAR Wtemp;              UTF_8ToUnicode(&Wtemp,pText + i);              UnicodeToGB2312(Ctemp,Wtemp);              newBuf[j] = Ctemp[0];              newBuf[j + 1] = Ctemp[1];                      i += 3;                  j += 2;                 }        }        newBuf[j] = ’’;        pOut = newBuf;        delete []newBuf;        return; } ","['c++', '字符集', '之间', '转换', 'utf', 'unicode', 'gb2312', 'c++', '同学', '经常', '遇到', '汉字编码', '问题', '处理', '麻烦', '博文', '一篇', '文章', '介绍', '这个', '问题', 'utf', '字节', '一个', '字符', 'unicode', '字节', '一个', '字符', 'gb2312', '字节', '一个', '字符', '例子', 'utf', '编码', 'e4', 'bd', 'a0', '11100100', '10111101', '10100000', 'unicode', '编码', '4f', '60', '01001111', '01100000', '按照', 'utf', '编码', '规则', '分解', '如下', 'xxxx0100', 'xx111101', 'xx100000', '除了', '之外', '数字', '拼接', '一起', '变成', 'unicode', '编码', '注意', 'utf', '前面', '表示', '整个', 'utf', '字节', '构成', '经过', 'utf', '编码', '之后', '再也不会', '出现', '敏感', '字符', '因为', '最高', '始终', '定义', 'class', 'cchinesecode', 'public', 'static', 'void', 'utf', '8tounicode', 'wchar', 'pout', 'char', 'ptext', 'utf', '转换成', 'unicode', 'static', 'void', 'unicodetoutf', 'char', 'pout', 'wchar', 'ptext', 'unicode', '转换成', 'utf', 'static', 'void', 'unicodetogb2312', 'char', 'pout', 'wchar', 'udata', 'unicode', '转换成', 'gb2312', 'static', 'void', 'gb2312tounicode', 'wchar', 'pout', 'char', 'gbbuffer', 'gb2312', '转换成', 'unicode', 'static', 'void', 'gb2312toutf', 'string', 'pout', 'char', 'ptext', 'int', 'plen', 'gb2312', '转为', 'utf', 'static', 'void', 'utf', '8togb2312', 'string', 'pout', 'char', 'ptext', 'int', 'plen', 'utf', '转为', 'gb2312', '实现', 'void', 'cchinesecode', 'utf', '8tounicode', 'wchar', 'pout', 'char', 'ptext', 'char', 'uchar', 'char', 'pout', 'uchar', 'ptext', '0x0f', 'ptext', '0x0f', 'uchar', 'ptext', '0x03', 'ptext', '0x3f', 'return', 'void', 'cchinesecode', 'unicodetoutf', 'char', 'pout', 'wchar', 'ptext', '注意', 'wchar', '高低', '顺序', '低字节', '高字节', 'char', 'pchar', 'char', 'ptext', 'pout', '0xe0', 'pchar', '0xf0', 'pout', '0x80', 'pchar', '0x0f', 'pchar', '0xc0', 'pout', '0x80', 'pchar', '0x3f', 'return', 'void', 'cchinesecode', 'unicodetogb2312', 'char', 'pout', 'wchar', 'udata', 'widechartomultibyte', 'cp', 'acp', 'null', 'udata', 'pout', 'sizeof', 'wchar', 'null', 'null', 'return', 'void', 'cchinesecode', 'gb2312tounicode', 'wchar', 'pout', 'char', 'gbbuffer', 'multibytetowidechar', 'cp', 'acp', 'mb', 'precomposed', 'gbbuffer', 'pout', 'return', 'void', 'cchinesecode', 'gb2312toutf', 'string', 'pout', 'char', 'ptext', 'int', 'plen', 'char', 'buf', 'int', 'nlength', 'plen', 'char', 'rst', 'new', 'char', 'nlength', 'memset', 'buf', 'memset', 'rst', 'nlength', 'int', 'int', 'while', 'plen', '如果', '英文', '直接', '复制', 'if', 'ptext', 'rst', '++', 'ptext', '++', 'else', 'wchar', 'pbuffer', 'gb2312tounicode', 'pbuffer', 'ptext', 'unicodetoutf', 'buf', 'pbuffer', 'unsigned', 'short', 'int', 'tmp', 'tmp', 'rst', 'buf', 'tmp', 'rst', 'buf', 'tmp', 'rst', 'buf', 'rst', '返回', '结果', 'pout', 'rst', 'delete', 'rst', 'return', 'void', 'cchinesecode', 'utf', '8togb2312', 'string', 'pout', 'char', 'ptext', 'int', 'plen', 'char', 'newbuf', 'new', 'char', 'plen', 'char', 'ctemp', 'memset', 'ctemp', 'int', 'int', 'while', 'plen', 'if', 'ptext', 'newbuf', '++', 'ptext', '++', 'else', 'wchar', 'wtemp', 'utf', '8tounicode', 'wtemp', 'ptext', 'unicodetogb2312', 'ctemp', 'wtemp', 'newbuf', 'ctemp', 'newbuf', 'ctemp', 'newbuf', 'pout', 'newbuf', 'delete', 'newbuf', 'return']","[[-0.17532034 -0.06999254  0.23370335  0.06617177  0.24098011 -0.30607232
  -0.08656963  0.3717617  -0.07120241 -0.12850526 -0.00973194 -0.33148376
  -0.10071025  0.42401054  0.14867681 -0.08475564 -0.10166109 -0.01076908
  -0.05826252 -0.476929   -0.05889476  0.21316429 -0.05754964 -0.18066051
   0.03331324 -0.36375455 -0.24552897  0.01620419 -0.20763613 -0.0644473
   0.10083303 -0.02852968  0.00763622 -0.09496123 -0.15344182  0.26639832
  -0.17914719 -0.24361584  0.05772815 -0.60529077 -0.11693422 -0.5101539
  -0.08270963  0.01818707 -0.10226729 -0.21176827 -0.17406907  0.25627245
  -0.17695544  0.42967669  0.11477378 -0.21663633 -0.12084442 -0.12617027
  -0.02530155  0.31874939  0.09432668 -0.0896945   0.096252   -0.13198636
   0.07533816  0.18604308  0.01045791  0.07587234 -0.29954121  0.05540094
   0.05396652 -0.04192286 -0.27137383  0.34619215  0.09362254 -0.12831799
   0.30768304 -0.26105851  0.44338894  0.26106015  0.08208898 -0.13685667
  -0.28279615 -0.07103041  0.03811516  0.05927248 -0.10647019  0.31649432
  -0.2533368   0.19254522 -0.23931457  0.37338578  0.40661528  0.14843074
   0.17782435  0.09424438  0.31061392  0.15223714  0.15884009  0.25900905
   0.10950937 -0.28559942 -0.04366836 -0.12373102]]"
254,C++实现字符串与数字的连接,"因为要用到C++中将字符串与数字连接，竟然发现C++没有直接的字符串连接符，感觉C++的不便啊，找了些文章，解决了，主要得把数字先变成char数组 这种方法测试代码如下：#include <iostream>using namespace std;#include<string>int main(){    string strDir("".\\test\\dazhong-allinone\\"");    char file_no[4];    int filen = 123;    itoa(filen, file_no, 10);//把数字存储为char的数组    strDir += file_no;//string是标准库类型，可以直接与char的数组进行+号连接    strDir += "".txt"";    cout<<strDir<<endl;    system(""pause"");    return 0;}运行结果：.\test\dazhong-allinone\123.txt请按任意键继续. . .  ","['c++', '实现', '字符串', '数字', '连接', '因为', '用到', 'c++', '中将', '字符串', '数字', '连接', '竟然', '发现', 'c++', '没有', '直接', '字符串', '连接符', '感觉', 'c++', '不便', '文章', '解决', '主要', '数字', '变成', 'char', '数组', '这种', '方法', '测试代码', '如下', 'include', 'iostream', 'using', 'namespace', 'std', 'include', 'string', 'int', 'main', 'string', 'strdir', 'test', 'dazhong', 'allinone', 'char', 'file', 'no', 'int', 'filen', '123', 'itoa', 'filen', 'file', 'no', '10', '数字', '存储', 'char', '数组', 'strdir', 'file', 'no', 'string', '标准', '类型', '可以', '直接', 'char', '数组', '进行', '连接', 'strdir', 'txt', 'cout', 'strdir', 'endl', 'system', 'pause', 'return', '运行', '结果', 'test', 'dazhong', 'allinone', '123', 'txt', '任意键', '继续']","[[-0.23908748 -0.11627827  0.27859606  0.09746643  0.33711547 -0.38672632
  -0.16346253  0.49951161 -0.05303028 -0.11824232 -0.02422807 -0.38867632
  -0.17105479  0.59856204  0.19310436 -0.10258445 -0.14581457 -0.00607864
  -0.10495454 -0.60497468 -0.05024684  0.25775988 -0.03818545 -0.18942098
   0.09374918 -0.53163825 -0.31690388  0.05410505 -0.26790169 -0.0798015
   0.181955   -0.03024544 -0.00148681 -0.14498126 -0.16449488  0.33586062
  -0.20462823 -0.29050263  0.09946646 -0.82331811 -0.18565149 -0.67510157
  -0.09250215 -0.0090897  -0.15707717 -0.23803367 -0.21678758  0.39116289
  -0.24678471  0.53499481  0.19564857 -0.28312379 -0.17788059 -0.17607407
   0.0088331   0.412964    0.17717216 -0.1094869   0.11202588 -0.16511784
   0.07503399  0.28083848  0.02436313  0.10624154 -0.41480646  0.0363546
   0.07758444 -0.05667691 -0.33864062  0.46985825  0.15591533 -0.20272333
   0.40718433 -0.3385895   0.60162628  0.28759453  0.11825323 -0.15856825
  -0.36817994 -0.12189451  0.02356483  0.03866664 -0.11040302  0.3927375
  -0.3601315   0.24225969 -0.31830913  0.46399445  0.51175146  0.1679897
   0.29032924  0.12477221  0.40949563  0.20780132  0.21034643  0.34669019
   0.13807471 -0.37320404 -0.10018154 -0.15026871]]"
259,win7下快速硬盘安装ghost xp的方法, 之前在win7下硬盘安装xp，总是失败，主要因为win7的bootloader隐藏了，不能修改boot.ini来设置启动项，当时采用的是这样的方法，就是用纯净版的XP光盘安装一下，然后在xp下硬盘安装ghost xp，费时费力，劳民伤财啊。现在终于发现了一个很好的方法，出乎我的意料，其实也在情理之中啊，软件就是一键ghost，首先在win7下安装一键ghost，成功后，启动win7时就有了一个ghost的选项，没错，我们已经能运行ghost软件了，然后，在网上下载ghost xp 的iso，解压后得到.gho文件，然后重启进入ghost，手动载入.gho文件，就OK了 实在简单，让我好不汗颜。呵呵,"['win7', '快速', '硬盘', '安装', 'ghost', 'xp', '方法', '之前', 'win7', '硬盘', '安装', 'xp', '总是', '失败', '主要', '因为', 'win7', 'bootloader', '隐藏', '不能', '修改', 'boot', 'ini', '设置', '启动项', '当时', '采用', '这样', '方法', '就是', '纯净', 'xp', '光盘', '安装', '一下', '然后', 'xp', '硬盘', '安装', 'ghost', 'xp', '费时费力', '劳民伤财', '现在', '终于', '发现', '一个', '方法', '出乎', '意料', '其实', '情理之中', '软件', '就是', '一键', 'ghost', '首先', 'win7', '安装', '一键', 'ghost', '成功', '启动', 'win7', '一个', 'ghost', '选项', '没错', '我们', '已经', '运行', 'ghost', '软件', '然后', '网上', '下载', 'ghost', 'xp', 'iso', '解压', '得到', 'gho', '文件', '然后', '重启', '进入', 'ghost', '手动', '载入', 'gho', '文件', 'ok', '实在', '简单', '汗颜', '呵呵']","[[-2.15418188e-01 -1.31746028e-01  1.69981953e-01  1.58576953e-01
   2.39355710e-01 -2.79477277e-01 -1.65618977e-01  4.12438333e-01
  -3.90838845e-04 -3.22680571e-05 -6.24101924e-02 -2.69264738e-01
  -1.63876296e-01  5.05745572e-01  1.13641706e-01 -8.95880105e-02
  -1.33359555e-01  6.44080622e-04 -8.47662771e-02 -3.61613850e-01
   3.75238313e-02  2.02190107e-01  9.01218450e-03 -5.66814981e-02
   1.09792530e-01 -4.69073838e-01 -2.32503776e-01  8.32050324e-02
  -1.68289135e-01 -4.95927153e-02  2.21170099e-01  3.79836914e-02
  -1.72773836e-02 -1.25562579e-01 -8.36183573e-02  2.88708933e-01
  -1.05381630e-01 -1.73337710e-01  1.03956006e-01 -6.37905689e-01
  -1.44706034e-01 -4.77394070e-01 -1.94434190e-02 -7.06397868e-02
  -1.48963769e-01 -1.05390689e-01 -2.31399630e-01  4.18954097e-01
  -1.34164076e-01  3.01756704e-01  1.81273042e-01 -2.27128176e-01
  -8.25743535e-02 -2.05708448e-01  7.35184769e-02  3.31002907e-01
   2.19024552e-01 -4.48447074e-02  8.67641546e-02 -6.79827363e-02
   3.53017223e-02  2.51957082e-01  2.78533725e-02  7.25013759e-02
  -3.26362669e-01 -2.38000861e-02  2.22384523e-02 -3.01114082e-03
  -1.86120950e-01  3.68488278e-01  1.22918665e-01 -2.16190767e-01
   3.42076363e-01 -2.73445046e-01  4.85146495e-01  1.21572809e-01
   1.93242807e-01 -1.11592896e-01 -2.16082669e-01 -1.96369402e-01
  -8.55149697e-02 -1.86771954e-02 -4.59297401e-02  2.70769954e-01
  -3.24553369e-01  1.65641727e-01 -2.41222175e-01  3.40938681e-01
   3.82975130e-01  1.00837905e-01  2.66308167e-01  1.03995877e-01
   2.93914869e-01  1.60709004e-01  1.55078522e-01  3.23954353e-01
   7.61294420e-02 -2.36133444e-01 -5.06740736e-03 -7.32832564e-02]]"
381,C++ Primer 4th：第九章 《顺序容器》学习心得,"C++学到深入一点，就应该大量的了解STL的知识，而这其中支撑的部分就是容器，顺序容器包括vector，list，deque等，如果善加利用，能够很大程度上提升程序的开发速度和效率，同时也减少了出问题的几率。表9-1 顺序容器类型顺序容器vector支持快速随机访问list支持快速插入/删除deque双端队列顺序容器适配器stack后进先出 (LIFO) 栈queue先进先出 (FIFO) 队列priority_queue有优先级管理的队列 表9-2 容器构造函数C<T> c;创建一个名为c的空容器。C是容器类型名，如vector，T是元素类型，如int或string。适用于所有容器C c(c2);创建容器c2的副本c；c和c2必须具有相同的容器类型，并存放相同的元素。适用于所有容器C c(b, e);创建c，其元素是迭代器b和e标示的范围内元素的副本。适用于所有容器C c(n, t);用n个值为t的元素创建容器c，其中值t必须是容器类型C的元素类型的值，或者是可转换为该类型的值只适用于顺序容器C c(n);穿件有n个值初始化 (value-initialized) 元素的容器c只适用于顺序容器 表9-3 常用迭代器运算*iter返回迭代器iter所指向的元素的引用iter->mem对iter进行解引用，获取指定元素中名为mem的成员。等效于(*iter).mem++iter给iter加1，使其指向容器里的下一个元素iter++--iter给iter减1，使其指向容器里的前一个元素iter--iter1 == iter2比较两个迭代器是否相等（不等）。当两个迭代器指向同一容器中的同一个元素，或者当它们都指向同一个容器的超出末端的下一位置时，两个迭代器相等iter1 != iter2 表9-4 vector和deque类型迭代器支持的操作iter + n在迭代器上加（减）整数值n， 将产生指向容器中前面（后面）第n个元素的迭代器。新计算出来的迭代器必须指向容器中的元素或超出容器末端的下一元素iter – niter1 += iter2这是迭代器加减法的符合赋值运算：将iter1加上或减去iter2的运算结果赋给iter1iter1 -= iter2iter1 – iter2两个迭代器的减法，其运算结果加上左边的迭代器即得左边的迭代器。这两个迭代器必须指向同一个容器中的元素或超出元素末端的下一位置只适用于vector和deque容器>, >=, <, <=迭代器的关系操作符。当一个迭代器指向的元素在容器中位于另一个迭代器指向的元素之前，则前一个迭代器小于后一个迭代器。关系操作符的两个迭代器必须指向同一个容器中的元素或超出容器末端的下一位置只适用于vector和deque容器 表9-5 容器定义的类型别名size_type无符号整型，足以存储此容器类型的最大可能容器长度iterator此容器类型的迭代器类型const_iterator元素的只读迭代器类型reverse_iterator按逆序寻址元素的迭代器const_reverse_iterator元素的只读（不能写）逆序迭代器difference_type足够存储两个迭代器差值的有符号整型，可为负数value_type元素类型reference元素的左值类型，是value_type&的同义词const_reference元素的常量左值类型，等效于const value_type& 表9-6 容器的begin和end操作c.begin()返回一个迭代器，它指向容器c的第一个元素c.end()返回一个迭代器，它指向容器c的最后一个元素的下一个位置c.rbegin()返回一个逆序迭代器，它指向容器c的最后一个元素c.rend()返回一个逆序迭代器，它指向容器c的第一个元素前面的位置 表9-7 在顺序容器中添加元素的操作c.push_back(t)在容器c的尾部添加值为t的元素。返回void类型c.push_front(t)在容器c的前端添加值为t的元素。返回void类型只适用于list和deque容器类型c.insert(p,t)在迭代器p所指向的元素前面插入值为t的新元素。返回指向新添加元素的迭代器。c.insert(p, n, t)在迭代器p所指向的元素前面插入n个值为t的新元素。返回void类型c.insert(p, b, e)在迭代器p所指向的元素前面插入由迭代器b和e标记的范围内的元素。返回void类型 表9-8 顺序容器的大小操作c.size()返回容器c中的元素个数。返回类型为c::size_typec.max_size()返回容器c可容纳的最多元素个数。返回类型为c::size_typec.empty()返回标记容器大小是否为0的布尔值c.resize(n)调整容器c的长度大小，使其能容纳n个元素如果n<c.size(), 则删除多出来的元素； 否则，添加采用值初始化的新元素c.resize(n, t)调整容器c的大小，使其能容纳n个元素。所有新添加的元素之都为t 表9-9 访问顺序容器内元素的操作c.back()返回容器c的最后一个元素的引用。如果c为空，则该操作未定义c.front()返回容器c的第一个元素的引用。如果c为空，则该操作未定义c[n]返回下标为n的元素的引用如果n<0或n>=c.size()，则该操作未定义只适用于vector和deque容器c.at(n)返回下表为n的元素的引用。如果下标越界，则该操作未定义只适用于vector和deque容器 表9-10 删除顺序容器内元素的操作c.erase(p)删除迭代器p所指向的元素返回一个迭代器，它指向被删除元素后面的元素。如果p指向容器内的最后一个元素，则返回的迭代器指向容器的超出末端的下一位置。如果p本身就是指向超出末端的下一位置的迭代器，则该函数未定义c.erase(b, e)删除迭代器b和e所标记的范围内的所有元素返回一个迭代器，它指向被删除元素段后面的元素。如果e本身就是指向超出末端的下一位置的迭代器，则返回的迭代器也指向容器的超出末端的下一位置c.clear()删除容器c内的所有元素。返回voidc.pop_back()删除容器c的最后一个元素。返回void。如果c为空容器，则该函数未定义c.pop_front()删除容器c的第一个元素。返回void。如果c为空容器，则该函数未定义。 只适用于list和deque容器 表9-11 顺序容器的赋值操作c1 = c2删除容器c1的所有元素，然后将c2的元素复制给c1。c1和c2的类型（包括容器类型和元素类型）必须相同c1.swap(c2)交换内容：调用完该函数后，c1中存放的是c2原来的元素，c2中存放的则是c1原来的元素。c1和c2的类型必须相同。该函数的执行速度通常要比将c2的元素复制到c1的操作快c.assign(b, e)重新设置c的元素：将迭代器b和e标记的范围内所有的元素复制到c中。b和e必须不是指向c中元素的迭代器c.assign(n, t)将容器c重新设置为存储n个值为t的元素 表9-12 普通的string操作string s;定义一个新的空string对象，命名为sstring s(cp);定义一个新的string对象，用cp所指向的（以空字符null结束的）C风格字符串初始化该对象string s(s2);定义一个新的string对象，并将它初始化为s2的副本is>>s;从输入流is中读取一个以空白字符分割的字符串，写入sos<<s;将s写到输出流os中getline(is, s)从输入流is中读取一行字符，写入ss1 + s2把s1和s2串接起来， 产生一个新的string对象s1 += s2将s2拼接在s1的后面关系操作符相等运算（==和！=）以及关系运算（<、<=、>和>=）都可用于string对象的比较，等效于（区分大小写的）字典次序的比较 表9-13 构造string对象的其他方法string s(cp, n)创建一个string对象，它被初始化为cp所指向数组的前n个元素的副本string s(s2, pos2)创建一个string对象，它被初始化为一个已存在的string对象s2中从下表pos2开始的字符的副本如果pos2 > s2.size()，则该操作未定义string s(s2, pos2, len2)创建一个string对象，它被初始化为s2中从下标pos2开始的len2个字符的副本。如果pos2 > s2.size()，则该操作未定义无论len2的值是多少，最多只能复制s2.sizeZ() – pos2个字符注意：n、len2和pos2都是unsigned值 表9-14 与容器共有的string操作s.insert(p, t)在迭代器p指向的元素之前插入一个值为t的新元素。返回指向新插入元素的迭代器s.insert(p, n, t)在迭代器p指向的元素之前插入n个值为t的新元素。返回voids.insert(p, b, e)在迭代器p指向的元素之前插入迭代器b和e标记范围内所有的元素。返回voids.assign(b, e)用迭代器b和e标记范围内的元素替换s。对于string类型，该操作返回s；对于容器类型，则返回voids.assign(n, t)用值为t的n个副本替换s。对于string类型，该操作返回s；对于容器类型，则返回voids.erase(p)删除迭代器p指向的元素。返回一个迭代器，指向被删除元素后面的元素s.erase(b, e)删除迭代器b和e标记范围内的所有元素。返回一个迭代器，指向被删除元素段后面的第一个元素 表9-15 string类型特有的版本s.insert(pos, n, c)在下标为pos的元素之前插入n个字符cs.insert(pos, s2)在下标为pos的元素之前插入string对象s2的副本s.insert(pos, s2, pos2, len)在下标为pos的元素之前插入s2中从下标pos2开始的len个字符s.insert(pos, cp, len)在下标为pos的元素之前插入cp所指向数组的前len个字符s.insert(pos, cp)在下标为pos的元素之前插入cp所指向的以空字符结束的字符串副本s.assign(s2)用s2的副本替换ss.assign(s2, pos2, len)用s2中从下标pos2开始的len个字符副本替换ss.assign(cp, len)用cp所指向数组的前len个字符副本替换ss.assign(cp)用cp所指向的以空字符结束的字符串副本替换ss.erase(pos, len)删除从下标pos开始的len个字符除非特殊声明，上述所有操作都返回s的引用 表9-16 字串操作s.substr(pos, n)返回一个string类型的字符串，它包含s中从下标pos开始的n个字符s.substr(pos)返回一个string类型的字符串，它包含从下标pos开始到s末尾的所有字符s.substr()返回s的副本 表9-17 修改string对象的操作（args在表9-18中定义）s.append(args)将args串接在s后面。返回s的引用s.replace(pos, len, args)删除s中从下标pos开始的len个字符，用args指定的字符代替之。返回s的应用在这个版本中，args不能为b2, e2s.replace(b, e, args)删除迭代器b和e标记的范围内所有的字符，用args替换之。返回s的引用在这个版本中，args不能为s2, pos2, len2 表9-18 append和replace操作的参数：argss2string类型的字符串s2s2, pos2, len2字符串s2中从下标pos2开始的len2个字符cp指针cp指向的以空字符结束的数组cp, len2cp指向的以空字符结束的数组中前len2个字符n, c字符c的n个副本b2, e2迭代器b2和e2标记的范围内所有字符 表9-19 string类型的查找操作（其参数args在表9-20中定义）s.find(args)在s中查找args的第一次出现s.rfind(args)在s中查找args的最后一次出现s.find_first_of(args)在s中查找args的任意字符的第一次出现s.find_last_of(args)在s中查找args的任意字符的最后一次出现s.find_first_not_of(args)在s中查找第一个不属于args的字符s.find_last_not_of(args)在s中查找最后一个不属于args的字符 表9-20 string类型提供的find操作的参数c, pos在s中，从下标pos标记的位置开始，查找字符c。pos的默认值为0s2, pos在s中，从下标pos标记的位置开始，查找string对象s2。pos的默认值为0cp, pos在s中，从下标pos标记的位置开始，查找指针cp所指向的C风格的以空字符结束的字符串。pos的默认值为0cp, pos, n在s中，从下标pos标记的位置开始，查找指针cp所指向数组的前n个字符。pos和n都没有默认值 表9-21 string类型的compare操作s.compare(s2)比较s和s2s.compare(pos1, n1, s2)让s中从pos下标位置开始的n1个字符与s2作比较s.compare(pos1, n1, s2, pos2, n2)让s中从pos1下标位置开始的n1个字符与s2中从pos2下标位置开始的n2个字符作比较s.compare(cp)比较s和cp所指向的以空字符结束的字符串s.compare(pos1, n1, cp)让s中从pos1下标位置开始的n1个字符与cp所指向的字符串作比较s.compare(pos1, n1, cp, n2)让s中从pos1下标位置开始的n1个字符与cp所指向字符串的前n2个字符作比较 表9-22 适配器通用的操作和类型size_type一种类型，足以存储此适配器类型最大对象的长度value_type元素类型container_type基础容器的类型，适配器在此容器类型上实现A a;创建一个新的空适配器，命名为aA a(c);创建一个名为a的新适配器，初始化为容器c的副本关系操作符所有适配器都支持全部关系操作符：==、！=、<、<=、>、>= 表9-23 栈容器适配器支持的操作s.empty()如果栈为空，则返回true，否则返回falses.size()返回栈中元素的个数s.pop()删除栈顶元素，但不返回其值s.top()返回栈顶元素的值，但不删除该元素s.push(item)在栈顶压入新元素 表9-24 队列和优先级队列支持的操作q.empty()如果队列为空，则返回true，否则返回falseq.size()返回队列中元素的个数q.pop()删除队首元素，但不返回其值q.front()返回队首元素的值，但不删除该元素该操作只适用于队列q.back()返回队尾元素的值，但不删除该元素该操作只适用于队列q.top()返回具有最高优先级的元素值，但不删除该元素该操作只适用于优先级队列q.push(item)对于queue，在队尾压入一个新元素对于priority_queue，在基于优先级的适当位置插入新元素 ","['c++', 'primer', '4th', '第九章', '顺序', '容器', '学习心得', 'c++', '学到', '深入', '一点', '应该', '大量', '了解', 'stl', '知识', '其中', '支撑', '部分', '就是', '容器', '顺序', '容器', '包括', 'vector', 'list', 'deque', '如果', '善加利用', '能够', '很大', '程度', '提升', '程序', '开发', '速度', '效率', '同时', '减少', '问题', '几率', '顺序', '容器', '类型', '顺序', '容器', 'vector', '支持', '快速', '随机', '访问', 'list', '支持', '快速', '插入', '删除', 'deque', '双端', '队列', '顺序', '容器', '适配器', 'stack', '后进先出', 'lifo', 'queue', '先进先出', 'fifo', '队列', 'priority', 'queue', '优先级', '管理', '队列', '容器', '构造函数', '创建', '一个', '名为', '容器', '容器', '类型', 'vector', '元素', '类型', 'int', 'string', '适用', '所有', '容器', 'c2', '创建', '容器', 'c2', '副本', 'c2', '必须', '具有', '相同', '容器', '类型', '存放', '相同', '元素', '适用', '所有', '容器', '创建', '元素', '迭代', '标示', '范围', '元素', '副本', '适用', '所有', '容器', '个值', '元素', '创建', '容器', '其中', '必须', '容器', '类型', '元素', '类型', '或者', '转换', '类型', '适用', '顺序', '容器', '穿件', '个值', '初始化', 'value', 'initialized', '元素', '容器', '适用', '顺序', '容器', '常用', '迭代', '运算', 'iter', '返回', '迭代', 'iter', '指向', '元素', '引用', 'iter', 'mem', 'iter', '进行', '引用', '获取', '指定', '元素', '名为', 'mem', '成员', '等效于', 'iter', 'mem', '++', 'iter', 'iter', '指向', '容器', '一个', '元素', 'iter', '++--', 'iter', 'iter', '指向', '容器', '一个', '元素', 'iter', '--', 'iter1', 'iter2', '比较', '两个', '迭代', '是否', '相等', '两个', '迭代', '指向', '同一', '容器', '同一个', '元素', '或者', '它们', '指向', '同一个', '容器', '超出', '末端', '位置', '两个', '迭代', '相等', 'iter1', 'iter2', 'vector', 'deque', '类型', '迭代', '支持', '操作', 'iter', '迭代', '器上加', '整数', '产生', '指向', '容器', '前面', '后面', '元素', '迭代', '计算出来', '迭代', '必须', '指向', '容器', '元素', '超出', '容器', '末端', '元素', 'iter', 'niter1', 'iter2', '这是', '迭代', '加减法', '符合', '赋值', '运算', 'iter1', '加上', '减去', 'iter2', '运算', '结果', '赋给', 'iter1iter1', 'iter2iter1', 'iter2', '两个', '迭代', '减法', '运算', '结果', '加上', '左边', '迭代', '器即', '左边', '迭代', '两个', '迭代', '必须', '指向', '同一个', '容器', '元素', '超出', '元素', '末端', '位置', '适用', 'vector', 'deque', '容器', '迭代', '关系', '操作符', '一个', '迭代', '指向', '元素', '容器', '位于', '一个', '迭代', '指向', '元素', '之前', '一个', '迭代', '小于', '一个', '迭代', '关系', '操作符', '两个', '迭代', '必须', '指向', '同一个', '容器', '元素', '超出', '容器', '末端', '位置', '适用', 'vector', 'deque', '容器', '容器', '定义', '类型', '别名', 'size', 'type', '符号', '整型', '足以', '存储', '容器', '类型', '最大', '可能', '容器', '长度', 'iterator', '容器', '类型', '迭代', '类型', 'const', 'iterator', '元素', '只读', '迭代', '类型', 'reverse', 'iterator', '逆序', '寻址', '元素', '迭代', 'const', 'reverse', 'iterator', '元素', '只读', '不能', '逆序', '迭代', 'difference', 'type', '足够', '存储', '两个', '迭代', '差值', '符号', '整型', '负数', 'value', 'type', '元素', '类型', 'reference', '元素', '左值', '类型', 'value', 'type', '同义词', 'const', 'reference', '元素', '常量', '左值', '类型', '等效于', 'const', 'value', 'type', '容器', 'begin', 'end', '操作', 'begin', '返回', '一个', '迭代', '指向', '容器', '第一个', '元素', 'end', '返回', '一个', '迭代', '指向', '容器', '最后', '一个', '元素', '一个', '位置', 'rbegin', '返回', '一个', '逆序', '迭代', '指向', '容器', '最后', '一个', '元素', 'rend', '返回', '一个', '逆序', '迭代', '指向', '容器', '第一个', '元素', '前面', '位置', '顺序', '容器', '添加', '元素', '操作', 'push', 'back', '容器', '尾部', '添加', '值为', '元素', '返回', 'void', '类型', 'push', 'front', '容器', '前端', '添加', '值为', '元素', '返回', 'void', '类型', '适用', 'list', 'deque', '容器', '类型', 'insert', '迭代', '指向', '元素', '前面', '插入', '值为', '新元素', '返回', '指向', '添加', '元素', '迭代', 'insert', '迭代', '指向', '元素', '前面', '插入', '个值', '新元素', '返回', 'void', '类型', 'insert', '迭代', '指向', '元素', '前面', '插入', '迭代', '标记', '范围', '元素', '返回', 'void', '类型', '顺序', '容器', '大小', '操作', 'size', '返回', '容器', '元素', '个数', '返回', '类型', 'size', 'typec', 'max', 'size', '返回', '容器', '容纳', '元素', '个数', '返回', '类型', 'size', 'typec', 'empty', '返回', '标记', '容器', '大小', '是否', '布尔值', 'resize', '调整', '容器', '长度', '大小', '其能', '容纳', '元素', '如果', 'size', '删除', '出来', '元素', '否则', '添加', '采用', '初始化', '新元素', 'resize', '调整', '容器', '大小', '其能', '容纳', '元素', '所有', '添加', '元素', '访问', '顺序', '容器', '元素', '操作', 'back', '返回', '容器', '最后', '一个', '元素', '引用', '如果', '为空', '操作', '未定义', 'front', '返回', '容器', '第一个', '元素', '引用', '如果', '为空', '操作', '未定义', '返回', '下标', '元素', '引用', '如果', 'size', '操作', '未定义', '适用', 'vector', 'deque', '容器', 'at', '返回', '下表为', '元素', '引用', '如果', '下标', '越界', '操作', '未定义', '适用', 'vector', 'deque', '容器', '10', '删除', '顺序', '容器', '元素', '操作', 'erase', '删除', '迭代', '指向', '元素', '返回', '一个', '迭代', '指向', '删除', '元素', '后面', '元素', '如果', '指向', '容器', '最后', '一个', '元素', '返回', '迭代', '指向', '容器', '超出', '末端', '位置', '如果', '本身', '就是', '指向', '超出', '末端', '位置', '迭代', '函数', '未定义', 'erase', '删除', '迭代', '标记', '范围', '所有', '元素', '返回', '一个', '迭代', '指向', '删除', '元素', '后面', '元素', '如果', '本身', '就是', '指向', '超出', '末端', '位置', '迭代', '返回', '迭代', '指向', '容器', '超出', '末端', '位置', 'clear', '删除', '容器', '所有', '元素', '返回', 'voidc', 'pop', 'back', '删除', '容器', '最后', '一个', '元素', '返回', 'void', '如果', '为空', '容器', '函数', '未定义', 'pop', 'front', '删除', '容器', '第一个', '元素', '返回', 'void', '如果', '为空', '容器', '函数', '未定义', '适用', 'list', 'deque', '容器', '11', '顺序', '容器', '赋值', '操作', 'c1', 'c2', '删除', '容器', 'c1', '所有', '元素', '然后', 'c2', '元素', '复制', 'c1', 'c1', 'c2', '类型', '包括', '容器', '类型', '元素', '类型', '必须', '相同', 'c1', 'swap', 'c2', '交换', '内容', '调用', '完该', '函数', 'c1', '存放', 'c2', '原来', '元素', 'c2', '存放', 'c1', '原来', '元素', 'c1', 'c2', '类型', '必须', '相同', '函数', '执行', '速度', '通常', 'c2', '元素', '复制到', 'c1', '操作', 'assign', '重新', '设置', '元素', '迭代', '标记', '范围', '所有', '元素', '复制到', '必须', '不是', '指向', '元素', '迭代', 'assign', '容器', '重新', '设置', '存储', '个值', '元素', '12', '普通', 'string', '操作', 'string', '定义', '一个', 'string', '对象', '命名', 'sstring', 'cp', '定义', '一个', 'string', '对象', 'cp', '指向', '空字符', 'null', '结束', '风格', '字符串', '初始化', '对象', 'string', 's2', '定义', '一个', 'string', '对象', '初始化', 's2', '副本', 'is', '输入', 'is', '读取', '一个', '空白', '字符', '分割', '字符串', '写入', 'sos', '写到', '输出', 'os', 'getline', 'is', '输入', 'is', '读取', '一行', '字符', '写入', 'ss1', 's2', 's1', 's2', '串接', '起来', '产生', '一个', 'string', '对象', 's1', 's2', 's2', '拼接', 's1', '后面', '关系', '操作符', '相等', '运算', '以及', '关系', '运算', '用于', 'string', '对象', '比较', '等效于', '区分', '大小写', '字典', '次序', '比较', '13', '构造', 'string', '对象', '其他', '方法', 'string', 'cp', '创建', '一个', 'string', '对象', '初始化', 'cp', '指向', '数组', '元素', '副本', 'string', 's2', 'pos2', '创建', '一个', 'string', '对象', '初始化', '一个', '存在', 'string', '对象', 's2', '下表', 'pos2', '开始', '字符', '副本', '如果', 'pos2', 's2', 'size', '操作', '未定义', 'string', 's2', 'pos2', 'len2', '创建', '一个', 'string', '对象', '初始化', 's2', '下标', 'pos2', '开始', 'len2', '个字符', '副本', '如果', 'pos2', 's2', 'size', '操作', '未定义', '无论', 'len2', '多少', '只能', '复制', 's2', 'sizez', 'pos2', '个字符', '注意', 'len2', 'pos2', 'unsigned', '14', '容器', '共有', 'string', '操作', 'insert', '迭代', '指向', '元素', '之前', '插入', '一个', '值为', '新元素', '返回', '指向', '插入', '元素', '迭代', 'insert', '迭代', '指向', '元素', '之前', '插入', '个值', '新元素', '返回', 'voids', 'insert', '迭代', '指向', '元素', '之前', '插入', '迭代', '标记', '范围', '所有', '元素', '返回', 'voids', 'assign', '迭代', '标记', '范围', '元素', '替换', '对于', 'string', '类型', '操作', '返回', '对于', '容器', '类型', '返回', 'voids', 'assign', '用值', '副本', '替换', '对于', 'string', '类型', '操作', '返回', '对于', '容器', '类型', '返回', 'voids', 'erase', '删除', '迭代', '指向', '元素', '返回', '一个', '迭代', '指向', '删除', '元素', '后面', '元素', 'erase', '删除', '迭代', '标记', '范围', '所有', '元素', '返回', '一个', '迭代', '指向', '删除', '元素', '后面', '第一个', '元素', '15', 'string', '类型', '特有', '版本', 'insert', 'pos', '下标', 'pos', '元素', '之前', '插入', '个字符', 'cs', 'insert', 'pos', 's2', '下标', 'pos', '元素', '之前', '插入', 'string', '对象', 's2', '副本', 'insert', 'pos', 's2', 'pos2', 'len', '下标', 'pos', '元素', '之前', '插入', 's2', '下标', 'pos2', '开始', 'len', '个字符', 'insert', 'pos', 'cp', 'len', '下标', 'pos', '元素', '之前', '插入', 'cp', '指向', '数组', 'len', '个字符', 'insert', 'pos', 'cp', '下标', 'pos', '元素', '之前', '插入', 'cp', '指向', '空字符', '结束', '字符串', '副本', 'assign', 's2', 's2', '副本', '替换', 'ss', 'assign', 's2', 'pos2', 'len', 's2', '下标', 'pos2', '开始', 'len', '个字符', '副本', '替换', 'ss', 'assign', 'cp', 'len', 'cp', '指向', '数组', 'len', '个字符', '副本', '替换', 'ss', 'assign', 'cp', 'cp', '指向', '空字符', '结束', '字符串', '副本', '替换', 'ss', 'erase', 'pos', 'len', '删除', '下标', 'pos', '开始', 'len', '个字符', '除非', '特殊', '声明', '上述', '所有', '操作', '返回', '引用', '16', '字串', '操作', 'substr', 'pos', '返回', '一个', 'string', '类型', '字符串', '包含', '下标', 'pos', '开始', '个字符', 'substr', 'pos', '返回', '一个', 'string', '类型', '字符串', '包含', '下标', 'pos', '开始', '末尾', '所有', '字符', 'substr', '返回', '副本', '17', '修改', 'string', '对象', '操作', 'args', '18', '定义', 'append', 'args', 'args', '串接', '后面', '返回', '引用', 'replace', 'pos', 'len', 'args', '删除', '下标', 'pos', '开始', 'len', '个字符', 'args', '指定', '字符', '代替', '返回', '应用', '这个', '版本', 'args', '不能', 'b2', 'e2s', 'replace', 'args', '删除', '迭代', '标记', '范围', '所有', '字符', 'args', '替换', '返回', '引用', '这个', '版本', 'args', '不能', 's2', 'pos2', 'len2', '18', 'append', 'replace', '操作', '参数', 'argss2string', '类型', '字符串', 's2s2', 'pos2', 'len2', '字符串', 's2', '下标', 'pos2', '开始', 'len2', '个字符', 'cp', '指针', 'cp', '指向', '空字符', '结束', '数组', 'cp', 'len2cp', '指向', '空字符', '结束', '数组', '中前', 'len2', '个字符', '字符', '副本', 'b2', 'e2', '迭代', 'b2', 'e2', '标记', '范围', '所有', '字符', '19', 'string', '类型', '查找', '操作', '参数', 'args', '20', '定义', 'find', 'args', '查找', 'args', '第一次', '出现', 'rfind', 'args', '查找', 'args', '最后', '一次', '出现', 'find', 'first', 'of', 'args', '查找', 'args', '任意', '字符', '第一次', '出现', 'find', 'last', 'of', 'args', '查找', 'args', '任意', '字符', '最后', '一次', '出现', 'find', 'first', 'not', 'of', 'args', '查找', '第一个', '属于', 'args', '字符', 'find', 'last', 'not', 'of', 'args', '查找', '最后', '一个', '属于', 'args', '字符', '20', 'string', '类型', '提供', 'find', '操作', '参数', 'pos', '下标', 'pos', '标记', '位置', '开始', '查找', '字符', 'pos', '默认值', '0s2', 'pos', '下标', 'pos', '标记', '位置', '开始', '查找', 'string', '对象', 's2', 'pos', '默认值', '0cp', 'pos', '下标', 'pos', '标记', '位置', '开始', '查找', '指针', 'cp', '指向', '风格', '空字符', '结束', '字符串', 'pos', '默认值', '0cp', 'pos', '下标', 'pos', '标记', '位置', '开始', '查找', '指针', 'cp', '指向', '数组', '个字符', 'pos', '没有', '默认值', '21', 'string', '类型', 'compare', '操作', 'compare', 's2', '比较', 's2s', 'compare', 'pos1', 'n1', 's2', 'pos', '下标', '位置', '开始', 'n1', '个字符', 's2', '比较', 'compare', 'pos1', 'n1', 's2', 'pos2', 'n2', 'pos1', '下标', '位置', '开始', 'n1', '个字符', 's2', 'pos2', '下标', '位置', '开始', 'n2', '个字符', '比较', 'compare', 'cp', '比较', 'cp', '指向', '空字符', '结束', '字符串', 'compare', 'pos1', 'n1', 'cp', 'pos1', '下标', '位置', '开始', 'n1', '个字符', 'cp', '指向', '字符串', '比较', 'compare', 'pos1', 'n1', 'cp', 'n2', 'pos1', '下标', '位置', '开始', 'n1', '个字符', 'cp', '指向', '字符串', 'n2', '个字符', '比较', '22', '适配器', '通用', '操作', '类型', 'size', 'type', '一种', '类型', '足以', '存储', '适配器', '类型', '最大', '对象', '长度', 'value', 'type', '元素', '类型', 'container', 'type', '基础', '容器', '类型', '适配器', '容器', '类型', '实现', '创建', '一个', '适配器', '命名', 'aa', '创建', '一个', '名为', '适配器', '初始化', '容器', '副本', '关系', '操作符', '所有', '适配器', '支持', '全部', '关系', '操作符', '23', '容器', '适配器', '支持', '操作', 'empty', '如果', '栈为', '返回', 'true', '否则', '返回', 'falses', 'size', '返回', '栈中', '元素', '个数', 'pop', '删除', '栈顶', '元素', '返回', '其值', 'top', '返回', '栈顶', '元素', '删除', '元素', 'push', 'item', '栈顶', '压入', '新元素', '24', '队列', '优先级', '队列', '支持', '操作', 'empty', '如果', '列为', '返回', 'true', '否则', '返回', 'falseq', 'size', '返回', '队列', '元素', '个数', 'pop', '删除', '队首', '元素', '返回', '其值', 'front', '返回', '队首', '元素', '删除', '元素', '操作', '适用', '队列', 'back', '返回', '队尾', '元素', '删除', '元素', '操作', '适用', '队列', 'top', '返回', '具有', '最高', '优先级', '元素', '删除', '元素', '操作', '适用', '优先级', '队列', 'push', 'item', '对于', 'queue', '队尾', '压入', '一个', '新元素', '对于', 'priority', 'queue', '基于', '优先级', '适当', '位置', '插入', '新元素']","[[-2.25306346e-01 -1.10991285e-01  2.50068692e-01  1.09275910e-01
   3.23468186e-01 -3.38519253e-01 -1.93147459e-01  4.66672712e-01
  -1.69725369e-02 -4.15373647e-02 -2.47674542e-02 -3.38031854e-01
  -1.74022379e-01  6.24863223e-01  2.06288130e-01 -9.75500380e-02
  -1.72205039e-01  8.20322765e-04 -1.41046399e-01 -5.42702807e-01
   3.98411715e-03  2.25218603e-01  1.85458431e-03 -1.04997027e-01
   1.02819957e-01 -5.67042787e-01 -3.15134635e-01  8.53300751e-02
  -2.24400935e-01 -5.55265410e-02  2.11755816e-01 -3.00676971e-02
  -4.10559823e-03 -1.56747145e-01 -1.07111742e-01  3.08293092e-01
  -1.56012044e-01 -2.35642581e-01  1.23585476e-01 -8.02295448e-01
  -2.22275577e-01 -6.37888243e-01 -8.97823713e-02 -5.20751018e-02
  -1.77032698e-01 -1.84818746e-01 -2.31044962e-01  4.36541101e-01
  -2.33190610e-01  4.60879341e-01  2.09598559e-01 -2.74046789e-01
  -1.58031842e-01 -2.00142848e-01  7.44635259e-02  4.05321209e-01
   2.46733958e-01 -7.36413179e-02  1.02590984e-01 -1.29719811e-01
   3.47599146e-02  2.96319291e-01  1.27047456e-02  1.12478729e-01
  -4.07221066e-01  8.86702994e-03  6.65863010e-02 -4.75449292e-02
  -2.84261628e-01  4.59021826e-01  1.58383597e-01 -2.49981497e-01
   3.96237393e-01 -3.30321365e-01  5.55406278e-01  1.94294136e-01
   1.36760250e-01 -1.28247936e-01 -2.92899551e-01 -1.75986317e-01
  -4.70507248e-02 -2.67532449e-04 -6.71163826e-02  3.40189196e-01
  -3.62792363e-01  2.30907560e-01 -3.04079577e-01  4.02975374e-01
   4.84392120e-01  1.42647172e-01  3.16403182e-01  1.22529894e-01
   3.92798467e-01  1.88852142e-01  1.96119971e-01  3.51673599e-01
   1.13974009e-01 -3.42179839e-01 -1.13267458e-01 -1.22317795e-01]]"
391,在GATE工具中使用自己的XSD模式进行语义标注,在研究语义网络相关课题时，最底层的部分就是要进行语义标注，网上的语义标注工具有很多，比如http://annotation.semanticweb.org/annotationtool_vie 就列出了有13种，而有些后来已经不再更新，经过查阅，我锁定了GATE，因为它的官方文档很全，并且网上资料挺多。1、GATE的下载和安装打开GATE的官方网站：http://gate.ac.uk/，点击“Download”进入下载页面，如下图所示： 页面给出了最新的下载地址，导航栏也有文档“Documentation”的链接，文档比较齐全。2、常规步骤安装好GATE，打开GATE3、使用自己的语义标注模式进行标注的过程要使用自己的模式，需要1)        加载ANNIE组件，加载方法，点击工具栏的，选择第一个with defaults即可2)        加载Schema_Annotation_Editor插件，方法：a)        打开加载插件的对话框b)        然后选中要加载的插件，可以在搜索框输入 annotation来搜索到点击OK，重启GATE，环境已经OK了。之后就可以自己在这里建立标注文件，引入XSD模式，进行标注的时候，工具只显示XSD模式里面的元素内容。,"['gate', '工具', '使用', '自己', 'xsd', '模式', '进行', '语义', '标注', '研究', '语义', '网络', '相关', '课题', '最底层', '部分', '就是', '进行', '语义', '标注', '网上', '语义', '标注', '工具', '很多', '比如', 'http', 'annotation', 'semanticweb', 'org', 'annotationtool', 'vie', '列出', '13', '有些', '后来', '已经', '不再', '更新', '经过', '查阅', '锁定', 'gate', '因为', '官方', '文档', '很全', '并且', '网上', '资料', 'gate', '下载', '安装', '打开', 'gate', '官方网站', 'http', 'gate', 'ac', 'uk', '点击', 'download', '进入', '下载', '页面', '如下', '所示', '页面', '给出', '最新', '下载', '地址', '导航', '文档', 'documentation', '链接', '文档', '比较', '齐全', '常规', '步骤', '安装', 'gate', '打开', 'gate3', '使用', '自己', '语义', '标注', '模式', '进行', '标注', '过程', '使用', '自己', '模式', '需要', '加载', 'annie', '组件', '加载', '方法', '点击', '工具栏', '选择', '第一个', 'with', 'defaults', '即可', '加载', 'schema', 'annotation', 'editor', '插件', '方法', '打开', '加载', '插件', '对话框', '然后', '选中', '加载', '插件', '可以', '搜索', '输入', 'annotation', '搜索', '点击', 'ok', '重启', 'gate', '环境', '已经', 'ok', '之后', '可以', '自己', '这里', '建立', '标注', '文件', '引入', 'xsd', '模式', '进行', '标注', '时候', '工具', '显示', 'xsd', '模式', '里面', '元素', '内容']","[[-2.45866923e-01 -1.30795716e-01  2.05411842e-01  2.06837602e-01
   2.42274859e-01 -3.22831342e-01 -1.64413119e-01  4.61443036e-01
  -5.31018523e-03 -1.09938173e-02 -7.52273440e-02 -3.16972879e-01
  -1.54019086e-01  5.57815300e-01  1.21323254e-01 -1.11806790e-01
  -1.39454759e-01  5.96653101e-04 -7.58409551e-02 -3.86046097e-01
   4.02010909e-02  2.36030584e-01 -1.09868828e-02 -8.50995314e-02
   9.16318954e-02 -4.99086740e-01 -2.74730047e-01  9.09666954e-02
  -1.76471230e-01 -5.74310734e-02  2.29363610e-01  6.49152613e-02
  -2.00465440e-02 -1.28861122e-01 -1.10146230e-01  3.28614075e-01
  -1.16378365e-01 -1.97606465e-01  1.03752273e-01 -6.87527008e-01
  -1.36095000e-01 -5.14425159e-01 -2.04928756e-02 -7.65302633e-02
  -1.55939582e-01 -1.39192760e-01 -2.86856515e-01  4.57606640e-01
  -1.07888081e-01  3.27935717e-01  1.66623210e-01 -2.66538137e-01
  -6.45056209e-02 -2.40826083e-01  6.32437601e-02  3.80249535e-01
   2.31513739e-01 -5.09514228e-02  9.70250077e-02 -7.08694219e-02
   5.74786551e-02  2.62852688e-01  2.16786272e-02  7.72157649e-02
  -3.47106989e-01 -1.17015898e-02  6.07056259e-03  1.78793095e-02
  -1.95845211e-01  4.04265227e-01  1.14530234e-01 -2.25828431e-01
   3.87308324e-01 -3.06905264e-01  5.32422884e-01  1.61671306e-01
   2.37527826e-01 -1.47335589e-01 -2.14682638e-01 -2.27520377e-01
  -1.08494551e-01 -1.55438220e-02 -6.01708944e-02  3.20422768e-01
  -3.60505265e-01  1.79341936e-01 -2.64080943e-01  4.00796097e-01
   4.47505854e-01  1.28107835e-01  2.72884553e-01  1.20265072e-01
   3.19135295e-01  1.74336563e-01  1.72898810e-01  3.84648135e-01
   7.51272660e-02 -2.45304754e-01  4.79960583e-02 -7.68267155e-02]]"
402,玩大灾变出现“igxprd32显示驱动程序已经停止正常工作”解决方法,"intel(R)集成显卡G33/G31出现的问题，解决方法：在X:\Program Files\World of Warcraft\WTF\Config.wtf 文件用写字板模式打开，在最开始或者在末尾加上这个设置函数 SET FixedFunction ""1""这个命令的作用是关掉一些特效保证画面完整性","['玩大', '灾变', '出现', 'igxprd32', '显示', '驱动程序', '已经', '停止', '正常', '工作', '解决', '方法', 'intel', '集成显卡', 'g33', 'g31', '出现', '问题', '解决', '方法', 'program', 'files', 'world', 'of', 'warcraft', 'wtf', 'config', 'wtf', '文件', '写字板', '模式', '打开', '开始', '或者', '末尾', '加上', '这个', '设置', '函数', 'set', 'fixedfunction', '这个', '命令', '作用', '关掉', '一些', '特效', '保证', '画面', '完整性']","[[-0.26999234 -0.16388876  0.22154758  0.17060335  0.33664809 -0.35274638
  -0.21671797  0.53074518  0.00492919 -0.00924944 -0.0636471  -0.33934693
  -0.22705583  0.65967261  0.16676617 -0.10751082 -0.1772184   0.00280341
  -0.12939511 -0.50200534  0.03176722  0.25459819  0.02522431 -0.0749571
   0.15086581 -0.61983519 -0.29610941  0.09637045 -0.23208962 -0.0646439
   0.28067656  0.01671507 -0.02255892 -0.17085884 -0.10193865  0.35665619
  -0.14643366 -0.232264    0.14102647 -0.84354025 -0.20488085 -0.6357444
  -0.03780291 -0.07980981 -0.19216342 -0.13663638 -0.26727695  0.52560194
  -0.2063859   0.41870496  0.25366755 -0.29191174 -0.138159   -0.24422109
   0.09451205  0.42482846  0.2843199  -0.05950217  0.10187815 -0.10701517
   0.03510432  0.33594501  0.0351214   0.09876726 -0.42925714 -0.03326146
   0.04791225 -0.02369954 -0.26806643  0.47863074  0.1756964  -0.27751215
   0.43339071 -0.34947645  0.63480129  0.14766966  0.21631928 -0.12831773
  -0.31078622 -0.23572099 -0.08837015 -0.02183693 -0.06434277  0.34002367
  -0.41366373  0.22314877 -0.31079174  0.4250183   0.48821784  0.12481134
   0.36043741  0.13178654  0.39241177  0.21445168  0.20406893  0.39624981
   0.1167417  -0.32861195 -0.06063199 -0.10171782]]"
408,QT-creater一个非常棒的教程,最近学习QT，发现一个非常棒的教程，我不知不觉跟着就边看边做，感觉很短的时间内就理解了QT的开发流程，非常方便，我转成了PDF格式，提供给大家下载，里面也有该教程的原始地址，请尊重原版 地址在我的网盘里，请放心下载：点击下载,"['qt', 'creater', '一个', '非常', '教程', '最近', '学习', 'qt', '发现', '一个', '非常', '教程', '不知不觉', '跟着', '看边', '感觉', '时间', '理解', 'qt', '开发', '流程', '非常', '方便', '转成', 'pdf', '格式', '提供', '大家', '下载', '里面', '教程', '原始', '地址', '尊重', '原版', '地址', '网盘', '放心', '下载', '点击', '下载']","[[-0.25811737 -0.13916464  0.23915132  0.26214836  0.21870772 -0.38116789
  -0.15187531  0.50222947 -0.02407901 -0.03142315 -0.09181689 -0.37062643
  -0.15096574  0.5941775   0.10790183 -0.13580145 -0.14849195  0.01064342
  -0.03798392 -0.38938261  0.03702819  0.26743585 -0.04797872 -0.13100641
   0.06339571 -0.50871909 -0.31284113  0.09598149 -0.18506852 -0.06359774
   0.23092291  0.10838724 -0.00101224 -0.12626863 -0.15160401  0.36476752
  -0.13685583 -0.21791631  0.09042284 -0.7065512  -0.11322218 -0.54520458
  -0.02492904 -0.07675561 -0.15030752 -0.18999203 -0.33698342  0.47587538
  -0.05533536  0.34902186  0.13191941 -0.29630459 -0.01832996 -0.27025206
   0.04145271  0.42151378  0.22762839 -0.07377665  0.12299233 -0.08125974
   0.09837403  0.25998942  0.01849231  0.08368654 -0.36534052  0.01389836
  -0.01357156  0.03589564 -0.19728685  0.43791042  0.0960895  -0.22302892
   0.42771008 -0.33613221  0.58907872  0.22336453  0.28712861 -0.1952714
  -0.20388268 -0.25102826 -0.12851773  0.00336271 -0.08972504  0.37374691
  -0.40298961  0.17617171 -0.28905315  0.47749631  0.52000039  0.15891522
   0.24750284  0.13166756  0.32860419  0.16789002  0.19827027  0.44914207
   0.0752023  -0.24975966  0.12161941 -0.08266387]]"
410,让QT支持中文的方法,"让QT支持中文，方法很简单：在main函数的实现文件里，比如main.cpp中，头文件包含 #include <QTextCodec> ，这是处理字符的头文件在int main(int argc, char *argv[])函数体中增加一句话QTextCodec::setCodecForTr(QTextCodec::codecForLocale());这样界面大部分就能显示中文了在程序里面如果要使用字符串字面量，请使用tr函数进行，比如 tr(""QT编程"") ，否则还是会乱码的。","['qt', '支持', '中文', '方法', 'qt', '支持', '中文', '方法', '简单', 'main', '函数', '实现', '文件', '比如', 'main', 'cpp', '头文件', '包含', 'include', 'qtextcodec', '这是', '处理', '字符', '头文件', 'int', 'main', 'int', 'argc', 'char', 'argv', '函数', '体中', '增加', '一句', 'qtextcodec', 'setcodecfortr', 'qtextcodec', 'codecforlocale', '这样', '界面', '大部分', '显示', '中文', '程序', '里面', '如果', '使用', '字符串', '字面', '使用', 'tr', '函数', '进行', '比如', 'tr', 'qt', '编程', '否则', '还是', '乱码']","[[-0.23409092 -0.13789164  0.21559171  0.14068008  0.30813948 -0.33227487
  -0.19501319  0.48223024 -0.00591245 -0.02735531 -0.05219406 -0.321007
  -0.19188234  0.59847157  0.15993818 -0.10051756 -0.15874003  0.0057763
  -0.11686507 -0.48526854  0.01363219  0.22822469  0.00784361 -0.08899144
   0.123251   -0.54185642 -0.27533605  0.08561427 -0.21819818 -0.05790365
   0.23932363  0.00496648 -0.01005003 -0.15365602 -0.10908236  0.32379076
  -0.14329544 -0.22010317  0.12235185 -0.76961849 -0.18079185 -0.59319414
  -0.05133499 -0.05386397 -0.16782994 -0.15621033 -0.23564194  0.44866609
  -0.19478756  0.41269115  0.21765964 -0.27200823 -0.13212281 -0.20905432
   0.07370204  0.39336822  0.24460186 -0.06883336  0.09509182 -0.1104058
   0.04023491  0.29754591  0.03741512  0.0989199  -0.39136103 -0.01324125
   0.04491011 -0.02538967 -0.26366445  0.43647024  0.1574393  -0.2405335
   0.39245793 -0.31854192  0.57285337  0.17094879  0.17254022 -0.11935769
  -0.2979781  -0.18726733 -0.06228002 -0.01185808 -0.06567679  0.32497328
  -0.37029015  0.21087264 -0.28949805  0.39700248  0.45458365  0.12625011
   0.31297139  0.11961422  0.36403906  0.19388707  0.19233945  0.35231594
   0.10983702 -0.30918195 -0.06872206 -0.10711984]]"
414,Linux下GCC和Makefile实例（从GCC的编译到Makefile的引入）,一、确认已经装好了GCC和Make的软件包可以使用whereis命令查看：如果whereis  gcc和whereis  make命令有结果，说明安装了这两个软件，可以继续往下做。二、使用GCC编译运行一个HelloWorld程序（只涉及单个文件）可以在任何一个目录编写C程序然后编译运行，我这个实例在自己主目录进行：然后就进入了编写程序的界面：按下键盘”i”进入编辑界面，然后输入程序：按ESC(进入命令行模式)，然后输入”:wq”，冒号表示开始输入命令，字母w代表保存文件，字母q代表退出编辑器：按回车退出vim编辑器，退回到终端，以下是之后的编译运行截图：三、使用GCC编译运行一个多文件程序（包含主程序和子程序）这里我们要写两个C程序文件，一个文件里面写个被调函数，另外一个文件中main函数调用第一个文件的函数，如下所示：ex_display.c的代码如下，同样的写完后ESC然后输入:wq退出：输入如下的main函数代码：然后保存退出，如下是编译运行过程： 四、使用Makefile解决多文件编译运行的问题正如上节的红框框里面所叙述，如果一个程序涉及的文件很多的话，每个都得写出来，很是麻烦，所以Makefile就出现了，请看教程：进入makefile的编辑界面后，输入如下内容：然后保存退出，运行make命令： 五、Makefile和shell script方法的对比有人说，我把之前的所有命令，全写到shell script里面，不就达到Makefile的效果了，没错确实最终效果是相同的，但是Makefile却有这些好处：简化编译执行的命令（并没有gcc –c的过程）一次make后，下次只会编译改动的文件，其它的文件不会再编译了其它还有一些优点，不过这第二个优点，对于大型项目来说，好处太大了！ ,"['linux', 'gcc', 'makefile', '实例', 'gcc', '编译', 'makefile', '引入', '确认', '已经', '装好', 'gcc', 'make', '软件包', '可以', '使用', 'whereis', '命令', '查看', '如果', 'whereis', 'gcc', 'whereis', 'make', '命令', '结果', '说明', '安装', '两个', '软件', '可以', '继续', '往下', '使用', 'gcc', '编译', '运行', '一个', 'helloworld', '程序', '涉及', '单个', '文件', '可以', '任何', '一个', '目录', '编写', '程序', '然后', '编译', '运行', '这个', '实例', '自己', '主目录', '进行', '然后', '进入', '编写程序', '界面', '按下', '键盘', '进入', '编辑', '界面', '然后', '输入', '程序', 'esc', '进入', '命令行', '模式', '然后', '输入', 'wq', '冒号', '表示', '开始', '输入', '命令', '字母', '代表', '保存', '文件', '字母', '代表', '退出', '编辑器', '回车', '退出', 'vim', '编辑器', '退回', '终端', '以下', '之后', '编译', '运行', '截图', '使用', 'gcc', '编译', '运行', '一个多', '文件', '程序', '包含', '主程序', '子程序', '这里', '我们', '两个', '程序', '文件', '一个', '文件', '里面', '写个', '函数', '另外', '一个', '文件', 'main', '函数调用', '第一个', '文件', '函数', '如下', '所示', 'ex', 'display', '代码', '如下', '同样', '完后', 'esc', '然后', '输入', 'wq', '退出', '输入', '如下', 'main', '函数', '代码', '然后', '保存', '退出', '如下', '编译', '运行', '过程', '使用', 'makefile', '解决', '文件', '编译', '运行', '问题', '正如', '上节', '框框', '里面', '叙述', '如果', '一个', '程序', '涉及', '文件', '很多', '的话', '每个', '出来', '麻烦', '所以', 'makefile', '出现', '教程', '进入', 'makefile', '编辑', '界面', '输入', '如下', '内容', '然后', '保存', '退出', '运行', 'make', '命令', 'makefile', 'shell', 'script', '方法', '对比', '有人', '之前', '所有', '命令', '全写', 'shell', 'script', '里面', '达到', 'makefile', '效果', '没错', '确实', '最终', '效果', '相同', '但是', 'makefile', '这些', '好处', '简化', '编译', '执行', '命令', '没有', 'gcc', '过程', '一次', 'make', '下次', '只会', '编译', '改动', '文件', '其它', '文件', '不会', '编译', '其它', '还有', '一些', '优点', '不过', '第二个', '优点', '对于', '大型项目', '来说', '好处', '太大']","[[-0.2513499  -0.14751065  0.18755058  0.16418409  0.28935912 -0.30837226
  -0.20197525  0.47130328  0.01435732  0.00776132 -0.06515636 -0.29315699
  -0.1931546   0.58752892  0.14166748 -0.09962584 -0.15855029  0.00126046
  -0.11552696 -0.41842944  0.04701283  0.22377897  0.02624459 -0.04782257
   0.14238785 -0.55146875 -0.26026025  0.09804582 -0.19332338 -0.05315252
   0.25829334  0.02766008 -0.0305913  -0.15093603 -0.08253162  0.32691162
  -0.1116031  -0.19130975  0.12913163 -0.74243019 -0.1803977  -0.54565839
  -0.01981714 -0.08510356 -0.17674063 -0.10843817 -0.25048403  0.48565771
  -0.16655786  0.34795487  0.22686907 -0.26209203 -0.11341832 -0.23110237
   0.09922207  0.37391792  0.2664286  -0.04916896  0.09151334 -0.08018211
   0.02605094  0.30000935  0.03432841  0.08282409 -0.37533522 -0.03574157
   0.03412352 -0.01017256 -0.21844617  0.41811755  0.15796747 -0.25289286
   0.38428017 -0.30791223  0.55171344  0.12247586  0.2082986  -0.11536442
  -0.25808118 -0.22189271 -0.09575316 -0.0315908  -0.04158666  0.29683542
  -0.36809602  0.19092551 -0.27585904  0.37225254  0.42705636  0.10901659
   0.32597713  0.12051496  0.33953967  0.18862285  0.17731381  0.36147407
   0.08965799 -0.27737893 -0.03455163 -0.08806591]]"
444,[转]office - word2010每次打开弹出配置框解决方法,问题叙述：前提是office已经激活，每次打开office2010的word时都会出现配置进度框！！！Excel没出现这情况。解决办法：点击“开始”——点击“运行”——输入“regedit”回车确定，找到[HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\Word\Options]再次打开Word文档就正常啦！方法二：适用于word、excel都需要配置的情况：、打开“我的电脑”——“C盘”——“Program Files\Common Files\Microsoft Shared\OFFICE12\Office Setup Controller”——找到一个“SETUP.EXE”的文件，对此文件重命名。,"['office', 'word2010', '每次', '打开', '配置', '解决', '方法', '问题', '叙述', '前提', 'office', '已经', '激活', '每次', '打开', 'office2010', 'word', '出现', '配置', '进度', 'excel', '出现', '情况', '解决办法', '点击', '开始', '点击', '运行', '输入', 'regedit', '回车', '确定', '找到', 'hkey', 'current', 'user', 'software', 'microsoft', 'office', '14.0', 'word', 'options', '再次', '打开', 'word', '文档', '正常', '方法', '适用', 'word', 'excel', '需要', '配置', '情况', '打开', '电脑', 'c盘', 'program', 'files', 'common', 'files', 'microsoft', 'shared', 'office12', 'office', 'setup', 'controller', '找到', '一个', 'setup', 'exe', '文件', '对此', '文件', '重命名']","[[-0.24064006 -0.13428301  0.20700001  0.15421628  0.26890326 -0.32878656
  -0.15664469  0.45412151 -0.0180535  -0.04246027 -0.05438767 -0.31768703
  -0.17446754  0.54336682  0.13448396 -0.10830379 -0.13771197 -0.00353967
  -0.08734403 -0.43175045  0.01558561  0.23181407 -0.00097296 -0.10191003
   0.10756704 -0.50885154 -0.2627474   0.06687987 -0.20211169 -0.05910011
   0.21752837  0.01711865 -0.00485005 -0.13711161 -0.11426567  0.30963389
  -0.13966774 -0.22396744  0.10267828 -0.70400586 -0.1559486  -0.54472505
  -0.03656362 -0.06224164 -0.15409656 -0.14715654 -0.23731385  0.42596655
  -0.16062624  0.37730299  0.18990206 -0.25550753 -0.10750926 -0.20588044
   0.04303558  0.36376339  0.20944509 -0.07431037  0.10068282 -0.10784948
   0.05303976  0.27086955  0.02190439  0.07680516 -0.36395279 -0.0008019
   0.0394737  -0.01593309 -0.23640649  0.41081588  0.11999545 -0.21810776
   0.37492529 -0.3043252   0.54137844  0.17362451  0.18387335 -0.13518234
  -0.25772547 -0.17485065 -0.05959144  0.00678988 -0.07730947  0.31847412
  -0.34134298  0.18206612 -0.27093968  0.39216863  0.43532017  0.11845691
   0.2781044   0.11458519  0.32540418  0.17649028  0.1778968   0.35118937
   0.10462725 -0.28096933 -0.022894   -0.09183943]]"
449,[C++]win32输出当前系统时间函数，可用以程序计时,"#include <string>#include <iostream>#include <time.h>#include <fstream>using namespace std;//本函数用于获取当前系统的时间，使用前请传入获取时间的string的引用void getSystemTime(string & stime){    time_t t = time( 0 );    char tmp[64];    strftime( tmp, sizeof(tmp), ""%Y/%m/%d %X "",localtime(&t) );    stime=tmp;}int main(){    string nowtime;//存储获取的系统的时间    //输出起始时间    getSystemTime(nowtime);    cout<<nowtime<<endl;    //这一步仅仅是为了耗费程序的时间    ofstream fout(""tt.txt"");    for(long i=0; i<1000*1000; ++i){fout<<i<<endl;}    //输出结束时间    getSystemTime(nowtime);    cout<<nowtime<<endl;    system(""pause"");    return 0;} 程序运行结果截图：","['c++', 'win32', '输出', '当前', '系统', '时间', '函数', '可用', '程序', '计时', 'include', 'string', 'include', 'iostream', 'include', 'time', 'include', 'fstream', 'using', 'namespace', 'std', '函数', '用于', '获取', '当前', '系统', '时间', '使用', '传入', '获取', '时间', 'string', '引用', 'void', 'getsystemtime', 'string', 'stime', 'time', 'time', 'char', 'tmp', '64', 'strftime', 'tmp', 'sizeof', 'tmp', 'localtime', 'stime', 'tmp', 'int', 'main', 'string', 'nowtime', '存储', '获取', '系统', '时间', '输出', '起始', '时间', 'getsystemtime', 'nowtime', 'cout', 'nowtime', 'endl', '一步', '仅仅', '为了', '耗费', '程序', '时间', 'ofstream', 'fout', 'tt', 'txt', 'for', 'long', '1000', '1000', '++', 'fout', 'endl', '输出', '结束', '时间', 'getsystemtime', 'nowtime', 'cout', 'nowtime', 'endl', 'system', 'pause', 'return', '程序运行', '结果', '截图']","[[-0.20690978 -0.09687427  0.24175078  0.08987517  0.27735496 -0.33235646
  -0.12652468  0.42512328 -0.05024181 -0.10527386 -0.02450975 -0.3391
  -0.13774828  0.50089133  0.16166438 -0.08836938 -0.12090284 -0.00768229
  -0.08016523 -0.50672997 -0.041609    0.22310555 -0.03999055 -0.16517223
   0.06556712 -0.44119704 -0.2672606   0.03767918 -0.22586226 -0.07144435
   0.1490511  -0.01820963  0.00248817 -0.11640595 -0.14221366  0.29343395
  -0.17723773 -0.24964426  0.07960441 -0.69060464 -0.14850587 -0.56401928
  -0.08011151 -0.00508162 -0.12986912 -0.20535909 -0.19789865  0.33090604
  -0.20050252  0.44830181  0.15763569 -0.24136979 -0.137084   -0.15824245
   0.00322279  0.3549947   0.14721804 -0.09056513  0.09795304 -0.13649432
   0.06468832  0.23084404  0.01859344  0.08176997 -0.35092628  0.03790289
   0.05633119 -0.04561594 -0.28457668  0.39588735  0.1189871  -0.166313
   0.3449063  -0.29087279  0.50835273  0.24985079  0.11022952 -0.1381917
  -0.30990264 -0.10295925  0.0160278   0.04292287 -0.09757778  0.33847409
  -0.30325637  0.20632141 -0.27072372  0.39841372  0.44222014  0.14651934
   0.23483089  0.10264369  0.34570332  0.17473804  0.17681859  0.30077493
   0.11892379 -0.31161691 -0.06019592 -0.12454251]]"
454,[PHP]发送邮件方法介绍和代码示例,"有很多朋友都遇到发送邮件的需求，他们先从网上下载一段代码，然后填好主题和内容，却发现怎么也发送失败，这里首先要弄清楚一点，发送邮件必须有邮件服务器完成，比如SMTP，POP3等邮件服务器，只运行代码就想发送邮件，相当于空中楼阁，无米之炊。对一个企业、个人来说，想要自己写代码发送邮件，必须先有自己的邮局账户，这样我们就能得到这些信息：1、邮局服务器的IP；2、邮局账户用户名；3、对应2的账户密码。有了这三项，在代码里设定之后，代码才能连接目标服务器，然后用此服务器来进行邮件的发送。其中加色部分最终是由PHP服务器（比如Apache）和邮局服务器（比如SMPT）共同完成的。以下提供一个代码，实现了邮件发送，注意send.php里面发送服务器、用户名和密码的配置：form.php//是一个表单，用于提交要发送的目的邮箱地址：<html><body><h3>phpmailer Unit Test</h3>请你输入<font color=""#FF6666"">收信</font>的邮箱地址:<form name=""phpmailer"" action=""send.php"" method=""post"">  <input type=""hidden"" name=""submitted"" value=""1""/>  邮箱地址:  <input type=""text"" size=""50"" name=""address"" />  <br/>  <input type=""submit"" value=""发送""/></form></body></html> send.php//接收参数，发送邮件，特别注意颜色部分的配置<?phprequire(""class.phpmailer.php""); //下载的文件必须放在该文件所在目录$mail = new PHPMailer(); //建立邮件发送类$address = $_POST['address'];$mail->IsSMTP(); // 使用SMTP方式发送$mail->Host = ""11.11.11.11""; // 企业邮局的IP地址或者域名$mail->SMTPAuth = true; // 启用SMTP验证功能 $mail->Username = ""xx@crazyant.net""; // 邮局用户名(请填写完整的email地址) $mail->Password = ""88558855""; // 邮局密码$mail->From = ""xx@crazyant.net""; //邮件发送者email地址$mail->FromName = ""crazyant"";$mail->AddAddress(""$address"", """");//收件人地址，可以替换成任何想要接收邮件的email信箱,格式是AddAddress(""收件人email"",""收件人姓名"")//$mail->AddReplyTo("""", """");//$mail->AddAttachment(""/var/tmp/file.tar.gz""); // 添加附件$mail->IsHTML(true); // set email format to HTML //是否使用HTML格式$mail->Subject = ""PHPMailer测试邮件""; //邮件标题$mail->Body = ""<table border='1'><tr><td>用户名</td><td>密码</td></tr><td>1122121</td><td>3322323</td></tr></table>""; //邮件内容$mail->AltBody = ""A=B<h1>C=D</h1>""; //附加信息，可以省略if(!$mail->Send()){ echo ""邮件发送失败. <p>""; echo ""错误原因: "" . $mail->ErrorInfo; exit;}echo ""邮件发送成功"";?> send.php用到了一个PHPmail类，请到http://code.google.com/a/apache-extras.org/p/phpmailer/downloads/list进行下载本教程PDF说明以及代码示例放在：http://www.kuaipan.cn/index.php?ac=file&oid=20099656671300541下载密码： 2D6quK","['php', '发送', '邮件', '方法', '介绍', '代码', '示例', '很多', '朋友', '遇到', '发送', '邮件', '需求', '他们', '网上', '下载', '一段', '代码', '然后', '填好', '主题', '内容', '发现', '怎么', '发送', '失败', '这里', '首先', '弄清楚', '一点', '发送', '邮件', '必须', '邮件', '服务器', '完成', '比如', 'smtp', 'pop3', '邮件', '服务器', '运行', '代码', '发送', '邮件', '相当于', '空中楼阁', '无米之炊', '一个', '企业', '个人', '来说', '想要', '自己', '代码', '发送', '邮件', '必须', '先有', '自己', '邮局', '账户', '这样', '我们', '得到', '这些', '信息', '邮局', '服务器', 'ip', '邮局', '账户', '用户名', '对应', '账户', '密码', '这三项', '代码', '设定', '之后', '代码', '才能', '连接', '目标', '服务器', '然后', '用此', '服务器', '进行', '邮件', '发送', '其中', '加色', '部分', '最终', 'php', '服务器', '比如', 'apache', '邮局', '服务器', '比如', 'smpt', '共同完成', '以下', '提供', '一个', '代码', '实现', '邮件', '发送', '注意', 'send', 'php', '里面', '发送', '服务器', '用户名', '密码', '配置', 'form', 'php', '一个', '表单', '用于', '提交', '发送', '目的', '邮箱地址', 'html', 'body', 'h3', 'phpmailer', 'unit', 'test', 'h3', '输入', 'font', 'color', 'ff6666', '收信', 'font', '邮箱地址', 'form', 'name', 'phpmailer', 'action', 'send', 'php', 'method', 'post', 'input', 'type', 'hidden', 'name', 'submitted', 'value', '邮箱地址', 'input', 'type', 'text', 'size', '50', 'name', 'address', 'br', 'input', 'type', 'submit', 'value', '发送', 'form', 'body', 'html', 'send', 'php', '接收', '参数', '发送', '邮件', '特别', '注意', '颜色', '部分', '配置', 'phprequire', 'class', 'phpmailer', 'php', '下载', '文件', '必须', '放在', '文件', '所在', '目录', 'mail', 'new', 'phpmailer', '建立', '邮件', '发送', 'address', 'post', 'address', 'mail', 'issmtp', '使用', 'smtp', '方式', '发送', 'mail', 'host', '11.11', '11.11', '企业邮局', 'ip地址', '或者', '域名', 'mail', 'smtpauth', 'true', '启用', 'smtp', '验证', '功能', 'mail', 'username', 'xx', 'crazyant', 'net', '邮局', '用户名', '填写', '完整', 'email', '地址', 'mail', 'password', '88558855', '邮局', '密码', 'mail', 'from', 'xx', 'crazyant', 'net', '邮件', '发送者', 'email', '地址', 'mail', 'fromname', 'crazyant', 'mail', 'addaddress', 'address', '收件人', '地址', '可以', '替换成', '任何', '想要', '接收', '邮件', 'email', '信箱', '格式', 'addaddress', '收件人', 'email', '收件人', '姓名', 'mail', 'addreplyto', 'mail', 'addattachment', 'var', 'tmp', 'file', 'tar', 'gz', '添加', '附件', 'mail', 'ishtml', 'true', 'set', 'email', 'format', 'to', 'html', '是否', '使用', 'html', '格式', 'mail', 'subject', 'phpmailer', '测试', '邮件', '邮件', '标题', 'mail', 'body', 'table', 'border', 'tr', 'td', '用户名', 'td', 'td', '密码', 'td', 'tr', 'td', '1122121', 'td', 'td', '3322323', 'td', 'tr', 'table', '邮件', '内容', 'mail', 'altbody', 'h1', 'h1', '附加', '信息', '可以', '省略', 'if', 'mail', 'send', 'echo', '邮件', '发送', '失败', 'echo', '错误', '原因', 'mail', 'errorinfo', 'exit', 'echo', '邮件', '发送', '成功', 'send', 'php', '用到', '一个', 'phpmail', 'http', 'code', 'google', 'com', 'apache', 'extras', 'org', 'phpmailer', 'downloads', 'list', '进行', '下载', '教程', 'pdf', '说明', '以及', '代码', '示例', '放在', 'http', 'www', 'kuaipan', 'cn', 'index', 'php', 'ac', 'file', 'oid', '20099656671300541', '下载', '密码', '2d6quk']","[[-0.23088973 -0.11453198  0.23955817  0.20291107  0.21902014 -0.36392431
  -0.11824202  0.4643657  -0.04346361 -0.08688078 -0.06346301 -0.36548663
  -0.12804312  0.51983686  0.11961819 -0.12036635 -0.12242866  0.00283335
  -0.03502143 -0.42907215 -0.01101633  0.25873771 -0.06544712 -0.17519865
   0.04211001 -0.44749372 -0.30217754  0.06156522 -0.20110258 -0.07226363
   0.17437522  0.0671303   0.00638718 -0.11095136 -0.17376208  0.33506941
  -0.16886895 -0.24444538  0.07192965 -0.66267738 -0.10231914 -0.52859924
  -0.04440217 -0.03281206 -0.1235996  -0.218509   -0.27632922  0.38688633
  -0.08759043  0.39042337  0.11258232 -0.27400786 -0.05377417 -0.21254946
  -0.00431001  0.39076936  0.16568178 -0.08707842  0.12363879 -0.11799278
   0.11184501  0.21998629  0.01217294  0.07679247 -0.34346148  0.04145841
   0.00999489  0.01065629 -0.23466913  0.41223251  0.07904121 -0.17012771
   0.3887084  -0.31067805  0.53628149  0.26250481  0.21623625 -0.18463527
  -0.24187727 -0.17455981 -0.05930434  0.03746753 -0.11247682  0.37052994
  -0.34647568  0.176923   -0.27295347  0.45311694  0.49098898  0.15975467
   0.20769718  0.11299966  0.31712963  0.16502346  0.18464633  0.39039322
   0.08829323 -0.25260282  0.07544803 -0.10299137]]"
466,[网址]在线转换编码-BASE64_URLENCODE等,http://bianma.900cha.com/在线转换很方便   ,"['网址', '在线', '转换', '编码', 'base64', 'urlencode', 'http', 'bianma.900', 'cha', 'com', '在线', '转换', '方便']","[[-0.20255738 -0.09872819  0.26554921  0.35707261  0.03991021 -0.40452653
  -0.03596944  0.43514326 -0.07739081 -0.11445753 -0.11467028 -0.41059713
  -0.03296927  0.42834973  0.02362905 -0.16941893 -0.09012706  0.02964019
   0.09419389 -0.27011595 -0.02136311  0.28120707 -0.16193872 -0.24887561
  -0.08702198 -0.28048832 -0.32892693  0.07329472 -0.13829529 -0.0688902
   0.10488368  0.21569709  0.04242375 -0.05829775 -0.25868133  0.35793031
  -0.15432976 -0.22797458  0.00294634 -0.46068667  0.0368065  -0.40754533
  -0.02811331 -0.00494446 -0.05849432 -0.31018053 -0.38967668  0.31394621
   0.14443502  0.26783908 -0.06567292 -0.29859262  0.14181925 -0.24688378
  -0.09275175  0.41884672  0.09587039 -0.10459393  0.14329233 -0.07292595
   0.21128123  0.11414134 -0.0200635   0.0657973  -0.24149598  0.10109874
  -0.11270964  0.11205917 -0.13313874  0.35165112 -0.03490144 -0.09067076
   0.39201126 -0.28761494  0.47006762  0.37053226  0.32620022 -0.26436897
  -0.09785757 -0.20899136 -0.12913909  0.05709894 -0.14830508  0.42302783
  -0.34475957  0.11442059 -0.23635227  0.53765276  0.54102718  0.22038155
   0.05940653  0.11311454  0.21838329  0.10533755  0.18046965  0.48192562
   0.04177486 -0.12391971  0.34654154 -0.07887462]]"
471,[站长]推荐一个网页分享按钮条插件JiaThis,最近一直在鼓捣我的另外一个小站www.51projob.com，有不顺眼的地方我就改来改去，我的这个站使用dede改模板得来的，系统自带了一个bshare的插件，用来分享文章到各种站点（朋友网、人人网、百度博客、新浪微博等），然而这个插件有时候网站还上不去，经常让我的页面卡了好久，网上搜了搜，发现了个这个jiathis，地址：http://www.jiathis.com/我看了看，对织梦还专门做了一个插件，看起来非常好用这里记录下来，以后如果真的无法忍受bshare了，我就要换成这个~ ,"['站长', '推荐', '一个', '网页', '分享', '按钮', '插件', 'jiathis', '最近', '一直', '鼓捣', '另外', '一个', '小站', 'www.51', 'projob', 'com', '顺眼', '地方', '改来改去', '这个', '使用', 'dede', '模板', '得来', '系统', '自带', '一个', 'bshare', '插件', '用来', '分享', '文章', '各种', '站点', '朋友网', '人人', '百度', '博客', '新浪', '微博', '然而', '这个', '插件', '有时候', '网站', '经常', '页面', '好久', '网上', '发现', '这个', 'jiathis', '地址', 'http', 'www', 'jiathis', 'com', '对织', '专门', '一个', '插件', '看起来', '非常', '好用', '这里', '记录下来', '以后', '如果', '真的', '无法忍受', 'bshare', '就要', '换成', '这个']","[[-0.23713112 -0.13703601  0.23320763  0.26148227  0.19508981 -0.37192063
  -0.14770117  0.48461415 -0.01901791 -0.02824149 -0.09527812 -0.35845022
  -0.14825077  0.57007522  0.09534697 -0.13605522 -0.14209188  0.01670497
  -0.03372569 -0.36789888  0.03157696  0.25385364 -0.04656465 -0.12277407
   0.05589201 -0.48090764 -0.30513133  0.09626972 -0.17710203 -0.05712935
   0.21975031  0.12113209  0.00582674 -0.12126937 -0.15251002  0.35038318
  -0.12730714 -0.21026408  0.08453575 -0.66912406 -0.10324625 -0.52540217
  -0.02302482 -0.06578745 -0.14048882 -0.19395035 -0.3363554   0.45753086
  -0.038961    0.32639931  0.11632359 -0.28531297 -0.00380089 -0.25938567
   0.03498255  0.41363546  0.22344759 -0.07138134  0.11441194 -0.0745816
   0.09805153  0.24854857  0.01014     0.08444585 -0.34183205  0.01012427
  -0.027677    0.04067219 -0.18462711  0.42158238  0.08825566 -0.21484201
   0.41564327 -0.32174771  0.56489694  0.22111581  0.28636275 -0.18783084
  -0.19207396 -0.24990421 -0.13129453  0.00153512 -0.08326423  0.36369891
  -0.3971035   0.17219224 -0.27596498  0.46792714  0.50300414  0.15640486
   0.23620446  0.12568398  0.31064502  0.15630909  0.18804113  0.4436841
   0.07057724 -0.23075521  0.13084947 -0.07544513]]"
478,c/c++批量向mysql插入数据,"先给个MYSQL对于C的API具体代码，改为手动提交，每次5W数据//mysql所需的头文件和库文件//mysql所需的头文件和库文件  #include ""winsock.h"" #include <Windows.h>#include <stdio.h>#include <stdlib.h>#include ""mysql.h""#include<fstream>#include <string>#include <vector>#include <iostream>using namespace std;int main(){    //配置文件    ifstream configFin(""config.txt"");    ifstream filefin(""filelist.txt"");//要处理的文件列表    string processFile;//要处理的文件名字    string dbhost;//数据库主机    string dbuser;//数据库用户名    string dbpwd;//数据库密码    string dbname;//数据库名字    int eachProcessCount=50000;//每次处理的个数    string tmp;    //将文件列表放到vector里    vector<string> filevec;    while(filefin>>tmp) filevec.push_back(tmp);    configFin>>tmp>>dbhost>>tmp>>dbuser>>tmp>>dbpwd>>tmp>>dbname>>tmp>>eachProcessCount;    unsigned int port = 3306;           //server port           for(int fi=0; fi!=filevec.size(); ++fi){        //每次循环，处理一个文件        processFile = filevec[fi];        cout<<""文件：""<<processFile<<endl;        MYSQL myCont;        mysql_init(&myCont);        string uid, friendid;        ifstream fin(processFile.c_str());        int i=0;        int eachCount = 0;        string sql;        while(!fin.eof()){            if(mysql_real_connect(&myCont,dbhost.c_str(),dbuser.c_str(),dbpwd.c_str(),dbname.c_str(),port,NULL,CLIENT_MULTI_STATEMENTS)){                mysql_autocommit(&myCont,0);                mysql_query(&myCont, ""SET NAMES utf8"");                for(eachCount=0; eachCount<eachProcessCount; ++eachCount){                    if(fin>>uid>>friendid){                        //如果还有内容，那么就构建插入语句                        sql = ""insert into friendlist values('""+uid+""','""+friendid+""');"";                        mysql_query(&myCont, sql.c_str());                    } else {                        break;                    }                }                cout<<"". "";                mysql_commit(&myCont);                mysql_close(&myCont);//断开连接            }else{                cout<<""connect failed!""<<endl;            }        }        cout<<endl;        fin.close();    }    system(""pause"");    return 0;} 大致说一下C链接MYSQL的方法：1、去官方下载mysql和c的connector2、拷贝里面的lib目录下的dll和lib文件到当前目录下3、设置当前项目的头文件位下载的目录下的inlcude4、设置一个lib库（在项目设置里），设置第2步的文件名5、用上述程序就可以连接（数据库地址之类的，自己改掉）","['c++', '批量', 'mysql', '插入', '数据', '先给', 'mysql', '对于', 'api', '具体', '代码', '改为', '手动', '提交', '每次', '5w', '数据', 'mysql', '头文件', '文件', 'mysql', '头文件', '文件', 'include', 'winsock', 'include', 'windows', 'include', 'stdio', 'include', 'stdlib', 'include', 'mysql', 'include', 'fstream', 'include', 'string', 'include', 'vector', 'include', 'iostream', 'using', 'namespace', 'std', 'int', 'main', '配置文件', 'ifstream', 'configfin', 'config', 'txt', 'ifstream', 'filefin', 'filelist', 'txt', '处理', '文件', '列表', 'string', 'processfile', '处理', '文件', '名字', 'string', 'dbhost', '数据库', '主机', 'string', 'dbuser', '数据库', '用户名', 'string', 'dbpwd', '数据库', '密码', 'string', 'dbname', '数据库', '名字', 'int', 'eachprocesscount', '50000', '每次', '处理', '个数', 'string', 'tmp', '文件', '列表', '放到', 'vector', 'vector', 'string', 'filevec', 'while', 'filefin', 'tmp', 'filevec', 'push', 'back', 'tmp', 'configfin', 'tmp', 'dbhost', 'tmp', 'dbuser', 'tmp', 'dbpwd', 'tmp', 'dbname', 'tmp', 'eachprocesscount', 'unsigned', 'int', 'port', '3306', 'server', 'port', 'for', 'int', 'fi', 'fi', 'filevec', 'size', '++', 'fi', '每次', '循环', '处理', '一个', '文件', 'processfile', 'filevec', 'fi', 'cout', '文件', 'processfile', 'endl', 'mysql', 'mycont', 'mysql', 'init', 'mycont', 'string', 'uid', 'friendid', 'ifstream', 'fin', 'processfile', 'str', 'int', 'int', 'eachcount', 'string', 'sql', 'while', 'fin', 'eof', 'if', 'mysql', 'real', 'connect', 'mycont', 'dbhost', 'str', 'dbuser', 'str', 'dbpwd', 'str', 'dbname', 'str', 'port', 'null', 'client', 'multi', 'statements', 'mysql', 'autocommit', 'mycont', 'mysql', 'query', 'mycont', 'set', 'names', 'utf8', 'for', 'eachcount', 'eachcount', 'eachprocesscount', '++', 'eachcount', 'if', 'fin', 'uid', 'friendid', '如果', '还有', '内容', '那么', '构建', '插入', '语句', 'sql', 'insert', 'into', 'friendlist', 'values', 'uid', 'friendid', 'mysql', 'query', 'mycont', 'sql', 'str', 'else', 'break', 'cout', 'mysql', 'commit', 'mycont', 'mysql', 'close', 'mycont', '断开连接', 'else', 'cout', 'connect', 'failed', 'endl', 'cout', 'endl', 'fin', 'close', 'system', 'pause', 'return', '大致', '一下', '链接', 'mysql', '方法', '官方', '下载', 'mysql', 'connector2', '拷贝', '里面', 'lib', '目录', 'dll', 'lib', '文件', '当前目录', '设置', '当前', '项目', '头文件', '下载', '目录', 'inlcude4', '设置', '一个', 'lib', '项目', '设置', '设置', '文件名', '上述', '程序', '可以', '连接', '数据库', '地址', '之类', '自己', '改掉']","[[-0.21190618 -0.10704776  0.23468264  0.11192615  0.27729786 -0.33523725
  -0.12965577  0.4478067  -0.05464684 -0.10819518 -0.03695773 -0.34271145
  -0.13659941  0.5059772   0.15425959 -0.09193689 -0.12314153 -0.0047392
  -0.07422925 -0.50021826 -0.03255527  0.22857177 -0.04540437 -0.17559573
   0.06832937 -0.44878421 -0.28127802  0.04862972 -0.22169139 -0.07431316
   0.15272943 -0.00132921 -0.00742574 -0.12072829 -0.14939182  0.30884027
  -0.18307599 -0.24966228  0.0806413  -0.69768373 -0.13693372 -0.56318844
  -0.06766539 -0.00559654 -0.13485661 -0.20970135 -0.20876769  0.3457784
  -0.18344889  0.43949519  0.15218739 -0.25473322 -0.12449889 -0.16319175
   0.00483837  0.36470692  0.1480806  -0.08633101  0.1086408  -0.12890864
   0.07794934  0.22431221  0.02731114  0.07847251 -0.35348482  0.03631164
   0.05100346 -0.02871737 -0.28359522  0.40004406  0.12444604 -0.16826397
   0.35664392 -0.29162951  0.51430182  0.25186452  0.1276484  -0.14139685
  -0.31292216 -0.11669825  0.0059079   0.04228851 -0.09762457  0.34482864
  -0.31343693  0.20782029 -0.27090945  0.41108791  0.45863256  0.15026283
   0.23747065  0.10311184  0.35027878  0.18468311  0.17775299  0.31347463
   0.11097043 -0.30706164 -0.03637935 -0.12590424]]"
480,mysql用命令行链接远程主机的方法,"假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：mysql -h110.110.110.110 -uroot -p123;（注:u与root之间可以不用加空格，其它也一样） 该命令在win的cmd下运行，如果找不到mysql命令那么，就得先安装Mysql，然后要么设置环境变量要么想把当前目录设置到mysql的bin目录，这样才能使用mysql.exe来执行该命令 备注：清空表不要用delete from table;用truncate table xx;不过该方法无法恢复数据，但是会非常快","['mysql', '命令行', '链接', '远程', '主机', '方法', '假设', '远程', '主机', 'ip', '110.110', '110.110', '用户', '名为', 'root', '密码', 'abcd123', '键入', '以下', '命令', 'mysql', 'h110.110', '110.110', 'uroot', 'p123', 'root', '之间', '可以', '不用', '空格', '其它', '一样', '命令', 'win', 'cmd', '运行', '如果', '不到', 'mysql', '命令', '那么', '安装', 'mysql', '然后', '要么', '设置', '环境变量', '要么', '当前目录', '设置', 'mysql', 'bin', '目录', '这样', '才能', '使用', 'mysql', 'exe', '执行', '命令', '备注', '清空', '不要', 'delete', 'from', 'table', 'truncate', 'table', 'xx', '不过', '方法', '无法', '恢复', '数据', '但是', '非常']","[[-2.55077380e-01 -1.37030588e-01  2.01312806e-01  1.77780945e-01
   2.95216134e-01 -3.27748460e-01 -1.84929950e-01  4.98258799e-01
  -6.19817186e-03 -2.12201719e-02 -7.29246170e-02 -3.18146815e-01
  -1.73316238e-01  5.85939508e-01  1.40867592e-01 -1.00279457e-01
  -1.44728692e-01 -3.83331215e-04 -9.71391146e-02 -4.38650840e-01
   3.76284092e-02  2.39962878e-01 -7.39698334e-03 -9.53217920e-02
   1.21998423e-01 -5.40596358e-01 -2.88540730e-01  9.12703660e-02
  -2.00679353e-01 -6.95029930e-02  2.44615994e-01  4.69682550e-02
  -3.58420605e-02 -1.41938112e-01 -1.08546855e-01  3.44522598e-01
  -1.36435616e-01 -2.10836509e-01  1.19385751e-01 -7.53788616e-01
  -1.60624064e-01 -5.55100445e-01 -2.28468093e-02 -6.59983904e-02
  -1.68303252e-01 -1.35995813e-01 -2.68428497e-01  4.74246442e-01
  -1.62652879e-01  3.72511757e-01  1.97365185e-01 -2.72767139e-01
  -1.08391154e-01 -2.31442271e-01  7.56007267e-02  3.89545794e-01
   2.41476080e-01 -4.92540246e-02  1.04206848e-01 -8.78657270e-02
   4.95370294e-02  2.77406250e-01  3.22305823e-02  7.97653289e-02
  -3.81011510e-01 -2.09301082e-02  3.76732339e-02 -2.57407079e-03
  -2.39448576e-01  4.30010843e-01  1.48693490e-01 -2.38554458e-01
   3.90820466e-01 -3.19202986e-01  5.61946335e-01  1.65583794e-01
   2.12104070e-01 -1.29820020e-01 -2.80857738e-01 -2.14550841e-01
  -8.16616211e-02 -3.35415700e-03 -5.76559736e-02  3.32829961e-01
  -3.69851685e-01  2.07099985e-01 -2.78282221e-01  4.01592411e-01
   4.57228329e-01  1.26872757e-01  3.12241044e-01  1.14819313e-01
   3.59007055e-01  1.99041182e-01  1.81525609e-01  3.73679483e-01
   9.10060486e-02 -2.82624397e-01 -2.47465216e-03 -9.40227207e-02]]"
483,phpmyadmin远程连接mysql数据库的方法,前提：你本地有PHP环境，如果你本地装有PHPMYADMIN，建议重新下载一个，随便另起一个文件夹名。一、修改libraries文件夹下的config.default.php文件1、查找$cfg['PmaAbsoluteUri'] ，将其值设置为你本地的phpmyadmin路径，例如http://127.0.0.1/phpmyadmin/2、查找$cfg['Servers'][$i]['host'] ， 将其值设置为你mysql数据库地址，例如125.24.112.193、查找$cfg['Servers'][$i]['user'] ， 将其值设置为你mysql数据库用户名，例如abcd4、查找$cfg['Servers'][$i]['port'] ， 将其值设置为你mysql数据库端口，例如33065、查找$cfg['Servers'][$i]['password'] ， 将其值设置为你mysql数据库密码，例如abcd二、通过你本地的phpmyadmin路径（同第二步设置的路径），通过你的mysql数据库用户名密码即可访问远程数据库。,"['phpmyadmin', '远程', '连接', 'mysql', '数据库', '方法', '前提', '本地', 'php', '环境', '如果', '本地', '装有', 'phpmyadmin', '建议', '重新', '下载', '一个', '随便', '另起', '一个', '文件夹', '修改', 'libraries', '文件夹', 'config', 'default', 'php', '文件', '查找', 'cfg', 'pmaabsoluteuri', '其值', '设置', '本地', 'phpmyadmin', '路径', '例如', 'http', '127.0', '0.1', 'phpmyadmin', '查找', 'cfg', 'servers', 'host', '其值', '设置', 'mysql', '数据库', '地址', '例如', '125.24', '112.193', '查找', 'cfg', 'servers', 'user', '其值', '设置', 'mysql', '数据库', '用户名', '例如', 'abcd4', '查找', 'cfg', 'servers', 'port', '其值', '设置', 'mysql', '数据库', '端口', '例如', '33065', '查找', 'cfg', 'servers', 'password', '其值', '设置', 'mysql', '数据库', '密码', '例如', 'abcd', '通过', '本地', 'phpmyadmin', '路径', '第二步', '设置', '路径', '通过', 'mysql', '数据库', '用户名', '密码', '即可', '访问', '远程', '数据库']","[[-0.21935052 -0.1260623   0.19535141  0.18832985  0.23320024 -0.31867007
  -0.14367093  0.44569887 -0.02211988 -0.0410877  -0.06842608 -0.30467725
  -0.14693293  0.51657942  0.11516592 -0.10045017 -0.12869307  0.00652235
  -0.06381098 -0.38567904  0.02218566  0.2235544  -0.0247592  -0.11179096
   0.08367609 -0.46025081 -0.27114843  0.07922416 -0.17809655 -0.06574855
   0.20595598  0.06069779 -0.00959665 -0.12105483 -0.125998    0.31245983
  -0.13682925 -0.19519261  0.0926855  -0.65018492 -0.11957797 -0.49163646
  -0.02603859 -0.0507583  -0.14112685 -0.15276194 -0.25573755  0.40960187
  -0.1094264   0.33520778  0.14082376 -0.2559598  -0.06542382 -0.21059991
   0.0430762   0.36437403  0.19562915 -0.05600084  0.11181416 -0.08400853
   0.07372557  0.23240353  0.0261866   0.07289357 -0.33695288  0.00077186
   0.0116617   0.01259601 -0.21168233  0.38444723  0.10812092 -0.19817429
   0.36120918 -0.29100766  0.50664724  0.17705464  0.20651362 -0.13714759
  -0.23477452 -0.19101473 -0.07404945  0.01142922 -0.07580824  0.31814326
  -0.33482524  0.1734564  -0.24896207  0.38983533  0.43478391  0.12674178
   0.24451452  0.10481639  0.31113599  0.17436291  0.1658395   0.35782653
   0.07842552 -0.23777091  0.03996737 -0.08528277]]"
485,被深深鄙视的2012找暑期实习，哥很伤心,从2012年4月开始：1、腾讯一面被刷2、腾讯二面去霸面失败3、微软霸笔失败4、360霸面失败 充斥着“被”字，充斥着失败，充斥着希望和失望，哥有些伤心~ 教训：1、如果要应聘服务端， 简历上要突出C/C++，弱化PHP和JAVA2、如果要应聘服务端，那么填写招聘选择的时候，就不要多选“前台”3、面试结束，不要问自己过了没4、如果要让写程序题，一定要先思考好，然后下笔写；其次要仔仔细细的写，不要潦草想应付了事；再次一定要写好错误处理这些（边界处理、正确性）5、如果听到有招聘信息，一定要在第一时间投递简历和填写申请6、笔试的题目，一定要认认真真的答，因为答不好会造成失去面试机会，霸面受挫浪费时间7、要锻炼自己解决未知难题的勇气和能力，对于这些突然到来的难题，要仔细动脑进行分析，要试着去解决，而不是直接放弃。8、面试一定要端正心态，随时保持稳重 接下来的努力方向：1、认真复习相关知识，以看书为主。包括深入理解计算机系统、数据结构与算法、面试宝典等书2、锻炼自己解决未知难题的能力，遇到这些不要直接搜索答案，要试着找方法3、锻炼自己的心态，笔试时、面试时的心态把握4、不放过任何一个可以霸笔霸面的机会~~~  俗话说失败是成功之母，说这句话心里有些难受。我只知道：因为受挫，我再快速成长着。我会更加开动自己的脑筋探究、会更加对有用消息进行关注和快速反应、会学的越来越多。,"['深深', '鄙视', '2012', '暑期', '实习', '伤心', '2012', '开始', '腾讯', '一面', '腾讯', '二面', '霸面', '失败', '微软', '霸笔', '失败', '360', '霸面', '失败', '充斥', '充斥', '失败', '充斥', '希望', '失望', '有些', '伤心', '教训', '如果', '应聘', '服务端', '简历', '上要', '突出', 'c++', '弱化', 'php', 'java2', '如果', '应聘', '服务端', '那么', '填写', '招聘', '选择', '时候', '不要', '多选', '前台', '面试', '结束', '不要', '自己', '如果', '程序', '一定', '思考', '然后', '下笔', '其次', '仔仔细细', '不要', '潦草', '应付', '再次', '一定', '错误处理', '这些', '边界', '处理', '正确性', '如果', '听到', '招聘', '信息', '一定', '第一', '时间', '投递', '简历', '填写', '申请', '笔试', '题目', '一定', '认认真真', '因为', '不好', '造成', '失去', '面试', '机会', '霸面', '受挫', '浪费时间', '锻炼', '自己', '解决', '未知', '难题', '勇气', '能力', '对于', '这些', '突然', '到来', '难题', '仔细', '动脑', '进行', '分析', '要试', '解决', '不是', '直接', '放弃', '面试', '一定', '要端正', '心态', '随时', '保持', '稳重', '接下来', '努力', '方向', '认真', '复习', '相关', '知识', '看书', '为主', '包括', '深入', '理解', '计算机系统', '数据结构', '算法', '面试', '宝典', '锻炼', '自己', '解决', '未知', '难题', '能力', '遇到', '这些', '不要', '直接', '搜索', '答案', '要试', '方法', '锻炼', '自己', '心态', '笔试', '面试', '心态', '把握', '不放过', '任何', '一个', '可以', '霸笔', '霸面', '机会', '俗话说', '失败', '成功', '之母', '这句', '心里', '有些', '难受', '知道', '因为', '受挫', '快速', '成长', '我会', '更加', '开动', '自己', '脑筋', '探究', '更加', '有用', '消息', '进行', '关注', '快速反应', '会学', '越来越']","[[-0.21015061 -0.11359658  0.18267847  0.13978419  0.24258502 -0.28321948
  -0.15752018  0.40058396 -0.00154932 -0.01059391 -0.05124638 -0.27217366
  -0.15248673  0.50012582  0.12134716 -0.08799322 -0.12737163 -0.0089347
  -0.08344688 -0.37003702  0.02762922  0.20040392  0.00603349 -0.06577026
   0.10178555 -0.45693449 -0.23239535  0.0722769  -0.16697887 -0.04923788
   0.21130357  0.02693023 -0.01698833 -0.11774114 -0.07979305  0.27511956
  -0.10604162 -0.17670488  0.09528271 -0.63432058 -0.14315733 -0.48169664
  -0.03140747 -0.06771003 -0.14207136 -0.11434622 -0.22582518  0.39662142
  -0.14619875  0.32068053  0.16967522 -0.21845144 -0.09453845 -0.19766269
   0.06209339  0.31940174  0.21157342 -0.04642318  0.07571752 -0.07057826
   0.02936589  0.24608202  0.01936843  0.07229122 -0.32194878 -0.01637736
   0.03624004 -0.01608592 -0.19230473  0.36647765  0.1193414  -0.21092633
   0.33203998 -0.27118723  0.47985888  0.12861793  0.1834236  -0.11528934
  -0.2181612  -0.18654769 -0.07152271 -0.01024804 -0.04992779  0.27292454
  -0.31381261  0.17066892 -0.24131068  0.33864495  0.37718474  0.10719061
   0.25906884  0.10157706  0.2988273   0.1541531   0.15341607  0.31202712
   0.08265673 -0.24801692 -0.01204604 -0.06709591]]"
491,程序员找工作网啊站-计算机专业学生必看,自己做的一个程序员求职知识管理的小网站 因自己年底就要找工作，不可避免要从现在开始着手复习，想来想去，复习内容应该包括这些方面内容：l 专业知识：比如操作系统、计算机网络、计算机组成与体系结构、数据结构与算法、海量数据处理、设计模式等等。l 编程语言：比如c/c++、java、php等语言语法内涵。l 笔试面试经验：从前人笔试面试的过程经历、经验中，能够学习到很多应对方法，这些也是要关注的，每天看一些，之后也有所了解。l 简历书写：貌似国外的、不同公司的简历写法是不同的，因此会关注一些这类资源。l 行业资讯：听之前的师兄师姐们说，面试的时候都会问点当前IT界发生的事情，让阐述自己的理解，因此也会收集这类新闻。l 招聘讯息：一旦开始招聘，大多公司同时到达，不可避免会有些忘记或遗漏，因此要有一种组织方式记录下来。 经常在博客园上看文章，不可避免总是想要把精彩的文章记录下来，可是保存成网摘的方式，不好检索，不好管理，并且还有其他的很多网上找来的精彩文章，都不好记录。因此我问了很多朋友，在他们的建议下就做了个小网站www.51projob.com，直接用织梦DEDE套了一下，自己简单改了下模板看着像自己的。用来将复习知识记录下来，然后自己每天网站上、手机上不时的看一看这些内容，发现确实比较方便，现在网站有一些人访问了，呵呵，很是高兴，比较有成就感，我会每天都看点文章，如果有精彩的段子就发上去，让大家也多一个学习的去处的。网站目前首页截图：贴一下网站现在的分类目录了（待完善）：首页专业知识数据结构算法系列计算机网络海量数据操作系统设计模式Linux其他编程语言C/C++JavaHTML/CSS/JSC#PHP其他笔试面试简历书写求职经验资源下载程序人生行业资讯 网站我每天都在更新，一直在努力，欢迎大家的访问，祝大家找到自己理想的工作,"['程序员', '工作', '计算机专业', '学生', '必看', '自己', '一个', '程序员', '求职', '知识', '管理', '网站', '自己', '年底', '就要', '工作', '不可避免', '现在', '开始', '着手', '复习', '想来想去', '复习内容', '应该', '包括', '这些', '方面', '内容', '专业知识', '比如', '操作系统', '计算机网络', '计算机', '组成', '体系结构', '数据结构', '算法', '海量', '数据处理', '设计模式', '等等', '编程语言', '比如', 'c++', 'java', 'php', '语言', '语法', '内涵', '笔试', '面试', '经验', '从前', '笔试', '面试', '过程', '经历', '经验', '能够', '学习', '很多', '应对', '方法', '这些', '关注', '每天', '一些', '之后', '有所', '了解', '简历', '书写', '貌似', '国外', '不同', '公司', '简历', '写法', '不同', '因此', '关注', '一些', '资源', '行业资讯', '之前', '师兄', '师姐', '面试', '时候', '问点', '当前', 'it', '发生', '事情', '阐述', '自己', '理解', '因此', '收集', '新闻', '招聘', '讯息', '一旦', '开始', '招聘', '大多', '公司', '同时', '到达', '不可避免', '有些', '忘记', '遗漏', '因此', '一种', '组织', '方式', '记录下来', '经常', '博客园', '文章', '不可避免', '总是', '想要', '精彩', '文章', '记录下来', '可是', '保存', '成网', '方式', '不好', '检索', '不好', '管理', '并且', '还有', '其他', '很多', '网上', '找来', '精彩文章', '不好', '记录', '因此', '很多', '朋友', '他们', '建议', '网站', 'www.51', 'projob', 'com', '直接', '用织', 'dede', '一下', '自己', '简单', '模板', '看着', '自己', '用来', '复习', '知识', '记录下来', '然后', '自己', '每天', '网站', '手机', '不时', '看一看', '这些', '内容', '发现', '确实', '比较', '方便', '现在', '网站', '一些', '访问', '呵呵', '高兴', '比较', '成就感', '我会', '每天', '看点', '文章', '如果', '精彩', '段子', '发上去', '大家', '一个', '学习', '去处', '网站', '目前', '首页', '截图', '一下', '网站', '现在', '分类目录', '完善', '首页', '专业知识', '数据结构', '算法', '系列', '计算机网络', '海量', '数据', '操作系统', '设计模式', 'linux', '其他', '编程语言', 'c++', 'javahtml', 'css', 'js', 'c#', 'php', '其他', '笔试', '面试', '简历', '书写', '求职', '经验', '资源', '下载', '程序', '人生', '行业资讯', '网站', '每天', '更新', '一直', '努力', '欢迎', '大家', '访问', '大家', '找到', '自己', '理想', '工作']","[[-0.24239306 -0.12149236  0.21350611  0.1816565   0.250881   -0.32931261
  -0.15932674  0.45117383 -0.01445223 -0.02249665 -0.06396398 -0.3196857
  -0.1531964   0.54662404  0.12916636 -0.10513211 -0.13475708 -0.0111938
  -0.07683082 -0.40435997  0.02403658  0.23797983 -0.01110823 -0.09559492
   0.09328631 -0.49246627 -0.26777214  0.07726843 -0.18110757 -0.05769116
   0.2284272   0.0463162  -0.01299806 -0.1231403  -0.10561866  0.32027004
  -0.1243623  -0.20606006  0.09678864 -0.69485116 -0.14110791 -0.52539921
  -0.03425807 -0.06893649 -0.15226364 -0.14598754 -0.26943694  0.43380857
  -0.1383647   0.35238776  0.1637508  -0.25450898 -0.08674589 -0.22572711
   0.0558364   0.36534564  0.22311691 -0.05642549  0.09248873 -0.07642103
   0.04985548  0.26062581  0.01909233  0.07728061 -0.3535779  -0.0067139
   0.02681113 -0.00571713 -0.21239045  0.40913955  0.11160337 -0.2208378
   0.37745921 -0.30811536  0.53233267  0.16710149  0.21678969 -0.14489497
  -0.23428883 -0.20965417 -0.08689979 -0.00412481 -0.06179108  0.32263273
  -0.35013851  0.18733779 -0.26639429  0.39799863  0.43766417  0.13212304
   0.26684413  0.11491485  0.3278488   0.17088282  0.17385471  0.3647339
   0.08790255 -0.26371575  0.02794352 -0.07578357]]"
495,WIN7下硬盘安装Ubuntu 11.10系统成功,"在WIN7旗舰版下硬盘安装Ubuntu 11.10成功！具体过程如下：一，划分磁盘分区在磁盘管理里面将D盘的100G压缩出40G（计算机-右击-管理-存储-磁盘管理）的空间给Ubuntu 。其实ubuntu 本身大概需要3G的空间，大家可以根据自己磁盘空间的大小合理安排分区。二，设置启动项1 、下载最新版本的 Grub4DOS ，下载并解压缩后，将目录中的（ grldr ,     grldr.mbr，  grub.exe ）三个文件复制到 C 盘根目录下2 、在下载好的 Ubuntu 11.10系统 iso 文件用demon虚拟光驱打开， 在casper 文件夹目录下，找到 vmlinuz、initrd.lz 解压，并复制到 C 盘根目录下。3 、C 盘根目录下建立menu.lst 文件，内容为：title Install Ubunturoot (hd0,0)kernel (hd0,0)/vmlinuz boot=casper iso-scan/filename=/Ubuntu.iso ro quiet splash locale=zh_CN.UTF-8initrd (hd0,0)/initrd.lz注意这里加红色的文件名字，必须改成你实际的文件名字。4 、在C 盘根目录新建一个文件命名为boot.ini 。 内容如下：[boot loader][operating systems]c:\grldr.mbr=""Ubuntu""5、将下载的Ubuntu 10.10系统的iso文件复制到C盘根目录。三， 硬盘安装 Ubuntu重启机器。在启动项选择Ubuntu. 进入Ubuntu桌面。打开终端，输入代码:sudo umount -l /isodevice这一命令取消掉对光盘所在 驱动 器的挂载，否则分区界面找不到分区。双击安装Ubuntu，根据提示进行安装即可。这里介绍一下安装过程中涉及到的分区问题:选择“手动”""使用最大的连续空间，点击“前进”开始安装，一直“下一步”直到安装完毕四， 修复 Windows 7 启动项重新启动Ubuntu之后，结果发现选择windows 7的启动项，又进入到Ubuntu的安装界面。下面来说明如何修复，进人Ubuntu系统，打开“应用程序---附件--终端”，命令如下sudo gedit /etc/default/grub修改 GRUB_TIMEOUT=""10""然后在终端中输入sudo update-grubupdate 命令会自动找到 windows 7 启动项。并且自动更新 /boot/grub/grub.cfg 文件。注：进入“位置---计算机---win7系统盘“，将安装Ubuntu系统时复制到C盘的那些文件 (vmlinuz，initrd.lz，grldr，grldr.mbr，grub.exe，menu.lst，boot.ini，ubuntu.iso) 全部移到回收站。特别是ISO文件，如果不删除，重启进入win7后，又将进入Ubuntu的安装界面。至此，ubuntu 11.10安装完毕。来自：www.crazyant.net和www.51projob.com","['win7', '硬盘', '安装', 'ubuntu', '11.10', '系统', '成功', 'win7', '旗舰版', '硬盘', '安装', 'ubuntu', '11.10', '成功', '具体', '过程', '如下', '划分', '磁盘分区', '磁盘', '管理', '里面', 'd盘', '100g', '压缩', '40g', '计算机', '右击', '管理', '存储', '磁盘', '管理', '空间', 'ubuntu', '其实', 'ubuntu', '本身', '大概', '需要', '3g', '空间', '大家', '可以', '根据', '自己', '磁盘空间', '大小', '合理安排', '分区', '设置', '启动项', '下载', '最新', '版本', 'grub4dos', '下载', '解压缩', '目录', 'grldr', 'grldr', 'mbr', 'grub', 'exe', '三个', '文件', '复制到', '根目录', '下载', 'ubuntu', '11.10', '系统', 'iso', '文件', 'demon', '虚拟光驱', '打开', 'casper', '文件夹', '目录', '找到', 'vmlinuz', 'initrd', 'lz', '解压', '复制到', '根目录', '根目录', '建立', 'menu', 'lst', '文件', '内容', 'title', 'install', 'ubunturoot', 'hd0', 'kernel', 'hd0', 'vmlinuz', 'boot', 'casper', 'iso', 'scan', 'filename', 'ubuntu', 'iso', 'ro', 'quiet', 'splash', 'locale', 'zh', 'cn', 'utf', '8initrd', 'hd0', 'initrd', 'lz', '注意', '这里', '红色', '文件', '名字', '必须', '改成', '实际', '文件', '名字', '根目录', '新建', '一个', '文件', '命名', 'boot', 'ini', '内容', '如下', 'boot', 'loader', 'operating', 'systems', 'grldr', 'mbr', 'ubuntu', '下载', 'ubuntu', '10.10', '系统', 'iso', '文件', '复制到', 'c盘', '根目录', '硬盘', '安装', 'ubuntu', '重启', '机器', '启动项', '选择', 'ubuntu', '进入', 'ubuntu', '桌面', '打开', '终端', '输入', '代码', 'sudo', 'umount', 'isodevice', '这一', '命令', '取消', '光盘', '所在', '驱动', '挂载', '否则', '分区', '界面', '不到', '分区', '双击', '安装', 'ubuntu', '根据', '提示', '进行', '安装', '即可', '这里', '介绍', '一下', '安装', '过程', '涉及', '分区', '问题', '选择', '手动', '使用', '最大', '连续', '空间', '点击', '前进', '开始', '安装', '一直', '一步', '直到', '安装', '完毕', '修复', 'windows', '启动项', '重新启动', 'ubuntu', '之后', '结果', '发现', '选择', 'windows', '启动项', '进入', 'ubuntu', '安装', '界面', '下面', '说明', '如何', '修复', '进人', 'ubuntu', '系统', '打开', '应用程序', '---', '附件', '--', '终端', '命令', '如下', 'sudo', 'gedit', 'etc', 'default', 'grub', '修改', 'grub', 'timeout', '10', '然后', '终端', '输入', 'sudo', 'update', 'grubupdate', '命令', '自动', '找到', 'windows', '启动项', '并且', '自动更新', 'boot', 'grub', 'grub', 'cfg', '文件', '进入', '位置', '---', '计算机', '---', 'win7', '系统盘', '安装', 'ubuntu', '系统', '复制到', 'c盘', '那些', '文件', 'vmlinuz', 'initrd', 'lz', 'grldr', 'grldr', 'mbr', 'grub', 'exe', 'menu', 'lst', 'boot', 'ini', 'ubuntu', 'iso', '全部', '回收站', '特别', 'iso', '文件', '如果', '删除', '重启', '进入', 'win7', '进入', 'ubuntu', '安装', '界面', '至此', 'ubuntu', '11.10', '安装', '完毕', '来自', 'www', 'crazyant', 'net', 'www.51', 'projob', 'com']","[[-0.23448379 -0.12999747  0.21739008  0.21435631  0.21004167 -0.34559723
  -0.13283135  0.45228903 -0.03075596 -0.04974634 -0.07797425 -0.33819587
  -0.13844496  0.51889026  0.10130416 -0.12414108 -0.12567474  0.00738849
  -0.04185009 -0.37829251  0.01091247  0.24764103 -0.04272383 -0.12809895
   0.06522846 -0.45116225 -0.28036761  0.07208681 -0.18082655 -0.06246139
   0.19679693  0.08361774  0.00074217 -0.11559071 -0.14838814  0.3323122
  -0.136259   -0.21753532  0.08666001 -0.64661525 -0.10109222 -0.50735559
  -0.02641256 -0.04972056 -0.13381941 -0.17956914 -0.29008569  0.41288165
  -0.08243145  0.33651405  0.12845852 -0.26786236 -0.03722743 -0.22597377
   0.01355611  0.37827677  0.19001548 -0.0738808   0.11036518 -0.08445951
   0.09121557  0.23155565  0.01581143  0.07244116 -0.33462881  0.01566178
  -0.00979805  0.02427504 -0.19992417  0.39553829  0.08184754 -0.18900573
   0.38066885 -0.30216262  0.52147361  0.22221223  0.22597999 -0.16542312
  -0.21018379 -0.19600958 -0.08580842  0.01064864 -0.08188613  0.34776073
  -0.34981353  0.16809679 -0.25879518  0.42997422  0.46068015  0.1445536
   0.23155904  0.11769269  0.30087489  0.16046128  0.17745403  0.39347368
   0.0841073  -0.23707272  0.08385715 -0.08864692]]"
499,Dedecms备份还原网站有效方法,Dedecms备份还原方法为您提供3个，其实这3个dedecms网站备份恢复还原都很有效，所以不管你选择哪种，都能成功备份dedecms网站，以及dedecms网站恢复还原成功！Dedecms网站备份还原技巧1：1、首先在旧站后台备份数据库。2、上旧站FTP下载三个文件夹：data文件夹下面的backup_data文件（只下载backup_data文件夹就行了，这是数据库备份），uploads文件夹（存放图片、附件之类的），templets文件夹（旧站模版，如果不想要可以不要）3、在新站安装与旧站一样版本的dede，网站后台密码还有数据库密码与旧站一样4、上传下载好的旧站三个文件替换新旧的三个文件夹5、到新站后台数据库还原6、更新下网站内容就行了。Dedecms备份还原注意：在新的空间安装一个新的dedecms系统(记得编码要选原来的一样)这 是非常重要的一步，在/data/backup_data找到tables_struct开头的这个txt文件，然后用记事本或者editplus打开， 然后找到DEFAULT CHARSET=utf8或者DEFAULT CHARSET=gbk，全部把它们去掉。不然后果相当的严重。把/data/backup_data目录下的备份的数据库文件FTP上传到相应的目录下。进入新安装的系统里后台–>系统管理–>数据库还原，全选所有备份文件，并且勾选还原表结构信，然后单击开始还源数据便可以恢复了。还原后重新登录后台，然后生成HTML就可以了。Dedecms网站备份还原技巧2： Dedecms备份1、登陆网站后台，进入系统——数据库备份/还原；2、选择页面上列出的所有的表，点击提交即可；3、在ftp中将所有文件下载到本地（尤其是/data/backupdata/目录以及templets目录）；Dedecms恢复当网站出现问题需要转移恢复数据的时候按照以下步骤进行：1、将所有文件上传到服务器；2、删除install目录下的install_lock.txt，并将index.php.bak更名为：index.php;3、运行http://你的新网址/install重新安装dedecms；4、进入后台，系统——数据库备份/还原，点击右上角的数据还原进行恢复即可；Dedecms网站备份还原技巧3：(适合空间换了)dedecms从旧空间迁移到新空间。1.备份数据;先在旧空间的后台备份数据2.把程序与数据传到新空间;然后，在新的空间上重新安装DEDECMS，再就用FTP软件把旧空间的程序和数据上传到新空间， 注意包括模板风格也上传，把上传的程序覆盖新安装的程序。3.修改数据库配置文件;这步很重要，用FTP软件到新空间站点根目录下的数据库配置文件：dedecms/common.inc.php用记事本打开。要修改的地方有如下几处：$dbhost = ‘localhost’; // 数据库服务器(一般不必改)$dbuser = ‘root’; // 数据库用户名$dbpw = ’sohu’; // 数据库密码$dbname = ‘vc’; // 数据库名4. 还原数据直接从后台还原最后更新dedecms网站缓存就可以了，到此，dedecms备份还原完毕！,"['dedecms', '备份', '还原', '网站', '有效', '方法', 'dedecms', '备份', '还原', '方法', '提供', '其实', 'dedecms', '网站', '备份', '恢复', '还原', '有效', '所以', '不管', '选择', '成功', '备份', 'dedecms', '网站', '以及', 'dedecms', '网站', '恢复', '还原', '成功', 'dedecms', '网站', '备份', '还原', '技巧', '首先', '旧站', '后台', '备份', '数据库', '旧站', 'ftp', '下载', '三个', '文件夹', 'data', '文件夹', '下面', 'backup', 'data', '文件', '下载', 'backup', 'data', '文件夹', '就行了', '这是', '数据库', '备份', 'uploads', '文件夹', '存放', '图片', '附件', '之类', 'templets', '文件夹', '旧站', '模版', '如果', '想要', '可以', '不要', '安装', '旧站', '一样', '版本', 'dede', '网站', '后台', '密码', '还有', '数据库', '密码', '旧站', '一样', '上传下载', '旧站', '三个', '文件', '替换', '新旧', '三个', '文件夹', '后台', '数据库', '还原', '更新', '网站', '内容', '就行了', 'dedecms', '备份', '还原', '注意', '空间', '安装', '一个', 'dedecms', '系统', '记得', '编码', '要选', '原来', '一样', '非常', '重要', '一步', 'data', 'backup', 'data', '找到', 'tables', 'struct', '开头', '这个', 'txt', '文件', '然后', '记事本', '或者', 'editplus', '打开', '然后', '找到', 'default', 'charset', 'utf8', '或者', 'default', 'charset', 'gbk', '全部', '它们', '去掉', '不然', '后果', '相当', '严重', 'data', 'backup', 'data', '目录', '备份', '数据库', '文件', 'ftp', '传到', '相应', '目录', '进入', '安装', '系统', '后台', '系统管理', '数据库', '还原', '全选', '所有', '备份文件', '并且', '勾选', '还原', '结构', '然后', '单击', '开始', '还源', '数据', '可以', '恢复', '还原', '重新', '登录', '后台', '然后', '生成', 'html', '可以', 'dedecms', '网站', '备份', '还原', '技巧', 'dedecms', '备份', '登陆', '网站', '后台', '进入', '系统', '数据库', '备份', '还原', '选择', '页面', '列出', '所有', '点击', '提交', '即可', 'ftp', '中将', '所有', '文件', '下载', '本地', '尤其', 'data', 'backupdata', '目录', '以及', 'templets', '目录', 'dedecms', '恢复', '网站', '出现', '问题', '需要', '转移', '恢复', '数据', '时候', '按照', '以下', '步骤', '进行', '所有', '文件', '传到', '服务器', '删除', 'install', '目录', 'install', 'lock', 'txt', 'index', 'php', 'bak', '更名', 'index', 'php', '运行', 'http', '新网址', 'install', '重新安装', 'dedecms', '进入', '后台', '系统', '数据库', '备份', '还原', '点击', '右上角', '数据', '还原', '进行', '恢复', '即可', 'dedecms', '网站', '备份', '还原', '技巧', '适合', '空间', 'dedecms', '空间', '迁移', '空间', '备份', '数据', '空间', '后台', '备份', '数据', '程序', '数据', '传到', '空间', '然后', '空间', '重新安装', 'dedecms', 'ftp', '软件', '空间', '程序', '数据', '传到', '空间', '注意', '包括', '模板', '风格', '上传', '上传', '程序', '覆盖', '安装', '程序', '修改', '数据库', '配置文件', '这步', '重要', 'ftp', '软件', '空间站', '根目录', '数据库', '配置文件', 'dedecms', 'common', 'inc', 'php', '记事本', '打开', '修改', '地方', '如下', '几处', 'dbhost', 'localhost', '数据库', '服务器', '一般', '不必', 'dbuser', 'root', '数据库', '用户名', 'dbpw', 'sohu', '数据库', '密码', 'dbname', 'vc', '数据库', '还原', '数据', '直接', '后台', '还原', '最后', '更新', 'dedecms', '网站', '缓存', '可以', 'dedecms', '备份', '还原', '完毕']","[[-0.2364042  -0.13097681  0.20006218  0.17333819  0.2589587  -0.32240495
  -0.16311592  0.4578244  -0.01293923 -0.02572776 -0.06457914 -0.31365733
  -0.16115142  0.54479568  0.12657515 -0.10415444 -0.13710165 -0.00477425
  -0.08239873 -0.40918636  0.02851176  0.22767064 -0.00866891 -0.09663889
   0.10320465 -0.49845309 -0.26561362  0.08147473 -0.18687502 -0.06032395
   0.22053485  0.04528769 -0.01737159 -0.13133274 -0.11170872  0.31654187
  -0.12925054 -0.20658658  0.10363885 -0.69145754 -0.14116098 -0.52743249
  -0.02772007 -0.06180718 -0.15305824 -0.14131332 -0.25220582  0.43724257
  -0.13909427  0.35585039  0.17656344 -0.25665358 -0.090412   -0.21836467
   0.05687781  0.36487126  0.21804157 -0.05914687  0.0979571  -0.08381125
   0.05250398  0.2604831   0.0214615   0.07549203 -0.35372457 -0.008906
   0.02800978 -0.00486762 -0.21898286  0.40295587  0.12309707 -0.22054569
   0.37216386 -0.30355817  0.53120093  0.16658993  0.2038995  -0.13759069
  -0.24387193 -0.19799062 -0.07665543  0.0010112  -0.06854012  0.31654566
  -0.34845795  0.18422882 -0.2651758   0.38993754  0.43924841  0.12082349
   0.27690115  0.11425473  0.32721689  0.17849718  0.17155454  0.35612292
   0.08667381 -0.26697244  0.01009355 -0.08805742]]"
502,按大小拆分超大文件的方法（本文测试了一个62G的文件）,"遇到一个问题，从网络上下载了一个62G的文件（新浪微博的语料集，地址：http://itee.uq.edu.au/~dke/WISE2012.htm），之后要进行其他处理，很显然先拆分成小文件再处理比较好。我当时用的是windows系统，貌似没有这种拆分如此大的文件的工具，我本人试着用C++的内存映射方法（在内存里建一个内存映射文件，然后把超大文件的一部分映射到内存，然后分片读文件），将文件的一部分一部分读出来，读一部分换掉一部分然后写入小文件，从而达到拆分文件的目的，然而网上找了好多文章，内存映射这块还是没搞懂，尤其是参数很是复杂，只好放弃。最后才发现，windows下面难以解决的问题，linux早就存在了现成的方案来解决，那就是split命令。split具体的使用方法贴一下：linux split 命令功能说明：切割文件。语　　法：split [--help][--version][-<行数>][-b <字节>][-C <字节>][-l <行数>][要切割的文件][输出文件名]补充说明：split可将文件切成较小的文件，预设每1000行会切成一个小文件。参　　数：-<行数>或-l<行数> 　指定每多少行就要切成一个小文件。-b<字节> 　指定每多少字就要切成一个小文件。支持单位:m,k-C<字节> 　与-b参数类似，但切割时尽量维持每行的完整性。--help 　显示帮助。--version 　显示版本信息。[输出文件名] 　设置切割后文件的前置文件名，split会自动在前置文件名后再加上编号。使用例子：　　split -b 100m filename看过命令后，会发现其中的-C命令，会照顾到行，就是说截取的时候，不会将一行从中间截断，最终我只用了一行命令解决了问题：split -C 1024m 62G.txt output该命令将一个62G的文件，拆分成每个1G的小文件，并且不会将行拆开（新浪微博这个数据，每行一条，不能拆分） ","['大小', '拆分', '超大', '文件', '方法', '本文', '测试', '一个', '62g', '文件', '遇到', '一个', '问题', '网络', '下载', '一个', '62g', '文件', '新浪', '微博', '语料', '地址', 'http', 'itee', 'uq', 'edu', 'au', 'dke', 'wise2012', 'htm', '之后', '进行', '其他', '处理', '显然', '分成', '文件', '处理', '比较', '当时', 'windows', '系统', '貌似', '没有', '这种', '拆分', '如此', '文件', '工具', '本人', '试着', 'c++', '内存', '映射', '方法', '内存', '里建', '一个', '内存', '映射', '文件', '然后', '超大', '文件', '一部分', '映射', '内存', '然后', '分片', '文件', '文件', '一部分一部分', '读出来', '一部分', '换掉', '一部分', '然后', '写入', '文件', '从而', '达到', '拆分', '文件', '目的', '然而', '网上', '好多', '文章', '内存', '映射', '这块', '还是', '搞懂', '尤其', '参数', '复杂', '只好', '放弃', '最后', '发现', 'windows', '下面', '难以解决', '问题', 'linux', '早就', '存在', '现成', '方案', '解决', '就是', 'split', '命令', 'split', '具体', '使用', '方法', '一下', 'linux', 'split', '命令', '功能', '说明', '切割', '文件', 'split', '--', 'help', '--', 'version', '字节', '字节', '切割', '文件', '输出', '文件名', '补充', '说明', 'split', '文件', '切成', '文件', '预设', '1000', '行会', '切成', '一个', '文件', '指定', '多少', '就要', '切成', '一个', '文件', '字节', '指定', '多少', '就要', '切成', '一个', '文件', '支持', '单位', '字节', '参数', '类似', '切割', '尽量', '维持', '每行', '完整性', '--', 'help', '显示', '帮助', '--', 'version', '显示', '版本信息', '输出', '文件名', '设置', '切割', '文件', '前置', '文件名', 'split', '自动', '前置', '文件名', '加上', '编号', '使用', '例子', 'split', '100m', 'filename', '看过', '命令', '发现', '其中', '命令', '照顾', '到行', '就是说', '截取', '时候', '不会', '一行', '中间', '截断', '最终', '只用', '一行', '命令', '解决', '问题', 'split', '1024m', '62g', 'txt', 'output', '命令', '一个', '62g', '文件', '分成', '每个', '1g', '文件', '并且', '不会', '将行', '拆开', '新浪', '微博', '这个', '数据', '每行', '一条', '不能', '拆分']","[[-0.26673943 -0.15871915  0.21565709  0.17759774  0.28979388 -0.35185435
  -0.19327217  0.50875081  0.00325236 -0.02337154 -0.06630541 -0.33087845
  -0.20353268  0.61482293  0.13995125 -0.11965606 -0.16313734  0.01013602
  -0.10322035 -0.45416153  0.03593957  0.24252682  0.00610182 -0.0810863
   0.1339531  -0.58163124 -0.287887    0.09396377 -0.21649542 -0.06375211
   0.25107766  0.03385477 -0.01863079 -0.15955527 -0.11446972  0.34764997
  -0.13296124 -0.22649609  0.12383094 -0.77683182 -0.17750653 -0.59393904
  -0.02423827 -0.08317077 -0.17270415 -0.14575489 -0.26711819  0.50857193
  -0.15795706  0.39147081  0.22476557 -0.28080923 -0.10323722 -0.23603522
   0.07019527  0.40288395  0.26261249 -0.07184043  0.11134973 -0.11298197
   0.05328706  0.31318819  0.03027515  0.07867018 -0.39848106 -0.01241789
   0.03063333 -0.00838781 -0.2436453   0.44668565  0.15288113 -0.25483618
   0.41617197 -0.32967041  0.60343205  0.17376863  0.21932376 -0.14541163
  -0.26890006 -0.21954434 -0.09235639 -0.01219369 -0.06913552  0.3370267
  -0.39255496  0.1968849  -0.29650047  0.42617644  0.4806026   0.12538479
   0.32780906  0.13341664  0.35213909  0.19568856  0.19306627  0.40445072
   0.09831175 -0.29925574 -0.01765621 -0.1010125 ]]"
505,win7系统笔记本设置成虚拟WiFi热点（即“无线路由器”）,"如果家中只有一根网线，却有两台或更多台笔记本需要连接到网络，那么我们必须去买一个无线或有线路由器吗？不是的，其实借助软件，就可以将你的笔记本变身为无线路由器，即“WiFi热点”。以windows7为例，其实它本身就自带了WiFi和SoftAp（即虚拟无线AP）功能，仅需激活他们，你就可以让自己的笔记本变身为一个“WiFi热点”，让其他笔记本都连入你的笔记本上网。再打开你的笔记本的无线网卡“开关”后，以管理员身份进行快捷键win+R→输入""cmd”→回车的操作。然后在已打开的命令提示符中输入""netsh wlan set hostednetwork mode=allow ssid=binglanPC key=binglanWiFi""的命令并按回车，这样就初步启用和设定了虚拟WiFi网卡。PS:此命令有三个参数。mode：是否启用虚拟WiFi网卡，改为disallow则为禁用；ssid：无线网络名称，最好用英文（本文以binglanPC为例）；key：无线网络密码，8个以上字符（本文以binglanWiFi为例）。当你在“网络连接”中，看到多出一个名为“Microsoft Virtual WiFi Miniport Adapter”的无线连接2，表示开启成功。为了和其他网卡区分开，将其重命名为""虚拟WiFi”。接着，就是连接Internet了。在“网络连接”中，右键单击已经连接到Internet的网络连接，依次选择“属性”→ “共享"" → ”允许其他……连接(N)"" → “虚拟WiFi”即可。而在你点击“确定”之后，那个提供共享的网卡图标旁会出现“共享”的字样。PS：此时可能出现“无法启用共享访问 错误代码：0x80004005：未指定错误 ”，遇到此情况时，右键单击桌面上的“计算机”，依次选择“管理”→在左边的菜单栏中双击打开“服务和应用程序”菜单→选择“服务”→在右边找到并选择""Windows Firewall” → 点击“启用此服务”，然后再进行一次上边这段中的操作即可。接下来，在命令提示符中运行：netsh wlan start hostednetwork，从而开启无线网络。PS：当将""start”改为""stop""时，即可关闭该无线网络。最后，这个虚拟WiFi的红叉会消失，这表示“WiFi基站”已建好。然后，其他笔记本搜索无线网络""binglanPC”、输入密码""binglanWiFi""，就能共享上网了啦！","['win7', '系统', '笔记本', '设置', '虚拟', 'wifi', '热点', '无线', '路由器', '如果', '家中', '只有', '一根', '网线', '两台', '多台', '笔记本', '需要', '连接', '网络', '那么', '我们', '必须', '一个', '无线', '有线', '路由器', '不是', '其实', '借助', '软件', '可以', '笔记本', '身为', '无线', '路由器', 'wifi', '热点', 'windows7', '为例', '其实', '本身', '自带', 'wifi', 'softap', '虚拟', '无线', 'ap', '功能', '激活', '他们', '可以', '自己', '笔记本', '身为', '一个', 'wifi', '热点', '其他', '笔记本', '连入', '笔记本', '上网', '打开', '笔记本', '无线', '网卡', '开关', '管理员', '身份', '进行', '快捷键', 'win', '输入', 'cmd', '回车', '操作', '然后', '打开', '命令提示符', '输入', 'netsh', 'wlan', 'set', 'hostednetwork', 'mode', 'allow', 'ssid', 'binglanpc', 'key', 'binglanwifi', '命令', '回车', '这样', '初步', '启用', '设定', '虚拟', 'wifi', '网卡', 'ps', '命令', '三个', '参数', 'mode', '是否', '启用', '虚拟', 'wifi', '网卡', '改为', 'disallow', '禁用', 'ssid', '无线网络', '名称', '最好', '英文', '本文', 'binglanpc', '为例', 'key', '无线网络', '密码', '以上', '字符', '本文', 'binglanwifi', '为例', '网络连接', '看到', '多出', '一个', '名为', 'microsoft', 'virtual', 'wifi', 'miniport', 'adapter', '无线连接', '表示', '开启', '成功', '为了', '其他', '网卡', '区分', '重命名', '虚拟', 'wifi', '接着', '就是', '连接', 'internet', '网络连接', '右键', '单击', '已经', '连接', 'internet', '网络连接', '依次', '选择', '属性', '共享', '允许', '其他', '连接', '虚拟', 'wifi', '即可', '点击', '确定', '之后', '那个', '提供', '共享', '网卡', '图标', '旁会', '出现', '共享', '字样', 'ps', '此时', '可能', '出现', '无法', '启用', '共享', '访问', '错误代码', '0x80004005', '未指定', '错误', '遇到', '情况', '右键', '单击', '桌面上', '计算机', '依次', '选择', '管理', '左边', '菜单栏', '双击', '打开', '服务', '应用程序', '菜单', '选择', '服务', '右边', '找到', '选择', 'windows', 'firewall', '点击', '启用', '服务', '然后', '进行', '一次', '上边', '这段', '操作', '即可', '接下来', '命令提示符', '运行', 'netsh', 'wlan', 'start', 'hostednetwork', '从而', '开启', '无线网络', 'ps', 'start', '改为', 'stop', '即可', '关闭', '无线网络', '最后', '这个', '虚拟', 'wifi', '红叉会', '消失', '表示', 'wifi', '基站', '已建好', '然后', '其他', '笔记本', '搜索', '无线网络', 'binglanpc', '输入', '密码', 'binglanwifi', '共享', '上网']","[[-0.19484705 -0.10364899  0.17233484  0.12848325  0.2232484  -0.26697235
  -0.13585333  0.37264603 -0.00831089 -0.02170904 -0.0452289  -0.25975823
  -0.13723611  0.4540712   0.11462684 -0.08270662 -0.11597403 -0.00641895
  -0.07536659 -0.35390982  0.01894966  0.18940603 -0.00289151 -0.07791802
   0.0865722  -0.41689798 -0.2193942   0.06228914 -0.16168101 -0.04961038
   0.18279503  0.02418348 -0.01345635 -0.10815424 -0.08796679  0.25653328
  -0.10712544 -0.17168954  0.08618049 -0.58420309 -0.12953092 -0.44725402
  -0.02994648 -0.05385754 -0.12817327 -0.1179375  -0.20499019  0.35449794
  -0.13338067  0.30571049  0.15252506 -0.20652583 -0.08685347 -0.17551077
   0.0464927   0.29969267  0.18205863 -0.04890509  0.07706196 -0.07364658
   0.03789976  0.22063043  0.01736896  0.06498817 -0.29802508 -0.00728058
   0.03126303 -0.01364115 -0.18860867  0.33644475  0.10605224 -0.18286156
   0.30816073 -0.25110004  0.43972382  0.13580182  0.15924503 -0.10918101
  -0.21012214 -0.15876485 -0.05546018  0.00194581 -0.053019    0.25892485
  -0.28644663  0.15784673 -0.22139665  0.31987584  0.35853024  0.09992595
   0.23344469  0.09432622  0.27552779  0.1448499   0.14506071  0.2902672
   0.0783393  -0.23061583 -0.0126272  -0.07109   ]]"
512,Adobe Dreamweaver CS6官方简体中文版安装+破解过程,"DW用来HTML、CSS开发无疑是超级快速的，现在的PHP等还有代码提示功能，真的是越来越好用。本文阐述Dreamweaver CS6的安装过程。1、下载官方原版Adobe Dreamweaver CS6提供一个地址：点击下载2、下载Adobe Dreamweaver CS6的注册机（破解补丁）提供一个地址：打开下载页面疯狂的蚂蚁www.crazyant.net 程序员求职网www.51projob.com3、安装官方原版Adobe Dreamweaver CS6步骤：断网运行下载好的exe文件，解压安装包运行setup.exe（或者已经自动运行了），下一步，走到输入序列号这一步。在输入序列号界面，随便输入一串数字（比如全是1）,点下一步。安装程序开始检测序列号，发现无法联网，弹出窗口，选择“以后验证序列号”，然后就可以继续安装安装成功后，先运行一下软件，然后把破解补丁的那个dll文件覆盖程序根目录下的同名文件重新启动软件，不再提示输入序列号，安装+破解结束！试用了一下，DW6依然犀利，利器在手天下我有。（来自www.crazyant.net和www.51projob.com）","['adobe', 'dreamweaver', 'cs6', '官方', '简体中文版', '安装', '破解', '过程', 'dw', '用来', 'html', 'css', '开发', '无疑', '超级', '快速', '现在', 'php', '还有', '代码', '提示', '功能', '真的', '越来越', '好用', '本文', '阐述', 'dreamweaver', 'cs6', '安装', '过程', '下载', '官方', '原版', 'adobe', 'dreamweaver', 'cs6', '提供', '一个', '地址', '点击', '下载', '下载', 'adobe', 'dreamweaver', 'cs6', '注册机', '破解补丁', '提供', '一个', '地址', '打开', '下载', '页面', '疯狂', '蚂蚁', 'www', 'crazyant', 'net', '程序员', '求职网', 'www.51', 'projob', 'com3', '安装', '官方', '原版', 'adobe', 'dreamweaver', 'cs6', '步骤', '断网', '运行', '下载', 'exe', '文件', '解压', '安装包', '运行', 'setup', 'exe', '或者', '已经', '自动', '运行', '一步', '输入', '序列号', '一步', '输入', '序列号', '界面', '随便', '输入', '一串', '数字', '比如', '全是', '点下', '一步', '安装程序', '开始', '检测', '序列号', '发现', '无法', '联网', '窗口', '选择', '以后', '验证', '序列号', '然后', '可以', '继续', '安装', '安装', '成功', '运行', '一下', '软件', '然后', '破解补丁', '那个', 'dll', '文件', '覆盖', '程序', '根目录', '同名', '文件', '重新启动', '软件', '不再', '提示', '输入', '序列号', '安装', '破解', '结束', '试用', '一下', 'dw6', '依然', '犀利', '利器', '在手', '天下', '来自', 'www', 'crazyant', 'net', 'www.51', 'projob', 'com']","[[-0.24144936 -0.12859725  0.22208865  0.26008737  0.17407593 -0.36123631
  -0.12352433  0.4675914  -0.02438867 -0.04439977 -0.09089758 -0.3592017
  -0.12534367  0.52647437  0.08545816 -0.13667154 -0.12741089  0.01487223
  -0.0121977  -0.34604562  0.02586607  0.25463368 -0.06368694 -0.13711301
   0.04142785 -0.44434738 -0.29707339  0.08347561 -0.16971855 -0.0658471
   0.19525692  0.12252375  0.00519556 -0.11016823 -0.16270485  0.34669419
  -0.12737797 -0.20967986  0.07580526 -0.62430861 -0.08353484 -0.49015861
  -0.01369721 -0.06614021 -0.12935063 -0.19837998 -0.32831994  0.43249657
  -0.01359091  0.31483941  0.09646038 -0.2773647   0.0120524  -0.25338219
   0.01293549  0.39748933  0.19270948 -0.07542522  0.12308032 -0.08646133
   0.1125741   0.2246988   0.01303888  0.06935685 -0.32373921  0.02727101
  -0.03211253  0.04913791 -0.17575247  0.39866317  0.07139327 -0.1854326
   0.39961618 -0.30417491  0.53701753  0.24154177  0.2809835  -0.19990756
  -0.17358191 -0.22694439 -0.12120461  0.01201041 -0.09435849  0.36283795
  -0.37048705  0.15419624 -0.26613026  0.46321754  0.49171872  0.15844856
   0.20511093  0.12329757  0.28912102  0.14958833  0.18008912  0.43574905
   0.06369595 -0.21012371  0.15561295 -0.08351274]]"
515,看完这20部电影相当于学了经济学（投资理财必看电影）,听说看了这20部电影相当于读完清华大学经济管理学院在复杂的商业社会，你想创业，不懂经济、不懂商业、不懂人情世故、不懂法律边沿，你只有勇气、只有梦想、只有天真，那么也就只有一场空。这20部电影都是商学院学生在学习商科时被要求必须看的影片，其中包括哈佛商学院一直首推的《华尔街》，还有沃顿商学院排第一位的《颠倒乾坤》，斯坦福要求商科学生必看的《锅炉房》。看完之后，你会对商业运行的本质和规则有更深入的了解，对你的职场生涯亦会有不小的帮助。1.《华尔街》（Wall Street）（1987）内部交易是违法的，不违法怎么能够发财，关键看如何违法的同时可以掩盖。不看这个影片怎么能够随便进入股市？2.《拜金一族》（Glengarry Glenn Ross）（1992）当房地产进入萧条的时候，美国房屋中介的销售顾问都在忙什么？看他们如何利用数据库，如何门到门地将房地产销售出去，如何在萧条期包装房地产，如何瞄准新婚家庭的住房需求。3.《颠倒乾坤》（Trading Places）（1983）经济是交易行为的代名词。只要有交易，就需要学会评估交易是否合算，就需要透视交易对方内心的秘密。交易中学到的核心法则，在世界上任何国家只要有交易的地方都适用。4.《锅炉房》（Boiler Room）（2000）难以想象的是违法交易几乎与证券市场形影不离。一个19岁的年轻人如此近距离地目睹财富的操纵过程，让谁富有，那不过是一个随机的选择。5.《硅谷传奇》（Pirates of Silicon Valley）（1999）比尔66;盖茨与斯蒂夫66;乔布斯几乎在所有方面的看法、观点都是对立的，他们只有在一个事情上是共同的，那就是尽一切可能封杀这个影片。硅谷的高科技公司是如何孵化的？不到25岁的年轻人利用了什么样的市场规则，又是如何让市场规则、让客户、让竞争对手形成一个共同体的？层出不穷的阴谋笼罩在硅谷的上空。6.《可口可乐小子》（The Coca—Cola Kid）（1985）这是一个男孩用可乐创造一项事业的故事。作为一个碳酸饮料的营销从业员，他不得不回答一个问题，在边远的澳大利亚小镇，为什么没有一瓶可口可乐？营销是生意不可或缺的部分，尤其是在创业中不可缺少。7.《发达之路》（The Secret of My Success）（1987）主要讲述了美国堪萨斯的男孩在纽约飘荡的历程。如果纽约可以代表近100年人类商业活动的中心，那么，任何21世纪的年轻人，都不得不面对大城市的浮华、喧嚣和躁动。8.《优势合作》（In Good Company）（2004）大公司都是通过收购长大的，你会收购吗？知道收购后销售主管是怎么想的吗？知道销售人员背后议论什么吗？联想收购IBM失败的核心因素就是根本没有看懂这个影片。当公司与公司之间发生买卖的时候，作为公司一员的你，位置在哪里？9.《巴塞罗那》（Barcelona）（1994）美国人的销售方式真的可以通行全球吗？一个美国销售员在西班牙的销售经历让我们学到销售的价值观，销售对客户文化的处理方式，销售对客户关系的把握。10.《甜心先生》（Jerry Maguire）（1996）做生意要拿出诚意来。show me the money，让我看到钱才是真的，任何生意都如此。生意中没有牢靠的友谊，这是你在创业前必须要牢记的教训。11.《上班一条虫》（Office Space）（1999）办公室政治课实战教材。在市场经济环境中当公司遇到危机时，裁员的本质动机，员工对公司的作用的核心意义都是必须要学习的商业社会的基本规则。12.《解构企业》（The Corporation）（2003）18世纪美国法律正式通过了一个企业可以是一个个人的组织行为后，仅仅两个多世纪，美国的这个公司法居然影响了全球，你可以在中国的公司法中也看到类似的描述。这个冠之以法人的称号横行全球，世界每一个角度都受到影响。个人的贪婪、个人的欲望没有止境地膨胀，本片从最深刻的本质揭示了资本主义商业规则，并无情地揭示了其存在的弊病。13.《惊爆内幕》（The Insider）（1999）商业社会的本质是货币自由交换，只要你情我愿，似乎交换什么都可以。交易中的商业价值，交易中的定价原理，商业信誉在交易中的作用都是这个影片中活生生地展示出来的，商科学生必须要理解金钱统治人类社会的必然结果，以及这种结果具备的不可逆的特性。14.《影子大亨》（The Hudsucker Proxy）（1994）一部票房不怎么样、但懂商业的人却说好的影片。一个公司的老板自杀了，但其公司还蒸蒸日上，董事会的实权人物开始行动，行动的目的当然是私欲横流。公司治理、企业董事会操作实战等都是这部影片中不可多得的实战教案。15.《反垄断》（Antitrust）（2001）一个斯坦福的电脑天才毕业后被科技大亨录用后负责发展全球通信系统，之后他发现原来自己是被用作侦察商业对手以达到垄断市场的目的。此片向微软的垄断幽了一默，讲述了一个有鲜明时代和全球意义的反对金钱和高科技垄断的故事。16.《魔鬼营业员》（Rogue Trader）（1998）1995年，巴林银行，这家全球最古老的银行之一破产了，曾经是英国贵族最为信赖的金融机构，拥有200多年优异的经营历史，却没能逃过破产的结局。令人震惊的是，这样一个惨痛的结局，却出自于一个普通的证券交易员尼克66;李森之手。这部出自真实案例的电影是大家学习银行业务，尤其是投资业务最好的教案。17.《抢钱世界》（Other People&#39;s Money）（1991）这也是一部基于美国真实故事改编的影片，从中可以了解商业法、企业兼并、商业诉讼规范、商业流程、兼并重组流程等。美国商业自由市场中到处充满了利己行为与利他行为的冲突和矛盾，也恰好是从这些冲突和矛盾中可以学到不同的动机，以及各种让人眼花缭乱的手段。18.《败露》（Disclosure）（1994）一位踌躇满志的公司高管在一天中，不仅失去了原应属于自己的晋升机会，而且迎来了自己10年前的同居女友担任顶头上司。已有妻儿的他拒绝了女上司与他重温旧梦的要求，于是，女上司耍出种种手腕在公司中排挤他，甚至诬称他对自己性骚扰。忍无可忍的他诉诸法律，在一位精明女律师的帮助下，与公司及那位霸道的女上司展开了较量……片中体现的办公室政治、公司群体人际关系行为准则等都是难得的职场教材。19.《男人百分百》（What Women Want）（2000）一个小小的意外，让主角具备了能够阅读女性头脑的能力，这是一部用巧妙的方式揭示女性所思所想的影片。商业心理学、女性行为学、广告学等都是这部影片中可学习的亮点。20.《门口的野蛮人》（Barbarians At The Gate）（1993）1988年，KKR公司收购雷诺-纳贝斯克公司是华尔街震惊全球的重大金融事件。专业人士事后分析，这桩交易是在合法基础上的骗局。因为KKR公司用的杠杆收购手法不仅不需要现金，也不需要看见现金，甚至也没有人知道钱从哪里来，整个过程根本就是个圈套。而KKR那些高层，以及交易过程中的那些华尔街人士，由于表现出了前所未有的贪婪和狡猾的技巧，也被冠以“野蛮人”的称号,"['20', '电影', '相当于', '学了', '经济学', '投资', '理财', '必看', '电影', '听说', '20', '电影', '相当于', '读完', '清华大学经济管理学院', '复杂', '商业', '社会', '创业', '经济', '商业', '人情世故', '法律', '边沿', '只有', '勇气', '只有', '梦想', '只有', '天真', '那么', '只有', '一场空', '20', '电影', '商学院', '学生', '学习', '商科', '要求', '必须', '影片', '其中', '包括', '哈佛商学院', '一直', '首推', '华尔街', '还有', '沃顿', '商学院', '第一位', '颠倒乾坤', '斯坦福', '要求', '商科', '学生', '必看', '锅炉房', '之后', '商业', '运行', '本质', '规则', '深入', '了解', '职场', '生涯', '不小', '帮助', '华尔街', 'wall', 'street', '1987', '内部', '交易', '违法', '违法', '怎么', '能够', '发财', '关键', '如何', '违法', '同时', '可以', '掩盖', '不看', '这个', '影片', '怎么', '能够', '随便', '进入', '股市', '拜金', 'glengarry', 'glenn', 'ross', '1992', '房地产', '进入', '萧条', '时候', '美国', '房屋中介', '销售', '顾问', '什么', '他们', '如何', '利用', '数据库', '如何', '门到', '房地产', '销售', '出去', '如何', '萧条', '包装', '房地产', '如何', '瞄准', '新婚', '家庭', '住房', '需求', '颠倒乾坤', 'trading', 'places', '1983', '经济', '交易', '行为', '代名词', '只要', '交易', '需要', '学会', '评估', '交易', '是否', '合算', '需要', '透视', '交易', '对方', '内心', '秘密', '交易', '中学', '核心', '法则', '在世界上', '任何', '国家', '只要', '交易', '地方', '适用', '锅炉房', 'boiler', 'room', '2000', '难以想象', '违法', '交易', '几乎', '证券市场', '形影不离', '一个', '19', '年轻人', '如此', '近距离', '目睹', '财富', '操纵', '过程', '富有', '不过', '一个', '随机', '选择', '硅谷', '传奇', 'pirates', 'of', 'silicon', 'valley', '1999', '比尔', '66', '盖茨', '斯蒂夫', '66', '乔布斯', '几乎', '所有', '方面', '看法', '观点', '对立', '他们', '只有', '一个', '事情', '共同', '就是', '一切', '可能', '封杀', '这个', '影片', '硅谷', '高科技', '公司', '如何', '孵化', '不到', '25', '年轻人', '利用', '什么样', '市场', '规则', '如何', '市场', '规则', '客户', '竞争对手', '形成', '一个', '共同体', '层出不穷', '阴谋', '笼罩', '硅谷', '上空', '可口可乐', '小子', 'the', 'coca', 'cola', 'kid', '1985', '这是', '一个男孩', '可乐', '创造', '一项', '事业', '故事', '作为', '一个', '碳酸', '饮料', '营销', '从业员', '不得不', '回答', '一个', '问题', '边远', '澳大利亚', '小镇', '为什么', '没有', '一瓶', '可口可乐', '营销', '生意', '不可或缺', '部分', '尤其', '创业', '不可', '缺少', '发达', 'the', 'secret', 'of', 'my', 'success', '1987', '主要', '讲述', '美国', '堪萨斯', '男孩', '纽约', '飘荡', '历程', '如果', '纽约', '可以', '代表', '100', '人类', '商业活动', '中心', '那么', '任何', '21', '世纪', '年轻人', '不得不', '面对', '大城市', '浮华', '喧嚣', '躁动', '优势', '合作', 'in', 'good', 'company', '2004', '公司', '通过', '收购', '长大', '收购', '知道', '收购', '销售主管', '怎么', '知道', '销售', '人员', '背后议论', '什么', '联想', '收购', 'ibm', '失败', '核心', '因素', '就是', '根本', '没有', '这个', '影片', '公司', '公司', '之间', '发生', '买卖', '时候', '作为', '公司', '一员', '位置', '哪里', '巴塞罗那', 'barcelona', '1994', '美国', '销售', '方式', '真的', '可以', '通行', '全球', '一个', '美国', '销售员', '西班牙', '销售', '经历', '我们', '学到', '销售', '价值观', '销售', '客户', '文化', '处理', '方式', '销售', '客户关系', '把握', '10', '甜心', '先生', 'jerry', 'maguire', '1996', '做生意', '拿出', '诚意', 'show', 'me', 'the', 'money', '看到', '真的', '任何', '生意', '如此', '生意', '没有', '牢靠', '友谊', '创业', '必须', '牢记', '教训', '11', '上班', '一条', 'office', 'space', '1999', '办公室', '政治课', '实战', '教材', '市场经济', '环境', '中当', '公司', '遇到', '危机', '裁员', '本质', '动机', '员工', '公司', '作用', '核心', '意义', '必须', '学习', '商业', '社会', '基本', '规则', '12', '解构', '企业', 'the', 'corporation', '2003', '18', '世纪', '美国', '法律', '正式', '通过', '一个', '企业', '可以', '一个', '个人', '组织', '行为', '仅仅', '两个', '世纪', '美国', '这个', '公司法', '居然', '影响', '全球', '可以', '中国', '公司法', '看到', '类似', '描述', '这个', '冠之以', '法人', '称号', '横行', '全球', '世界', '一个', '角度', '受到', '影响', '个人', '贪婪', '个人', '欲望', '没有止境', '膨胀', '本片', '深刻', '本质', '揭示', '资本主义', '商业', '规则', '无情地', '揭示', '存在', '弊病', '13', '惊爆', '内幕', 'the', 'insider', '1999', '商业', '社会', '本质', '货币', '自由', '交换', '只要', '你情', '似乎', '交换', '什么', '可以', '交易', '商业价值', '交易', '定价', '原理', '商业', '信誉', '交易', '作用', '这个', '影片', '活生生', '展示', '出来', '商科', '学生', '必须', '理解', '金钱', '统治', '人类', '社会', '必然结果', '以及', '这种', '结果', '具备', '可逆', '特性', '14', '影子', '大亨', 'the', 'hudsucker', 'proxy', '1994', '一部', '票房', '不怎么样', '商业', '却说', '影片', '一个', '公司', '老板', '自杀', '公司', '蒸蒸日上', '董事会', '实权', '人物', '开始', '行动', '行动', '目的', '当然', '私欲', '横流', '公司', '治理', '企业', '董事会', '操作', '实战', '这部', '影片', '不可多得', '实战', '教案', '15', '反垄断', 'antitrust', '2001', '一个', '斯坦福', '电脑', '天才', '毕业', '科技', '大亨', '录用', '负责', '发展', '全球', '通信', '系统', '之后', '发现', '原来', '自己', '用作', '侦察', '商业', '对手', '达到', '垄断市场', '目的', '此片', '微软', '垄断', '一默', '讲述', '一个', '鲜明', '时代', '全球', '意义', '反对', '金钱', '高科技', '垄断', '故事', '16', '魔鬼', '营业员', 'rogue', 'trader', '1998', '1995', '巴林', '银行', '这家', '全球', '古老', '银行', '之一', '破产', '曾经', '英国', '贵族', '最为', '信赖', '金融机构', '拥有', '200', '多年', '优异', '经营', '历史', '却没能', '破产', '结局', '令人震惊', '这样', '一个', '惨痛', '结局', '出自于', '一个', '普通', '证券', '交易员', '尼克', '66', '李森之手', '这部', '出自', '真实', '案例', '电影', '大家', '学习', '银行业务', '尤其', '投资', '业务', '最好', '教案', '17', '抢钱', '世界', 'other', 'people', '&#', '39', 'money', '1991', '一部', '基于', '美国', '真实', '故事', '改编', '影片', '从中', '可以', '了解', '商业法', '企业', '兼并', '商业', '诉讼', '规范', '商业', '流程', '兼并', '重组', '流程', '美国', '商业', '自由市场', '到处', '充满', '利己', '行为', '利他行为', '冲突', '矛盾', '恰好', '是从', '这些', '冲突', '矛盾', '可以', '学到', '不同', '动机', '以及', '各种', '眼花缭乱', '手段', '18', '败露', 'disclosure', '1994', '一位', '踌躇满志', '公司', '高管', '一天', '不仅', '失去', '原应', '属于', '自己', '晋升', '机会', '而且', '迎来', '自己', '10', '年前', '同居', '女友', '担任', '顶头上司', '已有', '妻儿', '拒绝', '女上司', '重温旧梦', '要求', '于是', '女上司', '耍出', '种种', '手腕', '公司', '排挤', '甚至', '诬称', '自己', '性骚扰', '忍无可忍', '诉诸', '法律', '一位', '精明', '律师', '帮助', '公司', '那位', '霸道', '女上司', '展开', '较量', '片中', '体现', '办公室', '政治', '公司', '群体', '人际关系', '行为准则', '难得', '职场', '教材', '19', '男人', '百分百', 'what', 'women', 'want', '2000', '一个', '小小的', '意外', '主角', '具备', '能够', '阅读', '女性', '头脑', '能力', '这是', '一部', '巧妙', '方式', '揭示', '女性', '所思', '所想', '影片', '商业', '心理学', '女性', '行为学', '广告学', '这部', '影片', '学习', '亮点', '20', '门口', '野蛮', 'barbarians', 'at', 'the', 'gate', '1993', '1988', 'kkr', '公司', '收购', '雷诺', '贝斯', '公司', '华尔街', '震惊', '全球', '重大', '金融', '事件', '专业人士', '事后', '分析', '这桩', '交易', '合法', '基础', '骗局', '因为', 'kkr', '公司', '杠杆', '收购', '手法', '不仅', '需要', '现金', '需要', '看见', '现金', '甚至', '没有', '知道', '哪里', '整个', '过程', '根本就是', '圈套', 'kkr', '那些', '高层', '以及', '交易过程', '那些', '华尔街', '人士', '由于', '表现', '前所未有', '贪婪', '狡猾', '技巧', '冠以', '野蛮', '称号']","[[-0.21260386 -0.10355702  0.19345481  0.12545756  0.2412005  -0.29356434
  -0.13639762  0.39349374 -0.01709186 -0.0336129  -0.044043   -0.28262746
  -0.14145012  0.48626669  0.12653463 -0.08723873 -0.11842514 -0.01342114
  -0.07961687 -0.38727001  0.0100967   0.20403808 -0.00387558 -0.09158814
   0.0904569  -0.44491049 -0.23305893  0.05783182 -0.17344273 -0.05226613
   0.19733925  0.01383395 -0.00696728 -0.11181186 -0.09141232  0.26862602
  -0.11796354 -0.19301773  0.08792943 -0.62762974 -0.14085371 -0.48415382
  -0.04225762 -0.05992702 -0.13291262 -0.13129979 -0.21613439  0.36929388
  -0.15752261  0.34106031  0.15996967 -0.21492225 -0.10248816 -0.18505723
   0.04104233  0.31429105  0.18825749 -0.05814329  0.07710425 -0.08195893
   0.03564131  0.23815258  0.01466171  0.06941583 -0.32140743 -0.0035091
   0.04355265 -0.02572946 -0.207115    0.36477804  0.10346647 -0.19686516
   0.32490317 -0.27213894  0.47426936  0.15216395  0.16279086 -0.12045066
  -0.22451542 -0.16039338 -0.05171849  0.00739552 -0.0598986   0.28574792
  -0.30036416  0.16929273 -0.234917    0.3462807   0.38082745  0.11382329
   0.24249401  0.10129299  0.29753128  0.14967822  0.15447452  0.30095207
   0.09175189 -0.2571792  -0.01781173 -0.07112866]]"
540,C++拆分字符串代码（实现split）,"以下C++实现一个将字符串拆分以后，存放到一个string当中的代码，使用的时候传入三个参数即可，非常好用：#ifndef FUNCTIONS_H#define FUNCTIONS_H#include <iostream>#include <string>#include <algorithm>     #include <functional>using namespace std;#include <vector>inline string&  lTrim(string   &ss)     {         string::iterator   p=find_if(ss.begin(),ss.end(),not1(ptr_fun(isspace)));         ss.erase(ss.begin(),p);         return  ss;     }       inline  string&  rTrim(string   &ss)     {         string::reverse_iterator  p=find_if(ss.rbegin(),ss.rend(),not1(ptr_fun(isspace)));         ss.erase(p.base(),ss.end());         return   ss;     }       inline   string&   trim(string   &st)     {         lTrim(rTrim(st));         return   st;     } //将一个以par分割的整个字符串，分割以后存到vec里面void splitStr(vector<string> &vec, string str, string par){    string::size_type pos=0,previousPos=0;//查找到的位置和前一个位置    //处理并没有分割符的情况    if(str.find(par,0)==string::npos){        if(!trim(str).empty())    vec.push_back(trim(str));        return;    }    string strtmp;    for( pos=str.find(par,0); pos!=string::npos; previousPos=pos+par.size(), pos=str.find(par,pos+par.size()) ){        strtmp = str.substr(previousPos,pos-previousPos);        if(!trim(strtmp).empty()) vec.push_back(strtmp);    }    strtmp = str.substr(previousPos,pos-previousPos);    if(!trim(strtmp).empty()) vec.push_back(strtmp);}#endif 本函数可以用以下示例调用：void main()        vector<string> vec;        splitStr(vec, ""C$D$E$F$G"",""$"");        cout<<""分割前的字符串：""<<str<<endl;        cout<<""分割后的子串：""<<endl;        for(int i=0; i!=vec.size(); ++i){            cout<<""#""<<vec[i]<<""#""<<endl;        }        cout<<endl;    } ","['c++', '拆分', '字符串', '代码', '实现', 'split', '以下', 'c++', '实现', '一个', '字符串', '拆分', '以后', '存放', '一个', 'string', '当中', '代码', '使用', '时候', '传入', '三个', '参数', '即可', '非常', '好用', 'ifndef', 'functions', 'define', 'functions', 'include', 'iostream', 'include', 'string', 'include', 'algorithm', 'include', 'functional', 'using', 'namespace', 'std', 'include', 'vector', 'inline', 'string', 'ltrim', 'string', 'ss', 'string', 'iterator', 'find', 'if', 'ss', 'begin', 'ss', 'end', 'not1', 'ptr', 'fun', 'isspace', 'ss', 'erase', 'ss', 'begin', 'return', 'ss', 'inline', 'string', 'rtrim', 'string', 'ss', 'string', 'reverse', 'iterator', 'find', 'if', 'ss', 'rbegin', 'ss', 'rend', 'not1', 'ptr', 'fun', 'isspace', 'ss', 'erase', 'base', 'ss', 'end', 'return', 'ss', 'inline', 'string', 'trim', 'string', 'st', 'ltrim', 'rtrim', 'st', 'return', 'st', '一个', 'par', '分割', '整个', '字符串', '分割', '以后', '存到', 'vec', '里面', 'void', 'splitstr', 'vector', 'string', 'vec', 'string', 'str', 'string', 'par', 'string', 'size', 'type', 'pos', 'previouspos', '查找', '位置', '一个', '位置', '处理', '没有', '分割', '情况', 'if', 'str', 'find', 'par', 'string', 'npos', 'if', 'trim', 'str', 'empty', 'vec', 'push', 'back', 'trim', 'str', 'return', 'string', 'strtmp', 'for', 'pos', 'str', 'find', 'par', 'pos', 'string', 'npos', 'previouspos', 'pos', 'par', 'size', 'pos', 'str', 'find', 'par', 'pos', 'par', 'size', 'strtmp', 'str', 'substr', 'previouspos', 'pos', 'previouspos', 'if', 'trim', 'strtmp', 'empty', 'vec', 'push', 'back', 'strtmp', 'strtmp', 'str', 'substr', 'previouspos', 'pos', 'previouspos', 'if', 'trim', 'strtmp', 'empty', 'vec', 'push', 'back', 'strtmp', 'endif', '函数', '可以', '以下', '示例', '调用', 'void', 'main', 'vector', 'string', 'vec', 'splitstr', 'vec', 'cout', '分割', '字符串', 'str', 'endl', 'cout', '分割', '子串', 'endl', 'for', 'int', 'vec', 'size', '++', 'cout', 'vec', 'endl', 'cout', 'endl']","[[-0.17196164 -0.07334609  0.25562936  0.03504862  0.27594779 -0.32071594
  -0.09276468  0.38796658 -0.07442578 -0.15972098  0.00577874 -0.34555099
  -0.11057972  0.44510533  0.17321343 -0.07851436 -0.10391083 -0.01182056
  -0.07419934 -0.55234217 -0.08498798  0.20640075 -0.05958696 -0.21395274
   0.04174177 -0.38161495 -0.26213543  0.01434399 -0.23700703 -0.07350737
   0.08728973 -0.05775937  0.01516013 -0.10772612 -0.15977499  0.25781749
  -0.20449603 -0.27322927  0.05861117 -0.65212714 -0.14580942 -0.56438979
  -0.10568252  0.03416402 -0.11161156 -0.24909244 -0.14359693  0.24031619
  -0.22373478  0.48836994  0.13200909 -0.21946738 -0.16146283 -0.0991205
  -0.03730567  0.32823734  0.08610215 -0.10688279  0.09823446 -0.15849641
   0.07930067  0.1882003   0.01876864  0.08731335 -0.33756732  0.06317644
   0.07198629 -0.06968896 -0.31667964  0.37219348  0.11367998 -0.12412051
   0.31651605 -0.26446776  0.46342434  0.28962797  0.04518636 -0.13727908
  -0.34240625 -0.03429195  0.07328754  0.07046205 -0.11809931  0.32816845
  -0.26119365  0.21267788 -0.25770657  0.3894578   0.42917699  0.15630736
   0.19134267  0.09251551  0.34324112  0.16720466  0.16842973  0.24255003
   0.13310785 -0.32890142 -0.10691179 -0.1482339 ]]"
545,[C++]数据结构之堆-上滤下滤以及用于排序,"#include<iostream>using namespace std;/** 堆，就是一棵完全二叉树，物理存储方式是数组，一般情况下，都牺牲第一个元素arr[0]，剩下的就满足了从1开始计数* 若堆从1开始计数，那么对于一个节点i，2*i是它的左孩子，2*i+1是它的右孩子* 对的最基本操作，包括上滤和下滤* 上滤是指：h(1,n-1)是堆，h(1,n)不是堆，因此通过将arr[n]元素上滤，来达到调整堆的目的* 下滤是指：h(2,n)是堆，h(1,n)不是堆，因此通过将arr[1]元素下滤，来达到调整堆的目的*/#define HEAP_SIZE 10 //这里，我要要建一个堆，堆里面要放10个元素#define ARR_SIZE (HEAP_SIZE+1) //之前说过，堆默认的实现是牺牲掉第0个元素#define HeapElemType int //定义堆的元素类型//HeapElemType  HeapArray[ARR_SIZE];//堆的存储空间/** 大顶堆，上面的，是最大的* 堆的基本操作：上滤* h(1,n-1)是堆，h(1,n)非堆，也就是说，只要调整第n个元素，就是一个新堆了* 注意：n是当前可用元素的最大下标，它是不能超过ARR_SIZE的*/void shiftUp(HeapElemType  HeapArray[], int n){    HeapElemType tmp = HeapArray[n];    while(n/2>=1 && tmp>HeapArray[n/2]){        HeapArray[n] = HeapArray[n/2];        n = n/2;    }    HeapArray[n] = tmp;}/** 大顶堆，上面的，是最大的* 堆的基本操作：下滤* h(2,n)是堆，h(1,n)不是堆，也就是所，只要调整第1个元素，就是一个新的大顶堆* 注意：n是当前堆中元素的最大下表，是不能超过ARR_SIZE的*/void shiftDown(HeapElemType  HeapArray[], int first, int n){    HeapElemType tmp = HeapArray[first];    int father=first,child;    while( (child=2*father) <= n){        //获取孩子中较大的孩子下标        if(child+1<=n && HeapArray[child]<HeapArray[child+1]) child++;        //比较源节点和较大孩子，看是否需要继续调整        if(tmp>HeapArray[child]) break;        //否则的话，孩子往上走        HeapArray[father] = HeapArray[child];        father = child;    }    HeapArray[father] = tmp;}void printHeapArr(const HeapElemType  HeapArray[], const int n){    for(int i=1; i<=n; ++i){        cout<<HeapArray[i]<<"" "";    }    cout<<endl;}void swap(HeapElemType  HeapArray[],int i,int j){    HeapElemType tmp =     HeapArray[i];    HeapArray[i] = HeapArray[j];    HeapArray[j] = tmp;}/** 堆排序：用堆的属性，即大顶堆最顶部的就是最大的节点* 因此我们可以每次将根节点和末尾节点交换，然后将除了末尾节点的其他节点重新调整一个堆，然后循环* 在做上一步之前，需要将杂乱的节点调整成一个堆*/void heapsort(HeapElemType  HeapArray[],int n){    //第一步，先将杂乱的数组调整成一个大顶堆，需要n/2次调整就可以    int tmp=0;    for(tmp=n/2; tmp>=1; tmp--){        shiftDown(HeapArray,tmp,n);    }    //第二步，交换第一个节点（最大值）和末尾节点，然后调整除了末尾节点的其他节点为一个新大顶堆    for(tmp=n;tmp>1;tmp--){        swap(HeapArray,1,tmp);        shiftDown(HeapArray,1,tmp-1);    }}void main(){    cout<<""上滤""<<endl;    HeapElemType  HeapArray[ARR_SIZE]={0,5,4,2,3,6};    int n=5;    printHeapArr(HeapArray,n);    shiftUp(HeapArray,n);    printHeapArr(HeapArray,n);    cout<<""下滤""<<endl;    HeapElemType  HeapArraySec[ARR_SIZE]={0,1,5,2,3,4};    n=5;    printHeapArr(HeapArraySec,n);    shiftDown(HeapArraySec,1,n);    printHeapArr(HeapArraySec,n);    cout<<""排序""<<endl;    HeapElemType  HeapArraySort[ARR_SIZE]={0,1,4,2,3,5,6};    n=6;    printHeapArr(HeapArraySort,n);    heapsort(HeapArraySort,n);    printHeapArr(HeapArraySort,n);    system(""pause"");} ","['c++', '数据结构', '之堆', '上滤', '下滤', '以及', '用于', '排序', 'include', 'iostream', 'using', 'namespace', 'std', '就是', '一棵', '完全', '二叉树', '物理', '存储', '方式', '数组', '一般', '情况', '牺牲', '第一个', '元素', 'arr', '剩下', '满足', '开始', '计数', '若堆', '开始', '计数', '那么', '对于', '一个', '节点', '孩子', '孩子', '基本操作', '包括', '上滤', '下滤', '上滤', '不是', '因此', '通过', 'arr', '元素', '上滤', '达到', '调整', '目的', '下滤', '不是', '因此', '通过', 'arr', '元素', '下滤', '达到', '调整', '目的', 'define', 'heap', 'size', '10', '这里', '我要', '一个', '里面', '要放', '10', '元素', 'define', 'arr', 'size', 'heap', 'size', '之前', '默认', '实现', '牺牲', '元素', 'define', 'heapelemtype', 'int', '定义', '元素', '类型', 'heapelemtype', 'heaparray', 'arr', 'size', '存储空间', '大顶', '上面', '最大', '基本操作', '上滤', '非堆', '也就是说', '只要', '调整', '元素', '就是', '一个', '新堆', '注意', '当前', '可用', '元素', '最大', '下标', '不能', '超过', 'arr', 'size', 'void', 'shiftup', 'heapelemtype', 'heaparray', 'int', 'heapelemtype', 'tmp', 'heaparray', 'while', '&&', 'tmp', 'heaparray', 'heaparray', 'heaparray', 'heaparray', 'tmp', '大顶', '上面', '最大', '基本操作', '下滤', '不是', '就是', '只要', '调整', '元素', '就是', '一个', '大顶', '注意', '当前', '堆中', '元素', '最大', '下表', '不能', '超过', 'arr', 'size', 'void', 'shiftdown', 'heapelemtype', 'heaparray', 'int', 'first', 'int', 'heapelemtype', 'tmp', 'heaparray', 'first', 'int', 'father', 'first', 'child', 'while', 'child', 'father', '获取', '孩子', '较大', '孩子', '下标', 'if', 'child', '&&', 'heaparray', 'child', 'heaparray', 'child', 'child', '++', '比较', '节点', '较大', '孩子', '是否', '需要', '继续', '调整', 'if', 'tmp', 'heaparray', 'child', 'break', '否则', '的话', '孩子', '往上走', 'heaparray', 'father', 'heaparray', 'child', 'father', 'child', 'heaparray', 'father', 'tmp', 'void', 'printheaparr', 'const', 'heapelemtype', 'heaparray', 'const', 'int', 'for', 'int', '++', 'cout', 'heaparray', 'cout', 'endl', 'void', 'swap', 'heapelemtype', 'heaparray', 'int', 'int', 'heapelemtype', 'tmp', 'heaparray', 'heaparray', 'heaparray', 'heaparray', 'tmp', '堆排序', '用堆', '属性', '即大顶', '顶部', '就是', '最大', '节点', '因此', '我们', '可以', '每次', '节点', '末尾', '节点', '交换', '然后', '除了', '末尾', '节点', '其他', '节点', '重新', '调整', '一个', '然后', '循环', '一步', '之前', '需要', '杂乱', '节点', '调整', '一个', 'void', 'heapsort', 'heapelemtype', 'heaparray', 'int', '第一步', '杂乱', '数组', '调整', '一个', '大顶', '需要', '调整', '可以', 'int', 'tmp', 'for', 'tmp', 'tmp', 'tmp', '--', 'shiftdown', 'heaparray', 'tmp', '第二步', '交换', '第一个', '节点', '最大值', '末尾', '节点', '然后', '调整', '除了', '末尾', '节点', '其他', '节点', '一个', '新大顶', 'for', 'tmp', 'tmp', 'tmp', '--', 'swap', 'heaparray', 'tmp', 'shiftdown', 'heaparray', 'tmp', 'void', 'main', 'cout', '上滤', 'endl', 'heapelemtype', 'heaparray', 'arr', 'size', 'int', 'printheaparr', 'heaparray', 'shiftup', 'heaparray', 'printheaparr', 'heaparray', 'cout', '下滤', 'endl', 'heapelemtype', 'heaparraysec', 'arr', 'size', 'printheaparr', 'heaparraysec', 'shiftdown', 'heaparraysec', 'printheaparr', 'heaparraysec', 'cout', '排序', 'endl', 'heapelemtype', 'heaparraysort', 'arr', 'size', 'printheaparr', 'heaparraysort', 'heapsort', 'heaparraysort', 'printheaparr', 'heaparraysort', 'system', 'pause']","[[-0.2074056  -0.09438707  0.24035381  0.09617463  0.27945867 -0.3272372
  -0.13660313  0.42664761 -0.04735589 -0.08008956 -0.02456065 -0.32809405
  -0.14127533  0.51737781  0.16803248 -0.09433561 -0.1262729  -0.0087819
  -0.09655609 -0.49378537 -0.02048382  0.22459865 -0.0290904  -0.14226547
   0.07042848 -0.46787973 -0.27137696  0.04567488 -0.21303773 -0.0595511
   0.16463043 -0.02169053 -0.00371836 -0.11868661 -0.12734338  0.29141488
  -0.16150222 -0.23964759  0.08660789 -0.70322785 -0.16197818 -0.56678176
  -0.07600005 -0.02529575 -0.13892505 -0.19519798 -0.20668217  0.35423135
  -0.19879607  0.44253865  0.16469906 -0.24202    -0.13256346 -0.16944049
   0.02216084  0.35010453  0.17071675 -0.0791715   0.0936191  -0.12767413
   0.05588265  0.24382259  0.01457228  0.08178481 -0.34503516  0.03106065
   0.06460413 -0.0439386  -0.26908072  0.40293753  0.12240683 -0.1874943
   0.34998044 -0.29757808  0.50503222  0.23196703  0.121984   -0.13407309
  -0.28021694 -0.12799191 -0.00510615  0.03240182 -0.08498414  0.33211233
  -0.31031508  0.20745053 -0.27402925  0.39009719  0.44424035  0.14567828
   0.24818932  0.10815207  0.34852588  0.16799558  0.17877128  0.30889597
   0.10604907 -0.30708141 -0.06104217 -0.11385052]]"
548,有句话说的非常好,昨晚听了一个讲座，是腾讯创新大赛的大会，与会上学到了好多东西恺英总裁大学毕业前，赚了几百万，做的就是做网站挂流量。他说他做了非常多的站，主要还是因为兴趣，他做的都是他自己非常喜欢做的事情。恺英王悦说“人一定要做自己感兴趣的事情，这样就会充满激情，不会感到疲惫”后来有位技术出身的老总，说了一句话，我刚好在《小狗钱钱》上看到了，感触非常的深：每天要做一些超出自己能力的事情，我一般超过自己能力30%，这样技术会不断挑战难题，终有一天，你会发现没有技术难题，这时候，你会自动转向产品，这就是一个职业规划 今天上午参加了绿盟的实习生招聘面试，投的是C++，后来被推荐到了WEB。其实我一直都做的是WEB，我不知道这是否是我最终的职业路程，毕竟好多时间都花在了C/C++上面。然而我擅长的，却就是WEB，好多年一直都在做WEB相关的东西，从HTML/CSS/JS/ASP/ACCESS/MYSQL/PHP/AJAX/JSP/JQUERY/框架/MVC/二次开发/THINKPHP/ZEND/DEDE/ECSHOP/WORDPRESS，我发现我一直在号称我要转C/C++，可是我对PHP的了解，是一直在深入，小狗钱钱说，人要做自己喜欢做的事情，对PHP的态度现在却有些客观；然而各种成功学都在号称：人要做自己擅长的事情。对PHP也是比较喜欢，可总是感觉没有挑战性，整天找代码修改，写简单的逻辑，如果后面的人生一直重复这样的劳动，那岂不是很没意思。不过这也许是我自己的想当然，如果有去绿盟实习的机会，我想看看PHP到底会接触到多么难的问题，到底有没有挑战性，希望会激发我的欲望，我要成功的欲望。越来越发现，倾听的好处，那就是能够听懂别人的思想，这样就会有思维的碰撞，关键是要能够促进自己的思考。越来越发现，我懒惰的甚至会不想去思考。倾听时，身体前倾，身体坐直，集中精神。,"['有句', '非常', '昨晚', '一个', '讲座', '腾讯', '创新', '大赛', '大会', '会上', '学到', '好多', '东西', '总裁', '大学毕业', '几百万', '就是', '网站', '流量', '非常', '主要', '还是', '因为', '兴趣', '自己', '非常', '喜欢', '事情', '英王', '一定', '自己', '感兴趣', '事情', '这样', '充满', '激情', '不会', '感到', '疲惫', '后来', '有位', '技术', '出身', '老总', '一句', '刚好', '小狗', '看到', '感触', '非常', '每天', '一些', '超出', '自己', '能力', '事情', '一般', '超过', '自己', '能力', '30%', '这样', '技术', '不断', '挑战', '难题', '一天', '发现', '没有', '技术难题', '这时候', '自动', '转向', '产品', '就是', '一个', '职业规划', '今天上午', '参加', '绿盟', '实习生', '招聘', '面试', 'c++', '后来', '推荐', 'web', '其实', '一直', 'web', '知道', '是否是', '最终', '职业', '路程', '毕竟', '好多', '时间', 'c++', '上面', '然而', '擅长', '就是', 'web', '好多年', '一直', 'web', '相关', '东西', 'html', 'css', 'js', 'asp', 'access', 'mysql', 'php', 'ajax', 'jsp', 'jquery', '框架', 'mvc', '二次开发', 'thinkphp', 'zend', 'dede', 'ecshop', 'wordpress', '发现', '一直', '号称', '我要', 'c++', '可是', 'php', '了解', '一直', '深入', '小狗', '人要', '自己', '喜欢', '事情', 'php', '态度', '现在', '有些', '客观', '然而', '各种', '成功', '学都', '号称', '人要', '自己', '擅长', '事情', 'php', '比较', '喜欢', '总是', '感觉', '没有', '挑战性', '整天', '代码', '修改', '简单', '逻辑', '如果', '后面', '人生', '一直', '重复', '这样', '劳动', '不是', '没意思', '不过', '也许', '自己', '想当然', '如果', '绿盟', '实习', '机会', '看看', 'php', '到底', '接触', '多么', '问题', '到底', '有没有', '挑战性', '希望', '激发', '欲望', '我要', '成功', '欲望', '越来越', '发现', '倾听', '好处', '就是', '能够', '听懂', '别人', '思想', '这样', '思维', '碰撞', '关键', '能够', '促进', '自己', '思考', '越来越', '发现', '懒惰', '甚至', '不想', '思考', '倾听', '身体', '前倾', '身体', '坐直', '集中', '精神']","[[-0.22915009 -0.12402732  0.20141009  0.16689497  0.24913568 -0.31194937
  -0.16390528  0.43508524 -0.00582618 -0.01386145 -0.06064201 -0.30034567
  -0.15897568  0.53624282  0.12541114 -0.09780246 -0.13461377 -0.01095229
  -0.07998337 -0.38968623  0.03036021  0.22162818 -0.00322074 -0.08081563
   0.10104601 -0.48813336 -0.25673299  0.07923906 -0.17754265 -0.05466769
   0.22724104  0.03888918 -0.01613392 -0.12257515 -0.09447379  0.30335511
  -0.11538019 -0.19279641  0.09657978 -0.6761694  -0.14439286 -0.51264548
  -0.03161354 -0.07295071 -0.15110838 -0.12968389 -0.25503359  0.42833675
  -0.14243206  0.34154263  0.17269158 -0.23954378 -0.08828837 -0.21795849
   0.06295016  0.34973907  0.22349605 -0.05133319  0.08685451 -0.07439164
   0.03893252  0.26121148  0.01854794  0.07656382 -0.34357637 -0.01396033
   0.03126772 -0.01059435 -0.20211796  0.39756427  0.12045299 -0.22320739
   0.36266475 -0.29643224  0.51971736  0.14861874  0.20998197 -0.13405472
  -0.22644006 -0.20622609 -0.08443538 -0.00684002 -0.0589975   0.30216829
  -0.34332162  0.17992781 -0.26065442  0.37747868  0.41565521  0.12125701
   0.26983772  0.11046899  0.31862784  0.16489746  0.16640177  0.34903451
   0.08402039 -0.25813172  0.01173263 -0.07065078]]"
576,PHP操作符可变变量测试变量等总结,"《PHP&MYSQL WEB开发》读书笔记 第一章：PHP快速入门，主要记录一些操作符和不常见变量用法 1、PHP注释的三种方法//注释内容/*注释内容*/#注释内容，这是shell的注释方法2、三种获取表单变量的方法$name，特点是最简单，缺点是需要开启register_globals配置选项，该选项会引发安全问题$_POST[‘name’]，最常用的方法$HTTP_POST_VARS[‘name’]，已经被弃用了3、显示字符串的三种方法单引号，‘xxx$nameyyy”zzz”’，特点是将里面的文本都当成纯文本，不会计算其内容。双引号，“xx$nameyy\”\”zzz”，特点是会将里面的变量替换成其内容，如果有双引号，需要转义Heredoc语法（<<<），和双引号一样，使用方法是echo <<<EEE    内容，可以是任何不包括EEE字符串的内容，里面的变量会被解释EEE4、PHP的数据类型Integer整形Float或者Double，浮点型String字符串Boolean，布尔类型Array数组类型Object对象类型NULL空类型resource资源类型，比如数据库连接、打开的文件5、PHP的类型转换PHP的类型转换方法，和C语言的是相同的，因此只要把相同的语句写过来即可$discount = (float)$discount; //这完全是可以的有以下多种类型转换：(int)  (double)  (string)  (array)  (object)注意，这里是强制类型转换，如果要只声明一个变量，不需要加括号，比如//这个函数声明，把参数声明为数组类型，如果加了括号，就变成了强制类型转换，这里不需要加括号function   printArr( array  $arr);例如代码：//函数，用于打印数组，注意，形参类型不用加括号function printArr( array $arr){echo ""<pre>"";print_r($arr);echo ""</pre>"";echo ""<br>"";}   6、PHP之可变变量可变变量允许我们动态的改变一个变量的名称$varname = “username”;$$varname = “crazyant”; //这相当于$username=”crazyant”7、声明和使用常量define(‘USER_COUNT”,100”); //声明常量的方法$total = USER_COUNT * $count; //使用常量的方法，就是不用加$符号PHP预定义了很多的常量，它们都可以使用phpinfo()函数进行查看8、PHP变量的作用域这块感觉不是很清楚，因此都记录一下内置超级全局变量，可以再脚本任何地方可用常量被定义以后，全局可见脚本中的变量，全局可见，但函数中不可见函数内部使用全局变量，需要声明一下（global），声明的名字要一样函数内部的静态变量，外部不可见，但函数多次运行可以保存它的值函数内部的变量时局部变量，函数结束则消失9、超级全局变量的完整列表$GLOBALS$_SERVER 这是服务器环境变量数组$_GET$_POST$_COOKIE 这是cookie变量数组$_FILES$_ENV$_REQUEST$_SESSION10、引用操作符&是引用操作符，和C++的引用操作符用法一模一样$a=5;$b=&$a;$a=7; //这时候$a和$b的值都是7了可以通过重置来改变它们所指向的地址unset($a); //这样的话$a就没有了，相当于销毁了指针，可是$b还有，值还是711、PHP错误抑制操作符将@符号，放在任何表达式前面，如果表单时出现了错误或警告，都不会显示出来，比如@$a/0; 该语句就不会显示错误。12、PHP执行服务器命令操作符$out = `ls -la`;echo “<pre>”.$out.”</pre>”;这两条语句，会在linux上执行语句，windows下可以改成dir c:13、PHP关于数组的操作符array a,b,c;c = a+b;//得到包括a和b所有元素的新数组注意，这里的相加，如果a和b都是键值对，那么没有问题，相当于合并，可如果只有值的话，前面数组的0元素会被后面的0元素覆盖，以此类推，因此要合并数组，还是用array array_merge ( array $array1 [, array $... ] )为好测试如下：<?php//函数，用于打印数组，注意，形参类型不用加括号function printArr( array $arr){echo ""<pre>"";print_r($arr);echo ""</pre>"";}$arra = array('aa','ab');echo ""<b>数组A；</b><br>"";printArr($arra);$arrb = array('ba','bb');echo ""<b>数组B；</b><br>"";printArr($arrb);$arrc = $arra+$arrb;echo ""<b>A+B：</b><br>"";printArr($arrc);$arrc = array_merge($arra,$arrb);echo ""<b>array_merge数组A和B；</b><br>"";printArr($arrc);?> 运行截图：a==b;//是否具有相同的键值对a===b;//是否具有相同的键值对和顺序14、PHP类型操作符if($obj  instanceof   STUDENT){}判断一个对象，是不是某个类的一个实例15、PHP格式化小数位数的方法使用函数number_format进行比如number_format($price, 2)，就是将$price变量的小数剩下2位16、测试设置变量的类型//获取或设置参数的类型，返回的就是bool、int、double、string、array、object、resource这些关键词string gettype(mixed var);bool settype(mixed var, string type); //设置变量的类型17、PHP测试变量类型的函数PHP提供一些测试函数，用变量作为参数，返回true或者false，用来测试变量的类型：is_array()is_double，is_float()，is_real()is_long()，is_int()，is_integer()is_string()is_bool()is_object()is_resource()is_null()is_scalar()，检查是否是标量（整数、bool值、字符串、浮点数）is_numeric()，检查是否是任何类型的数字或者数字字符串is_callable()，检查变量是否是有效的函数名称18、PHP测试变量的状态bool isset(mixed var);//测试变量是否存在，存在返回truevoid unset(mixed var);//销毁一个变量bool empty(mixed var);//测试变量是否存在，以及值是否为非空或者非019、PHP变量的重解释（应该和强制类型转换类似）int intval( mixed var  [, int base]);//其中base可以指定进制数float floatval(mixed var);string strval(mixed var);20、elseif=else if至此第一章内容结束，学习的新内容，主要是操作符，比如@、``、&、变量类型、测试变量类型等","['php', '操作符', '可变', '变量', '测试', '变量', '总结', 'php', 'mysql', 'web', '开发', '读书笔记', '第一章', 'php', '快速', '入门', '主要', '记录', '一些', '操作符', '常见', '变量', '用法', 'php', '注释', '三种', '方法', '注释', '内容', '注释', '内容', '注释', '内容', '这是', 'shell', '注释', '方法', '三种', '获取', '表单', '变量', '方法', 'name', '特点', '简单', '缺点', '需要', '开启', 'register', 'globals', '配置', '选项', '选项', '引发', '安全', '问题', 'post', 'name', '常用', '方法', 'http', 'post', 'vars', 'name', '已经', '被弃', '显示', '字符串', '三种', '方法', '单引号', 'xxx', 'nameyyy', 'zzz', '特点', '里面', '文本', '当成', '文本', '不会', '计算', '内容', '双引号', 'xx', 'nameyy', 'zzz', '特点', '里面', '变量', '替换成', '内容', '如果', '双引号', '需要', '转义', 'heredoc', '语法', '双引号', '一样', '使用', '方法', 'echo', 'eee', '内容', '可以', '任何', '包括', 'eee', '字符串', '内容', '里面', '变量', '解释', 'eee4', 'php', '数据类型', 'integer', '整形', 'float', '或者', 'double', '浮点', 'string', '字符串', 'boolean', '布尔', '类型', 'array', '数组', '类型', 'object', '对象', '类型', 'null', '类型', 'resource', '资源类型', '比如', '数据库', '连接', '打开', '文件', 'php', '类型转换', 'php', '类型转换', '方法', 'c语言', '相同', '因此', '只要', '相同', '语句', '写过来', '即可', 'discount', 'float', 'discount', '完全', '可以', '以下', '多种', '类型转换', 'int', 'double', 'string', 'array', 'object', '注意', '这里', '强制', '类型转换', '如果', '声明', '一个', '变量', '需要', '括号', '比如', '这个', '函数', '声明', '参数', '声明', '数组', '类型', '如果', '括号', '变成', '强制', '类型转换', '这里', '需要', '括号', 'function', 'printarr', 'array', 'arr', '例如', '代码', '函数', '用于', '打印', '数组', '注意', '形参', '类型', '不用', '括号', 'function', 'printarr', 'array', 'arr', 'echo', 'pre', 'print', 'arr', 'echo', 'pre', 'echo', 'br', 'php', '可变', '变量', '可变', '变量', '允许', '我们', '动态', '改变', '一个', '变量', '名称', 'varname', 'username', 'varname', 'crazyant', '相当于', 'username', 'crazyant', '声明', '使用', '常量', 'define', 'user', 'count', '100', '声明', '常量', '方法', 'total', 'user', 'count', 'count', '使用', '常量', '方法', '就是', '不用', '符号', 'php', '预定', '很多', '常量', '它们', '可以', '使用', 'phpinfo', '函数', '进行', '查看', 'php', '变量', '作用域', '这块', '感觉', '不是', '清楚', '因此', '记录', '一下', '内置', '超级', '全局变量', '可以', '脚本', '任何', '地方', '可用', '常量', '定义', '以后', '全局', '可见', '脚本', '变量', '全局', '可见', '函数', '可见', '函数', '内部', '使用', '全局变量', '需要', '声明', '一下', 'global', '声明', '名字', '一样', '函数', '内部', '静态', '变量', '外部', '可见', '函数', '多次', '运行', '可以', '保存', '函数', '内部', '变量', '局部变量', '函数', '结束', '消失', '超级', '全局变量', '完整', '列表', 'globals', 'server', '这是', '服务器', '环境变量', '数组', 'get', 'post', 'cookie', '这是', 'cookie', '变量', '数组', 'files', 'env', 'request', 'session10', '引用', '操作符', '引用', '操作符', 'c++', '引用', '操作符', '用法', '一模一样', '这时候', '可以', '通过', '重置', '改变', '它们', '指向', '地址', 'unset', '这样的话', '没有', '相当于', '销毁', '指针', '可是', '还有', '还是', '711', 'php', '错误', '抑制', '操作符', '符号', '放在', '任何', '表达式', '前面', '如果', '表单', '出现', '错误', '警告', '不会', '显示', '出来', '比如', '语句', '不会', '显示', '错误', '12', 'php', '执行', '服务器', '命令', '操作符', 'out', 'ls', 'la', 'echo', 'pre', 'out', 'pre', '两条', '语句', 'linux', '执行', '语句', 'windows', '可以', '改成', 'dir', '13', 'php', '关于', '数组', '操作符', 'array', '得到', '包括', '所有', '元素', '数组', '注意', '这里', '相加', '如果', '键值', '那么', '没有', '问题', '相当于', '合并', '如果', '只有', '的话', '前面', '数组', '元素', '后面', '元素', '覆盖', '以此类推', '因此', '合并', '数组', '还是', 'array', 'array', 'merge', 'array', 'array1', 'array', '...', '测试', '如下', 'php', '函数', '用于', '打印', '数组', '注意', '形参', '类型', '不用', '括号', 'function', 'printarr', 'array', 'arr', 'echo', 'pre', 'print', 'arr', 'echo', 'pre', 'arra', 'array', 'aa', 'ab', 'echo', '数组', 'br', 'printarr', 'arra', 'arrb', 'array', 'ba', 'bb', 'echo', '数组', 'br', 'printarr', 'arrb', 'arrc', 'arra', 'arrb', 'echo', 'br', 'printarr', 'arrc', 'arrc', 'array', 'merge', 'arra', 'arrb', 'echo', 'array', 'merge', '数组', 'br', 'printarr', 'arrc', '运行', '截图', '是否', '具有', '相同', '键值', '是否', '具有', '相同', '键值', '顺序', '14', 'php', '类型', '操作符', 'if', 'obj', 'instanceof', 'student', '判断', '一个', '对象', '是不是', '某个', '一个', '实例', '15', 'php', '格式化', '小数位', '方法', '使用', '函数', 'number', 'format', '进行', '比如', 'number', 'format', 'price', '就是', 'price', '变量', '小数', '剩下', '16', '测试', '设置', '变量', '类型', '获取', '设置', '参数', '类型', '返回', '就是', 'bool', 'int', 'double', 'string', 'array', 'object', 'resource', '这些', '关键词', 'string', 'gettype', 'mixed', 'var', 'bool', 'settype', 'mixed', 'var', 'string', 'type', '设置', '变量', '类型', '17', 'php', '测试', '变量', '类型', '函数', 'php', '提供', '一些', '测试函数', '变量', '作为', '参数', '返回', 'true', '或者', 'false', '用来', '测试', '变量', '类型', 'is', 'array', 'is', 'double', 'is', 'float', 'is', 'real', 'is', 'long', 'is', 'int', 'is', 'integer', 'is', 'string', 'is', 'bool', 'is', 'object', 'is', 'resource', 'is', 'null', 'is', 'scalar', '检查', '是否是', '标量', '整数', 'bool', '字符串', '浮点数', 'is', 'numeric', '检查', '是否是', '任何', '类型', '数字', '或者', '数字', '字符串', 'is', 'callable', '检查', '变量', '是否是', '有效', '函数', '名称', '18', 'php', '测试', '变量', '状态', 'bool', 'isset', 'mixed', 'var', '测试', '变量', '是否', '存在', '存在', '返回', 'truevoid', 'unset', 'mixed', 'var', '销毁', '一个', '变量', 'bool', 'empty', 'mixed', 'var', '测试', '变量', '是否', '存在', '以及', '是否', '非空', '或者', '019', 'php', '变量', '解释', '应该', '强制', '类型转换', '类似', 'int', 'intval', 'mixed', 'var', 'int', 'base', '其中', 'base', '可以', '指定', '进制', 'float', 'floatval', 'mixed', 'var', 'string', 'strval', 'mixed', 'var', '20', 'elseif', 'else', 'if', '至此', '第一章', '内容', '结束', '学习', '内容', '主要', '操作符', '比如', '变量', '类型', '测试', '变量', '类型']","[[-0.23674316 -0.12363382  0.24324751  0.13267872  0.30900749 -0.35545014
  -0.17403576  0.48258853 -0.02368547 -0.06706602 -0.03865361 -0.3451736
  -0.17429694  0.59261941  0.17267457 -0.09739904 -0.15032112 -0.00083199
  -0.10636221 -0.52624256 -0.01418274  0.24168994 -0.01990648 -0.13542114
   0.10224982 -0.5321006  -0.29970386  0.07035214 -0.23664747 -0.06576909
   0.20804074 -0.01068184 -0.00472078 -0.14289624 -0.13844436  0.32414189
  -0.1709456  -0.24489328  0.11021323 -0.77677715 -0.18320226 -0.61520621
  -0.06566414 -0.04188944 -0.15986615 -0.19531062 -0.22918656  0.42183503
  -0.20853659  0.45875836  0.19478578 -0.27146299 -0.14268008 -0.1932843
   0.04625921  0.39776801  0.20819549 -0.08601819  0.10495406 -0.13642973
   0.05880715  0.27629613  0.02513306  0.10031771 -0.38882008  0.01305254
   0.06176491 -0.03712211 -0.28438343  0.45222387  0.14912793 -0.22088631
   0.39405681 -0.32644112  0.56903193  0.22634609  0.15625161 -0.14122761
  -0.31506686 -0.16385909 -0.02503716  0.01765676 -0.08982221  0.35194291
  -0.36632031  0.21764897 -0.30307231  0.42758961  0.48154362  0.14663269
   0.29242468  0.11836301  0.37550494  0.20002596  0.19624566  0.35390713
   0.10864838 -0.32434811 -0.07098251 -0.12281553]]"
581,PHP对文件的操作总结,"1、使用fopen打开文件  $fp = fopen(""a.txt"", 'w'); //用写方法打开一个文件a.txt fopen具有2个、3个或4个参数，通常是2个参数，第二个参数是打开文件的模式，以下是fopen打开文件的全部模式：    模式 模式名称 解释  r 只读 打开文件，从头开始读  r+ 只读 打开文件，从头开始读写  w 只写 从头开始读。若文件存在，则删除文件内容；若文件不存在，则创建文件  w+ 只写 从头开始读写，若文件存在，则删除所有，否则创建文件  x 谨慎写 写模式打开，若文件存在，文件不会被打开，fopen返回false  x+ 谨慎写 读写模式打开，若文件存在，文件不会被打开fopen返回false  a 追加 打开文件，若有内容，则在末尾添加内容，文件不存在创建文件  a+ 追加 打开文件，若有内容，从末尾开始读写，文件不存在则创建文件  b 二进制 推荐模式，用于和其他模式连接  t 文本 用于和其他模式结合，不推荐，除非已经用了b选项 fopen的第三个选项是可选的，代表是否在include_path中搜索一个文件，如果要，就设置成1 fopen的第四个参数也可选，用来打开远程文件，比如http://www.51projob.com fopen返回的只是一个文件指针，要进行操作，还要用其他函数 2、fopen打开远程文件 首先，需要将php.ini中的allow_url_open开启 3、fwite用于向文件写入内容  fwite($fp, $outputstring); 另一个替换函数，是file_put_contents()，原型是：  int file_put_contents( string filename, string data, [, int flag] [, resource context]) 另一个可以替代fopen的函数是file_get_contents，可以讲一个文本文件所有内容放入一个单个字符串中4、fwite()的参数 fwite具有三个参数  int fwite( resource handle, string string [, int length]) 第三个参数是写入的最大字符数目，比如，额可以这样写：  fwite($fp, $outputstring, strlen($outputstring)); 5、fclose($fp)用于关闭文件 如果关闭成功，该函数则返回true值，但一般不用测试 6、判断何时读完文件：feof() 如果是按行、按字符读取文件，需要判断是否读完了，可以这样判断  while (!feof($fp)) {} 7、每次读取一行数据fgets(), fgetss(), fgetcsv()  $order = fgets($fp, 999); //一直读取数据，知道遇到了换行，或者EOF，或者999B  string fgetss(resource fp, int length, string [allowable_tags]); //和fgets一样，不过这个可以过滤PHP和HTML标记，并且还能指定要过滤的特殊标记，放在allowable_tags变量中就可以  array fgetcsv( resource fp,  int length [,  string delimiter [,  string enclosure]]);  //当文件中使用了定界符的时候，可以用这种方法读取，比如   $order = fgetcsv($fp,  10, ""\t"");//注意，返回的是数组  8、读取整个文件readfile()、fpassthru()和file()  int readfile(string filename,  [int use_include_path  [, resource context]]);第三个参数只有文件远程打开才会用，返回值是文件的字节数目  $fp = fopen(""a.txt"", 'rb');  fpassthru($fp);  //如果成功，返回true，否则返回false  $arr  =  file(""a.txt"")将文件按行读取存放在$arr数组中   array file( string $filename [, int $flags = 0 [, resource $context ]] ) file()将整个文件载入到一个数组中，每行成为数组的一个元素 9、使用fgetc($fp)每次读取一个字符 10、读取任意长度string fread(resource fp,  int length); 11、查看文件是否存在file_exists() 12、确定文件大小filesize(""a.txt""); 13、删除一个文件unlink(""a.txt""); 14、在文件中定位：rewind()、fseek()和ftell()  rewind()将指针复位到文件的开始  int fseek( resource fp,  int offset [,  int whence]);//将文件指针从whence位置移动offset个字节，也可以用SEEK_CUR和SEEK_END作为whence  15、文件锁定 这是为了实现对文件的互斥访问而设置的函数  bool flock (resource fp,  int operation [,  int &wouldblock ] ); 第二个参数指定文件被锁的类型:  LOCK_SH：读操作锁定，文件可以共享，别人可以读  LOCK_EX：写操作锁定，互斥的，文件不能被共享  LOCK_UN：释放已有的锁定  LOCK_NB：防止在请求加锁时阻塞  注意：flock不能用于NTF或者FAT文件系统","['php', '文件', '操作', '总结', '使用', 'fopen', '打开', '文件', 'fp', 'fopen', 'txt', '方法', '打开', '一个', '文件', 'txt', 'fopen', '具有', '参数', '通常', '参数', '第二个', '参数', '打开', '文件', '模式', '以下', 'fopen', '打开', '文件', '全部', '模式', '模式', '模式', '名称', '解释', '只读', '打开', '文件', '从头开始', '只读', '打开', '文件', '从头开始', '读写', '从头开始', '文件', '存在', '删除', '文件', '内容', '文件', '存在', '创建', '文件', '从头开始', '读写', '文件', '存在', '删除', '所有', '否则', '创建', '文件', '谨慎', '模式', '打开', '文件', '存在', '文件', '不会', '打开', 'fopen', '返回', 'false', '谨慎', '读写', '模式', '打开', '文件', '存在', '文件', '不会', '打开', 'fopen', '返回', 'false', '追加', '打开', '文件', '若有', '内容', '末尾', '添加', '内容', '文件', '存在', '创建', '文件', '追加', '打开', '文件', '若有', '内容', '末尾', '开始', '读写', '文件', '存在', '创建', '文件', '二进制', '推荐', '模式', '用于', '其他', '模式', '连接', '文本', '用于', '其他', '模式', '结合', '推荐', '除非', '已经', '选项', 'fopen', '第三个', '选项', '可选', '代表', '是否', 'include', 'path', '搜索', '一个', '文件', '如果', '设置', 'fopen', '第四个', '参数', '可选', '用来', '打开', '远程', '文件', '比如', 'http', 'www.51', 'projob', 'com', 'fopen', '返回', '只是', '一个', '文件', '指针', '进行', '操作', '还要', '其他', '函数', 'fopen', '打开', '远程', '文件', '首先', '需要', 'php', 'ini', 'allow', 'url', 'open', '开启', 'fwite', '用于', '文件', '写入', '内容', 'fwite', 'fp', 'outputstring', '一个', '替换', '函数', 'file', 'put', 'contents', '原型', 'int', 'file', 'put', 'contents', 'string', 'filename', 'string', 'data', 'int', 'flag', 'resource', 'context', '一个', '可以', '替代', 'fopen', '函数', 'file', 'get', 'contents', '可以', '一个', '文本文件', '所有', '内容', '放入', '一个', '单个', '字符串', 'fwite', '参数', 'fwite', '具有', '三个', '参数', 'int', 'fwite', 'resource', 'handle', 'string', 'string', 'int', 'length', '第三个', '参数', '写入', '最大', '字符', '数目', '比如', '可以', '这样', 'fwite', 'fp', 'outputstring', 'strlen', 'outputstring', 'fclose', 'fp', '用于', '关闭', '文件', '如果', '关闭', '成功', '函数', '返回', 'true', '一般', '不用', '测试', '判断', '何时', '读完', '文件', 'feof', '如果', '按行', '字符', '读取', '文件', '需要', '判断', '是否', '读完', '可以', '这样', '判断', 'while', 'feof', 'fp', '每次', '读取', '一行', '数据', 'fgets', 'fgetss', 'fgetcsv', 'order', 'fgets', 'fp', '999', '一直', '读取数据', '知道', '遇到', '换行', '或者', 'eof', '或者', '999b', 'string', 'fgetss', 'resource', 'fp', 'int', 'length', 'string', 'allowable', 'tags', 'fgets', '一样', '不过', '这个', '可以', '过滤', 'php', 'html', '标记', '并且', '指定', '过滤', '特殊', '标记', '放在', 'allowable', 'tags', '变量', '可以', 'array', 'fgetcsv', 'resource', 'fp', 'int', 'length', 'string', 'delimiter', 'string', 'enclosure', '文件', '使用', '定界符', '时候', '可以', '这种', '方法', '读取', '比如', 'order', 'fgetcsv', 'fp', '10', '注意', '返回', '数组', '读取', '整个', '文件', 'readfile', 'fpassthru', 'file', 'int', 'readfile', 'string', 'filename', 'int', 'use', 'include', 'path', 'resource', 'context', '第三个', '参数', '只有', '文件', '远程', '打开', '返回值', '文件', '字节', '数目', 'fp', 'fopen', 'txt', 'rb', 'fpassthru', 'fp', '如果', '成功', '返回', 'true', '否则', '返回', 'false', 'arr', 'file', 'txt', '文件', '按行', '读取', '存放', 'arr', '数组', 'array', 'file', 'string', 'filename', 'int', 'flags', 'resource', 'context', 'file', '整个', '文件', '载入', '一个', '数组', '每行', '成为', '数组', '一个', '元素', '使用', 'fgetc', 'fp', '每次', '读取', '一个', '字符', '10', '读取', '任意', '长度', 'string', 'fread', 'resource', 'fp', 'int', 'length', '11', '查看', '文件', '是否', '存在', 'file', 'exists', '12', '确定', '文件大小', 'filesize', 'txt', '13', '删除', '一个', '文件', 'unlink', 'txt', '14', '文件', '定位', 'rewind', 'fseek', 'ftell', 'rewind', '指针', '复位', '文件', '开始', 'int', 'fseek', 'resource', 'fp', 'int', 'offset', 'int', 'whence', '文件', '指针', 'whence', '位置', '移动', 'offset', '字节', '可以', 'seek', 'cur', 'seek', 'end', '作为', 'whence', '15', '文件', '锁定', '这是', '为了', '实现', '文件', '互斥', '访问', '设置', '函数', 'bool', 'flock', 'resource', 'fp', 'int', 'operation', 'int', 'wouldblock', '第二个', '参数', '指定', '文件', '类型', 'lock', 'sh', '操作', '锁定', '文件', '可以', '共享', '别人', '可以', 'lock', 'ex', '操作', '锁定', '互斥', '文件', '不能', '共享', 'lock', 'un', '释放', '已有', '锁定', 'lock', 'nb', '防止', '请求', '加锁', '阻塞', '注意', 'flock', '不能', '用于', 'ntf', '或者', 'fat', '文件系统']","[[-2.49378918e-01 -1.46743282e-01  2.36669240e-01  1.36541806e-01
   3.21771450e-01 -3.54835048e-01 -1.90345648e-01  5.01420236e-01
  -1.59710488e-02 -5.58659446e-02 -4.60767297e-02 -3.47624848e-01
  -1.98636018e-01  6.12105291e-01  1.70245371e-01 -1.03464451e-01
  -1.67740662e-01  4.62022221e-03 -1.19968828e-01 -5.29141204e-01
   7.75774868e-05  2.43887247e-01  4.24408129e-03 -1.13314500e-01
   1.22634514e-01 -5.67353953e-01 -3.01566612e-01  8.55585853e-02
  -2.40237237e-01 -6.65939518e-02  2.25356982e-01 -5.46697677e-03
  -1.86602723e-02 -1.57975979e-01 -1.30866722e-01  3.37375440e-01
  -1.65746650e-01 -2.41400093e-01  1.18725181e-01 -8.03931885e-01
  -1.94144215e-01 -6.34680583e-01 -5.84535034e-02 -5.06925863e-02
  -1.74845759e-01 -1.78585552e-01 -2.34940060e-01  4.64366684e-01
  -2.05492933e-01  4.51595799e-01  2.27210695e-01 -2.85789361e-01
  -1.37865925e-01 -2.05603021e-01  5.70094634e-02  4.10804265e-01
   2.35417862e-01 -8.59841105e-02  1.10012600e-01 -1.31741576e-01
   5.15066763e-02  3.03531668e-01  3.42262307e-02  9.64322635e-02
  -4.03497561e-01  4.26322098e-03  5.02699795e-02 -2.72659193e-02
  -2.83860803e-01  4.54284028e-01  1.71627499e-01 -2.38307591e-01
   4.13407301e-01 -3.28170193e-01  5.92770924e-01  2.07363253e-01
   1.68986481e-01 -1.38374221e-01 -3.17312208e-01 -1.83073700e-01
  -4.22931094e-02 -2.48865756e-03 -7.83754760e-02  3.47173207e-01
  -3.80832139e-01  2.18945904e-01 -3.08297775e-01  4.32927737e-01
   4.91042093e-01  1.39910984e-01  3.24516001e-01  1.33475067e-01
   3.82779055e-01  2.07851060e-01  2.00324197e-01  3.70488167e-01
   1.11909606e-01 -3.36824632e-01 -7.72669504e-02 -1.27110895e-01]]"
591,PHP数组使用、特性、函数的总结,"包含其他数组的数组成为多维数组关联数组（即非数字索引数组）使用更有意义的数据作为数组的索引1、数组索引数组$products  =  array( 'a',  'b',  'c');//就像一个对象一样初始化数组的复制：$arra = $arrb;//即可将数组arrb的内容复制到数组arra中使用range可以将一个范围的值，直接放到一个数组中返回，比如：$numbers = range(1,10);$letters = range('a', 'z');range具有第三个参数，是间隔的意思，比如要用1到10之间的奇数数组：$odds = range(1,10,2);数组具有的一些功能：如果信息存放在磁盘文件中，可以直接将文件载入到数组中如果数组中的数据存放在数据库中，可以直接从数据库载入该数组可以使用函数每次提取数组的一部分内容，或者对数组进行重新排序PHP的数组不需要预先初始化或创建，第一次使用，会自动创建如果数组arra有2个元素，那么语句arra[2] = 'a'；将会自动添加一个新元素对数组的foreach访问foreach($arra as $c){echo $c.""&nbsp;"";} 2、使用不同索引的关联数组关联数组，可以将每个变量值和任何关键字或者索引联系起来关联数组的初始化：$price  =  array('Tires'=>100,  'oil'=>10,  'Spark'=>4);3、使用foreach对关联数组进行遍历foreach每次将数组内容，放到一个键值对里面进行访问：foreach($price as $key=>$value){    echo $key."" - "".$value.""<br />"";} 结果：测试关联数组--------------Tires - 100oil - 10Spark – 44、使用while + each()结构访问关联数组每次将一个键值对作为整体返回，类似pair(key,  value)：while($elem = each($price)){    echo $elem['key']."" - "".$elem['value'].""<br />"";} 结果是一样的。5、访问关联数组值list()和each()搭配进行（高级用法）reset($price);// 貌似遍历了因此数组，数组指针就变成了最后一个，所以要重置一下echo ""<br>使用list()+each()遍历数组：<br>"";while(list($product, $pri) = each($price)){echo $product."" - "".$pri.""<br />"";} 注意：each()函数，数组将记录当前元素，如果希望两次以上使用该数组，就必须用reset()函数将当前元素重新设置到数组开始的地方6、数组操作符主要是+，即联合操作符，解释如下：+，例如$arra+$arrb，两个数组的联合，数组arrb会被附加到arra中，但是任何关键字冲突的元素不会被添加7、数字索引数组升序排序bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )第二个参数：SORT_REGULAR- 默认SORT_NUMERIC- 作为数字比较SORT_STRING - 作为字符串比较8、关联数组升序排序分为两种：按照关键字排序，即按照$key的内容排序bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )按照值排序，即按照$value排序bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )其中第二个参数和sor是相同的9、对数组的降序排序sort、ksort、asort都是对数组进行升序排序的rsort、krsort、arsort是对数组进行降序排序，但是用法相同10、使用回调函数对多维数组进行排序如下一个排序：echo ""<br>使用回调函数对多维数组排序：<br>"";$products = array(array('TIR', 'Tires', 100),array('OIL', 'Oil',10),array('SPK', 'Spark Plugs', 4));//以下是回调函数，两个参数是数组的一维元素function compare($x, $y){if($x[1] == $y[1]){return 0;} else if($x[1] < $y[1]){return -1;} elsereturn 1;}usort($products, 'compare');//传入函数的名字 usor中的u代表用户，因为要求用户传入比较函数，同样的，有uasort和uksort函数多维数组的排序，如果要进行反向排序，只要将回调函数的返回值取反就行了，比如usrot($products,  'reverse_compare');11、对数组进行重新排序bool shuffle ( array &$array )   //该函数将一个数组随机打乱array_reverse 返回原数组的反序副本，不会改变原数组。array array_reverse ( array $array [, bool $preserve_keys = false ] )12、array_push和array_popint array_push ( array &$array , mixed $var [, mixed $... ] )向数组末尾添加元素，例如代码：array_push($stack, ""apple"", ""raspberry"");另一个是array_popmixedarray_pop ( array &$array ) //array_pop() 弹出并返回末尾元素<?php$stack = array(""orange"", ""banana"", ""apple"", ""raspberry"");$fruit = array_pop($stack);print_r($stack);?> 结果（和栈一样，末尾元素被删除）：Array ( [0] => orange [1] => banana [2] => apple )13、explode将字符串拆分成数组array explode ( string $delimiter , string $string [, int $limit ] )第三个参数若被设置，则只返回前最多limit个元素<?php$str = 'one|two|three|four';// positive limitprint_r(explode('|', $str, 2));// negative limit (since PHP 5.1)print_r(explode('|', $str, -1));?> 结果：Array ( [0] => one [1] => two|three|four )Array ( [0] => one [1] => two [2] => three )14、PHP的其他数组函数在数组中浏览的函数：数组中都有一个内部指针，用来遍历数组，该指针可以被使用和改变，比如each()就是使用该指针的each()：返回当前元素，然后前移指针current()reset()：将指针指向数组开头end()：将指针指向数组末尾next()：前移指针，然后返回元素，和each()相反pos()prev()：前移指针，然后返回元素，与next()相反15、超级强大：对数组一个元素使用任何回调函数：array_walk()bool array_walk ( array &$array , callable $funcname [, mixed $userdata = NULL ] )注意，该函数是不管数组指针指向哪里，它就是从头到位开始遍历如果第三个参数被设置，我们可以在自己的回调函数中，使用该参数回调函数的形式如下：myfunc(  value,  key,  userdata);//一般来说，funcname有2个参数，第一个是value，第二个是key，可以忽略key和userdata，只带1个参数即valueecho ""<br>使用array_walk对每个元素应用一个函数：<br>"";$arrint = array(1,2,3,4,5,6);echo ""原数组：<br>"";printArr($arrint);//注意第一个参数，因为要改变，所以用引用function myfunc(&$val, $key, $count){$val *= $count;}array_walk($arrint, myfunc, 3);//每个元素乘以3echo ""使用了array_walk以后的数组：<br>"";printArr($arrint); 结果:Array([0] => 1[1] => 2[2] => 3[3] => 4[4] => 5[5] => 6)使用了array_walk以后的数组：Array(    [0] => 3    [1] => 6    [2] => 9    [3] => 12    [4] => 15    [5] => 18) 16、统计数组元素个数:count()、sizeof()和array_count_values()sizeof()和count()的返回值相同array_count_values用法不同，返回的是统计数目：<?php$array = array(1, ""hello"", 1, ""world"", ""hello"");print_r(array_count_values($array));?>结果：Array(    [1] => 2    [hello] => 2    [world] => 1) 17、将键值对的关联数组的每个元素建立一个变量extract()int extract ( array &$var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix = NULL ]] )比如代码：<?php/* Suppose that $var_array is an array returned from wddx_deserialize */$size = ""large"";$var_array = array(""color"" => ""blue"",                   ""size""  => ""medium"",                   ""shape"" => ""sphere"");extract($var_array, EXTR_PREFIX_SAME, ""wddx"");echo ""$color, $size, $shape, $wddx_size\n"";?> 结果：blue, large, sphere, medium 可以看出，意思是将键作为变量名，新建了变量，为了防止冲突，设定第二个和第三个参数，用于处理冲突，第三个参数指定新建变量的前缀。18、小结数组在PHP用的是超级多本章主要对数组进行了概念定义、foreach,each,list的遍历方法、array_walk回调的使用、打乱、排序、抽取等各种数组操作。","['php', '数组', '使用', '特性', '函数', '总结', '包含', '其他', '数组', '数组', '成为', '多维', '数组', '关联', '数组', '即非', '数字', '索引', '数组', '使用', '更有意义', '数据', '作为', '数组', '索引', '数组', '索引', '数组', 'products', 'array', '一个', '对象', '一样', '初始化', '数组', '复制', 'arra', 'arrb', '即可', '数组', 'arrb', '内容', '复制到', '数组', 'arra', '使用', 'range', '可以', '一个', '范围', '直接', '放到', '一个', '数组', '返回', '比如', 'numbers', 'range', '10', 'letters', 'range', 'range', '具有', '第三个', '参数', '间隔', '意思', '比如', '要用', '10', '之间', '奇数', '数组', 'odds', 'range', '10', '数组', '具有', '一些', '功能', '如果', '信息', '存放', '磁盘', '文件', '可以', '直接', '文件', '载入', '数组', '如果', '数组', '数据', '存放', '数据库', '可以', '直接', '数据库', '载入', '数组', '可以', '使用', '函数', '每次', '提取', '数组', '一部分', '内容', '或者', '数组', '进行', '重新', '排序', 'php', '数组', '需要', '预先', '初始化', '创建', '第一次', '使用', '自动', '创建', '如果', '数组', 'arra', '元素', '那么', '语句', 'arra', '将会', '自动', '添加', '一个', '新元素', '数组', 'foreach', '访问', 'foreach', 'arra', 'as', 'echo', 'nbsp', '使用', '不同', '索引', '关联', '数组', '关联', '数组', '可以', '每个', '变量值', '任何', '关键字', '或者', '索引', '联系', '起来', '关联', '数组', '初始化', 'price', 'array', 'tires', '100', 'oil', '10', 'spark', '使用', 'foreach', '关联', '数组', '进行', '遍历', 'foreach', '每次', '数组', '内容', '放到', '一个', '键值', '里面', '进行', '访问', 'foreach', 'price', 'as', 'key', 'value', 'echo', 'key', 'value', 'br', '结果', '测试', '关联', '数组', '--------------', 'tires', '100oil', '10spark', '44', '使用', 'while', 'each', '结构', '访问', '关联', '数组', '每次', '一个', '键值', '作为', '整体', '返回', '类似', 'pair', 'key', 'value', 'while', 'elem', 'each', 'price', 'echo', 'elem', 'key', 'elem', 'value', 'br', '结果', '一样', '访问', '关联', '数组', 'list', 'each', '搭配', '进行', '高级', '用法', 'reset', 'price', '貌似', '遍历', '因此', '数组', '数组', '指针', '变成', '最后', '一个', '所以', '重置', '一下', 'echo', 'br', '使用', 'list', 'each', '遍历', '数组', 'br', 'while', 'list', 'product', 'pri', 'each', 'price', 'echo', 'product', 'pri', 'br', '注意', 'each', '函数', '数组', '记录', '当前', '元素', '如果', '希望', '两次', '以上', '使用', '数组', '必须', 'reset', '函数', '当前', '元素', '重新', '设置', '数组', '开始', '地方', '数组', '操作符', '主要', '联合', '操作符', '解释', '如下', '例如', 'arra', 'arrb', '两个', '数组', '联合', '数组', 'arrb', '附加', 'arra', '但是', '任何', '关键字', '冲突', '元素', '不会', '添加', '数字', '索引', '数组', '升序', '排序', 'bool', 'sort', 'array', 'array', 'int', 'sort', 'flags', 'sort', 'regular', '第二个', '参数', 'sort', 'regular', '默认', 'sort', 'numeric', '作为', '数字', '比较', 'sort', 'string', '作为', '字符串', '比较', '关联', '数组', '升序', '排序', '分为', '两种', '按照', '关键字', '排序', '按照', 'key', '内容', '排序', 'bool', 'ksort', 'array', 'array', 'int', 'sort', 'flags', 'sort', 'regular', '按照', '排序', '按照', 'value', '排序', 'bool', 'asort', 'array', 'array', 'int', 'sort', 'flags', 'sort', 'regular', '其中', '第二个', '参数', 'sor', '相同', '数组', '降序', '排序', 'sort', 'ksort', 'asort', '数组', '进行', '升序', '排序', 'rsort', 'krsort', 'arsort', '数组', '进行', '降序', '排序', '但是', '用法', '相同', '10', '使用', '回调', '函数', '多维', '数组', '进行', '排序', '如下', '一个', '排序', 'echo', 'br', '使用', '回调', '函数', '多维', '数组', '排序', 'br', 'products', 'array', 'array', 'tir', 'tires', '100', 'array', 'oil', 'oil', '10', 'array', 'spk', 'spark', 'plugs', '以下', '回调', '函数', '两个', '参数', '数组', '一维', '元素', 'function', 'compare', 'if', 'return', 'else', 'if', 'return', 'elsereturn', 'usort', 'products', 'compare', '传入', '函数', '名字', 'usor', '代表', '用户', '因为', '要求', '用户', '传入', '比较', '函数', '同样', 'uasort', 'uksort', '函数', '多维', '数组', '排序', '如果', '进行', '反向', '排序', '只要', '回调', '函数', '返回值', '取反', '就行了', '比如', 'usrot', 'products', 'reverse', 'compare', '11', '数组', '进行', '重新', '排序', 'bool', 'shuffle', 'array', 'array', '函数', '一个', '数组', '随机', '打乱', 'array', 'reverse', '返回', '数组', '反序', '副本', '不会', '改变', '数组', 'array', 'array', 'reverse', 'array', 'array', 'bool', 'preserve', 'keys', 'false', '12', 'array', 'push', 'array', 'popint', 'array', 'push', 'array', 'array', 'mixed', 'var', 'mixed', '...', '数组', '末尾', '添加', '元素', '例如', '代码', 'array', 'push', 'stack', 'apple', 'raspberry', '一个', 'array', 'popmixedarray', 'pop', 'array', 'array', 'array', 'pop', '弹出', '返回', '末尾', '元素', 'php', 'stack', 'array', 'orange', 'banana', 'apple', 'raspberry', 'fruit', 'array', 'pop', 'stack', 'print', 'stack', '结果', '一样', '末尾', '元素', '删除', 'array', 'orange', 'banana', 'apple', '13', 'explode', '字符串', '分成', '数组', 'array', 'explode', 'string', 'delimiter', 'string', 'string', 'int', 'limit', '第三个', '参数', '设置', '返回', 'limit', '元素', 'php', 'str', 'one', 'two', 'three', 'four', 'positive', 'limitprint', 'explode', 'str', 'negative', 'limit', 'since', 'php', '5.1', 'print', 'explode', 'str', '结果', 'array', 'one', 'two', 'three', 'four', 'array', 'one', 'two', 'three', '14', 'php', '其他', '数组', '函数', '数组', '浏览', '函数', '数组', '一个', '内部', '指针', '用来', '遍历', '数组', '指针', '可以', '使用', '改变', '比如', 'each', '就是', '使用', '指针', 'each', '返回', '当前', '元素', '然后', '前移', '指针', 'current', 'reset', '指针', '指向', '数组', '开头', 'end', '指针', '指向', '数组', '末尾', 'next', '前移', '指针', '然后', '返回', '元素', 'each', '相反', 'pos', 'prev', '前移', '指针', '然后', '返回', '元素', 'next', '相反', '15', '超级', '强大', '数组', '一个', '元素', '使用', '任何', '回调', '函数', 'array', 'walk', 'bool', 'array', 'walk', 'array', 'array', 'callable', 'funcname', 'mixed', 'userdata', 'null', '注意', '函数', '不管', '数组', '指针', '指向', '哪里', '就是', '从头', '到位', '开始', '遍历', '如果', '第三个', '参数', '设置', '我们', '可以', '自己', '回调', '函数', '使用', '参数', '回调', '函数', '形式', '如下', 'myfunc', 'value', 'key', 'userdata', '一般来说', 'funcname', '参数', '第一个', 'value', '第二个', 'key', '可以', '忽略', 'key', 'userdata', '只带', '参数', 'valueecho', 'br', '使用', 'array', 'walk', '每个', '元素', '应用', '一个', '函数', 'br', 'arrint', 'array', 'echo', '数组', 'br', 'printarr', 'arrint', '注意', '第一个', '参数', '因为', '改变', '所以', '引用', 'function', 'myfunc', 'val', 'key', 'count', 'val', 'count', 'array', 'walk', 'arrint', 'myfunc', '每个', '元素', '乘以', '3echo', '使用', 'array', 'walk', '以后', '数组', 'br', 'printarr', 'arrint', '结果', 'array', '使用', 'array', 'walk', '以后', '数组', 'array', '12', '15', '18', '16', '统计', '数组', '元素', '个数', 'count', 'sizeof', 'array', 'count', 'values', 'sizeof', 'count', '返回值', '相同', 'array', 'count', 'values', '用法', '不同', '返回', '统计', '数目', 'php', 'array', 'array', 'hello', 'world', 'hello', 'print', 'array', 'count', 'values', 'array', '结果', 'array', 'hello', 'world', '17', '键值', '关联', '数组', '每个', '元素', '建立', '一个', '变量', 'extract', 'int', 'extract', 'array', 'var', 'array', 'int', 'extract', 'type', 'extr', 'overwrite', 'string', 'prefix', 'null', '比如', '代码', 'php', 'suppose', 'that', 'var', 'array', 'is', 'an', 'array', 'returned', 'from', 'wddx', 'deserialize', 'size', 'large', 'var', 'array', 'array', 'color', 'blue', 'size', 'medium', 'shape', 'sphere', 'extract', 'var', 'array', 'extr', 'prefix', 'same', 'wddx', 'echo', 'color', 'size', 'shape', 'wddx', 'size', '结果', 'blue', 'large', 'sphere', 'medium', '可以', '看出', '意思', '作为', '变量名', '新建', '变量', '为了', '防止', '冲突', '设定', '第二个', '第三个', '参数', '用于', '处理', '冲突', '第三个', '参数', '指定', '新建', '变量', '前缀', '18', '小结', '数组', 'php', '超级', '本章', '主要', '数组', '进行', '概念', '定义', 'foreach', 'each', 'list', '遍历', '方法', 'array', 'walk', '回调', '使用', '打乱', '排序', '抽取', '各种', '数组', '操作']","[[-2.32396212e-01 -1.16080670e-01  2.47079309e-01  1.05376539e-01
   3.41304589e-01 -3.58470605e-01 -2.02587424e-01  4.89809938e-01
  -5.76230199e-03 -5.47629010e-02 -2.70145261e-02 -3.30076929e-01
  -1.92239179e-01  6.34728667e-01  1.99766130e-01 -8.64590577e-02
  -1.63150166e-01  5.10838051e-03 -1.37050386e-01 -5.62538801e-01
  -1.36917179e-02  2.26037898e-01 -5.30663009e-03 -1.16992952e-01
   1.21476117e-01 -5.66828900e-01 -3.01736812e-01  8.14297393e-02
  -2.43693296e-01 -5.36484599e-02  2.25360052e-01 -3.41948064e-02
  -6.18845329e-03 -1.54175463e-01 -1.26736735e-01  3.13667993e-01
  -1.61494937e-01 -2.35017056e-01  1.26255463e-01 -8.18032635e-01
  -2.18321208e-01 -6.49543699e-01 -7.47638303e-02 -4.93664751e-02
  -1.74160398e-01 -1.94793865e-01 -2.12274600e-01  4.40602109e-01
  -2.49829847e-01  4.89273002e-01  2.19749458e-01 -2.66402899e-01
  -1.74544942e-01 -1.87763384e-01  7.22575852e-02  4.03018393e-01
   2.30725231e-01 -8.44747433e-02  8.89836460e-02 -1.43799263e-01
   4.15013057e-02  2.99220535e-01  2.72677572e-02  1.22147001e-01
  -3.93028516e-01 -3.44323005e-04  8.36304199e-02 -5.91081374e-02
  -2.95958849e-01  4.72591695e-01  1.77629543e-01 -2.48704505e-01
   3.93756201e-01 -3.29246978e-01  5.78000322e-01  2.19298746e-01
   1.35139904e-01 -1.31262241e-01 -3.30268343e-01 -1.63846948e-01
  -8.91138030e-03  1.11694389e-02 -8.28429307e-02  3.42455266e-01
  -3.84246181e-01  2.31190112e-01 -3.17863699e-01  4.17823411e-01
   4.85472533e-01  1.41868940e-01  3.32272291e-01  1.21893816e-01
   3.93621941e-01  2.06535285e-01  2.04401665e-01  3.48828231e-01
   1.03394420e-01 -3.50448696e-01 -1.34349473e-01 -1.25998244e-01]]"
600,PHP字符串函数、知识要点总结,"主要包括以下方面：字符串的格式化字符串的连接与分割字符串的比较使用字符串函数匹配和替换子字符串使用正则表达式（下一篇文章专门总结）1、字符串的格式化：chop(rtrim)、ltrim、和trim用来清理字符串的空格，如果要将字符串存入文件或者数据库，或者与其它字符串进行比较，就需要先清理空格。 例如：$name = trime($_POST['name']); string trim ( string $str [, string $charlist ] )  //函数trim的原型 trim函数默认是去除空格的，但是第二个参数可以指定一个需要过滤的字符列表，例如： $trimmed = trim($hello, 'HdWr');2、使用HTML格式化：nl2br()函数，以便显示该函数将字符串中的换行符替换成HTML的<br>，以便在浏览器中显示 3、有三个格式化字符串函数print、printf、sprintf以便显示int print ( string $arg );//和echo()相同，只不过有返回值（true表示成功）int printf ( string $format [, mixed $args [, mixed $... ]] );//将格式化的字符串输出到浏览器string sprintf ( string $format [, mixed $args [, mixed $... ]] );//返回一个格式化了的字符串（内存格式化字符串）使用printf和sprintf可以完全替代number_format，比如格式字符串中用%.2f，可以格式化2位小数 格式化字符串的格式： %['填充字符][-][宽度][.精度]类型 如果想打印%，需要使用“%%”转换；填充字符：可选，用来填充变量直至所指定的宽度；默认为空格，如果指定了空格或者0就不需要'作为前缀；否则就加上'作为前缀字符-：可选，指明左对齐，还是默认的右对齐宽度：指定被替换的变量有多长的空间精度：必须前面带个小数点，指定小数点后面需要显示的位数以下是格式化的类型码：类型意义b解释为整数，并作为二进制输出c解释为整数，并作为字符输出d解释为整数，并作为小数输出f解释为双精度，并作为浮点数输出o解释为整数，并作为八进制输出s解释为字符串，并作为字符串输出u解释为整数，并作为非指定小数输出x解释为整数，并作为带有小写字母a~f的十六进制输出X解释为整数，并作为带有小写字母A~F的十六进制输出注意：参数顺序和转换说明顺序不一定相同，比如%2\$.2f，就是用列表的第二个参数来替换该格式码 有更好用的两个函数，它不接受参数列表，而是接受一个数组：int vprintf ( string $format , array $args )string vsprintf ( string $format , array $args )比如：<?phpprint vsprintf(""%04d-%02d-%02d"", explode('-', '1988-8-1')); // 1988-08-01?> 4、改变字符串中的字母大小写strtoupper($str)：将字符串转换成大写strtolower($str)：将字符串转换成小写ucfirst($str)：如果字符串第一个字符是字母，将该字符转为大写ucwords($str)：将字符串每个单词的第一个字母转换为大写5、格式化字符串以便存储：addslashes()和stripslashes()如果将字符串存入数据库，以下几个字符串中的字符会被解释成控制符，从而引发问题：引号：双引号和单引号反斜杠(\)NULL字符解决方法，是在这三类字符前面，加上转义字符\，变成了[\"", \', \\, \NULL] PHP提供了两个专门用于转义字符串的函数：string addslashes ( string $str )//为特殊字符加上转义字符\ string stripcslashes ( string $str )//与前者想法，它去掉转义字符比如：<?php$str = ""Is your name O'reilly?"";// Outputs: Is your name O\'reilly?echo addslashes($str);?> 注意：如果服务器开启了magic_quotes_gpc选项，GET、POST和COOKIE数组的变量自动被包括在引号内，显示的时候如果不正常，可以用stripcslashes 去掉引号就可以了。可以用get_magic_quotes_gpc()函数来检查该变量是否被打开。6、使用函数explode()、implode()和join()array explode ( string $delimiter , string $string [, int $limit ] )该函数使用定界符分割字符串，返回子字符串的数组，limit限制分成字符串块的数量<?php$str = 'one|two|three|four';// positive limitprint_r(explode('|', $str, 2));// negative limit (since PHP 5.1)print_r(explode('|', $str, -1));?> 结果：Array(    [0] => one    [1] => two|three|four)Array(    [0] => one    [1] => two    [2] => three) 而implode和join完成同样的功能，就是提供一个定界符，把数组合并成一个字符串：string implode ( string $glue , array $pieces )例如：<?php$array = array('lastname', 'email', 'phone');$comma_separated = implode("","", $array);echo $comma_separated; // lastname,email,phone// Empty string when using an empty array:var_dump(implode('hello', array())); // string(0) """"?> 7、strtok()每次根据分隔符取出一个字符串（挨个处理）string strtok ( string $str , string $token )分隔符可以使字符串或者字符，如果是字符串，也当成字符的组合来处理：<?php$string = ""This is\tan example\nstring"";/* Use tab and newline as tokenizing characters as well  */$tok = strtok($string, "" \n\t"");while ($tok !== false) {    echo ""Word=$tok<br />"";    $tok = strtok("" \n\t"");}?> 注意：分割是根据字符来进行，而不是字符串8、使用substr()函数获得字符串的子字符串string substr ( string $string , int $start [, int $length ] )如果没有length，start为正则返回从start开始到末尾的字符串，为负则取得字符串末尾的start个字符如果length为正，则指明个数；如果为负则指明截取的子串到字符串末尾往前数length个字符有点解释不清楚，下面有例子，一看就明白了：$rest = substr(""abcdef"", -1);    // returns ""f""$rest = substr(""abcdef"", -2);    // returns ""ef""$rest = substr(""abcdef"", -3, 1); // returns ""d""$rest = substr(""abcdef"", 0, -1);  // returns ""abcde""$rest = substr(""abcdef"", 2, -1);  // returns ""cde""$rest = substr(""abcdef"", 4, -4);  // returns false$rest = substr(""abcdef"", -3, -1); // returns ""de""echo substr('abcdef', 1);     // bcdefecho substr('abcdef', 1, 3);  // bcdecho substr('abcdef', 0, 4);  // abcdecho substr('abcdef', 0, 8);  // abcdefecho substr('abcdef', -1, 1); // f 9、字符串的比较和长度strcmp，若str1等于str2返回0，若str1>str2返回正数，若str1<str2返回负数，注意，不一定是正负1int strcmp ( string $str1 , string $str2 )strcasecmp的用法和strcmp一模一样，只不过它不计大小写int strcasecmp ( string $str1 , string $str2 )strnatcmp 和strncasecmp 是按照自然排序进行的，比如strcmp中2>12，但是这里2<12int strnatcmp ( string $str1 , string $str2 ) int strncasecmp ( string $str1 , string $str2 , int $len )strlen返回给定字符串的长度int strlen ( string $string )10、查找字符串(子串非位置)：strstr、strchr、strrchr和stristrstrstr()和strchr()在PHP中完全相同，这两个函数区分大小写，可用于字符或者字符串string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )第三个参数如果为TRUE，返回找到的串前面的部分；默认返回后面的部分；找不到返回false;<?php$email  = 'name@example.com';$domain = strstr($email, '@');echo $domain; // prints @example.com$user = strstr($email, '@', true); // As of PHP 5.3.0echo $user; // prints name?> stristr和strstr()使用方法一模一样，只是不管大小写strrchr()和strstr()几乎一样，只是会从最后出现目标关键字位置的前面返回被搜索字符串string strrchr ( string $haystack , mixed $needle )// get last directory in $PATH$dir = substr(strrchr($PATH, "":""), 1);  11、查找子字符串的位置：strpos()、strrpos()函数strpos()和strrpos()和strstr()类似，但是返回的不是子字符串，而是返回字符串在目标串的位置。int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )如果offset为非0，那么就会从offset开始的地方开始搜索子串，注意，因为找不到会返回false，这和PHP的0是相等的，也就是第一个字符，因此比较的时候，要用全比较===：<?php$mystring = 'abc';$findme   = 'a';$pos = strpos($mystring, $findme);// Note our use of ===.  Simply == would not work as expected// because the position of 'a' was the 0th (first) character.if ($pos === false) {    echo ""The string '$findme' was not found in the string '$mystring'"";} else if ($pos !== false){    echo ""The string '$findme' was found in the string '$mystring'"";    echo "" and exists at position $pos"";}?> strrpos和strpos()一样，只是返回的是查找串在目标串的最后出现的位置12、字符串的替换str_replace和substr_replacemixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )功能：用replace替换subject中所有的search，并返回subject替换后的结果第四个参数count，表示要执行的替换操作的次数，是回调变量，被传回使用注意，前三个参数，都可以传入数组。传入搜索的数组，传入替换数组，传入目标字符串数组，返回的是替换后的数组<?php// Provides: <body text='black'>$bodytag = str_replace(""%body%"", ""black"", ""<body text='%body%'>"");// Provides: Hll Wrld f PHP$vowels = array(""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""I"", ""O"", ""U"");$onlyconsonants = str_replace($vowels, """", ""Hello World of PHP"");// Provides: You should eat pizza, beer, and ice cream every day$phrase  = ""You should eat fruits, vegetables, and fiber every day."";$healthy = array(""fruits"", ""vegetables"", ""fiber"");$yummy   = array(""pizza"", ""beer"", ""ice cream"");$newphrase = str_replace($healthy, $yummy, $phrase);// Provides: 2$str = str_replace(""ll"", """", ""good golly miss molly!"", $count);echo $count;?> mixed substr_replace ( mixed $string , mixed $replacement , mixed $start [, mixed $length ] )该函数，将从start开始的length个字符，替换成replacement<?php$var = 'ABCDEFGH:/MNRPQR/';echo ""Original: $var<hr />\n"";/* 下面两个替换，将整个串替换成bob */echo substr_replace($var, 'bob', 0) . ""<br />\n"";echo substr_replace($var, 'bob', 0, strlen($var)) . ""<br />\n"";/* 下面的例子相当于插入了bob在字符串的开始 */echo substr_replace($var, 'bob', 0, 0) . ""<br />\n"";/* 以下两个替换了'MNRPQR'成bob */echo substr_replace($var, 'bob', 10, -1) . ""<br />\n"";echo substr_replace($var, 'bob', -7, -1) . ""<br />\n"";/* 相当于删除了'MNRPQR' */echo substr_replace($var, '', 10, -1) . ""<br />\n"";?> ","['php', '字符串', '函数', '知识', '要点', '总结', '主要', '包括', '以下', '方面', '字符串', '格式化', '字符串', '连接', '分割', '字符串', '比较', '使用', '字符串', '函数', '匹配', '替换', '字符串', '使用', '正则表达式', '一篇', '文章', '专门', '总结', '字符串', '格式化', 'chop', 'rtrim', 'ltrim', 'trim', '用来', '清理', '字符串', '空格', '如果', '字符串', '存入', '文件', '或者', '数据库', '或者', '其它', '字符串', '进行', '比较', '需要', '清理', '空格', '例如', 'name', 'trime', 'post', 'name', 'string', 'trim', 'string', 'str', 'string', 'charlist', '函数', 'trim', '原型', 'trim', '函数', '默认', '去除', '空格', '但是', '第二个', '参数', '可以', '指定', '一个', '需要', '过滤', '字符', '列表', '例如', 'trimmed', 'trim', 'hello', 'hdwr', '使用', 'html', '格式化', 'nl2br', '函数', '以便', '显示', '函数', '字符串', '换行符', '替换成', 'html', 'br', '以便', '浏览器', '显示', '三个', '格式化', '字符串', '函数', 'print', 'printf', 'sprintf', '以便', '显示', 'int', 'print', 'string', 'arg', 'echo', '相同', '只不过', '返回值', 'true', '表示', '成功', 'int', 'printf', 'string', 'format', 'mixed', 'args', 'mixed', '...', '格式化', '字符串', '输出', '浏览器', 'string', 'sprintf', 'string', 'format', 'mixed', 'args', 'mixed', '...', '返回', '一个', '格式化', '字符串', '内存', '格式化', '字符串', '使用', 'printf', 'sprintf', '可以', '完全', '替代', 'number', 'format', '比如', '格式', '字符串', '中用', '%.', '2f', '可以', '格式化', '小数', '格式化', '字符串', '格式', '填充', '字符', '宽度', '精度', '类型', '如果', '打印', '需要', '使用', '%%', '转换', '填充', '字符', '用来', '填充', '变量', '直至', '指定', '宽度', '默认', '空格', '如果', '指定', '空格', '或者', '需要', '作为', '前缀', '否则', '加上', '作为', '前缀', '字符', '指明', '对齐', '还是', '默认', '对齐', '宽度', '指定', '替换', '变量', '多长', '空间', '精度', '必须', '前面', '带个', '小数点', '指定', '小数点', '后面', '需要', '显示', '位数', '以下', '格式化', '类型', '类型', '意义', '解释', '整数', '作为', '二进制', '输出', '解释', '整数', '作为', '字符', '输出', '解释', '整数', '作为', '小数', '输出', '解释', '精度', '作为', '浮点数', '输出', '解释', '整数', '作为', '八进制', '输出', '解释', '字符串', '作为', '字符串', '输出', '解释', '整数', '作为', '指定', '小数', '输出', '解释', '整数', '作为', '带有', '小写字母', '十六进制', '输出', '解释', '整数', '作为', '带有', '小写字母', '十六进制', '输出', '注意', '参数', '顺序', '转换', '说明', '顺序', '一定', '相同', '比如', '2f', '就是', '列表', '第二个', '参数', '替换', '格式', '更好', '两个', '函数', '接受', '参数', '列表', '而是', '接受', '一个', '数组', 'int', 'vprintf', 'string', 'format', 'array', 'args', 'string', 'vsprintf', 'string', 'format', 'array', 'args', '比如', 'phpprint', 'vsprintf', '04d', '-%', '02d', '-%', '02d', 'explode', '1988', '1988', '08', '01', '改变', '字符串', '字母', '大小写', 'strtoupper', 'str', '字符串', '转换成', '大写', 'strtolower', 'str', '字符串', '转换成', '小写', 'ucfirst', 'str', '如果', '字符串', '第一个', '字符', '字母', '字符', '转为', '大写', 'ucwords', 'str', '字符串', '每个', '单词', '第一个', '字母', '转换', '大写', '格式化', '字符串', '以便', '存储', 'addslashes', 'stripslashes', '如果', '字符串', '存入', '数据库', '以下', '几个', '字符串', '字符', '解释', '控制符', '从而', '引发', '问题', '引号', '双引号', '单引号', '斜杠', 'null', '字符', '解决', '方法', '这三类', '字符', '前面', '加上', '转义字符', '变成', 'null', 'php', '提供', '两个', '专门', '用于', '转义', '字符串', '函数', 'string', 'addslashes', 'string', 'str', '特殊字符', '加上', '转义字符', 'string', 'stripcslashes', 'string', 'str', '前者', '想法', '去掉', '转义字符', '比如', 'php', 'str', 'is', 'your', 'name', 'reilly', 'outputs', 'is', 'your', 'name', 'reilly', 'echo', 'addslashes', 'str', '注意', '如果', '服务器', '开启', 'magic', 'quotes', 'gpc', '选项', 'get', 'post', 'cookie', '数组', '变量', '自动', '包括', '引号', '显示', '时候', '如果', '正常', '可以', 'stripcslashes', '去掉', '引号', '可以', '可以', 'get', 'magic', 'quotes', 'gpc', '函数', '检查', '变量', '是否', '打开', '使用', '函数', 'explode', 'implode', 'join', 'array', 'explode', 'string', 'delimiter', 'string', 'string', 'int', 'limit', '函数', '使用', '定界符', '分割', '字符串', '返回', '字符串', '数组', 'limit', '限制', '分成', '字符串', '数量', 'php', 'str', 'one', 'two', 'three', 'four', 'positive', 'limitprint', 'explode', 'str', 'negative', 'limit', 'since', 'php', '5.1', 'print', 'explode', 'str', '结果', 'array', 'one', 'two', 'three', 'four', 'array', 'one', 'two', 'three', 'implode', 'join', '完成', '同样', '功能', '就是', '提供', '一个', '定界符', '数组', '合并', '一个', '字符串', 'string', 'implode', 'string', 'glue', 'array', 'pieces', '例如', 'php', 'array', 'array', 'lastname', 'email', 'phone', 'comma', 'separated', 'implode', 'array', 'echo', 'comma', 'separated', 'lastname', 'email', 'phone', 'empty', 'string', 'when', 'using', 'an', 'empty', 'array', 'var', 'dump', 'implode', 'hello', 'array', 'string', 'strtok', '每次', '根据', '分隔符', '取出', '一个', '字符串', '挨个', '处理', 'string', 'strtok', 'string', 'str', 'string', 'token', '分隔符', '可以', '字符串', '或者', '字符', '如果', '字符串', '当成', '字符', '组合', '处理', 'php', 'string', 'this', 'is', 'tan', 'example', 'nstring', 'use', 'tab', 'and', 'newline', 'as', 'tokenizing', 'characters', 'as', 'well', 'tok', 'strtok', 'string', 'while', 'tok', 'false', 'echo', 'word', 'tok', 'br', 'tok', 'strtok', '注意', '分割', '根据', '字符', '进行', '不是', '字符串', '使用', 'substr', '函数', '获得', '字符串', '字符串', 'string', 'substr', 'string', 'string', 'int', 'start', 'int', 'length', '如果', '没有', 'length', 'start', '正则', '返回', 'start', '开始', '末尾', '字符串', '负则', '取得', '字符串', '末尾', 'start', '个字符', '如果', 'length', '指明', '个数', '如果', '负则', '指明', '截取', '子串', '字符串', '末尾', '往前', 'length', '个字符', '有点', '解释', '清楚', '下面', '例子', '一看', '明白', 'rest', 'substr', 'abcdef', 'returns', 'rest', 'substr', 'abcdef', 'returns', 'ef', 'rest', 'substr', 'abcdef', 'returns', 'rest', 'substr', 'abcdef', 'returns', 'abcde', 'rest', 'substr', 'abcdef', 'returns', 'cde', 'rest', 'substr', 'abcdef', 'returns', 'false', 'rest', 'substr', 'abcdef', 'returns', 'de', 'echo', 'substr', 'abcdef', 'bcdefecho', 'substr', 'abcdef', 'bcdecho', 'substr', 'abcdef', 'abcdecho', 'substr', 'abcdef', 'abcdefecho', 'substr', 'abcdef', '字符串', '比较', '长度', 'strcmp', 'str1', '等于', 'str2', '返回', 'str1', 'str2', '返回', '正数', 'str1', 'str2', '返回', '负数', '注意', '一定', '正负', '1int', 'strcmp', 'string', 'str1', 'string', 'str2', 'strcasecmp', '用法', 'strcmp', '一模一样', '只不过', '不计', '大小写', 'int', 'strcasecmp', 'string', 'str1', 'string', 'str2', 'strnatcmp', 'strncasecmp', '按照', '自然', '排序', '进行', '比如', 'strcmp', '12', '但是', '这里', '12int', 'strnatcmp', 'string', 'str1', 'string', 'str2', 'int', 'strncasecmp', 'string', 'str1', 'string', 'str2', 'int', 'len', 'strlen', '返回', '给定', '字符串', '长度', 'int', 'strlen', 'string', 'string', '10', '查找', '字符串', '子串', '位置', 'strstr', 'strchr', 'strrchr', 'stristrstrstr', 'strchr', 'php', '完全相同', '两个', '函数', '区分', '大小写', '用于', '字符', '或者', '字符串', 'string', 'strstr', 'string', 'haystack', 'mixed', 'needle', 'bool', 'before', 'needle', 'false', '第三个', '参数', '如果', 'true', '返回', '找到', '前面', '部分', '默认', '返回', '后面', '部分', '不到', '返回', 'false', 'php', 'email', 'name', 'example', 'com', 'domain', 'strstr', 'email', 'echo', 'domain', 'prints', 'example', 'com', 'user', 'strstr', 'email', 'true', 'as', 'of', 'php', '5.3', '0echo', 'user', 'prints', 'name', 'stristr', 'strstr', '使用', '方法', '一模一样', '只是', '不管', '大小写', 'strrchr', 'strstr', '几乎', '一样', '只是', '最后', '出现', '目标', '关键字', '位置', '前面', '返回', '搜索', '字符串', 'string', 'strrchr', 'string', 'haystack', 'mixed', 'needle', 'get', 'last', 'directory', 'in', 'path', 'dir', 'substr', 'strrchr', 'path', '11', '查找', '字符串', '位置', 'strpos', 'strrpos', '函数', 'strpos', 'strrpos', 'strstr', '类似', '但是', '返回', '不是', '字符串', '而是', '返回', '字符串', '目标', '位置', 'int', 'strpos', 'string', 'haystack', 'mixed', 'needle', 'int', 'offset', '如果', 'offset', '那么', 'offset', '开始', '地方', '开始', '搜索', '子串', '注意', '因为', '不到', '返回', 'false', 'php', '相等', '就是', '第一个', '字符', '因此', '比较', '时候', '要用', '比较', 'php', 'mystring', 'abc', 'findme', 'pos', 'strpos', 'mystring', 'findme', 'note', 'our', 'use', 'of', 'simply', 'would', 'not', 'work', 'as', 'expected', 'because', 'the', 'position', 'of', 'was', 'the', '0th', 'first', 'character', 'if', 'pos', 'false', 'echo', 'the', 'string', 'findme', 'was', 'not', 'found', 'in', 'the', 'string', 'mystring', 'else', 'if', 'pos', 'false', 'echo', 'the', 'string', 'findme', 'was', 'found', 'in', 'the', 'string', 'mystring', 'echo', 'and', 'exists', 'at', 'position', 'pos', 'strrpos', 'strpos', '一样', '只是', '返回', '查找', '目标', '最后', '出现', '位置', '12', '字符串', '替换', 'str', 'replace', 'substr', 'replacemixed', 'str', 'replace', 'mixed', 'search', 'mixed', 'replace', 'mixed', 'subject', 'int', 'count', '功能', 'replace', '替换', 'subject', '所有', 'search', '返回', 'subject', '替换', '结果', '第四个', '参数', 'count', '表示', '执行', '替换', '操作', '次数', '回调', '变量', '传回', '使用', '注意', '三个', '参数', '可以', '传入', '数组', '传入', '搜索', '数组', '传入', '替换', '数组', '传入', '目标', '字符串', '数组', '返回', '替换', '数组', 'php', 'provides', 'body', 'text', 'black', 'bodytag', 'str', 'replace', 'body%', 'black', 'body', 'text', 'body%', 'provides', 'hll', 'wrld', 'php', 'vowels', 'array', 'onlyconsonants', 'str', 'replace', 'vowels', 'hello', 'world', 'of', 'php', 'provides', 'you', 'should', 'eat', 'pizza', 'beer', 'and', 'ice', 'cream', 'every', 'day', 'phrase', 'you', 'should', 'eat', 'fruits', 'vegetables', 'and', 'fiber', 'every', 'day', 'healthy', 'array', 'fruits', 'vegetables', 'fiber', 'yummy', 'array', 'pizza', 'beer', 'ice', 'cream', 'newphrase', 'str', 'replace', 'healthy', 'yummy', 'phrase', 'provides', 'str', 'str', 'replace', 'll', 'good', 'golly', 'miss', 'molly', 'count', 'echo', 'count', 'mixed', 'substr', 'replace', 'mixed', 'string', 'mixed', 'replacement', 'mixed', 'start', 'mixed', 'length', '函数', 'start', '开始', 'length', '个字符', '替换成', 'replacement', 'php', 'var', 'abcdefgh', 'mnrpqr', 'echo', 'original', 'var', 'hr', '下面', '两个', '替换', '整个', '替换成', 'bob', 'echo', 'substr', 'replace', 'var', 'bob', 'br', 'echo', 'substr', 'replace', 'var', 'bob', 'strlen', 'var', 'br', '下面', '例子', '相当于', '插入', 'bob', '字符串', '开始', 'echo', 'substr', 'replace', 'var', 'bob', 'br', '以下', '两个', '替换', 'mnrpqr', 'bob', 'echo', 'substr', 'replace', 'var', 'bob', '10', 'br', 'echo', 'substr', 'replace', 'var', 'bob', 'br', '相当于', '删除', 'mnrpqr', 'echo', 'substr', 'replace', 'var', '10', 'br']","[[-0.2208399  -0.10224343  0.26130195  0.09025996  0.3109787  -0.35653222
  -0.14885269  0.46063761 -0.0406992  -0.10852494 -0.01906909 -0.36010523
  -0.15255123  0.55513848  0.18276558 -0.09203929 -0.13903429 -0.00650954
  -0.0991038  -0.56084223 -0.04497415  0.23280499 -0.03826947 -0.17100899
   0.08077339 -0.49055097 -0.29532761  0.05026348 -0.24632561 -0.0717671
   0.16433483 -0.03418388  0.0045689  -0.13247025 -0.14962387  0.30769754
  -0.18878162 -0.26474584  0.09427323 -0.76006443 -0.17880623 -0.62319697
  -0.0884325  -0.01377134 -0.14620853 -0.22610997 -0.2023872   0.36211431
  -0.22812861  0.49143066  0.17634056 -0.25626806 -0.15775245 -0.16132527
   0.01349114  0.38279653  0.16617112 -0.10060863  0.09957724 -0.15069417
   0.06843703  0.25169201  0.02396658  0.09868823 -0.38465543  0.03398601
   0.07226704 -0.05547137 -0.30780094  0.43471705  0.14269916 -0.19105319
   0.37610825 -0.30957729  0.54659353  0.26407342  0.11242271 -0.14495015
  -0.3380094  -0.11560148  0.01719501  0.04023158 -0.10175828  0.35514312
  -0.33553651  0.22497469 -0.29507152  0.42808945  0.47720454  0.15668835
   0.26657174  0.11317384  0.37924224  0.1934405   0.1927908   0.31909373
   0.12330257 -0.34313995 -0.096028   -0.13650555]]"
604,Windows Live Writer快捷方式（打开服务器文档等）,在 Windows Live Writer 中，仅使用键盘即可执行很多常见任务。 1、用于日志的快捷方式 创建新日志Ctrl+N 创建新页面Ctrl+G 打开日志Ctrl+O：可以打开服务器端的文章 保存日志Ctrl+S 发布日志Ctrl+Shift+P 将草稿发布到日志Ctrl+Shift+D插入超链接Ctrl+K 从计算机添加图片Ctrl+J 从网页添加图片Ctrl+Shift+J 查看日志属性F2 设置类别Ctrl+Shift+C 更新日志主题Ctrl+F11 更改为编辑视图F11 更改为预览视图F12 更改为源视图Shift+F11 2、文本格式快捷方式 加粗Ctrl+B 斜体Ctrl+I 删除线Ctrl+H 下划线Ctrl+U 下标Ctrl+= 上标Ctrl+Shift+= 项目符号Ctrl+Shift+L 清除格式Ctrl+空格键 居中文本Ctrl+E 文本左对齐Ctrl+L 文本右对齐Ctrl+R 新建段落Ctrl+Shift+N 标题 1Ctrl+Alt+1 标题 2Ctrl+Alt+2 标题 3Ctrl+Alt+3 标题 4Ctrl+Alt+4 标题 5Ctrl+Alt+5 标题 6Ctrl+Alt+6 将文字方向设置为从左到右（仅适用于 RTL 模式）Ctrl+左 Shift 键 将文字方向设置为从右到左（仅适用于 RTL 模式）Ctrl+右 Shift 键 3、常规快捷方式 剪切Ctrl+X 复制Ctrl+C 粘贴Ctrl+V 选择性粘贴Ctrl+Alt+V 全选Ctrl+A 查找Ctrl+F 撤消Ctrl+Z 恢复Ctrl+Y 打印Ctrl+P 显示或隐藏功能区Ctrl+F1 获取有关 Writer 的帮助F1,"['windows', 'live', 'writer', '快捷方式', '打开', '服务器', '文档', 'windows', 'live', 'writer', '使用', '键盘', '即可', '执行', '很多', '常见', '任务', '用于', '日志', '快捷方式', '创建', '日志', 'ctrl', '创建', '新页面', 'ctrl', '打开', '日志', 'ctrl', '可以', '打开', '服务器端', '文章', '保存', '日志', 'ctrl', '发布', '日志', 'ctrl', 'shift', '草稿', '发布', '日志', 'ctrl', 'shift', '插入', '超链接', 'ctrl', '计算机', '添加', '图片', 'ctrl', '网页', '添加', '图片', 'ctrl', 'shift', '查看', '日志', '属性', 'f2', '设置', '类别', 'ctrl', 'shift', '更新', '日志', '主题', 'ctrl', 'f11', '改为', '编辑', '视图', 'f11', '改为', '预览', '视图', 'f12', '改为', '视图', 'shift', 'f11', '文本格式', '快捷方式', '加粗', 'ctrl', '斜体', 'ctrl', '删除', 'ctrl', '下划线', 'ctrl', '下标', 'ctrl', '上标', 'ctrl', 'shift', '项目', '符号', 'ctrl', 'shift', '清除', '格式', 'ctrl', '空格键', '居中', '文本', 'ctrl', '文本', '对齐', 'ctrl', '文本', '对齐', 'ctrl', '新建', '段落', 'ctrl', 'shift', '标题', '1ctrl', 'alt', '标题', '2ctrl', 'alt', '标题', '3ctrl', 'alt', '标题', '4ctrl', 'alt', '标题', '5ctrl', 'alt', '标题', '6ctrl', 'alt', '文字', '方向', '设置', '从左到右', '适用', 'rtl', '模式', 'ctrl', 'shift', '文字', '方向', '设置', '从右到左', '适用', 'rtl', '模式', 'ctrl', 'shift', '常规', '快捷方式', '剪切', 'ctrl', '复制', 'ctrl', '粘贴', 'ctrl', '选择性', '粘贴', 'ctrl', 'alt', '全选', 'ctrl', '查找', 'ctrl', '撤消', 'ctrl', '恢复', 'ctrl', '打印', 'ctrl', '显示', '隐藏', '功能区', 'ctrl', 'f1', '获取', '有关', 'writer', '帮助', 'f1']","[[-0.22731374 -0.10974757  0.21082448  0.14782887  0.25246969 -0.31006564
  -0.13223293  0.42111296 -0.02733436 -0.05383499 -0.04685682 -0.31294007
  -0.13546739  0.49871886  0.13284963 -0.09361421 -0.13054516 -0.00071461
  -0.07169996 -0.41241977  0.01008462  0.22637013 -0.01861132 -0.11132439
   0.08056387 -0.45615413 -0.26114703  0.05872596 -0.17925359 -0.06449863
   0.18909782  0.02226583 -0.00703818 -0.11614332 -0.11810992  0.29526187
  -0.13892874 -0.20871984  0.09069841 -0.65648397 -0.13610785 -0.50233274
  -0.04903972 -0.05511751 -0.14002107 -0.14415581 -0.23573669  0.38271372
  -0.14656402  0.35600931  0.15131728 -0.24251128 -0.09657104 -0.19077701
   0.03380885  0.33696179  0.18801571 -0.06436625  0.09287637 -0.08986061
   0.05166489  0.2364435   0.01421567  0.07126533 -0.33769305  0.0053598
   0.04020425 -0.01199663 -0.21913765  0.3780522   0.10677724 -0.19257476
   0.3429225  -0.29251493  0.49051242  0.17198215  0.16746667 -0.13156117
  -0.23519456 -0.16467943 -0.04405338  0.00968069 -0.07192509  0.30825776
  -0.3151968   0.17739088 -0.24896304  0.37711717  0.41433851  0.11670349
   0.24841124  0.11127661  0.31413742  0.17074148  0.1639092   0.3246824
   0.08800602 -0.25909573 -0.00138481 -0.08722072]]"
611,Redis详细完整教程-windows下的安装、测试(php+redis+mysql),"一、windows下的redis的安装windows下的redis的下载地址：http://code.google.com/p/servicestack/wiki/RedisWindowsDownload或者到我本人的网盘中下载(我只是增加了一个redis.conf文件，没有该文件得自己建): 进入下载页面解压后有以下几个文件：redis-server.exe：服务程序redis-check-dump.exe：本地数据库检查redis-check-aof.exe：更新日志检查redis-benchmark.exe：性能测试，用以模拟同时由N个客户端发送M个 SETs/GETs 查询运行需要redis的配置文件redis.conf，如没有指定，则使用默认设置开始运行redis:解压目录:\>redis-server.exe redis.conf运行一个客户端连接：解压目录:\>redis-cli.exe -h 127.0.0.1 -p 6379测试一下：$ ./redis-cli set mykey somevalueOK$ ./redis-cli get mykeysomevalue测试一下性能：D:\redis>redis-benchmark.exe -h 127.0.0.1 -p 6379 -n 100000 -c 50至此安装完毕，在客户端里面可以运行各种测试这里给大家推荐一个redis的管理工具：phpRedisAdmin（需要安装php的redis扩展，见第二步），一看就知道和phpmyadmin很像了，是部署在php环境下面的，给个phpRedisAdmin的下载地址（github)：进入下载页面二、安装PHP的redis扩展在windows下安装php的redis扩展非常简单,下载一个.dll扩展包放到php的ext目录下,在php.ini里边添加一行配置就可以了.这里提供php5.3版本的redis的php扩展压缩包（里面有个dll）:https://github.com/nicolasff/phpredis/downloads解压后把dll放到php的ext目录下,打开php.ini,增加一行:extension=php_redis.dll然后,重启apache或者nginx或者IIS就可以了.检测是否安装成功,可以打开phpinfo看下:三、PHP操作redis的简单测试确认我们已经做好了以下几个步骤：我们已经安装了redis，并且用`redis-server.exe redis.conf`命令启动了redis服务器我们已经下载了php_redis.dll拷贝到了php的ext目录，并且在php.ini中添加了一行：''extension=php_redis.dll""，然后重启了WEB服务器然后我们运行下面的代码：<?phpecho 'phpredis sample:<br />';error_reporting(E_ALL);ini_set('display_errors','ON');//已经启用了php-redis扩展，因此这里可以直接使用Redis对象了$redis = new Redis();//进行连接$redis->connect('127.0.0.1',6379);//这里开始使用redis的功能，就是设置一下$redis->set('name1', 'www.51projob.com');$redis->set('name2', 'www.crazyant.com');echo ""通过get方法获取到键的值：<br>""    .$redis->get('name1').""<br>""    .$redis->get('name2');?>运行截图：其实获得了$redis对象，你就可以任意的执行所有的redis命令，这些包括官方redis手册的所有命令：官方手册四、redis+mysql实现缓存写入的简单尝试redis适用于缓存的，这里可以类似内存与磁盘的写回关系：以下是一个投票程序对redis的测试，当投票数到了50的时候，就可以将其写入到mysql：<?php/** *  * 缓存利用测试，这里我们获取传过来的投票数据，每次加1，如果增加到了设定值，才将投票 * 次数写回mysql，这大大减轻了与mysql链接的开销，redis的使用由此可见一斑 * @var unknown_type * @来自：www.crazyant.net和www.51projob.com *///获取投票的信息的ID$aid = isset($_GET['aid']) ? ereg_replace(""[^0-9]"", """", $_GET['aid']) : 0;//当前投票的数字，指的是在redis中的数据$this_click_num = 0;if($aid>2){    //设定写回的投票数的最大值，到了此值就写回mysql    $update_till_num = 50;        //创建redis对象    $r = new Redis();    $r->connect('127.0.0.1',6379);     //得到现在是第几个数据了    $this_click_num = $r->get('count_xin_newgame:'.$aid);    //点击数加1    $r->set('count_xin_newgame:'.$aid,$this_click_num+1);    if($this_click_num>=$update_till_num)    {        //如果点击数超过了设定数，那么就把数据写到mysql        if($this_click_num>$update_till_num)        require_once(dirname(__FILE__).""/db.php"");        //更新数据库        $db->ExecuteNoneQuery(            ""UPDATE `addonnewgame`                 SET `game_num` = game_num + '{$update_till_num}'                 WHERE `dede_addonnewgame`.`aid` ={$aid};""        );        //重置投票数目为0        $r->set('count_xin_newgame:'.$aid,0);    }    $r->setTimeout('count_xin_newgame:'.$aid,7*24*60*60);    exit($this_click_num);}?> 这里没有找到php-redis扩展的文档，官方的文档是一个php_redis.php的头文件，地址：https://github.com/ukko/phpredis-phpdoc我们只要把该php下载下来放到自己的项目里面，那么写代码的时候，可以直接看到注释了可以这样来设置一下eclipse:Setup in IDERight click your project -> ""Properties""Select the ""PHP Include Path"" categoryClick ""Add Folder...""Select your checkout of phpredis-phpdocClick ""Open""Click ""OK""","['redis', '详细', '完整', '教程', 'windows', '安装', '测试', 'php', 'redis', 'mysql', 'windows', 'redis', '安装', 'windows', 'redis', '下载', '地址', 'http', 'code', 'google', 'com', 'servicestack', 'wiki', 'rediswindowsdownload', '或者', '本人', '盘中', '下载', '只是', '增加', '一个', 'redis', 'conf', '文件', '没有', '文件', '自己', '进入', '下载', '页面', '解压', '以下', '几个', '文件', 'redis', 'server', 'exe', '服务程序', 'redis', 'check', 'dump', 'exe', '本地', '数据库', '检查', 'redis', 'check', 'aof', 'exe', '更新', '日志', '检查', 'redis', 'benchmark', 'exe', '性能', '测试', '用以', '模拟', '同时', '客户端', '发送', 'sets', 'gets', '查询', '运行', '需要', 'redis', '配置文件', 'redis', 'conf', '没有', '指定', '使用', '默认设置', '开始运行', 'redis', '解压', '目录', 'redis', 'server', 'exe', 'redis', 'conf', '运行', '一个', '客户端', '连接', '解压', '目录', 'redis', 'cli', 'exe', '127.0', '0.1', '6379', '测试', '一下', 'redis', 'cli', 'set', 'mykey', 'somevalueok', 'redis', 'cli', 'get', 'mykeysomevalue', '测试', '一下', '性能', 'redis', 'redis', 'benchmark', 'exe', '127.0', '0.1', '6379', '100000', '50', '至此', '安装', '完毕', '客户端', '里面', '可以', '运行', '各种', '测试', '这里', '大家', '推荐', '一个', 'redis', '管理工具', 'phpredisadmin', '需要', '安装', 'php', 'redis', '扩展', '第二步', '一看', '知道', 'phpmyadmin', '部署', 'php', '环境', '下面', 'phpredisadmin', '下载', '地址', 'github', '进入', '下载', '页面', '安装', 'php', 'redis', '扩展', 'windows', '安装', 'php', 'redis', '扩展', '非常简单', '下载', '一个', 'dll', '扩展', '放到', 'php', 'ext', '目录', 'php', 'ini', '里边', '添加', '一行', '配置', '可以', '这里', '提供', 'php5.3', '版本', 'redis', 'php', '扩展', '压缩包', '里面', '有个', 'dll', 'https', 'github', 'com', 'nicolasff', 'phpredis', 'downloads', '解压', 'dll', '放到', 'php', 'ext', '目录', '打开', 'php', 'ini', '增加', '一行', 'extension', 'php', 'redis', 'dll', '然后', '重启', 'apache', '或者', 'nginx', '或者', 'iis', '可以', '检测', '是否', '安装', '成功', '可以', '打开', 'phpinfo', '看下', 'php', '操作', 'redis', '简单', '测试', '确认', '我们', '已经', '做好', '以下', '几个', '步骤', '我们', '已经', '安装', 'redis', '并且', 'redis', 'server', 'exe', 'redis', 'conf', '命令', '启动', 'redis', '服务器', '我们', '已经', '下载', 'php', 'redis', 'dll', '拷贝到', 'php', 'ext', '目录', '并且', 'php', 'ini', '添加', '一行', 'extension', 'php', 'redis', 'dll', '然后', '重启', 'web', '服务器', '然后', '我们', '运行', '下面', '代码', 'phpecho', 'phpredis', 'sample', 'br', 'error', 'reporting', 'all', 'ini', 'set', 'display', 'errors', 'on', '已经', '启用', 'php', 'redis', '扩展', '因此', '这里', '可以', '直接', '使用', 'redis', '对象', 'redis', 'new', 'redis', '进行', '连接', 'redis', 'connect', '127.0', '0.1', '6379', '这里', '开始', '使用', 'redis', '功能', '就是', '设置', '一下', 'redis', 'set', 'name1', 'www.51', 'projob', 'com', 'redis', 'set', 'name2', 'www', 'crazyant', 'com', 'echo', '通过', 'get', '方法', '获取', '到键', 'br', 'redis', 'get', 'name1', 'br', 'redis', 'get', 'name2', '运行', '截图', '其实', '获得', 'redis', '对象', '可以', '任意', '执行', '所有', 'redis', '命令', '这些', '包括', '官方', 'redis', '手册', '所有', '命令', '官方', '手册', 'redis', 'mysql', '实现', '缓存', '写入', '简单', '尝试', 'redis', '适用', '缓存', '这里', '可以', '类似', '内存', '磁盘', '关系', '以下', '一个', '投票', '程序', 'redis', '测试', '投票数', '50', '时候', '可以', '写入', 'mysql', 'php', '缓存', '利用', '测试', '这里', '我们', '获取', '传过来', '投票', '数据', '每次', '如果', '增加', '设定值', '投票', '次数', '写回', 'mysql', '大大', '减轻', 'mysql', '链接', '开销', 'redis', '使用', '由此', '可见一斑', 'var', 'unknown', 'type', '来自', 'www', 'crazyant', 'net', 'www.51', 'projob', 'com', '获取', '投票', '信息', 'id', 'aid', 'isset', 'get', 'aid', 'ereg', 'replace', 'get', 'aid', '当前', '投票', '数字', 'redis', '数据', 'this', 'click', 'num', 'if', 'aid', '设定', '投票数', '最大值', '此值', 'mysql', 'update', 'till', 'num', '50', '创建', 'redis', '对象', 'new', 'redis', 'connect', '127.0', '0.1', '6379', '得到', '现在', '第几个', '数据', 'this', 'click', 'num', 'get', 'count', 'xin', 'newgame', 'aid', '点击数', 'set', 'count', 'xin', 'newgame', 'aid', 'this', 'click', 'num', 'if', 'this', 'click', 'num', 'update', 'till', 'num', '如果', '点击数', '超过', '设定', '那么', '数据', '写到', 'mysql', 'if', 'this', 'click', 'num', 'update', 'till', 'num', 'require', 'once', 'dirname', '__', 'file', '__', 'db', 'php', '更新', '数据库', 'db', 'executenonequery', 'update', 'addonnewgame', 'set', 'game', 'num', 'game', 'num', 'update', 'till', 'num', 'where', 'dede', 'addonnewgame', 'aid', 'aid', '重置', '投票', '数目', 'set', 'count', 'xin', 'newgame', 'aid', 'settimeout', 'count', 'xin', 'newgame', 'aid', '24', '60', '60', 'exit', 'this', 'click', 'num', '这里', '没有', '找到', 'php', 'redis', '扩展', '文档', '官方', '文档', '一个', 'php', 'redis', 'php', '头文件', '地址', 'https', 'github', 'com', 'ukko', 'phpredis', 'phpdoc', '我们', '只要', 'php', '下载', '下来', '放到', '自己', '项目', '里面', '那么', '代码', '时候', '可以', '直接', '看到', '注释', '可以', '这样', '设置', '一下', 'eclipse', 'setup', 'in', 'ideright', 'click', 'your', 'project', 'properties', 'select', 'the', 'php', 'include', 'path', 'categoryclick', 'add', 'folder', '...', 'select', 'your', 'checkout', 'of', 'phpredis', 'phpdocclick', 'open', 'click', 'ok']","[[-0.25266407 -0.13727382  0.24060615  0.20543714  0.2620714  -0.36762381
  -0.14907323  0.49663201 -0.03859376 -0.06329755 -0.07355373 -0.36519667
  -0.1538342   0.56452125  0.13089103 -0.11671467 -0.14022592 -0.00386866
  -0.06036179 -0.45238109  0.00998892  0.26273653 -0.04119846 -0.14904278
   0.07631982 -0.50278316 -0.31355085  0.07198006 -0.21668794 -0.07860636
   0.21055798  0.06503734 -0.00715909 -0.12913814 -0.15943788  0.35758575
  -0.169071   -0.24182822  0.09117505 -0.72573041 -0.12845436 -0.56862537
  -0.0370526  -0.05108419 -0.14590364 -0.18987101 -0.29613352  0.43889614
  -0.12878169  0.39920404  0.15508781 -0.28740472 -0.06875601 -0.23392949
   0.02687984  0.40161462  0.19916233 -0.07015931  0.12004332 -0.10173983
   0.08864396  0.2532783   0.02343978  0.08056075 -0.37277895  0.01388233
   0.01959977  0.01312644 -0.23732441  0.44379196  0.10716822 -0.21063459
   0.40861495 -0.33129105  0.5761104   0.22736478  0.23263568 -0.16299156
  -0.26390386 -0.21223506 -0.0690015   0.02829233 -0.10277994  0.36997257
  -0.3827602   0.19865026 -0.28721314  0.45454593  0.50364748  0.15307813
   0.25887053  0.11587212  0.35082425  0.19134855  0.19175869  0.4101407
   0.09289775 -0.27619713  0.05302913 -0.10224978]]"
629,Redis+Mysql模式和内存+硬盘模式的异同,"学习任何新知识，都是一个循序渐进的过程，从刚开始的懵懂无知，到简单熟悉，然后突然的彻悟，成果让人欣喜若狂，心情也会快乐很久。 redis+mysql和内存+硬盘类似的地方 首先看图：  首先，我们知道，mysql是持久化存储，存放在磁盘里面，检索的话，会涉及到一定的IO，为了解决这个瓶颈，于是出现了缓存，比如现在用的最多的memcached(简称mc)。首先，用户访问mc，如果未命中，就去访问mysql，之后像内存和硬盘一样，把数据复制到mc一部分。 redis和mc都是缓存，并且都是驻留在内存中运行的，这大大提升了高数据量web访问的访问速度。然而mc只是提供了简单的数据结构，比如string存储；redis却提供了大量的数据结构，比如string、list、set、hashset、sorted set这些，这使得用户方便了好多，毕竟封装了一层实用的功能，同时实现了同样的效果，当然用redis而慢慢舍弃mc。 内存和硬盘的关系，硬盘放置主体数据用于持久化存储，而内存则是当前运行的那部分数据，CPU访问内存而不是磁盘，这大大提升了运行的速度，当然这是基于程序的局部化访问原理。 推理到redis+mysql，它是内存+磁盘关系的一个映射，mysql放在磁盘，redis放在内存，这样的话，web应用每次只访问redis，如果没有找到的数据，才去访问Mysql。 然而redis+mysql和内存+磁盘的用法最好是不同的。 redis+mysql和内存+硬盘运行模式是不同的 了解过内存和硬盘运行过程的同学，都知道他俩之间通过页面置换算法进行调度，也就是说每次是按块将数据从硬盘换入或者换出内存，比如硬盘有一个100G的文件，如果要读这个文件，内存中每次只放该文件10MB的一部分（图1中的小块就是这个意思）。 于是有人会猜测，mysql存储了100G的数据，用户访问mysql的时候，把10MB数据拷贝到redis，比如select一个id=1000的数据，那就把id=10到id=9999的数据放到redis，用于下次访问。可是关键在于mysql数据的访问，并不是文件这种局部性原理，不同的用户访问的是完全不同的东西，跟id的次序没有任何关系。 其实redis的强项也不在此，它擅长保存元数据类的数据，也就是说描述性的而不是数据本身 就此我假定了redis的几个应用场景，请大家批评指正：  存放计数器的数字 存放检索关键词的id列表（不放内容） 存放用户之间的follow关系（非用户信息） 存放简单的静态Html，而非所有的CSS和JS 总之发现，就是redis大量存放的是数据表的索引字段，如果刚好用到符合条件的信息，可以根据索引字段，再去mysql查找，比如搜索关键词""redis""，第一步我们去mysql获取redis相关的信息返回给用户，然后记录一个zset，将redis作为名字，将搜索到的每个Id以先后顺序存在里面，那么下次有人搜索""redis""，直接根据该列表去mysql找对应id的信息就行了，这已经大大提升了访问速度。 下图是一个检索的流程图：    由上是关于redis这一段的心得，希望大家批评指正，谢谢","['redis', 'mysql', '模式', '内存', '硬盘', '模式', '异同', '学习', '任何', '知识', '一个', '循序渐进', '过程', '从刚', '开始', '懵懂', '无知', '简单', '熟悉', '然后', '突然', '彻悟', '成果', '欣喜若狂', '心情', '快乐', 'redis', 'mysql', '内存', '硬盘', '类似', '地方', '首先', '首先', '我们', '知道', 'mysql', '持久', '存储', '存放', '磁盘', '里面', '检索', '的话', '涉及', '一定', 'io', '为了', '解决', '这个', '瓶颈', '于是', '出现', '缓存', '比如', '现在', 'memcached', '简称', 'mc', '首先', '用户', '访问', 'mc', '如果', '命中', '访问', 'mysql', '之后', '内存', '硬盘', '一样', '数据', '复制到', 'mc', '一部分', 'redis', 'mc', '缓存', '并且', '驻留', '内存', '运行', '大大', '提升', '数据量', 'web', '访问', '访问速度', '然而', 'mc', '只是', '提供', '简单', '数据结构', '比如', 'string', '存储', 'redis', '提供', '大量', '数据结构', '比如', 'string', 'list', 'set', 'hashset', 'sorted', 'set', '这些', '使得', '用户', '方便', '好多', '毕竟', '封装', '一层', '实用', '功能', '同时', '实现', '同样', '效果', '当然', 'redis', '慢慢', '舍弃', 'mc', '内存', '硬盘', '关系', '硬盘', '放置', '主体', '数据', '用于', '持久', '存储', '内存', '当前', '运行', '部分', '数据', 'cpu', '访问', '内存', '不是', '磁盘', '大大', '提升', '运行', '速度', '当然', '这是', '基于', '程序', '局部', '访问', '原理', '推理', 'redis', 'mysql', '内存', '磁盘', '关系', '一个', '映射', 'mysql', '放在', '磁盘', 'redis', '放在', '内存', '这样的话', 'web', '应用', '每次', '访问', 'redis', '如果', '没有', '找到', '数据', '访问', 'mysql', '然而', 'redis', 'mysql', '内存', '磁盘', '用法', '最好', '不同', 'redis', 'mysql', '内存', '硬盘', '运行', '模式', '不同', '了解', '内存', '硬盘', '运行', '过程', '同学', '知道', '他俩', '之间', '通过', '页面', '置换', '算法', '进行', '调度', '也就是说', '每次', '按块', '数据', '硬盘', '换入', '或者', '内存', '比如', '硬盘', '一个', '100g', '文件', '如果', '要读', '这个', '文件', '内存', '每次', '只放该', '文件', '10mb', '一部分', '小块', '就是', '这个', '意思', '于是', '有人', '猜测', 'mysql', '存储', '100g', '数据', '用户', '访问', 'mysql', '时候', '10mb', '数据', '拷贝到', 'redis', '比如', 'select', '一个', 'id', '1000', '数据', 'id', '10', 'id', '9999', '数据', '放到', 'redis', '用于', '次访问', '可是', '关键在于', 'mysql', '数据', '访问', '不是', '文件', '这种', '局部性', '原理', '不同', '用户', '访问', '完全', '不同', '东西', 'id', '次序', '没有', '任何', '关系', '其实', 'redis', '强项', '擅长', '保存', '数据', '数据', '也就是说', '描述性', '不是', '数据', '本身', '就此', '假定', 'redis', '几个', '应用', '场景', '大家', '批评指正', '存放', '计数器', '数字', '存放', '检索', '关键词', 'id', '列表', '内容', '存放', '用户', '之间', 'follow', '关系', '用户', '信息', '存放', '简单', '静态', 'html', '所有', 'css', 'js', '总之', '发现', '就是', 'redis', '大量', '存放', '数据表', '索引', '如果', '刚好', '用到', '符合条件', '信息', '可以', '根据', '索引', 'mysql', '查找', '比如', '搜索', '关键词', 'redis', '第一步', '我们', 'mysql', '获取', 'redis', '相关', '信息', '返回', '用户', '然后', '记录', '一个', 'zset', 'redis', '作为', '名字', '搜索', '每个', 'id', '先后顺序', '存在', '里面', '那么', '下次', '有人', '搜索', 'redis', '直接', '根据', '列表', 'mysql', '对应', 'id', '信息', '就行了', '已经', '大大', '提升', '访问速度', '下图', '一个', '检索', '流程图', '关于', 'redis', '一段', '心得', '希望', '大家', '批评指正', '谢谢']","[[-0.24955409 -0.14541829  0.20951301  0.1644393   0.30781727 -0.33538416
  -0.20290103  0.49753817  0.00590331 -0.00574012 -0.06953589 -0.31623853
  -0.19355286  0.61088084  0.14623548 -0.09737271 -0.15608112 -0.00269335
  -0.11415774 -0.45399217  0.04184757  0.23043411  0.01181798 -0.07726433
   0.13576077 -0.56521113 -0.28693365  0.09841842 -0.20287843 -0.05697817
   0.26126328  0.03665264 -0.02873439 -0.1485065  -0.09583346  0.3365048
  -0.12590595 -0.20668078  0.12134775 -0.77539308 -0.18298265 -0.58586251
  -0.02930233 -0.08077982 -0.17731935 -0.13005247 -0.26649807  0.49088605
  -0.18176977  0.38478614  0.22166542 -0.26893057 -0.11920528 -0.23422186
   0.08758651  0.38768147  0.26468501 -0.05115672  0.09240786 -0.0816315
   0.03022541  0.30060626  0.02800507  0.08880996 -0.38731432 -0.02586559
   0.04606381 -0.01426037 -0.23838249  0.44234517  0.16002656 -0.26397352
   0.39899234 -0.32447349  0.5765216   0.14520446  0.21296743 -0.12694121
  -0.27527077 -0.22651694 -0.08552973 -0.01006415 -0.05304172  0.32433839
  -0.38566806  0.21213153 -0.28865206  0.40115089  0.46049368  0.12311228
   0.33141774  0.12267657  0.36732678  0.19444129  0.1840137   0.37299146
   0.09274141 -0.30181046 -0.03050007 -0.08802588]]"
636,PHP100视频教程2012版解压密码,PHP100的奖惩确实非常好的，为了防止盗链，张老师设置了密码，可是让用金币买这就不行了，因为我虽然经常逛论坛，很少发帖啊网上搜了一下，真有提供密码的：PHP100教程2012版新浪微博开放平台，PHP微博账号登陆与网站同步第13讲解压密码1348-293-233-212PHP100教程2012版：第13讲CodeIgniter框架教程3视频解压密码：1931-223-133-223PHP100教程2012版：CodeIgniter框架教程（4）(第18讲)解压密码：2811-101-111-928感谢tim的提供：第17讲1931-223-133-223第18讲2811-101-111-928,"['php100', '视频教程', '2012', '解压密码', 'php100', '奖惩', '确实', '非常', '为了', '防止', '盗链', '张老师', '设置', '密码', '可是', '金币', '不行', '因为', '虽然', '经常', '论坛', '很少', '发帖', '网上', '一下', '真有', '提供', '密码', 'php100', '教程', '2012', '新浪', '微博', '开放平台', 'php', '微博', '账号', '登陆', '网站', '同步', '13', '解压密码', '1348', '293', '233', '212php100', '教程', '2012', '13', 'codeigniter', '框架', '教程', '视频', '解压密码', '1931', '223', '133', '223php100', '教程', '2012', 'codeigniter', '框架', '教程', '18', '解压密码', '2811', '101', '111', '928', '感谢', 'tim', '提供', '17', '1931', '223', '133', '223', '18', '2811', '101', '111', '928']","[[-0.17676806 -0.08301615  0.17017301  0.12735567  0.17974535 -0.25583778
  -0.09666217  0.3304245  -0.0279897  -0.04648488 -0.03900201 -0.25203349
  -0.10147378  0.39115841  0.09324994 -0.08208493 -0.09161449 -0.00655691
  -0.04367437 -0.31101659 -0.00129661  0.1815371  -0.02695144 -0.10381682
   0.05026249 -0.34635307 -0.20481148  0.04177132 -0.14076724 -0.04724625
   0.14757496  0.0286266  -0.0012001  -0.08341589 -0.09836228  0.23385461
  -0.11120709 -0.16808212  0.06430707 -0.50169223 -0.09337956 -0.39121767
  -0.03609885 -0.03808315 -0.10303974 -0.13175119 -0.19346135  0.28974193
  -0.10113691  0.28081513  0.10254091 -0.18880477 -0.06187519 -0.15547797
   0.01226661  0.2707657   0.13387144 -0.05642349  0.07678653 -0.07394638
   0.05489107  0.17772634  0.01039197  0.05372469 -0.25979899  0.01351493
   0.01941557 -0.00749303 -0.16966625  0.29982284  0.06607639 -0.14624436
   0.27378095 -0.22901326  0.3882783   0.15952162  0.14603606 -0.11872338
  -0.17746135 -0.12889947 -0.03972951  0.01818254 -0.06570773  0.25628173
  -0.2466362   0.13604049 -0.19663269  0.30816804  0.33414175  0.10638957
   0.17173934  0.08167783  0.24092018  0.12361204  0.13270984  0.26751689
   0.06972035 -0.19878142  0.02611882 -0.06265579]]"
639,"windows下PHP环境（apache,PHP,Mysql）详细配置方法","安装前的准备：下载PHP，apache，mysql安装包，可以到相关官网上下载，地址：php-5.4.3-Win32-VC9-x86 (Thread Safe)，httpd-2.2.22-win32-x86 (Apache  openssl)mysql-5.5.25-win32下载后文件截图：下面是安装步骤（以下操作的双引号，请注意自己替换一下成半角字符）1、安装Apache ,直接运行安装即可，我们将其安装到D:/PHP/Apache/ 目录下2、将PHP压缩包解压内容放到指定PHP目录（自己指定这里是D:/PHP/PHP54，将PHP54目录中的PHP.iniDevelopment重命名为php.ini）3、修改Apache配置文件（D:\PHP\Apache\conf\httpd.conf），用于载入PHP模块：a、加载PHP模块 在Apache配置文件添加：LoadModule php5_module ""D:/PHP/PHP54/php5apache2_2.dll"" 上面的D:/PHP/PHP54/为php安装目录b、设置apache解文件类型，添加：AddType application/x-httpd-php .php .phtml c、指定php配置文件路径，在b的后面直接添加：phpinidir  ""D:/PHP/PHP54""4、重启Apache5、验证PHP是否安装成功这里我们在D:\PHP\Apache\htdocs目录下创建一个phpinfo.php文件输入以下内容<?php  phpinfo();  ?> 然后打开浏览器输入http://localhost/phpinfo.php  ,默认的是80端口，如果不是80端口localhost后面必须加端口号，如果安装成功，则打开PHP相关信息页面，否则检查相关目录是否安装正确6、安装mysql服务,直接运行mysql安装文件，按照提示一步一步的执行安装操作7、添加Mysql模块在PHP54目录下ext目录找到libMysql.dll或php_mysql.dll和 php_mysqli.dll 复制到C盘Windows目录下打开PHP配置文件将extension=php_mysql.dll和extension=php_mysqli.dll前面分号去掉在php.ini中设置扩展路径extension_dir=""D:/PHP/PHP54/ext""8、重启Apache9、在浏览器再次访问phpinfo.php页面，如果页面信息多了mysql和mysqli列表示添加模块成功，否则重新检查上述步骤验证mysql是否安装成功","['windows', 'php', '环境', 'apache', 'php', 'mysql', '详细', '配置', '方法', '安装', '准备', '下载', 'php', 'apache', 'mysql', '安装包', '可以', '相关', '网上', '下载', '地址', 'php', '5.4', 'win32', 'vc9', 'x86', 'thread', 'safe', 'httpd', '2.2', '22', 'win32', 'x86', 'apache', 'openssl', 'mysql', '5.5', '25', 'win32', '下载', '文件', '截图', '下面', '安装', '步骤', '以下', '操作', '双引号', '注意', '自己', '替换', '一下', '半角', '字符', '安装', 'apache', '直接', '运行', '安装', '即可', '我们', '安装', 'php', 'apache', '目录', 'php', '压缩包', '解压', '内容', '放到', '指定', 'php', '目录', '自己', '指定', '这里', 'php', 'php54', 'php54', '目录', 'php', 'inidevelopment', '重命名', 'php', 'ini', '修改', 'apache', '配置文件', 'php', 'apache', 'conf', 'httpd', 'conf', '用于', '载入', 'php', '模块', '加载', 'php', '模块', 'apache', '配置文件', '添加', 'loadmodule', 'php5', 'module', 'php', 'php54', 'php5apache2', 'dll', '上面', 'php', 'php54', 'php', '安装', '目录', '设置', 'apache', '文件类型', '添加', 'addtype', 'application', 'httpd', 'php', 'php', 'phtml', '指定', 'php', '配置文件', '路径', '后面', '直接', '添加', 'phpinidir', 'php', 'php54', '重启', 'apache5', '验证', 'php', '是否', '安装', '成功', '这里', '我们', 'php', 'apache', 'htdocs', '目录', '创建', '一个', 'phpinfo', 'php', '文件', '输入', '以下内容', 'php', 'phpinfo', '然后', '打开', '浏览器', '输入', 'http', 'localhost', 'phpinfo', 'php', '默认', '80', '端口', '如果', '不是', '80', '端口', 'localhost', '后面', '必须', '端口号', '如果', '安装', '成功', '打开', 'php', '相关', '信息', '页面', '否则', '检查', '相关', '目录', '是否', '安装', '正确', '安装', 'mysql', '服务', '直接', '运行', 'mysql', '安装文件', '按照', '提示', '一步', '一步', '执行', '安装操作', '添加', 'mysql', '模块', 'php54', '目录', 'ext', '目录', '找到', 'libmysql', 'dll', 'php', 'mysql', 'dll', 'php', 'mysqli', 'dll', '复制到', 'c盘', 'windows', '目录', '打开', 'php', '配置文件', 'extension', 'php', 'mysql', 'dll', 'extension', 'php', 'mysqli', 'dll', '前面', '去掉', 'php', 'ini', '设置', '扩展', '路径', 'extension', 'dir', 'php', 'php54', 'ext', '重启', 'apache9', '浏览器', '再次', '访问', 'phpinfo', 'php', '页面', '如果', '页面', '信息', 'mysql', 'mysqli', '表示', '添加', '模块', '成功', '否则', '重新', '检查', '上述', '步骤', '验证', 'mysql', '是否', '安装', '成功']","[[-0.28261012 -0.14198688  0.22818705  0.27138616  0.24052283 -0.3621377
  -0.16629648  0.51600198 -0.03299994 -0.03523453 -0.08962515 -0.359618
  -0.13659039  0.58737207  0.1262089  -0.12790967 -0.14280984 -0.00832839
  -0.05657405 -0.42042693  0.03067446  0.29089411 -0.04402642 -0.12009619
   0.08383632 -0.51717416 -0.31775288  0.09355549 -0.19107671 -0.07733476
   0.24253588  0.08479543 -0.0210113  -0.12926612 -0.14702825  0.39376457
  -0.15405445 -0.23605509  0.10735695 -0.74580973 -0.11756198 -0.52876491
  -0.0196935  -0.07190267 -0.16650727 -0.17157662 -0.3322057   0.49065125
  -0.09476843  0.35591254  0.14557252 -0.31244235 -0.06054529 -0.2672403
   0.06498076  0.43130258  0.22510456 -0.06249345  0.13440607 -0.08820322
   0.09401128  0.26066029  0.03478294  0.07267463 -0.38697404  0.00772287
  -0.00404632  0.03277639 -0.21807759  0.44853126  0.09737114 -0.21983847
   0.42847327 -0.34472722  0.56771424  0.21265949  0.27661445 -0.17615836
  -0.24509776 -0.24395764 -0.11316125 -0.01338492 -0.08065018  0.38225718
  -0.38180632  0.19148973 -0.2908623   0.45967136  0.5068726   0.1547156
   0.2653891   0.12835083  0.3428846   0.21005268  0.19359012  0.43731811
   0.07369185 -0.24785434  0.10766455 -0.09846549]]"
647,新浪微博的mid转换成base62格式的PHP函数,"最近有用到将新浪微博的mid地址转换成短格式编码的方法，例如：221110410216147026转换后：zF4mOFpN7A比如新浪微博地址可以组装成这样：http://weibo.com/1642634100/5en0UftjV8H，其中数字是用户的id，后面的字符串是base62加密后的mid，因此通过组装这两个，可以得到信息的主体。本文的代码，是由http://forum.open.weibo.com/read.php?tid=3236&uid=89934的博主的js代码改成php而来贴下代码，运行和博主的一样，这里只是将mid转成短格式，其实逆向也很好改了：<?php$str62keys = array(""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",    ""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"",     ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"",     ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"",     ""z"",""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"",     ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"",     ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z"");/** * 10进制值转换为62进制 * @param {String} int10 10进制值 * @return {String} 62进制值 */function int10to62($int10) {    global $str62keys;    $s62 = '';    $r = 0;    while ($int10 != 0)    {        $r = $int10 % 62;        $s62 = $str62keys[$r].$s62;        $int10 = floor($int10 / 62);    }    return $s62;}/** *  * 通过mid获得短格式 * @param string $mid * @return 短格式 */function getCodeByMid($mid){    $url = '';        for ($i = strlen($mid) - 7; $i > -7; $i -=7)    //从最后往前以7字节为一组读取mid    {        $offset1 = $i < 0 ? 0 : $i;        $offset2 = $i + 7;        $num = substr($mid, $offset1,$offset2-$offset1);         //mid.substring(offset1, offset2);                $num = int10to62($num);        $url = $num .$url;    }        return $url;}echo getCodeByMid('221110410216147026');?> 为了方便，这里把那位博主的js代码也贴在这里，大家可以做一个对照：/** * 新浪微博mid与url互转实用工具 * 作者: XiNGRZ (http://weibo.com/xingrz) */var WeiboUtility = {};/** * 62进制字典 */WeiboUtility.str62keys = [    ""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",    ""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"",     ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"",     ""u"", ""v"", ""w"", ""x"", ""y"", ""z"",    ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"",     ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"",     ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""];/** * 62进制值转换为10进制 * @param {String} str62 62进制值 * @return {String} 10进制值 */WeiboUtility.str62to10 = function(str62) {    var i10 = 0;    for (var i = 0; i < str62.length; i++)    {        var n = str62.length - i - 1;        var s = str62[i];        i10 += this.str62keys.indexOf(s) * Math.pow(62, n);    }    return i10;};/** * 10进制值转换为62进制 * @param {String} int10 10进制值 * @return {String} 62进制值 */WeiboUtility.int10to62 = function(int10) {    var s62 = '';    var r = 0;    while (int10 != 0)    {        r = int10 % 62;        s62 = this.str62keys[r] + s62;        int10 = Math.floor(int10 / 62);    }    return s62;};/** * URL字符转换为mid * @param {String} url 微博URL字符，如 ""wr4mOFqpbO"" * @return {String} 微博mid，如 ""201110410216293360"" */WeiboUtility.url2mid = function(url) {    var mid = '';        for (var i = url.length - 4; i > -4; i = i - 4)    //从最后往前以4字节为一组读取URL字符    {        var offset1 = i < 0 ? 0 : i;        var offset2 = i + 4;        var str = url.substring(offset1, offset2);                str = this.str62to10(str);        if (offset1 > 0)    //若不是第一组，则不足7位补0        {            while (str.length < 7)            {                str = '0' + str;            }        }                mid = str + mid;    }        return mid;};/** * mid转换为URL字符 * @param {String} mid 微博mid，如 ""201110410216293360"" * @return {String} 微博URL字符，如 ""wr4mOFqpbO"" */WeiboUtility.mid2url = function(mid) {    if (typeof(mid) != 'string') return false;    //mid数值较大，必须为字符串！        var url = '';        for (var i = mid.length - 7; i > -7; i = i - 7)    //从最后往前以7字节为一组读取mid    {        var offset1 = i < 0 ? 0 : i;        var offset2 = i + 7;        var num = mid.substring(offset1, offset2);                num = this.int10to62(num);        url = num + url;    }        return url;}; ","['新浪', '微博', 'mid', '转换成', 'base62', '格式', 'php', '函数', '最近', '有用', '新浪', '微博', 'mid', '地址', '转换成', '格式', '编码', '方法', '例如', '221110410216147026', '转换', 'zf4mofpn7a', '比如', '新浪', '微博', '地址', '可以', '组装', '这样', 'http', 'weibo', 'com', '1642634100', '5en0uftjv8h', '其中', '数字', '用户', 'id', '后面', '字符串', 'base62', '加密', 'mid', '因此', '通过', '组装', '两个', '可以', '得到', '信息', '主体', '本文', '代码', 'http', 'forum', 'open', 'weibo', 'com', 'read', 'php', 'tid', '3236', 'uid', '89934', '博主', 'js', '代码', '改成', 'php', '而来', '代码', '运行', '博主', '一样', '这里', '只是', 'mid', '转成', '格式', '其实', '逆向', 'php', 'str62keys', 'array', '10', '进制', '转换', '62', '进制', 'param', 'string', 'int10', '10', '进制', 'return', 'string', '62', '进制', 'function', 'int10to62', 'int10', 'global', 'str62keys', 's62', 'while', 'int10', 'int10', '62', 's62', 'str62keys', 's62', 'int10', 'floor', 'int10', '62', 'return', 's62', '通过', 'mid', '获得', '格式', 'param', 'string', 'mid', 'return', '格式', 'function', 'getcodebymid', 'mid', 'url', 'for', 'strlen', 'mid', '最后', '往前', '字节', '一组', '读取', 'mid', 'offset1', 'offset2', 'num', 'substr', 'mid', 'offset1', 'offset2', 'offset1', 'mid', 'substring', 'offset1', 'offset2', 'num', 'int10to62', 'num', 'url', 'num', 'url', 'return', 'url', 'echo', 'getcodebymid', '221110410216147026', '为了', '方便', '这里', '那位', '博主', 'js', '代码', '这里', '大家', '可以', '一个', '对照', '新浪', '微博', 'mid', 'url', '互转', '实用工具', '作者', 'xingrz', 'http', 'weibo', 'com', 'xingrz', 'var', 'weiboutility', '62', '进制', '字典', 'weiboutility', 'str62keys', '62', '进制', '转换', '10', '进制', 'param', 'string', 'str62', '62', '进制', 'return', 'string', '10', '进制', 'weiboutility', 'str62to10', 'function', 'str62', 'var', 'i10', 'for', 'var', 'str62', 'length', '++', 'var', 'str62', 'length', 'var', 'str62', 'i10', 'this', 'str62keys', 'indexof', 'math', 'pow', '62', 'return', 'i10', '10', '进制', '转换', '62', '进制', 'param', 'string', 'int10', '10', '进制', 'return', 'string', '62', '进制', 'weiboutility', 'int10to62', 'function', 'int10', 'var', 's62', 'var', 'while', 'int10', 'int10', '62', 's62', 'this', 'str62keys', 's62', 'int10', 'math', 'floor', 'int10', '62', 'return', 's62', 'url', '字符', '转换', 'mid', 'param', 'string', 'url', '微博', 'url', '字符', 'wr4mofqpbo', 'return', 'string', '微博', 'mid', '201110410216293360', 'weiboutility', 'url2mid', 'function', 'url', 'var', 'mid', 'for', 'var', 'url', 'length', '最后', '往前', '字节', '一组', '读取', 'url', '字符', 'var', 'offset1', 'var', 'offset2', 'var', 'str', 'url', 'substring', 'offset1', 'offset2', 'str', 'this', 'str62to10', 'str', 'if', 'offset1', '不是', '第一组', '不足', '位补', 'while', 'str', 'length', 'str', 'str', 'mid', 'str', 'mid', 'return', 'mid', 'mid', '转换', 'url', '字符', 'param', 'string', 'mid', '微博', 'mid', '201110410216293360', 'return', 'string', '微博', 'url', '字符', 'wr4mofqpbo', 'weiboutility', 'mid2url', 'function', 'mid', 'if', 'typeof', 'mid', 'string', 'return', 'false', 'mid', '数值', '较大', '必须', '字符串', 'var', 'url', 'for', 'var', 'mid', 'length', '最后', '往前', '字节', '一组', '读取', 'mid', 'var', 'offset1', 'var', 'offset2', 'var', 'num', 'mid', 'substring', 'offset1', 'offset2', 'num', 'this', 'int10to62', 'num', 'url', 'num', 'url', 'return', 'url']","[[-2.06034319e-01 -8.22858552e-02  2.85010893e-01  1.04077821e-01
   2.61346338e-01 -3.68937683e-01 -7.55885920e-02  4.27947445e-01
  -8.46406104e-02 -1.64820751e-01 -2.65093074e-02 -3.92775629e-01
  -1.03444969e-01  4.63121623e-01  1.59142646e-01 -9.49410276e-02
  -1.10297355e-01 -1.73258076e-02 -4.27490596e-02 -5.31759980e-01
  -7.32938910e-02  2.42524412e-01 -8.30892275e-02 -2.38101054e-01
   1.63327946e-02 -3.94830232e-01 -2.97904769e-01  1.37441338e-02
  -2.40310884e-01 -8.70237147e-02  1.01358969e-01 -1.89563495e-05
   1.81059182e-02 -9.89151570e-02 -1.97215013e-01  3.05537046e-01
  -2.19415117e-01 -2.86220235e-01  5.21314310e-02 -6.68584492e-01
  -1.13106809e-01 -5.76873371e-01 -9.33915119e-02  2.17096016e-02
  -1.02327759e-01 -2.66742127e-01 -2.19746493e-01  2.74431118e-01
  -1.78985367e-01  4.84956031e-01  1.02616112e-01 -2.43578063e-01
  -1.02858606e-01 -1.46432421e-01 -5.48858731e-02  3.55521257e-01
   8.23476281e-02 -1.09426560e-01  1.07081798e-01 -1.41751598e-01
   1.14042071e-01  1.85497258e-01  1.21820638e-02  8.13566914e-02
  -3.42279467e-01  7.19494891e-02  5.50835645e-02 -3.10185735e-02
  -2.91603367e-01  4.05164465e-01  7.77356122e-02 -1.29107052e-01
   3.53045782e-01 -2.92358717e-01  5.12307401e-01  3.24145524e-01
   1.20001034e-01 -1.66635283e-01 -3.13677721e-01 -9.03497962e-02
   4.91411423e-02  9.10501264e-02 -1.44901127e-01  3.72747466e-01
  -3.01516645e-01  2.07942141e-01 -2.69958860e-01  4.53645739e-01
   4.83768168e-01  1.77695075e-01  1.81755515e-01  1.00909957e-01
   3.47337739e-01  1.69430668e-01  1.85386386e-01  3.18249849e-01
   1.19609066e-01 -3.12761603e-01 -9.44613324e-03 -1.34872609e-01]]"
655,情理之中又意料之外的超强减肥方法,今天在人人上，看到很多人都在分享一个人的减肥秘技的页面（打开），点开后看了看这位同学的前后照片，真的是让人惊叹。减肥前210斤，胖的确实不成样子，身宽体胖的一种。而减肥后140，人显得特别精神，帅气了非常多，减肥前后的差距如此之大，瘦下来后的充满自信的神情像人昭示这巨大的成功喜悦。以下贴一下他在照片下面贴的语录文字：我曾经是个催悲的胖子，大二的时候，体重就已经接近200斤了。减肥还是很辛苦的，一开始采取节食减肥，每天只吃一顿早饭，午餐晚餐就吃西红柿和黄花~结果半个月下来毫无成效，一斤都没瘦！！！不过我并没放弃，坚持了一个月，终于有效果了。后来，我饿的头昏，看来节食减肥不可取啊~我开始加强锻炼。一开始非常痛苦，我刚开始几天只能跑五百米，好在我能坚持下来，每天加一点。现在我每天还是坚持十公里，感觉就很轻松了。 锻炼的效果非常明显，一开始跑500米我都喘气，到现在10公里轻松写意。减肥效果最好的时候，一天能瘦1斤。我成功的瘦下来之后，还是要保持，防止反弹。减肥已经两年了，我没有反弹~hoho现在的我，我成功减掉了70斤肉，我每天还是会坚持锻炼，身体素质明显提高了很多。为了减肥我戒掉了一切饮料和零食。吃上一开始严格控制，晚上就吃粗粮，红薯，燕麦片之类的。当然，现在已经恢复以前的饮食了，我的饭量比较大，昨晚我们两个人吃掉了三斤半排骨外加一个5斤重的西瓜。我现在消耗很大，工作量也大。跑步、打篮球、健身房、自行车等等，我体力还好，每天跑完十公里还能做点别的运动。饮食一开始还是克制的，胖子么，都是嘴惹的祸。我现在不控制饮食了，随便吃，也不反弹。说实话当个胖子实在是太悲哀了~往事不堪回首......话说我减肥成功以后还长高了几厘米，现在有1米76了。今年五一时候照的。我现在140斤整，体重很标准，而且每天坚持锻炼，身材还不错。以上加粗的部分，是他减肥成功的方法。总结一下他的方法，应该八九不离十：其实饮食什么的，可以不控制，当然不能暴饮暴食，关键是锻炼从他的语录可以看出，减肥过程主要是跑步，有氧运动本来就是减肥的绝好方法。然而，让我汗颜的是，他刚开始跑的500米很正常，现在每天十公里。。这运动量，估计真正的是他减肥的绝学秘技。呵呵，这位同学的留言刷的非常多，最多的留言就是“励志啊励志，我也要减肥”，看来我的同伴还真多。最近在健身房，老犹豫是不是慢跑的方法对减肥助益不大，看来我错了，恐怕如果我每天也来个10公里，我这个潜力股，也能变得动若脱兔，跳若灵猿吧。140斤，就是俺的目标，进发了。,"['情理之中', '意料之外', '超强', '减肥', '方法', '今天', '人人', '看到', '很多', '分享', '一个', '减肥', '秘技', '页面', '打开', '点开', '这位', '同学', '前后', '照片', '真的', '惊叹', '减肥', '210', '确实', '不成', '样子', '宽体', '一种', '减肥', '140', '显得', '特别', '精神', '帅气', '非常', '减肥', '前后', '差距', '如此', '之大', '瘦下来', '充满', '自信', '神情', '昭示', '巨大', '成功', '喜悦', '以下', '一下', '照片', '下面', '语录', '文字', '曾经', '催悲', '胖子', '大二', '时候', '体重', '已经', '接近', '200', '减肥', '还是', '辛苦', '开始', '采取', '节食', '减肥', '每天', '一顿', '早饭', '午餐', '晚餐', '西红柿', '黄花', '结果', '半个', '下来', '毫无', '成效', '一斤', '不过', '放弃', '坚持', '一个月', '终于', '效果', '后来', '头昏', '看来', '节食', '减肥', '可取', '开始', '加强锻炼', '开始', '非常', '痛苦', '我刚', '开始', '几天', '只能', '五百米', '坚持', '下来', '每天', '加一点', '现在', '每天', '还是', '坚持', '十公里', '感觉', '轻松', '锻炼', '效果', '非常明显', '开始', '500', '喘气', '现在', '10', '公里', '轻松', '写意', '减肥', '效果', '最好', '时候', '一天', '成功', '瘦下来', '之后', '还是', '保持', '防止', '反弹', '减肥', '已经', '两年', '没有', '反弹', 'hoho', '现在', '成功', '减掉', '70', '每天', '还是', '坚持', '锻炼', '身体素质', '明显提高', '很多', '为了', '减肥', '戒掉', '一切', '饮料', '零食', '开始', '严格控制', '晚上', '粗粮', '红薯', '燕麦片', '之类', '当然', '现在', '已经', '恢复', '以前', '饮食', '饭量', '比较', '昨晚', '我们', '两个', '吃掉', '三斤', '排骨', '外加', '一个', '斤重', '西瓜', '现在', '消耗', '很大', '工作量', '跑步', '打篮球', '健身房', '自行车', '等等', '体力', '还好', '每天', '十公里', '做点', '别的', '运动', '饮食', '开始', '还是', '克制', '胖子', '现在', '控制', '饮食', '随便', '反弹', '说实话', '胖子', '实在', '悲哀', '往事', '不堪回首', '......', '减肥', '成功', '以后', '还长', '几厘米', '现在', '76', '今年', '五一', '时候', '现在', '140', '斤整', '体重', '标准', '而且', '每天', '坚持', '锻炼', '身材', '不错', '以上', '加粗', '部分', '减肥', '成功', '方法', '总结', '一下', '方法', '应该', '八九不离十', '其实', '饮食', '什么', '可以', '控制', '当然', '不能', '暴饮暴食', '关键', '锻炼', '语录', '可以', '看出', '减肥', '过程', '主要', '跑步', '有氧', '运动', '本来', '就是', '减肥', '绝好', '方法', '然而', '汗颜', '开始', '500', '正常', '现在', '每天', '十公里', '运动量', '估计', '真正', '减肥', '绝学', '秘技', '呵呵', '这位', '同学', '留言', '非常', '最多', '留言', '就是', '励志', '励志', '减肥', '看来', '同伴', '真多', '最近', '健身房', '犹豫', '是不是', '慢跑', '方法', '减肥', '助益', '看来', '我错', '恐怕', '如果', '每天', '10', '公里', '这个', '潜力股', '变得', '动若脱兔', '跳若灵', '140', '就是', '目标', '进发']","[[-2.16838205e-01 -1.10529096e-01  1.93238083e-01  1.32640940e-01
   2.52638256e-01 -2.99059986e-01 -1.48845848e-01  4.09814306e-01
  -1.42576345e-02 -2.40238183e-02 -4.91140354e-02 -2.86347122e-01
  -1.54380463e-01  5.05297188e-01  1.33259975e-01 -9.15292705e-02
  -1.27712388e-01 -7.69499896e-03 -8.33401430e-02 -3.95656658e-01
   1.45769483e-02  2.10396580e-01  7.47143258e-05 -8.54196538e-02
   9.69305949e-02 -4.62881573e-01 -2.40545818e-01  6.38161017e-02
  -1.80265865e-01 -5.41976374e-02  2.06166069e-01  1.76808944e-02
  -7.43305716e-03 -1.20344337e-01 -9.06528032e-02  2.82582600e-01
  -1.22678925e-01 -1.92411753e-01  9.57171583e-02 -6.51926263e-01
  -1.49149932e-01 -5.01650108e-01 -4.04107917e-02 -5.99583530e-02
  -1.41670965e-01 -1.31610418e-01 -2.21899087e-01  3.84947023e-01
  -1.59820626e-01  3.47204192e-01  1.71600704e-01 -2.25576729e-01
  -1.04890735e-01 -1.93559790e-01  4.90087733e-02  3.26355463e-01
   2.01020985e-01 -5.58635683e-02  7.83098498e-02 -8.05919482e-02
   3.71865693e-02  2.49128791e-01  1.76420703e-02  7.34400418e-02
  -3.30507984e-01 -8.50174873e-03  4.27510889e-02 -2.06218996e-02
  -2.10965137e-01  3.78529383e-01  1.11127792e-01 -2.05655172e-01
   3.35650554e-01 -2.81219967e-01  4.92563477e-01  1.50506612e-01
   1.70360042e-01 -1.19477186e-01 -2.34374187e-01 -1.74367944e-01
  -5.76560292e-02  8.40417688e-04 -6.11839466e-02  2.90719403e-01
  -3.15196276e-01  1.75096848e-01 -2.44942520e-01  3.53397390e-01
   3.92790470e-01  1.11578437e-01  2.58166914e-01  1.04201965e-01
   3.11048268e-01  1.58792113e-01  1.60915910e-01  3.13951798e-01
   9.29859278e-02 -2.60523097e-01 -2.25833388e-02 -7.52809208e-02]]"
658,个人博客SEO第一步-提交自己的网站,很多个人博客博主，不知道该怎么推广，也不懂专业的SEO推广技术。其实最直接的第一步，就是要告诉互联网，有了你这个站点，因此，先要向网络上各大网站服务商、各大搜索引擎、各大博客收录网站提交自己的博客地址，或者和一些PR值较高的网站交换自己的友情链接，比如和本站：疯狂的蚂蚁。1、Alexa专业提供中文ALEXA世界排名查询服务地址：http://www.alexa.com/2、百度博客搜索提交入口地址：http://utility.baidu.com/blogsearch/submit.php3、搜狗搜索提交入口地址：http://www.sogou.com/feedback/blogfeedback.php4、有道博客搜索提交入口地址：http://tellbot.youdao.com/report?type=BLOG&keyFrom=help5、Google博客搜索引擎提交入口地址：http://blogsearch.google.com/ping?hl=zh-CN6、Live搜索提交入口http://search.msn.com/docs/submit.aspx7、雅虎中国提交入口http://search.help.cn.yahoo.com/h4_4.html最后，作为一个个人博客新站，致力于PHP等技术分享的博客，本博客（疯狂的蚂蚁）现已经是一个PR为3，日IP访问量200以上的博客，希望广大站长朋友前来交换链接，共同进步。,"['个人', '博客', 'seo', '第一步', '提交', '自己', '网站', '很多', '个人', '博客', '博主', '知道', '怎么', '推广', '专业', 'seo', '推广', '技术', '其实', '直接', '第一步', '就是', '告诉', '互联网', '这个', '站点', '因此', '先要', '网络', '各大', '网站', '服务商', '各大', '搜索引擎', '各大', '博客', '收录', '网站', '提交', '自己', '博客地址', '或者', '一些', 'pr', '值较', '网站', '交换', '自己', '友情链接', '比如', '本站', '疯狂', '蚂蚁', 'alexa', '专业', '提供', '中文', 'alexa', '世界排名', '查询', '服务', '地址', 'http', 'www', 'alexa', 'com', '百度', '博客', '搜索', '提交', '入口', '地址', 'http', 'utility', 'baidu', 'com', 'blogsearch', 'submit', 'php3', '搜狗', '搜索', '提交', '入口', '地址', 'http', 'www', 'sogou', 'com', 'feedback', 'blogfeedback', 'php4', '有道', '博客', '搜索', '提交', '入口', '地址', 'http', 'tellbot', 'youdao', 'com', 'report', 'type', 'blog', 'keyfrom', 'help5', 'google', '博客', '搜索引擎', '提交', '入口', '地址', 'http', 'blogsearch', 'google', 'com', 'ping', 'hl', 'zh', 'cn6', 'live', '搜索', '提交', '入口', 'http', 'search', 'msn', 'com', 'docs', 'submit', 'aspx7', '雅虎', '中国', '提交', '入口', 'http', 'search', 'help', 'cn', 'yahoo', 'com', 'h4', 'html', '最后', '作为', '一个', '个人', '博客', '新站', '致力于', 'php', '技术', '分享', '博客', '博客', '疯狂', '蚂蚁', '已经', '一个', 'pr', 'ip', '访问量', '200', '以上', '博客', '希望', '广大', '站长', '朋友', '前来', '交换', '链接', '共同进步']","[[-0.2346704  -0.11856777  0.26995532  0.34714755  0.10479222 -0.42427885
  -0.08165358  0.49118428 -0.05937734 -0.08761422 -0.11774214 -0.42293337
  -0.08478497  0.52174669  0.05757418 -0.16956437 -0.11578141  0.02677129
   0.05324796 -0.33020464  0.00226059  0.29101204 -0.12946102 -0.21866337
  -0.03651361 -0.38726061 -0.34836608  0.08359219 -0.16534725 -0.06930199
   0.15922765  0.19682645  0.03449043 -0.0881341  -0.23462714  0.38082487
  -0.15387221 -0.23706566  0.03466849 -0.58033426 -0.01509878 -0.48758529
  -0.024359   -0.03345133 -0.09604819 -0.28650137 -0.40270082  0.40281949
   0.08820714  0.31249954  0.00437928 -0.31450798  0.09553894 -0.27267048
  -0.04519873  0.44702905  0.15359395 -0.10027657  0.14658182 -0.08714795
   0.18213927  0.18008743 -0.00830553  0.0767251  -0.30301666  0.07418719
  -0.08478548  0.09183064 -0.16397014  0.41263097  0.01205636 -0.14791539
   0.43438119 -0.32305301  0.55372475  0.33946526  0.34230182 -0.26200295
  -0.13836982 -0.24590599 -0.14534398  0.04080591 -0.13838747  0.43193963
  -0.39693246  0.14367262 -0.27375968  0.55623207  0.57326234  0.21051069
   0.13430963  0.12758452  0.27153707  0.13164209  0.19404926  0.50751427
   0.05106107 -0.1767875   0.29129702 -0.08266727]]"
675,数据采集必备知识-php计划任务的实现,"站点如果做的多了，难免要发些伪原创的文章，文章的来源必然来源于网络采集，对于采集这里不详述，我自己用的是""Simple HTML DOM""，见我另一篇关于他的介绍： 数据采集利器-PHP用DOM方式处理HTML之《Simple HTML DOM》 数据采集的话，当然可以人工触发，就是每天运行一下脚本，可是这显然不是很完美，如果抓取可以自动定时获取，那么人工运行可执行页面也就省下来了。 其实php有个概念叫计划任务，可以定时运行某程序，比如数据库备份，更新缓存，生成静态页面，生成网站地图等。在采集里面的运用，就是自动采集数据，然后保存到数据库，比如每天凌晨3点运行一次。 以下是PHP用计划任务实现无人自动采集的介绍。 用到了3个函数： 1、ignore_user_abort(setting); 说明：ignore_user_abort() 函数设置与客户机断开是否会终止脚本的执行。本函数返回 user-abort 设置的之前的值（一个布尔值）。 参数：setting 可选。如果设置为 true，则忽略与用户的断开，如果设置为 false，会导致脚本停止运行。如果未设置该参数，会返回当前的设置。 2、void set_time_limit ( int $seconds ) 说明：设置脚本的最大运行时间，如果时间到了，本函数会返回错误，单位是秒，默认时间是30秒。 参数：用秒计算的最大运行时间，如果为0，则代表无限时间。 注：采集的话，我们就用无限时间set_time_limit(0); 3、sleep(seconds) 说明：sleep() 函数延迟代码执行若干秒。 参数：必需。以秒计的暂停时间。   先给一个基本的测试程序： //用户关闭浏览器，程序继续运行ignore_user_abort();//设定脚本运行无限时间set_time_limit(0);//每30秒执行一次 $interval=30;do{$fp = fopen('text3.txt','a');fwrite($fp,'test');fclose($fp);sleep($interval);}while(true);首先运行该程序，然后关闭该页面，程序仍然运行中，test会每隔30秒的填补到text3.txt文件。最后根据php手册简单介绍一些相关的知识：1、连接处理在 PHP 内部，系统维护着连接状态，其状态有三种可能的情况：0 - NORMAL（正常）1 - ABORTED（异常退出）2 - TIMEOUT（超时）当 PHP 脚本正常地运行 NORMAL 状态时，连接为有效。当远程客户端中断连接时，ABORTED 状态的标记将会被打开。远程客户端连接的中断通常是由用户点击 STOP 按钮导致的。当连接时间超过 PHP 的时限时，TIMEOUT 状态的标记将被打开。可以决定脚本是否需要在客户端中断连接时退出。有时候让脚本完整地运行会带来很多方便，即使没有远程浏览器接受脚本的输出。默认的情况是当远程客户端连接中断时脚本将会退出。该处理过程可由 php.ini 的 ignore_user_abort 或由 Apache .conf 设置中对应的""php_value ignore_user_abort""以及 ignore_user_abort() 函数来控制。如果没有告诉 PHP 忽略用户的中断，脚本将会被中断，除非通过 register_shutdown_function() 设置了关闭触发函数。通过该关闭触发函数，当远程用户点击 STOP 按钮后，脚本再次尝试输出数据时，PHP 将会检测到连接已被中断，并调用关闭触发函数。脚本也有可能被内置的脚本计时器中断。默认的超时限制为 30 秒。这个值可以通过设置 php.ini 的 max_execution_time 或 Apache .conf 设置中对应的""php_value max_execution_time""参数或者 set_time_limit() 函数来更改。当计数器超时的时候，脚本将会类似于以上连接中断的情况退出，先前被注册过的关闭触发函数也将在这时被执行。在该关闭触发函数中，可以通过调用 connection_status() 函数来检查超时是否导致关闭触发函数被调用。如果超时导致了关闭触发函数的调用，该函数将返回 2。需要注意的一点是 ABORTED 和 TIMEOUT 状态可以同时有效。这在告诉 PHP 忽略用户的退出操作时是可能的。PHP 将仍然注意用户已经中断了连接但脚本仍然在运行的情况。如果到了运行的时间限制，脚本将被退出，设置过的关闭触发函数也将被执行。在这时会发现函数 connection_status() 返回 3。2、相关函数：int ignore_user_abort ( [bool setting] )Set whether a client disconnect should abort script execution。Sets whether a client disconnect should cause a script to be aborted.When running PHP as a command line script, and the script's tty goes away without the script being terminated then the script will die the next time it tries to write anything, unless value is set to TRUEint connection_aborted ( void )Check whether client disconnectedint connection_status ( void )Returns connection status bitfield","['数据', '采集', '必备', '知识', 'php', '计划', '任务', '实现', '站点', '如果', '难免', '发些', '原创', '文章', '文章', '来源', '必然', '来源于', '网络', '采集', '对于', '采集', '这里', '详述', '自己', 'simple', 'html', 'dom', '一篇', '关于', '介绍', '数据', '采集', '利器', 'php', 'dom', '方式', '处理', 'html', 'simple', 'html', 'dom', '数据', '采集', '的话', '当然', '可以', '人工', '触发', '就是', '每天', '运行', '一下', '脚本', '可是', '显然', '不是', '完美', '如果', '抓取', '可以', '自动', '定时', '获取', '那么', '人工', '运行', '执行', '页面', '下来', '其实', 'php', '有个', '概念', '计划', '任务', '可以', '定时', '运行', '程序', '比如', '数据库', '备份', '更新', '缓存', '生成', '静态', '页面', '生成', '网站', '地图', '采集', '里面', '运用', '就是', '自动', '采集', '数据', '然后', '保存', '数据库', '比如', '每天', '凌晨', '运行', '一次', '以下', 'php', '计划', '任务', '实现', '无人', '自动', '采集', '介绍', '用到', '函数', 'ignore', 'user', 'abort', 'setting', '说明', 'ignore', 'user', 'abort', '函数', '设置', '客户机', '断开', '是否', '终止', '脚本', '执行', '函数', '返回', 'user', 'abort', '设置', '之前', '一个', '布尔值', '参数', 'setting', '如果', '设置', 'true', '忽略', '用户', '断开', '如果', '设置', 'false', '导致', '脚本', '停止', '运行', '如果', '设置', '参数', '返回', '当前', '设置', 'void', 'set', 'time', 'limit', 'int', 'seconds', '说明', '设置', '脚本', '最大', '运行', '时间', '如果', '时间', '函数', '返回', '错误', '单位', '默认', '时间', '30', '参数', '计算', '最大', '运行', '时间', '如果', '代表', '无限', '时间', '采集', '的话', '我们', '无限', '时间', 'set', 'time', 'limit', 'sleep', 'seconds', '说明', 'sleep', '函数', '延迟', '代码执行', '若干', '参数', '必需', '以秒计', '暂停', '时间', '先给', '一个', '基本', '测试程序', '用户', '关闭', '浏览器', '程序', '继续', '运行', 'ignore', 'user', 'abort', '设定', '脚本', '运行', '无限', '时间', 'set', 'time', 'limit', '30', '执行', '一次', 'interval', '30', 'do', 'fp', 'fopen', 'text3', 'txt', 'fwrite', 'fp', 'test', 'fclose', 'fp', 'sleep', 'interval', 'while', 'true', '首先', '运行', '程序', '然后', '关闭', '页面', '程序', '仍然', '运行', 'test', '每隔', '30', '填补', 'text3', 'txt', '文件', '最后', '根据', 'php', '手册', '简单', '介绍', '一些', '相关', '知识', '连接', '处理', 'php', '内部', '系统维护', '连接', '状态', '状态', '三种', '可能', '情况', 'normal', '正常', 'aborted', '异常', '退出', 'timeout', '超时', 'php', '脚本', '正常', '运行', 'normal', '状态', '连接', '有效', '远程', '客户端', '中断', '连接', 'aborted', '状态', '标记', '将会', '打开', '远程', '客户端', '连接', '中断', '通常', '用户', '点击', 'stop', '按钮', '导致', '连接时间', '超过', 'php', '时限', 'timeout', '状态', '标记', '打开', '可以', '决定', '脚本', '是否', '需要', '客户端', '中断', '连接', '退出', '有时候', '脚本', '完整', '运行', '带来', '很多', '方便', '即使', '没有', '远程', '浏览器', '接受', '脚本', '输出', '默认', '情况', '远程', '客户端', '连接', '中断', '脚本', '将会', '退出', '处理过程', 'php', 'ini', 'ignore', 'user', 'abort', 'apache', 'conf', '设置', '对应', 'php', 'value', 'ignore', 'user', 'abort', '以及', 'ignore', 'user', 'abort', '函数', '控制', '如果', '没有', '告诉', 'php', '忽略', '用户', '中断', '脚本', '将会', '中断', '除非', '通过', 'register', 'shutdown', 'function', '设置', '关闭', '触发', '函数', '通过', '关闭', '触发', '函数', '远程', '用户', '点击', 'stop', '按钮', '脚本', '再次', '尝试', '输出', '数据', 'php', '将会', '检测', '连接', '中断', '调用', '关闭', '触发', '函数', '脚本', '可能', '内置', '脚本', '计时器', '中断', '默认', '超时', '限制', '30', '这个', '可以', '通过', '设置', 'php', 'ini', 'max', 'execution', 'time', 'apache', 'conf', '设置', '对应', 'php', 'value', 'max', 'execution', 'time', '参数', '或者', 'set', 'time', 'limit', '函数', '更改', '计数器', '超时', '时候', '脚本', '将会', '类似', '以上', '连接', '中断', '情况', '退出', '先前', '注册', '关闭', '触发', '函数', '这时', '执行', '关闭', '触发', '函数', '可以', '通过', '调用', 'connection', 'status', '函数', '检查', '超时', '是否', '导致', '关闭', '触发', '函数', '调用', '如果', '超时', '导致', '关闭', '触发', '函数', '调用', '函数', '返回', '需要', '注意', '一点', 'aborted', 'timeout', '状态', '可以', '同时', '有效', '告诉', 'php', '忽略', '用户', '退出', '操作', '可能', 'php', '仍然', '注意', '用户', '已经', '中断', '连接', '脚本', '仍然', '运行', '情况', '如果', '运行', '时间', '限制', '脚本', '退出', '设置', '关闭', '触发', '函数', '执行', '这时', '发现', '函数', 'connection', 'status', '返回', '相关', '函数', 'int', 'ignore', 'user', 'abort', 'bool', 'setting', 'set', 'whether', 'client', 'disconnect', 'should', 'abort', 'script', 'execution', 'sets', 'whether', 'client', 'disconnect', 'should', 'cause', 'script', 'to', 'be', 'aborted', 'when', 'running', 'php', 'as', 'command', 'line', 'script', 'and', 'the', 'script', 'tty', 'goes', 'away', 'without', 'the', 'script', 'being', 'terminated', 'then', 'the', 'script', 'will', 'die', 'the', 'next', 'time', 'it', 'tries', 'to', 'write', 'anything', 'unless', 'value', 'is', 'set', 'to', 'trueint', 'connection', 'aborted', 'void', 'check', 'whether', 'client', 'disconnectedint', 'connection', 'status', 'void', 'returns', 'connection', 'status', 'bitfield']","[[-0.2332868  -0.13018823  0.21615243  0.15116626  0.28676314 -0.33310991
  -0.17128109  0.46466944 -0.01290844 -0.0392186  -0.05223365 -0.32274768
  -0.17297999  0.56738896  0.14904667 -0.09876989 -0.14685486 -0.00297496
  -0.09704038 -0.45828249  0.01173294  0.2330874  -0.00679011 -0.10525949
   0.10801861 -0.51616526 -0.27845264  0.07635639 -0.20903729 -0.06537017
   0.22111068  0.01863188 -0.01207806 -0.13719764 -0.11691247  0.3198965
  -0.14567589 -0.21945657  0.10783917 -0.73011931 -0.16321801 -0.56367355
  -0.04688586 -0.05691784 -0.15626872 -0.15802761 -0.24375889  0.42983734
  -0.17329965  0.39662337  0.18973486 -0.26133018 -0.11840188 -0.20926443
   0.05516497  0.37844844  0.22135707 -0.06646881  0.09895257 -0.10694023
   0.05062901  0.27088419  0.02255336  0.08588922 -0.37405133 -0.00217795
   0.04242953 -0.02380371 -0.24885762  0.42241456  0.13518348 -0.22362019
   0.38012403 -0.31213342  0.54822995  0.17831851  0.18397183 -0.13500285
  -0.27922836 -0.1842449  -0.05632847  0.00508898 -0.07551336  0.3273108
  -0.35433531  0.20060137 -0.27915111  0.39880223  0.44969366  0.12791234
   0.28494997  0.1130864   0.3470324   0.18356761  0.18216532  0.35523979
   0.09919851 -0.29176262 -0.03318212 -0.09956226]]"
678,MySQL-python Windows下EXE安装文件下载,最近学python，学到用python连接mysql的时候，我首先去python-mysql官网上下载了一个源码包，然后放到了python的Lib\site-packages目录下，结果运行测试的时候，一直说没有模块__mysql网上找解答方法，大部分人的方法都不可以，有人提议用exe自动安装会很有效，于是在谷歌直接搜”python mysql exe”，找到了最终的exe安装文件：MySQL-python-1.2.3.win32-py2.7.exe安装之后，重新运行程序，完美无误该MySQL-python-1.2.3.win32-py2.7.exe的下载地址：http://www.codegood.com/archives/129,"['mysql', 'python', 'windows', 'exe', '安装文件', '下载', '最近', 'python', '学到', 'python', '连接', 'mysql', '时候', '首先', 'python', 'mysql', '网上', '下载', '一个', '源码', '然后', '放到', 'python', 'lib', 'site', 'packages', '目录', '结果', '运行', '测试', '时候', '一直', '没有', '模块', '__', 'mysql', '网上', '解答', '方法', '大部分', '方法', '可以', '有人', '提议', 'exe', '自动', '安装', '有效', '于是', '谷歌', '直接', 'python', 'mysql', 'exe', '找到', '最终', 'exe', '安装文件', 'mysql', 'python', '1.2', 'win32', 'py2.7', 'exe', '安装', '之后', '重新', '运行', '程序', '完美', '无误', 'mysql', 'python', '1.2', 'win32', 'py2.7', 'exe', '下载', '地址', 'http', 'www', 'codegood', 'com', 'archives', '129']","[[-0.26689455 -0.15947437  0.22069427  0.26473351  0.24453264 -0.38335862
  -0.16997624  0.54058505 -0.0296758  -0.03815903 -0.10329052 -0.3746031
  -0.16830554  0.61273544  0.11818967 -0.14020845 -0.15032651  0.01975948
  -0.04705291 -0.42016263  0.03131425  0.27754026 -0.03959555 -0.13816506
   0.08647845 -0.52684933 -0.31832952  0.09624407 -0.19962754 -0.07313688
   0.24741833  0.10743859 -0.00402603 -0.14781148 -0.1614711   0.39191573
  -0.16010515 -0.23529007  0.1087879  -0.74975075 -0.11369683 -0.55683664
  -0.01505263 -0.05882644 -0.16168578 -0.18449274 -0.33269125  0.49023634
  -0.07649333  0.36081149  0.14574891 -0.31964655 -0.0447403  -0.26642065
   0.05224347  0.44428838  0.23060505 -0.06822826  0.13816666 -0.09606295
   0.10646476  0.27056865  0.03598001  0.08923798 -0.39651572  0.00947158
  -0.01349681  0.03865383 -0.23390599  0.45513813  0.10358271 -0.22571877
   0.44053285 -0.3485669   0.6086048   0.22528093  0.27457368 -0.17845934
  -0.25767858 -0.23888557 -0.12404831 -0.00234942 -0.09360481  0.39259692
  -0.40101404  0.18800935 -0.29271166  0.47806543  0.52174619  0.15500495
   0.27022734  0.12631622  0.34503831  0.19723803  0.20327028  0.45446295
   0.09184102 -0.25217496  0.0994827  -0.09836781]]"
686,Python操作Mysql实例代码教程（查询手册）,"本文介绍了Python操作MYSQL、执行SQL语句、获取结果集、遍历结果集、取得某个字段、获取表字段名、将图片插入数据库、执行事务等各种代码实例和详细介绍，代码居多，是一桌丰盛唯美的代码大餐。实例1、取得MYSQL的版本在windows环境下安装mysql模块用于python开发，请见我的另一篇文章：MySQL-python Windows下EXE安装文件下载# -*- coding: UTF-8 -*-# 安装MYSQL DB for pythonimport MySQLdb as mdbcon = Nonetry:    # 连接mysql的方法：connect('ip','user','password','dbname')    con = mdb.connect('localhost', 'root',        'root', 'test');    # 所有的查询，都在连接con的一个模块cursor上面运行的    cur = con.cursor()    # 执行一个查询    cur.execute(""SELECT VERSION()"")    # 取得上个查询的结果，是单个结果    data = cur.fetchone()    print ""Database version : %s "" % datafinally:    if con:        # 无论如何，连接记得关闭        con.close()执行结果：Database version : 5.5.25实例2、创建一个表并且插入数据主要还是在cursor上面执行execute方法来进行，请见源码：# -*- coding: UTF-8 -*-# 来源于www.crazyant.net总结整理import MySQLdb as mdbimport sys# 将con设定为全局连接con = mdb.connect('localhost', 'root', 'root', 'test');with con:    # 获取连接的cursor，只有获取了cursor，我们才能进行各种操作    cur = con.cursor()    # 创建一个数据表 writers(id,name)    cur.execute(""CREATE TABLE IF NOT EXISTS \        Writers(Id INT PRIMARY KEY AUTO_INCREMENT, Name VARCHAR(25))"")    # 以下插入了5条数据    cur.execute(""INSERT INTO Writers(Name) VALUES('Jack London')"")    cur.execute(""INSERT INTO Writers(Name) VALUES('Honore de Balzac')"")    cur.execute(""INSERT INTO Writers(Name) VALUES('Lion Feuchtwanger')"")    cur.execute(""INSERT INTO Writers(Name) VALUES('Emile Zola')"")    cur.execute(""INSERT INTO Writers(Name) VALUES('Truman Capote')"")运行结果（在phpmyadmin中查看，在mysql命令行查看结果是一样的）：实例3、python使用slect获取mysql的数据并遍历这个恐怕是用的最多的了，请速看代码：# -*- coding: UTF-8 -*-# 来源：www.crazyant.net整理总结import MySQLdb as mdbimport sys# 连接mysql，获取连接的对象con = mdb.connect('localhost', 'root', 'root', 'test');with con:    # 仍然是，第一步要获取连接的cursor对象，用于执行查询    cur = con.cursor()    # 类似于其他语言的query函数，execute是python中的执行查询函数    cur.execute(""SELECT * FROM Writers"")    # 使用fetchall函数，将结果集（多维元组）存入rows里面    rows = cur.fetchall()    # 依次遍历结果集，发现每个元素，就是表中的一条记录，用一个元组来显示    for row in rows:        print row运行结果：(1L, 'Jack London')(2L, 'Honore de Balzac')(3L, 'Lion Feuchtwanger')(4L, 'Emile Zola')(5L, 'Truman Capote')上面的代码，用来将所有的结果取出，不过打印的时候是每行一个元祖打印，现在我们使用方法，取出其中的单个数据：# -*- coding: UTF-8 -*-# 来源：疯狂的蚂蚁的博客www.crazyant.net总结整理import MySQLdb as mdbimport sys# 获取mysql的链接对象con = mdb.connect('localhost', 'root', 'root', 'test');with con:    # 获取执行查询的对象    cur = con.cursor()    # 执行那个查询，这里用的是select语句    cur.execute(""SELECT * FROM Writers"")    # 使用cur.rowcount获取结果集的条数    numrows = int(cur.rowcount)    # 循环numrows次，每次取出一行数据    for i in range(numrows):        # 每次取出一行，放到row中，这是一个元组(id,name)        row = cur.fetchone()        # 直接输出两个元素        print row[0], row[1]运行结果：1 Jack London2 Honore de Balzac3 Lion Feuchtwanger4 Emile Zola5 Truman Capote numrows = int(cur.rowcount)用于获取结果集的数目row = cur.fetchone()每次取出一行数据，同时记录集的指针执行下一行实例4、使用字典cursor取得结果集（可以使用表字段名字访问值） # -*- coding: UTF-8 -*-# 来源：疯狂的蚂蚁的博客www.crazyant.net总结整理import MySQLdb as mdbimport sys# 获得mysql查询的链接对象con = mdb.connect('localhost', 'root', 'root', 'test')with con:    # 获取连接上的字典cursor，注意获取的方法，    # 每一个cursor其实都是cursor的子类    cur = con.cursor(mdb.cursors.DictCursor)    # 执行语句不变    cur.execute(""SELECT * FROM Writers"")    # 获取数据方法不变    rows = cur.fetchall()    # 遍历数据也不变（比上一个更直接一点）    for row in rows:        # 这里，可以使用键值对的方法，由键名字来获取数据        print ""%s %s"" % (row[""Id""], row[""Name""])实例5、获取单个表的字段名和信息的方法# -*- coding: UTF-8 -*-# 来源：疯狂的蚂蚁的博客www.crazyant.net总结整理import MySQLdb as mdbimport sys#获取数据库的链接对象con = mdb.connect('localhost', 'root', 'root', 'test')with con:    #获取普通的查询cursor    cur = con.cursor()    cur.execute(""SELECT * FROM Writers"")    rows = cur.fetchall()    #获取连接对象的描述信息    desc = cur.description    print 'cur.description:',desc    #打印表头，就是字段名字    print ""%s %3s"" % (desc[0][0], desc[1][0])    for row in rows:        #打印结果        print ""%2s %3s"" % row运行结果：cur.description: (('Id', 3, 1, 11, 11, 0, 0), ('Name', 253, 17, 25, 25, 0, 1))Id Name1 Jack London2 Honore de Balzac3 Lion Feuchtwanger4 Emile Zola5 Truman Capote实例6、使用Prepared statements执行查询（更安全方便）# -*- coding: UTF-8 -*-# 来源：疯狂的蚂蚁的博客www.crazyant.net总结整理import MySQLdb as mdbimport syscon = mdb.connect('localhost', 'root', 'root', 'test')with con:        cur = con.cursor()    # 我们看到，这里可以通过写一个可以组装的sql语句来进行    cur.execute(""UPDATE Writers SET Name = %s WHERE Id = %s"",        (""Guy de Maupasant"", ""4""))    # 使用cur.rowcount获取影响了多少行    print ""Number of rows updated: %d"" % cur.rowcount结果：Number of rows updated: 1实例7、把图片用二进制存入MYSQL有人喜欢把图片存入MYSQL（这种做法貌似很少吧），我看大部分的程序，图片都是存放在服务器上的文件，数据库中存的只是图片的地址而已，不过MYSQL是支持把图片存入数据库的，也相应的有一个专门的字段BLOB (Binary Large Object)，即较大的二进制对象字段，请看如下程序，注意测试图片自己随便找一个，地址要正确：首先，在数据库中创建一个表，用于存放图片：CREATE TABLE Images(Id INT PRIMARY KEY AUTO_INCREMENT, Data MEDIUMBLOB);然后运行如下PYTHON代码进行：# -*- coding: UTF-8 -*-# 来源：疯狂的蚂蚁的博客www.crazyant.net总结整理import MySQLdb as mdbimport systry:    # 用读文件模式打开图片    fin = open(""../web.jpg"")    # 将文本读入img对象中    img = fin.read()    # 关闭文件    fin.close()except IOError, e:    # 如果出错，打印错误信息    print ""Error %d: %s"" % (e.args[0], e.args[1])    sys.exit(1)try:    # 链接mysql，获取对象    conn = mdb.connect(host='localhost', user='root', passwd='root', db='test')    # 获取执行cursor    cursor = conn.cursor()    # 直接将数据作为字符串，插入数据库    cursor.execute(""INSERT INTO Images SET Data='%s'"" % mdb.escape_string(img))    # 提交数据    conn.commit()    # 提交之后，再关闭cursor和链接    cursor.close()    conn.close()except mdb.Error, e:    # 若出现异常，打印信息    print ""Error %d: %s"" % (e.args[0], e.args[1])    sys.exit(1)结果： escape_string函数将插入数据库的字符串进行转义，这会指一些SQL注入的攻击实例8、从数据库中把图片读出来# -*- coding: UTF-8 -*-# 来源：疯狂的蚂蚁的博客www.crazyant.net总结整理import MySQLdb as mdbimport systry:    # 连接mysql，获取连接的对象    conn = mdb.connect('localhost', 'root', 'root', 'test');    cursor = conn.cursor()    # 执行查询该图片字段的SQL    cursor.execute(""SELECT Data FROM Images LIMIT 1"")    # 使用二进制写文件的方法，打开一个图片文件，若不存在则自动创建    fout = open('image.png', 'wb')    # 直接将数据如文件    fout.write(cursor.fetchone()[0])    # 关闭写入的文件    fout.close()    # 释放查询数据的资源    cursor.close()    conn.close()except IOError, e:    # 捕获IO的异常 ，主要是文件写入会发生错误    print ""Error %d: %s"" % (e.args[0], e.args[1])    sys.exit(1)实例9、使用Transaction即事务（手动提交，自动回滚）# -*- coding: UTF-8 -*-# 来源：疯狂的蚂蚁的博客www.crazyant.net总结整理import MySQLdb as mdbimport systry:    # 连接mysql，获取连接的对象    conn = mdb.connect('localhost', 'root', 'root', 'test');    cursor = conn.cursor()    # 如果某个数据库支持事务，会自动开启    # 这里用的是MYSQL，所以会自动开启事务（若是MYISM引擎则不会）    cursor.execute(""UPDATE Writers SET Name = %s WHERE Id = %s"",        (""Leo Tolstoy"", ""1""))    cursor.execute(""UPDATE Writers SET Name = %s WHERE Id = %s"",        (""Boris Pasternak"", ""2""))    cursor.execute(""UPDATE Writer SET Name = %s WHERE Id = %s"",        (""Leonid Leonov"", ""3""))       # 事务的特性1、原子性的手动提交    conn.commit()    cursor.close()    conn.close()except mdb.Error, e:    # 如果出现了错误，那么可以回滚，就是上面的三条语句要么执行，要么都不执行    conn.rollback()    print ""Error %d: %s"" % (e.args[0], e.args[1])结果：1、因为不存在writer表（SQL第三条语句），所以出现错误：Error 1146: Table 'test.writer' doesn't exist2、出现错误，出发异常处理，3条语句的前两条会自动变成了没有执行，结果不变3、如果本代码放到一个MyISAM引擎表，前两句会执行，第三句不会；如果是INNDB引擎，则都不会执行。 全文完，本文翻译自：http://zetcode.com/databases/mysqlpythontutorial/","['python', '操作', 'mysql', '实例', '代码', '教程', '查询', '手册', '本文', '介绍', 'python', '操作', 'mysql', '执行', 'sql', '语句', '获取', '结果', '遍历', '结果', '取得', '某个', '获取', '字段名', '图片', '插入', '数据库', '执行', '事务', '各种', '代码', '实例', '详细', '介绍', '代码', '居多', '一桌', '丰盛', '唯美', '代码', '大餐', '实例', '取得', 'mysql', '版本', 'windows', '环境', '安装', 'mysql', '模块', '用于', 'python', '开发', '请见', '一篇', '文章', 'mysql', 'python', 'windows', 'exe', '安装文件', '下载', 'coding', 'utf', '-#', '安装', 'mysql', 'db', 'for', 'pythonimport', 'mysqldb', 'as', 'mdbcon', 'nonetry', '连接', 'mysql', '方法', 'connect', 'ip', 'user', 'password', 'dbname', 'con', 'mdb', 'connect', 'localhost', 'root', 'root', 'test', '所有', '查询', '连接', 'con', '一个', '模块', 'cursor', '上面', '运行', 'cur', 'con', 'cursor', '执行', '一个', '查询', 'cur', 'execute', 'select', 'version', '取得', '查询', '结果', '单个', '结果', 'data', 'cur', 'fetchone', 'print', 'database', 'version', 'datafinally', 'if', 'con', '无论如何', '连接', '记得', '关闭', 'con', 'close', '执行', '结果', 'database', 'version', '5.5', '25', '实例', '创建', '一个', '并且', '插入', '数据', '主要', '还是', 'cursor', '上面', '执行', 'execute', '方法', '进行', '源码', 'coding', 'utf', '-#', '来源于', 'www', 'crazyant', 'net', '总结', '整理', 'import', 'mysqldb', 'as', 'mdbimport', 'sys', 'con', '设定', '全局', '连接', 'con', 'mdb', 'connect', 'localhost', 'root', 'root', 'test', 'with', 'con', '获取', '连接', 'cursor', '只有', '获取', 'cursor', '我们', '才能', '进行', '各种', '操作', 'cur', 'con', 'cursor', '创建', '一个', '数据表', 'writers', 'id', 'name', 'cur', 'execute', 'create', 'table', 'if', 'not', 'exists', 'writers', 'id', 'int', 'primary', 'key', 'auto', 'increment', 'name', 'varchar', '25', '以下', '插入', '数据', 'cur', 'execute', 'insert', 'into', 'writers', 'name', 'values', 'jack', 'london', 'cur', 'execute', 'insert', 'into', 'writers', 'name', 'values', 'honore', 'de', 'balzac', 'cur', 'execute', 'insert', 'into', 'writers', 'name', 'values', 'lion', 'feuchtwanger', 'cur', 'execute', 'insert', 'into', 'writers', 'name', 'values', 'emile', 'zola', 'cur', 'execute', 'insert', 'into', 'writers', 'name', 'values', 'truman', 'capote', '运行', '结果', 'phpmyadmin', '查看', 'mysql', '命令行', '查看', '结果', '一样', '实例', 'python', '使用', 'slect', '获取', 'mysql', '数据', '遍历', '这个', '恐怕', '请速', '代码', 'coding', 'utf', '-#', '来源', 'www', 'crazyant', 'net', '整理', '总结', 'import', 'mysqldb', 'as', 'mdbimport', 'sys', '连接', 'mysql', '获取', '连接', '对象', 'con', 'mdb', 'connect', 'localhost', 'root', 'root', 'test', 'with', 'con', '仍然', '第一步', '获取', '连接', 'cursor', '对象', '用于', '执行', '查询', 'cur', 'con', 'cursor', '类似', '其他', '语言', 'query', '函数', 'execute', 'python', '执行', '查询', '函数', 'cur', 'execute', 'select', 'from', 'writers', '使用', 'fetchall', '函数', '结果', '多维', '元组', '存入', 'rows', '里面', 'rows', 'cur', 'fetchall', '依次', '遍历', '结果', '发现', '每个', '元素', '就是', '表中', '一条', '记录', '一个', '元组', '显示', 'for', 'row', 'in', 'rows', 'print', 'row', '运行', '结果', '1l', 'jack', 'london', '2l', 'honore', 'de', 'balzac', '3l', 'lion', 'feuchtwanger', '4l', 'emile', 'zola', '5l', 'truman', 'capote', '上面', '代码', '用来', '所有', '结果', '取出', '不过', '打印', '时候', '每行', '一个', '元祖', '打印', '现在', '我们', '使用', '方法', '取出', '其中', '单个', '数据', 'coding', 'utf', '-#', '来源', '疯狂', '蚂蚁', '博客', 'www', 'crazyant', 'net', '总结', '整理', 'import', 'mysqldb', 'as', 'mdbimport', 'sys', '获取', 'mysql', '链接', '对象', 'con', 'mdb', 'connect', 'localhost', 'root', 'root', 'test', 'with', 'con', '获取', '执行', '查询', '对象', 'cur', 'con', 'cursor', '执行', '那个', '查询', '这里', 'select', '语句', 'cur', 'execute', 'select', 'from', 'writers', '使用', 'cur', 'rowcount', '获取', '结果', '条数', 'numrows', 'int', 'cur', 'rowcount', '循环', 'numrows', '每次', '取出', '一行', '数据', 'for', 'in', 'range', 'numrows', '每次', '取出', '一行', '放到', 'row', '这是', '一个', '元组', 'id', 'name', 'row', 'cur', 'fetchone', '直接', '输出', '两个', '元素', 'print', 'row', 'row', '运行', '结果', 'jack', 'london2', 'honore', 'de', 'balzac3', 'lion', 'feuchtwanger4', 'emile', 'zola5', 'truman', 'capote', 'numrows', 'int', 'cur', 'rowcount', '用于', '获取', '结果', '数目', 'row', 'cur', 'fetchone', '每次', '取出', '一行', '数据', '同时', '记录集', '指针', '执行', '一行', '实例', '使用', '字典', 'cursor', '取得', '结果', '可以', '使用', '表字', '名字', '访问', 'coding', 'utf', '-#', '来源', '疯狂', '蚂蚁', '博客', 'www', 'crazyant', 'net', '总结', '整理', 'import', 'mysqldb', 'as', 'mdbimport', 'sys', '获得', 'mysql', '查询', '链接', '对象', 'con', 'mdb', 'connect', 'localhost', 'root', 'root', 'test', 'with', 'con', '获取', '连接', '字典', 'cursor', '注意', '获取', '方法', '一个', 'cursor', '其实', 'cursor', '子类', 'cur', 'con', 'cursor', 'mdb', 'cursors', 'dictcursor', '执行', '语句', '不变', 'cur', 'execute', 'select', 'from', 'writers', '获取数据', '方法', '不变', 'rows', 'cur', 'fetchall', '遍历', '数据', '不变', '比上', '一个', '直接', '一点', 'for', 'row', 'in', 'rows', '这里', '可以', '使用', '键值', '方法', '键名字', '获取数据', 'print', 'row', 'id', 'row', 'name', '实例', '获取', '单个', '字段名', '信息', '方法', 'coding', 'utf', '-#', '来源', '疯狂', '蚂蚁', '博客', 'www', 'crazyant', 'net', '总结', '整理', 'import', 'mysqldb', 'as', 'mdbimport', 'sys', '获取', '数据库', '链接', '对象', 'con', 'mdb', 'connect', 'localhost', 'root', 'root', 'test', 'with', 'con', '获取', '普通', '查询', 'cursor', 'cur', 'con', 'cursor', 'cur', 'execute', 'select', 'from', 'writers', 'rows', 'cur', 'fetchall', '获取', '连接', '对象', '描述', '信息', 'desc', 'cur', 'description', 'print', 'cur', 'description', 'desc', '打印', '表头', '就是', '字段名', 'print', '3s', 'desc', 'desc', 'for', 'row', 'in', 'rows', '打印', '结果', 'print', '2s', '3s', 'row', '运行', '结果', 'cur', 'description', 'id', '11', '11', 'name', '253', '17', '25', '25', 'id', 'name1', 'jack', 'london2', 'honore', 'de', 'balzac3', 'lion', 'feuchtwanger4', 'emile', 'zola5', 'truman', 'capote', '实例', '使用', 'prepared', 'statements', '执行', '查询', '安全', '方便', 'coding', 'utf', '-#', '来源', '疯狂', '蚂蚁', '博客', 'www', 'crazyant', 'net', '总结', '整理', 'import', 'mysqldb', 'as', 'mdbimport', 'syscon', 'mdb', 'connect', 'localhost', 'root', 'root', 'test', 'with', 'con', 'cur', 'con', 'cursor', '我们', '看到', '这里', '可以', '通过', '一个', '可以', '组装', 'sql', '语句', '进行', 'cur', 'execute', 'update', 'writers', 'set', 'name', 'where', 'id', 'guy', 'de', 'maupasant', '使用', 'cur', 'rowcount', '获取', '影响', '多少', 'print', 'number', 'of', 'rows', 'updated', 'cur', 'rowcount', '结果', 'number', 'of', 'rows', 'updated', '实例', '图片', '二进制', '存入', 'mysql', '有人', '喜欢', '图片', '存入', 'mysql', '这种', '做法', '貌似', '很少', '大部分', '程序', '图片', '存放', '服务器', '文件', '数据库', '中存', '只是', '图片', '地址', '而已', '不过', 'mysql', '支持', '图片', '存入', '数据库', '相应', '一个', '专门', 'blob', 'binary', 'large', 'object', '较大', '二进制', '对象', '如下', '程序', '注意', '测试', '图片', '自己', '随便', '一个', '地址', '正确', '首先', '数据库', '创建', '一个', '用于', '存放', '图片', 'create', 'table', 'images', 'id', 'int', 'primary', 'key', 'auto', 'increment', 'data', 'mediumblob', '然后', '运行', '如下', 'python', '代码', '进行', 'coding', 'utf', '-#', '来源', '疯狂', '蚂蚁', '博客', 'www', 'crazyant', 'net', '总结', '整理', 'import', 'mysqldb', 'as', 'mdbimport', 'systry', '用读', '文件', '模式', '打开', '图片', 'fin', 'open', '..', 'web', 'jpg', '文本', '读入', 'img', '对象', 'img', 'fin', 'read', '关闭', '文件', 'fin', 'close', 'except', 'ioerror', '如果', '出错', '打印', '错误信息', 'print', 'error', 'args', 'args', 'sys', 'exit', 'try', '链接', 'mysql', '获取', '对象', 'conn', 'mdb', 'connect', 'host', 'localhost', 'user', 'root', 'passwd', 'root', 'db', 'test', '获取', '执行', 'cursor', 'cursor', 'conn', 'cursor', '直接', '数据', '作为', '字符串', '插入', '数据库', 'cursor', 'execute', 'insert', 'into', 'images', 'set', 'data', 'mdb', 'escape', 'string', 'img', '提交', '数据', 'conn', 'commit', '提交', '之后', '关闭', 'cursor', '链接', 'cursor', 'close', 'conn', 'close', 'except', 'mdb', 'error', '出现异常', '打印信息', 'print', 'error', 'args', 'args', 'sys', 'exit', '结果', 'escape', 'string', '函数', '插入', '数据库', '字符串', '进行', '转义', '这会', '一些', 'sql', '注入', '攻击', '实例', '数据库', '图片', '读出来', 'coding', 'utf', '-#', '来源', '疯狂', '蚂蚁', '博客', 'www', 'crazyant', 'net', '总结', '整理', 'import', 'mysqldb', 'as', 'mdbimport', 'systry', '连接', 'mysql', '获取', '连接', '对象', 'conn', 'mdb', 'connect', 'localhost', 'root', 'root', 'test', 'cursor', 'conn', 'cursor', '执行', '查询', '图片', '字段', 'sql', 'cursor', 'execute', 'select', 'data', 'from', 'images', 'limit', '使用', '二进制', '文件', '方法', '打开', '一个', '图片', '文件', '存在', '自动', '创建', 'fout', 'open', 'image', 'png', 'wb', '直接', '数据', '文件', 'fout', 'write', 'cursor', 'fetchone', '关闭', '写入', '文件', 'fout', 'close', '释放', '查询', '数据', '资源', 'cursor', 'close', 'conn', 'close', 'except', 'ioerror', '捕获', 'io', '异常', '主要', '文件', '写入', '发生', '错误', 'print', 'error', 'args', 'args', 'sys', 'exit', '实例', '使用', 'transaction', '事务', '手动', '提交', '自动', '回滚', 'coding', 'utf', '-#', '来源', '疯狂', '蚂蚁', '博客', 'www', 'crazyant', 'net', '总结', '整理', 'import', 'mysqldb', 'as', 'mdbimport', 'systry', '连接', 'mysql', '获取', '连接', '对象', 'conn', 'mdb', 'connect', 'localhost', 'root', 'root', 'test', 'cursor', 'conn', 'cursor', '如果', '某个', '数据库', '支持', '事务', '自动', '开启', '这里', 'mysql', '所以', '自动', '开启', '事务', 'myism', '引擎', '不会', 'cursor', 'execute', 'update', 'writers', 'set', 'name', 'where', 'id', 'leo', 'tolstoy', 'cursor', 'execute', 'update', 'writers', 'set', 'name', 'where', 'id', 'boris', 'pasternak', 'cursor', 'execute', 'update', 'writer', 'set', 'name', 'where', 'id', 'leonid', 'leonov', '事务', '特性', '原子', '手动', '提交', 'conn', 'commit', 'cursor', 'close', 'conn', 'close', 'except', 'mdb', 'error', '如果', '出现', '错误', '那么', '可以', '回滚', '就是', '上面', '三条', '语句', '要么', '执行', '要么', '执行', 'conn', 'rollback', 'print', 'error', 'args', 'args', '结果', '因为', '存在', 'writer', 'sql', '第三条', '语句', '所以', '出现', '错误', 'error', '1146', 'table', 'test', 'writer', 'doesn', 'exist2', '出现', '错误', '出发', '异常', '处理', '语句', '两条', '自动', '变成', '没有', '执行', '结果', '不变', '如果', '代码', '放到', '一个', 'myisam', '引擎', '两句', '执行', '第三句', '不会', '如果', 'inndb', '引擎', '不会', '执行', '全文完', '本文', '翻译', 'http', 'zetcode', 'com', 'databases', 'mysqlpythontutorial']","[[-0.22148894 -0.11751262  0.22971446  0.14317985  0.27539145 -0.36299297
  -0.13934603  0.48823634 -0.04749005 -0.09654127 -0.05216467 -0.35794971
  -0.16247715  0.54729652  0.15016935 -0.10675271 -0.12842049  0.00624497
  -0.06220015 -0.49825768 -0.02352361  0.24492173 -0.04650776 -0.18267768
   0.06980054 -0.48439943 -0.30409185  0.05509772 -0.22835074 -0.07149514
   0.18062959  0.02926067  0.00387324 -0.13334624 -0.16223526  0.3322295
  -0.18553136 -0.25167919  0.088175   -0.71742802 -0.13565065 -0.58073915
  -0.05950102 -0.01508317 -0.12983652 -0.21276303 -0.23594688  0.38122558
  -0.15321275  0.43959144  0.15255314 -0.27240136 -0.10979217 -0.18259924
   0.00532411  0.39016096  0.17655102 -0.08510283  0.11529398 -0.13831407
   0.09463013  0.23953956  0.01659473  0.08989444 -0.3665172   0.03191211
   0.04396255 -0.02115623 -0.2839593   0.42482755  0.10855309 -0.18232159
   0.37920491 -0.31860004  0.55757327  0.25141803  0.15808235 -0.15600469
  -0.30567057 -0.13687849 -0.02405699  0.04787877 -0.1118068   0.36809483
  -0.34170382  0.20068044 -0.27861279  0.44041183  0.48932602  0.14971306
   0.24860398  0.10644367  0.35069851  0.18108194  0.19327945  0.3587786
   0.11463299 -0.29682695 -0.01422768 -0.11760281]]"
700,数据采集技术之在Python中Libxml模块安装与使用XPath,"为了使用XPath技术，对爬虫抓取的网页数据进行抽取（如标题、正文等等），之后在Windows下安装libxml2模块（安装后使用的是Libxml模块），该模块含有xpath。准备需要的软件包：Python 2.7lxml-2.3.4.win32-py2.7.‌exe 安装最好使用已打包的exe，这个包可以自动安装好lxml来使用安装Python2.7的安装这里不再赘述lxml的安装，直接运行exe，会自动找到py27的目录进行安装使用XPath抽取下面用一个实例来验证，程序来自redice's Blog的文章：libxml2库的安装，xpath的使用#coding:utf-8import codecsimport sys#不加如下行，无法打印Unicode字符，产生UnicodeEncodeError错误。?sys.stdout = codecs.lookup('iso8859-1')[-1](sys.stdout)from lxml import etreehtml = r'''<div>    <div>redice</div>    <div id=""email"">redice@163.com</div>    <div name=""address"">中国</div>    <div>http://www.redicecn.com</div></div>'''tree = etree.HTML(html)#获取email。email所在的div的id为emailnodes = tree.xpath(""//div[@id='email']"")print nodes[0].text#获取地址。地址所在的div的name为addressnodes = tree.xpath(""//div[@name='address']"")print nodes[0].text#获取博客地址。博客地址位于email之后兄弟节点的第二个nodes = tree.xpath(""//div[@id='email']/following-sibling::div[2]"")print nodes[0].text 运行结果：redice@163.com中国http://www.redicecn.com","['数据', '采集', '技术', 'python', 'libxml', '模块', '安装', '使用', 'xpath', '为了', '使用', 'xpath', '技术', '爬虫', '抓取', '网页', '数据', '进行', '抽取', '标题', '正文', '等等', '之后', 'windows', '安装', 'libxml2', '模块', '安装', '使用', 'libxml', '模块', '模块', '含有', 'xpath', '准备', '需要', '软件包', 'python', '2.7', 'lxml', '2.3', 'win32', 'py2.7', 'exe', '安装', '最好', '使用', '打包', 'exe', '这个', '可以', '自动', '安装', 'lxml', '使用', '安装', 'python2.7', '安装', '这里', '不再', '赘述', 'lxml', '安装', '直接', '运行', 'exe', '自动', '找到', 'py27', '目录', '进行', '安装', '使用', 'xpath', '抽取', '下面', '一个', '实例', '验证', '程序', '来自', 'redice', 'blog', '文章', 'libxml2', '安装', 'xpath', '使用', 'coding', 'utf', '8import', 'codecsimport', 'sys', '不加', '如下', '无法', '打印', 'unicode', '字符', '产生', 'unicodeencodeerror', '错误', 'sys', 'stdout', 'codecs', 'lookup', 'iso8859', 'sys', 'stdout', 'from', 'lxml', 'import', 'etreehtml', 'div', 'div', 'redice', 'div', 'div', 'id', 'email', 'redice', '163', 'com', 'div', 'div', 'name', 'address', '中国', 'div', 'div', 'http', 'www', 'redicecn', 'com', 'div', 'div', 'tree', 'etree', 'html', 'html', '获取', 'email', 'email', '所在', 'div', 'id', 'emailnodes', 'tree', 'xpath', 'div', 'id', 'email', 'print', 'nodes', 'text', '获取', '地址', '地址', '所在', 'div', 'name', 'addressnodes', 'tree', 'xpath', 'div', 'name', 'address', 'print', 'nodes', 'text', '获取', '博客地址', '博客地址', '位于', 'email', '之后', '兄弟', '节点', '第二个', 'nodes', 'tree', 'xpath', 'div', 'id', 'email', 'following', 'sibling', 'div', 'print', 'nodes', 'text', '运行', '结果', 'redice', '163', 'com', '中国', 'http', 'www', 'redicecn', 'com']","[[-0.22431562 -0.12299782  0.23751275  0.22008733  0.21645984 -0.37779986
  -0.12576162  0.48462757 -0.0464733  -0.08484986 -0.07842379 -0.37247745
  -0.13837176  0.53540028  0.11467473 -0.12624193 -0.12194976  0.01299112
  -0.02875908 -0.43232639 -0.0119965   0.26096132 -0.07121203 -0.18853747
   0.0375168  -0.44930685 -0.31381937  0.07079793 -0.20354794 -0.06841116
   0.17996145  0.08928936  0.01144995 -0.12100671 -0.18107874  0.3525648
  -0.17034989 -0.24655505  0.07518456 -0.66836139 -0.09424804 -0.54089532
  -0.04094737 -0.02448246 -0.12176103 -0.22924253 -0.29129381  0.39029156
  -0.06977606  0.38497261  0.10673129 -0.2849861  -0.03744723 -0.21352235
  -0.00774761  0.40633488  0.16996049 -0.08570879  0.12480034 -0.11122276
   0.1215774   0.21990296  0.01170797  0.0875991  -0.3407322   0.04336585
  -0.00286213  0.01953322 -0.23818495  0.4193615   0.0714763  -0.17417401
   0.3976109  -0.32044624  0.54937059  0.27369584  0.22269963 -0.187457
  -0.24713039 -0.17541348 -0.06903948  0.03951514 -0.11693083  0.3834522
  -0.35806831  0.17895405 -0.27489559  0.4695617   0.5098019   0.16647109
   0.21124718  0.11390464  0.31904764  0.16387256  0.1923136   0.40703338
   0.08844558 -0.24949687  0.09024804 -0.10631206]]"
707,数据采集简单示例：采集爱帮网电话号码,"爱帮网单个网址：http://www.aibang.com/detail/17881112-420243957截图：本文采集该页面的标题和2个电话号码，具体的python代码：# -*- coding: UTF-8 -*-'''Created on 2012-6-9@author: crazyant'''#导入urllib2库，用于获取网页import urllib2#使用开源库Webscraping库的xpath模块from Webscraping import xpath,common#首先，发送请求到爱帮网的一个页面，该页面含有地址req = urllib2.Request('http://www.aibang.com/detail/17881112-420243957')#获得响应reponse = urllib2.urlopen(req)#将响应的内容存入html变量html = reponse.read()#以下抓取页面的标题title = xpath.search(html, '//div[@class=""ppc_title""]/h1[1]')print '标题：'#这里要输出中文，因此采用common的to_unicode输出print common.to_unicode(title[0], 'utf-8')#使用xpath得到电话号码的节点tel = xpath.search(html, '//dl[@class=""detail_list""]/dd[@class=""fb""]')#使用正则拆分数字import rem = re.search(r'([\d-]+)\s([\d-]+)', tel[0])#如果匹配，输出两个单个电话号码print '电话号：'if m is not None:    for t in m.groups():        print t 运行结果：标题：坊上人清真饭庄(高新店)电话号：029-88222668029-88226458其中主要用到了以下模块：xpath：用于使用路径的方法找到节点re：正则表达式模块，用于拆分电话号码（其实字符串函数也可以）urllib2：用于请求指定URL的页面内容，存于字符串然后分析webscraping 库的common模块：用于将获取到得中文文本转成unicode编码，这样才能够输出","['数据', '采集', '简单', '示例', '采集', '爱帮网', '电话号码', '爱帮网', '单个', '网址', 'http', 'www', 'aibang', 'com', 'detail', '17881112', '420243957', '截图', '本文', '采集', '页面', '标题', '电话号码', '具体', 'python', '代码', 'coding', 'utf', 'created', 'on', '2012', 'author', 'crazyant', '导入', 'urllib2', '用于', '获取', '网页', 'import', 'urllib2', '使用', '开源', 'webscraping', 'xpath', '模块', 'from', 'webscraping', 'import', 'xpath', 'common', '首先', '发送', '请求', '帮网', '一个', '页面', '页面', '含有', '地址', 'req', 'urllib2', 'request', 'http', 'www', 'aibang', 'com', 'detail', '17881112', '420243957', '获得', '响应', 'reponse', 'urllib2', 'urlopen', 'req', '响应', '内容', '存入', 'html', '变量', 'html', 'reponse', 'read', '以下', '抓取', '页面', '标题', 'title', 'xpath', 'search', 'html', 'div', 'class', 'ppc', 'title', 'h1', 'print', '标题', '这里', '输出', '中文', '因此', '采用', 'common', 'to', 'unicode', '输出', 'print', 'common', 'to', 'unicode', 'title', 'utf', '使用', 'xpath', '得到', '电话号码', '节点', 'tel', 'xpath', 'search', 'html', 'dl', 'class', 'detail', 'list', 'dd', 'class', 'fb', '使用', '正则', '拆分', '数字', 'import', 'rem', 're', 'search', 'tel', '如果', '匹配', '输出', '两个', '单个', '电话号码', 'print', '电话', 'if', 'is', 'not', 'none', 'for', 'in', 'groups', 'print', '运行', '结果', '标题', '清真', '饭庄', '新店', '电话', '029', '88222668029', '88226458', '其中', '主要', '用到', '以下', '模块', 'xpath', '用于', '使用', '路径', '方法', '找到', '节点', 're', '正则表达式', '模块', '用于', '拆分', '电话号码', '其实', '字符串', '函数', '可以', 'urllib2', '用于', '请求', '指定', 'url', '页面', '内容', '存于', '字符串', '然后', '分析', 'webscraping', 'common', '模块', '用于', '获取', '中文', '文本', '转成', 'unicode', '编码', '这样', '能够', '输出']","[[-0.24316711 -0.12490059  0.26116631  0.20928039  0.24243189 -0.39673321
  -0.12898862  0.50267941 -0.04921919 -0.0995788  -0.06805028 -0.39939594
  -0.1433915   0.56680968  0.13336813 -0.13005226 -0.13628693  0.00283702
  -0.03796976 -0.47801738 -0.01899337  0.27330052 -0.06814132 -0.19525146
   0.04495334 -0.4814356  -0.32707438  0.06568699 -0.22445646 -0.07564239
   0.18460863  0.07042276  0.01197463 -0.12565233 -0.19038126  0.36318296
  -0.18408214 -0.26624422  0.07785398 -0.71856694 -0.1118652  -0.58439238
  -0.05443739 -0.02774095 -0.127817   -0.24413056 -0.29598516  0.40846962
  -0.1000922   0.42821995  0.12046215 -0.29605305 -0.05778928 -0.22264767
  -0.00856205  0.42248935  0.17615496 -0.09512455  0.12858195 -0.12925688
   0.12008912  0.23929538  0.01063564  0.08757319 -0.37066254  0.04656088
   0.01136516  0.0098066  -0.26043145  0.44598521  0.08414627 -0.18314487
   0.41737681 -0.3363104   0.58398111  0.28709001  0.22075684 -0.19638165
  -0.27094845 -0.18006309 -0.05888901  0.04257355 -0.12350707  0.40404034
  -0.37337126  0.19391285 -0.29281103  0.49589828  0.53381636  0.17453378
   0.22610889  0.12374534  0.34802024  0.17881156  0.20601282  0.42193721
   0.1014592  -0.28107009  0.07086865 -0.11560535]]"
712,Python中的操作符重载,"关于Python中的操作符重载，可以查看2.7.3文档地址：http://docs.python.org/reference/datamodel.html#special-method-names或者一篇详细的中文教程：Python 魔术方法指南类可以重载python的操作符，操作符重载使我们的对象与内置的一样。__X__的名字的方法是特殊的挂钩（hook），python通过这种特殊的命名来拦截操作符，以实现重载。 python在计算操作符时会自动调用这样的方法，例如：如果对象继承了__add__方法，当它出现在+表达式中时会调用这个方法。通过重载，用户定义的对象就像内置的一样。在类中重载操作符操作符重载使得类能拦截标准的python操作。类可以重载所有的python的表达式操作符。类可以重载对象操作：print,函数调用，限定等。重载使得类的实例看起来更像内置的。重载是通过特殊命名的类方法来实现的。魔术方法、调用方式、解释：__new__(cls [,...])instance = MyClass(arg1, arg2)__new__ 在创建实例的时候被调用__init__(self [,...])instance = MyClass(arg1, arg2)__init__ 在创建实例的时候被调用__cmp__(self, other)self == other, self > other, 等。在比较的时候调用__pos__(self)+self一元加运算符__neg__(self)-self一元减运算符__invert__(self)~self取反运算符__index__(self)x[self]对象被作为索引使用的时候__nonzero__(self)bool(self)对象的布尔值__getattr__(self, name)self.name # name 不存在访问一个不存在的属性时__setattr__(self, name, val)self.name = val对一个属性赋值时__delattr__(self, name)del self.name删除一个属性时__getattribute__(self, name)self.name访问任何属性时__getitem__(self, key)self[key]使用索引访问元素时__setitem__(self, key, val)self[key] = val对某个索引值赋值时__delitem__(self, key)del self[key]删除某个索引值时__iter__(self)for x in self迭代时__contains__(self, value)value in self, value not in self使用 in 操作测试关系时__concat__(self, value)self + other连接两个对象时__call__(self [,...])self(args)“调用”对象时__enter__(self)with self as x:with 语句环境管理__exit__(self, exc, val, trace)with self as x:with 语句环境管理__getstate__(self)pickle.dump(pkl_file, self)序列化__setstate__(self)data = pickle.load(pkl_file)序列化例子：# coding:utf-8#__getitem__拦截了所有的索引操作class Obj:    #重载操作符的写法，这里重载了下标操作符    def __getitem__(self,index):        return index ** 2#取得indexer的对象x = Obj()for i in range(5):    #x[i]将调用__getitem__(x,i)    print x[i] 调用结果：014916","['python', '操作符', '重载', '关于', 'python', '操作符', '重载', '可以', '查看', '2.7', '文档', '地址', 'http', 'docs', 'python', 'org', 'reference', 'datamodel', 'html', 'special', 'method', 'names', '或者', '一篇', '详细', '中文', '教程', 'python', '魔术', '方法', '指南', '可以', '重载', 'python', '操作符', '操作符', '重载', '我们', '对象', '内置', '一样', '__', '__', '名字', '方法', '特殊', '挂钩', 'hook', 'python', '通过', '这种', '特殊', '命名', '拦截', '操作符', '实现', '重载', 'python', '计算', '操作符', '时会', '自动', '调用', '这样', '方法', '例如', '如果', '对象', '继承', '__', 'add', '__', '方法', '出现', '表达式', '时会', '调用', '这个', '方法', '通过', '重载', '用户', '定义', '对象', '内置', '一样', '重载', '操作符', '操作符', '重载', '使得', '类能', '拦截', '标准', 'python', '操作', '可以', '重载', '所有', 'python', '表达式', '操作符', '可以', '重载', '对象', '操作', 'print', '函数调用', '限定', '重载', '使得', '实例', '看起来', '内置', '重载', '通过', '特殊', '命名', '方法', '实现', '魔术', '方法', '调用', '方式', '解释', '__', 'new', '__', 'cls', '...', 'instance', 'myclass', 'arg1', 'arg2', '__', 'new', '__', '创建', '实例', '时候', '调用', '__', 'init', '__', 'self', '...', 'instance', 'myclass', 'arg1', 'arg2', '__', 'init', '__', '创建', '实例', '时候', '调用', '__', 'cmp', '__', 'self', 'other', 'self', 'other', 'self', 'other', '比较', '时候', '调用', '__', 'pos', '__', 'self', 'self', '一元', '运算符', '__', 'neg', '__', 'self', 'self', '一元', '运算符', '__', 'invert', '__', 'self', 'self', '取反', '运算符', '__', 'index', '__', 'self', 'self', '对象', '作为', '索引', '使用', '时候', '__', 'nonzero', '__', 'self', 'bool', 'self', '对象', '布尔值', '__', 'getattr', '__', 'self', 'name', 'self', 'name', 'name', '存在', '访问', '一个', '存在', '属性', '__', 'setattr', '__', 'self', 'name', 'val', 'self', 'name', 'val', '一个', '属性', '赋值', '__', 'delattr', '__', 'self', 'name', 'del', 'self', 'name', '删除', '一个', '属性', '__', 'getattribute', '__', 'self', 'name', 'self', 'name', '访问', '任何', '属性', '__', 'getitem', '__', 'self', 'key', 'self', 'key', '使用', '索引', '访问', '元素', '__', 'setitem', '__', 'self', 'key', 'val', 'self', 'key', 'val', '某个', '索引', '赋值', '__', 'delitem', '__', 'self', 'key', 'del', 'self', 'key', '删除', '某个', '索引', '值时', '__', 'iter', '__', 'self', 'for', 'in', 'self', '迭代', '__', 'contains', '__', 'self', 'value', 'value', 'in', 'self', 'value', 'not', 'in', 'self', '使用', 'in', '操作', '测试', '关系', '__', 'concat', '__', 'self', 'value', 'self', 'other', '连接', '两个', '对象', '__', 'call', '__', 'self', '...', 'self', 'args', '调用', '对象', '__', 'enter', '__', 'self', 'with', 'self', 'as', 'with', '语句', '环境', '管理', '__', 'exit', '__', 'self', 'exc', 'val', 'trace', 'with', 'self', 'as', 'with', '语句', '环境', '管理', '__', 'getstate', '__', 'self', 'pickle', 'dump', 'pkl', 'file', 'self', '序列化', '__', 'setstate', '__', 'self', 'data', 'pickle', 'load', 'pkl', 'file', '序列化', '例子', 'coding', 'utf', '#__', 'getitem', '__', '拦截', '所有', '索引', '操作', 'class', 'obj', '重载', '操作符', '写法', '这里', '重载', '下标', '操作符', 'def', '__', 'getitem', '__', 'self', 'index', 'return', 'index', '取得', 'indexer', '对象', 'obj', 'for', 'in', 'range', '调用', '__', 'getitem', '__', 'print', '调用', '结果', '014916']","[[-0.0489028  -0.20456268  0.23027271 -0.03311139  0.35186819 -0.49858626
  -0.04610716  0.56050414 -0.24174778 -0.36665735  0.04915299 -0.48789297
  -0.37988317  0.5483717   0.24165066 -0.13634184 -0.13046556  0.13073481
  -0.03499365 -0.90259703 -0.32375201  0.33070587  0.02906138 -0.53694282
   0.03572095 -0.41478083 -0.34641571 -0.09912536 -0.49464914 -0.07631756
   0.12359574 -0.13942648  0.28503022 -0.30446215 -0.41277074  0.32478496
  -0.55395779 -0.49597657  0.08076273 -0.80980274 -0.13696573 -0.80288284
  -0.19173736  0.27587076 -0.03656434 -0.42937725  0.04831767  0.05405724
  -0.2695664   0.80219242  0.16318422 -0.39327578 -0.30071253  0.0735313
  -0.19951205  0.49868516 -0.01462402 -0.22721539  0.2588252  -0.42359348
   0.31589975  0.25535676  0.08101932  0.25392894 -0.53994839  0.19143175
   0.05556214 -0.15692991 -0.66363776  0.49445794 -0.07424616 -0.03382225
   0.41781842 -0.42107673  0.77219666  0.40411753 -0.21751118 -0.08128704
  -0.68039662  0.22252044  0.18891856  0.19451009 -0.42512958  0.47404148
  -0.26087536  0.17555265 -0.29436208  0.50597766  0.59523414  0.07131167
   0.13096386  0.05990157  0.3594556   0.22911735  0.29246821  0.29569006
   0.41098375 -0.38190386 -0.40055544 -0.22851197]]"
717,PHP魔法方法之__sleep()方法和__wakeup()方法,"public array __sleep ( void )void __wakeup ( void )serialize() 函数会检查是否存在一个魔术方法 __sleep().如果存在，__sleep()方法会先被调用， 然后才执行序列化操作。这个功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法不返回任何内容，则NULL被序列化，并产生 一个E_NOTICE错误。__sleep()不可能返回父类的私有属性，这样做会导致一个E_NOTICE的错误__sleep()方法常用于提交未提交的数据，或类似的清理操作。同时，如果你有一些很大的对象， 不需要全部保存，这个功能就很好用。与之相反，unserialize()会检查是否存在一个__wakeup()方法。如果存在，则会先调用 __wakeup方法，预先准备对象需要的资源。__wakeup()经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。代码例子： <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""><?phpclass Connection{protected $link;private $server, $username, $password, $db;public function __construct($server, $username, $password, $db){$this->server = $server;$this->username = $username;$this->password = $password;$this->db = $db;$this->connect();}private function connect(){print ""function connect().<br>"";$this->link = mysql_connect($this->server, $this->username, $this->password);mysql_select_db($this->db, $this->link);}/** * * serialize() 函数会检查是否存在一个魔术方法 __sleep(). * 如果存在，__sleep()方法会先被调用， 然后才执行序列化操作。 * 这个功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。 * 如果该方法不返回任何内容，则NULL被序列化，并产生 一个E_NOTICE错误。 */public function __sleep(){print ""Magic methods__sleep().<br>"";return array('server', 'username', 'password', 'db');}/** * unserialize()会检查是否存在一个__wakeup()方法。 * 如果存在，则会先调用 __wakeup方法，预先准备对象需要的资源 * 注意：这里说的“对象需要的资源”，并不是说对象的属性等状态 * 这些状态在调用__wakeup之前已经存在，__wakeup只是做一些数据库连接等操作 */public function __wakeup(){print ""in methods wakeup before connect, "".$this->server.""<br>"";print ""Magic methods__wakeup().<br>"";$this->connect();print ""in methods wakeup after connect, "".$this->server.""<br>"";}}//以下两个代码块，先执行第一块，再执行第二块/*$conn = new Connection('127.0.0.1', 'root', 'root', 'text'); $ss = serialize($conn); $file = fopen('obj.txt', 'w'); fwrite($file,$ss); */$file = fopen('obj.txt', 'r');$ss = fread($file, filesize('obj.txt'));$conn = unserialize($ss);?> 第一段（序列化）的执行结果：function connect().Magic methods__sleep().同时，obj.txt里面是序列化的对象字符串第二段（反序列化的）执行解雇：in methods wakeup before connect, 127.0.0.1Magic methods__wakeup().function connect().in methods wakeup after connect, 127.0.0.1总结：魔法方法是在某一个时刻，被自动调用的函数，类似于操作符重载，这里的sleep发生在序列化之前，wake发生在反序列化之前。PHP其他一些魔法方法：__destruct()当删除一个对象或对象操作终止的时候调用该方法__get()当试图读取一个并不存在的属性的时候被调用__set()当试图向一个并不存在的属性写入值的时候被调用__call()当试图调用一个对象并不存在的方法时调用该方法__toString()当打印一个对象的时候被调用__clone()当对象被克隆时被调用__sleep()当对象被串行化时调用__wakeup()当对象被反串行化时调用__invoke()在代码试图把对象当作函数来使用时候调用__autoload()简单的说就是类的自动加载 __LINE__文件中的当前行号__FILE__文件的完整路径和文件名__DIR__文件所在的目录__FUNCTION__函数名称__CLASS__类的名称__METHOD__类的方法名__NAMESPACE__当前命名空间的名称","['php', '魔法', '方法', '__', 'sleep', '方法', '__', 'wakeup', '方法', 'public', 'array', '__', 'sleep', 'void', 'void', '__', 'wakeup', 'void', 'serialize', '函数', '检查', '是否', '存在', '一个', '魔术', '方法', '__', 'sleep', '如果', '存在', '__', 'sleep', '方法', '会先', '调用', '然后', '执行', '序列化', '操作', '这个', '功能', '可以', '用于', '清理', '对象', '返回', '一个', '包含', '对象', '所有', '序列化', '变量', '名称', '数组', '如果', '方法', '返回', '任何', '内容', 'null', '序列化', '产生', '一个', 'notice', '错误', '__', 'sleep', '可能', '返回', '父类', '私有', '属性', '这样', '做会', '导致', '一个', 'notice', '错误', '__', 'sleep', '方法', '常用', '提交', '提交', '数据', '类似', '清理', '操作', '同时', '如果', '一些', '很大', '对象', '需要', '全部', '保存', '这个', '功能', '相反', 'unserialize', '检查', '是否', '存在', '一个', '__', 'wakeup', '方法', '如果', '存在', '调用', '__', 'wakeup', '方法', '预先', '准备', '对象', '需要', '资源', '__', 'wakeup', '经常', '序列化', '操作', '例如', '重新', '建立', '数据库', '连接', '执行', '其它', '初始化', '操作', '代码', '例子', 'meta', 'http', 'equiv', 'content', 'type', 'content', 'text', 'html', 'charset', 'utf', 'phpclass', 'connection', 'protected', 'link', 'private', 'server', 'username', 'password', 'db', 'public', 'function', '__', 'construct', 'server', 'username', 'password', 'db', 'this', 'server', 'server', 'this', 'username', 'username', 'this', 'password', 'password', 'this', 'db', 'db', 'this', 'connect', 'private', 'function', 'connect', 'print', 'function', 'connect', 'br', 'this', 'link', 'mysql', 'connect', 'this', 'server', 'this', 'username', 'this', 'password', 'mysql', 'select', 'db', 'this', 'db', 'this', 'link', 'serialize', '函数', '检查', '是否', '存在', '一个', '魔术', '方法', '__', 'sleep', '如果', '存在', '__', 'sleep', '方法', '会先', '调用', '然后', '执行', '序列化', '操作', '这个', '功能', '可以', '用于', '清理', '对象', '返回', '一个', '包含', '对象', '所有', '序列化', '变量', '名称', '数组', '如果', '方法', '返回', '任何', '内容', 'null', '序列化', '产生', '一个', 'notice', '错误', 'public', 'function', '__', 'sleep', 'print', 'magic', 'methods', '__', 'sleep', 'br', 'return', 'array', 'server', 'username', 'password', 'db', 'unserialize', '检查', '是否', '存在', '一个', '__', 'wakeup', '方法', '如果', '存在', '调用', '__', 'wakeup', '方法', '预先', '准备', '对象', '需要', '资源', '注意', '这里', '对象', '需要', '资源', '不是', '对象', '属性', '状态', '这些', '状态', '调用', '__', 'wakeup', '之前', '已经', '存在', '__', 'wakeup', '只是', '一些', '数据库', '连接', '操作', 'public', 'function', '__', 'wakeup', 'print', 'in', 'methods', 'wakeup', 'before', 'connect', 'this', 'server', 'br', 'print', 'magic', 'methods', '__', 'wakeup', 'br', 'this', 'connect', 'print', 'in', 'methods', 'wakeup', 'after', 'connect', 'this', 'server', 'br', '以下', '两个', '代码', '执行', '第一块', '执行', '第二块', 'conn', 'new', 'connection', '127.0', '0.1', 'root', 'root', 'text', 'ss', 'serialize', 'conn', 'file', 'fopen', 'obj', 'txt', 'fwrite', 'file', 'ss', 'file', 'fopen', 'obj', 'txt', 'ss', 'fread', 'file', 'filesize', 'obj', 'txt', 'conn', 'unserialize', 'ss', '第一段', '序列化', '执行', '结果', 'function', 'connect', 'magic', 'methods', '__', 'sleep', '同时', 'obj', 'txt', '里面', '序列化', '对象', '字符串', '第二段', '序列化', '执行', '解雇', 'in', 'methods', 'wakeup', 'before', 'connect', '127.0', '0.1', 'magic', 'methods', '__', 'wakeup', 'function', 'connect', 'in', 'methods', 'wakeup', 'after', 'connect', '127.0', '0.1', '总结', '魔法', '方法', '一个', '时刻', '自动', '调用', '函数', '类似', '操作符', '重载', '这里', 'sleep', '发生', '序列化', '之前', 'wake', '发生', '序列化', '之前', 'php', '其他', '一些', '魔法', '方法', '__', 'destruct', '删除', '一个', '对象', '对象', '操作', '终止', '时候', '调用', '方法', '__', 'get', '试图', '读取', '一个', '存在', '属性', '时候', '调用', '__', 'set', '试图', '一个', '存在', '属性', '写入', '时候', '调用', '__', 'call', '试图', '调用', '一个', '对象', '存在', '方法', '调用', '方法', '__', 'tostring', '打印', '一个', '对象', '时候', '调用', '__', 'clone', '对象', '克隆', '调用', '__', 'sleep', '对象', '串行化', '调用', '__', 'wakeup', '对象', '串行化', '调用', '__', 'invoke', '代码', '试图', '对象', '当作', '函数', '使用', '时候', '调用', '__', 'autoload', '简单', '就是', '自动', '加载', '__', 'line', '__', '文件', '当前', '行号', '__', 'file', '__', '文件', '完整', '路径', '文件名', '__', 'dir', '__', '文件', '所在', '目录', '__', 'function', '__', '函数', '名称', '__', 'class', '__', '名称', '__', 'method', '__', '方法', '__', 'namespace', '__', '当前', '命名', '空间', '名称']","[[-0.16918299 -0.17252608  0.24906823  0.06295057  0.35634516 -0.41198314
  -0.1193807   0.51846975 -0.11803377 -0.18173073 -0.00622302 -0.41492298
  -0.27264987  0.57279636  0.21364661 -0.10646527 -0.15962119  0.04247175
  -0.09214757 -0.69604983 -0.12308772  0.2760141   0.02203699 -0.27760265
   0.08009561 -0.50529626 -0.32328991 -0.00586136 -0.3621556  -0.08813041
   0.18306199 -0.05967454  0.10487214 -0.21806815 -0.24822124  0.33662908
  -0.33656005 -0.34823063  0.09548395 -0.81261563 -0.17567149 -0.71599749
  -0.11929744  0.08032514 -0.11135982 -0.27126821 -0.13709936  0.28646573
  -0.25178743  0.61048383  0.20573209 -0.32532212 -0.20046864 -0.10373147
  -0.03940047  0.43614703  0.12658718 -0.12147699  0.16730045 -0.24193966
   0.15060031  0.2811189   0.05839584  0.16207762 -0.4631081   0.07119416
   0.06483106 -0.07777768 -0.43213284  0.48854478  0.06745805 -0.15918585
   0.41607682 -0.37406511  0.6840643   0.26980285  0.02138361 -0.09663802
  -0.46842218 -0.04530564  0.06254242  0.10215023 -0.23422352  0.39143148
  -0.35635618  0.21331738 -0.30091361  0.45715966  0.5419462   0.10530425
   0.2489969   0.0841205   0.39108546  0.22207824  0.23998924  0.34919124
   0.23782937 -0.35696569 -0.2112874  -0.16280093]]"
722,Python知识之什么是*args和**kwargs？,"先来看个例子：def foo(*args, **kwargs):    print 'args = ', args    print 'kwargs = ', kwargs    print '---------------------------------------'if __name__ == '__main__':    foo(1,2,3,4)    foo(a=1,b=2,c=3)    foo(1,2,3,4, a=1,b=2,c=3)    foo('a', 1, None, a=1, b='2', c=3)输出结果如下：args =  (1, 2, 3, 4) kwargs =  {} --------------------------------------- args =  () kwargs =  {'a': 1, 'c': 3, 'b': 2} --------------------------------------- args =  (1, 2, 3, 4) kwargs =  {'a': 1, 'c': 3, 'b': 2} --------------------------------------- args =  ('a', 1, None) kwargs =  {'a': 1, 'c': 3, 'b': '2'} --------------------------------------- 可以看到，这两个是python中的可变参数。*args表示任何多个无名参数，它是一个tuple；**kwargs表示关键字参数，它是一个dict。并且同时使用*args和**kwargs时，必须*args参数列要在**kwargs前，像foo(a=1, b='2', c=3, a', 1, None, )这样调用的话，会提示语法错误“SyntaxError: non-keyword arg after keyword arg”。呵呵，知道*args和**kwargs是什么了吧。还有一个很漂亮的用法，就是创建字典：def kw_dict(**kwargs):        return kwargsprint kw_dict(a=1,b=2,c=3) == {'a':1, 'b':2, 'c':3} 其实python中就带有dict类，使用dict(a=1,b=2,c=3)即可创建一个字典了。","['python', '知识', '什么', 'args', 'kwargs', '来看', '例子', 'def', 'foo', 'args', 'kwargs', 'print', 'args', 'args', 'print', 'kwargs', 'kwargs', 'print', '---------------------------------------', 'if', '__', 'name', '__', '__', 'main', '__', 'foo', 'foo', 'foo', 'foo', 'none', '输出', '结果', '如下', 'args', 'kwargs', '---------------------------------------', 'args', 'kwargs', '---------------------------------------', 'args', 'kwargs', '---------------------------------------', 'args', 'none', 'kwargs', '---------------------------------------', '可以', '看到', '两个', 'python', '可变', '参数', 'args', '表示', '任何', '多个', '无名', '参数', '一个', 'tuple', 'kwargs', '表示', '关键字', '参数', '一个', 'dict', '并且', '同时', '使用', 'args', 'kwargs', '必须', 'args', '参数', '列要', 'kwargs', 'foo', 'none', '这样', '调用', '的话', '提示', '语法错误', 'syntaxerror', 'non', 'keyword', 'arg', 'after', 'keyword', 'arg', '呵呵', '知道', 'args', 'kwargs', '什么', '还有', '一个', '很漂亮', '用法', '就是', '创建', '字典', 'def', 'kw', 'dict', 'kwargs', 'return', 'kwargsprint', 'kw', 'dict', '其实', 'python', '带有', 'dict', '使用', 'dict', '即可', '创建', '一个', '字典']","[[-0.17894865 -0.12634618  0.22309846  0.07571283  0.29301992 -0.35892063
  -0.12371757  0.45442131 -0.07076221 -0.13409378 -0.01661979 -0.35127308
  -0.20287784  0.52571715  0.17160573 -0.10148319 -0.12923886  0.02498053
  -0.0745245  -0.56678551 -0.08056534  0.24610072 -0.0094112  -0.21470412
   0.07402778 -0.45485638 -0.27824621  0.02098216 -0.27028291 -0.06536058
   0.16499322 -0.03771962  0.06028612 -0.16148371 -0.18307942  0.29727073
  -0.23896655 -0.28858585  0.08809842 -0.71423624 -0.15139514 -0.59997076
  -0.09209414  0.03174124 -0.1148794  -0.22785848 -0.15114672  0.29766294
  -0.20935383  0.49060886  0.16821144 -0.27199954 -0.16761021 -0.11778574
  -0.01737065  0.37952418  0.14071607 -0.11193352  0.12530476 -0.18054745
   0.10871554  0.24449377  0.03413538  0.11903575 -0.39598877  0.05347525
   0.05166651 -0.06414242 -0.34417224  0.41706551  0.08173067 -0.15788596
   0.36227642 -0.31969041  0.56485981  0.24717867  0.06113819 -0.11877103
  -0.37493958 -0.05930446  0.02324215  0.05701887 -0.15175585  0.35153082
  -0.29476705  0.19324637 -0.27164399  0.41122     0.45817257  0.12165611
   0.22967732  0.09606172  0.34245918  0.18653787  0.20309788  0.30897391
   0.17030526 -0.31441859 -0.12859084 -0.13625748]]"
724,Python关于apply的知识,"今天用到了python apply的方法，感觉非常的好用。 python apply函数的具体的含义：  apply(function, args[, keywords]) 函数用于当函数参数已经存在于一个元组或字典中时，间接地调用函数。args是一个包含将要提供给函数的按位置传递的参数的元组。如果省略了args，任何参数都不会被传递，kwargs是一个包含关键字参数的字典。 apply()的返回值就是func()的返回值，apply()的元祖参数是有序的，元素的顺序必须和func()形式参数的顺序一致，下面给几个例子来详细的说下:  假设是执行没有带参数的方法  def say():    print 'say in'apply(say) 输出的结果是'say in'  函数只带元组的参数。  def say(a, b):    print a, bapply(say,(""hello"", ""老王python""))  函数带关键字参数。  def say(a=1,b=2):    print a,bdef haha(**kw):     # say(kw)      apply(say,(),kw)print haha(a='a',b='b') 输出的结果是:a,b 下面有个例子是apply的经典运用，他可以让你少写一些代码，多点时间陪陪朋友地址是：http://bbs.cnpythoner.com/viewthread.php?tid=139&extra= 该函数从2.3已经弃用，被call替代","['python', '关于', 'apply', '知识', '今天', '用到', 'python', 'apply', '方法', '感觉', '非常', 'python', 'apply', '函数', '具体', '含义', 'apply', 'function', 'args', 'keywords', '函数', '用于', '函数参数', '已经', '存在', '一个', '元组', '字典', '间接', '调用函数', 'args', '一个', '包含', '将要', '提供', '函数', '位置', '传递', '参数', '元组', '如果', '省略', 'args', '任何', '参数', '不会', '传递', 'kwargs', '一个', '包含', '关键字', '参数', '字典', 'apply', '返回值', '就是', 'func', '返回值', 'apply', '元祖', '参数', '有序', '元素', '顺序', '必须', 'func', '形式参数', '顺序', '一致', '下面', '几个', '例子', '详细', '假设', '执行', '没有', '参数', '方法', 'def', 'say', 'print', 'say', 'in', 'apply', 'say', '输出', '结果', 'say', 'in', '函数', '只带', '元组', '参数', 'def', 'say', 'print', 'bapply', 'say', 'hello', '老王', 'python', '函数', '关键字', '参数', 'def', 'say', 'print', 'bdef', 'haha', 'kw', 'say', 'kw', 'apply', 'say', 'kw', 'print', 'haha', '输出', '结果', '下面', '有个', '例子', 'apply', '经典', '运用', '可以', '一些', '代码', '多点', '时间', '陪陪', '朋友', '地址', 'http', 'bbs', 'cnpythoner', 'com', 'viewthread', 'php', 'tid', '139', 'extra', '函数', '2.3', '已经', '弃用', 'call', '替代']","[[-0.20940991 -0.12846623  0.21301301  0.13763044  0.27604014 -0.33536218
  -0.16018728  0.45750631 -0.02334811 -0.06028355 -0.04541544 -0.32324148
  -0.17787369  0.555887    0.15328488 -0.10000677 -0.14491207  0.00975019
  -0.08473851 -0.47459804 -0.01074993  0.22952304 -0.00999702 -0.13383497
   0.0917718  -0.49313186 -0.27518819  0.06850582 -0.219739   -0.05708471
   0.20387932  0.00821407  0.01380111 -0.1455139  -0.13429291  0.30875398
  -0.16554372 -0.22796941  0.10361914 -0.70848184 -0.1567032  -0.56209839
  -0.06054634 -0.03168213 -0.14000878 -0.1802291  -0.21899832  0.39065372
  -0.16736756  0.40571304  0.17640804 -0.26110803 -0.11640347 -0.18348382
   0.04137437  0.37830412  0.20216    -0.07975965  0.10430254 -0.12243251
   0.06761968  0.257265    0.02650928  0.10005835 -0.37239899  0.01387098
   0.03738603 -0.02443832 -0.26307706  0.41412815  0.11874681 -0.20569312
   0.37021774 -0.30672503  0.54369012  0.19505397  0.15635074 -0.12936438
  -0.29090209 -0.15315471 -0.0451253   0.01453414 -0.09129591  0.32930861
  -0.33743996  0.19211556 -0.27136337  0.39906809  0.45029019  0.13199313
   0.26236736  0.10660724  0.33482662  0.17850941  0.18819908  0.3468605
   0.11090266 -0.28461774 -0.04845655 -0.1078336 ]]"
731,PHP数据采集之使用CURL、DOMDocument和DOMXPath,"这三个组件有各自独特的功能：CURL能够抓取下载HTML，能模拟登陆，伪装客户端等DOMDocument将下载的HTML加载成DOMDOMXPath使用XPath语法进行数据的定位和采集下面是一个具体的例子代码，抓取了本博客www.crazyant.net首页所有的超链接：<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" /> <?php$target_url = ""http://crazyant.net"";$ch = curl_init();curl_setopt($ch, CURLOPT_URL,$target_url);curl_setopt($ch, CURLOPT_FAILONERROR, true);curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);curl_setopt($ch, CURLOPT_AUTOREFERER, true);curl_setopt($ch, CURLOPT_RETURNTRANSFER,true);curl_setopt($ch, CURLOPT_TIMEOUT, 10);$html = curl_exec($ch);if (!$html) {    echo ""<br />cURL error number:"" .curl_errno($ch);    echo ""<br />cURL error:"" . curl_error($ch);    exit;}//创建一个DomDocument对象，用于处理一个HTML$dom = new DOMDocument();//从一个字符串加载HTML@$dom->loadHTML($html);//使该HTML规范化$dom->normalize();//用DOMXpath加载DOM，用于查询$xpath = new DOMXPath($dom);#获取所有的a标签的地址$hrefs = $xpath->evaluate(""/html/body//a//@href"");for ($i = 0; $i < $hrefs->length; $i++) {    $href = $hrefs->item($i);    $linktext = $href->nodeValue;    echo $linktext;    echo ""<BR>"";}?> 要注意点，DOMNode 类并没有getAttribute方法，所以无法根据a得到直接的属性值，这时可以用正则匹配解决，网上看到很多人直接在DOMNode 上使用了getAttribute方法竟然通过，实在是匪夷所思，如果有更好的解释，请您给我说一说，我很渴望知道怎样直接从Xpath的返回直接得到属性值。","['php', '数据', '采集', '使用', 'curl', 'domdocument', 'domxpath', '三个', '组件', '各自', '独特', '功能', 'curl', '能够', '抓取', '下载', 'html', '模拟', '登陆', '伪装', '客户端', 'domdocument', '下载', 'html', '加载', 'domdomxpath', '使用', 'xpath', '语法', '进行', '数据', '定位', '采集', '下面', '一个', '具体', '例子', '代码', '抓取', '博客', 'www', 'crazyant', 'net', '首页', '所有', '超链接', 'meta', 'http', 'equiv', 'content', 'type', 'content', 'text', 'html', 'charset', 'utf', 'php', 'target', 'url', 'http', 'crazyant', 'net', 'ch', 'curl', 'init', 'curl', 'setopt', 'ch', 'curlopt', 'url', 'target', 'url', 'curl', 'setopt', 'ch', 'curlopt', 'failonerror', 'true', 'curl', 'setopt', 'ch', 'curlopt', 'followlocation', 'true', 'curl', 'setopt', 'ch', 'curlopt', 'autoreferer', 'true', 'curl', 'setopt', 'ch', 'curlopt', 'returntransfer', 'true', 'curl', 'setopt', 'ch', 'curlopt', 'timeout', '10', 'html', 'curl', 'exec', 'ch', 'if', 'html', 'echo', 'br', 'curl', 'error', 'number', 'curl', 'errno', 'ch', 'echo', 'br', 'curl', 'error', 'curl', 'error', 'ch', 'exit', '创建', '一个', 'domdocument', '对象', '用于', '处理', '一个', 'html', 'dom', 'new', 'domdocument', '一个', '字符串', '加载', 'html', 'dom', 'loadhtml', 'html', '使该', 'html', '规范化', 'dom', 'normalize', 'domxpath', '加载', 'dom', '用于', '查询', 'xpath', 'new', 'domxpath', 'dom', '获取', '所有', '标签', '地址', 'hrefs', 'xpath', 'evaluate', 'html', 'body', 'href', 'for', 'hrefs', 'length', '++', 'href', 'hrefs', 'item', 'linktext', 'href', 'nodevalue', 'echo', 'linktext', 'echo', 'br', '注意', 'domnode', '没有', 'getattribute', '方法', '所以', '无法', '根据', '得到', '直接', '属性', '这时', '可以', '正则', '匹配', '解决', '网上', '看到', '很多', '直接', 'domnode', '使用', 'getattribute', '方法', '竟然', '通过', '实在', '匪夷所思', '如果', '更好', '解释', '说一说', '渴望', '知道', '怎样', '直接', 'xpath', '返回', '直接', '得到', '属性']","[[-0.22980643 -0.12157383  0.25148921  0.21712364  0.20628539 -0.38636617
  -0.115935    0.47641185 -0.03759339 -0.09054081 -0.07296155 -0.3848404
  -0.13171033  0.53763788  0.11083082 -0.13234427 -0.13103429  0.01441123
  -0.01980692 -0.43240891 -0.00744877  0.25852142 -0.07609402 -0.18328756
   0.03235937 -0.45412666 -0.3190862   0.06560227 -0.20723006 -0.07137352
   0.17094881  0.08402134  0.01911169 -0.11409255 -0.18863473  0.34135421
  -0.16579937 -0.24139153  0.0684854  -0.66207042 -0.09877263 -0.54726853
  -0.04520115 -0.03440248 -0.1168896  -0.24459436 -0.29863363  0.39714529
  -0.05900637  0.39452751  0.1023419  -0.28063188 -0.02313062 -0.2249081
  -0.01298865  0.41176044  0.16590276 -0.09666761  0.12475152 -0.12563942
   0.12328759  0.22428986  0.00420435  0.08405677 -0.34205843  0.04994118
  -0.00381026  0.02167941 -0.22800833  0.42348086  0.07750999 -0.17334402
   0.4053593  -0.31433436  0.56025532  0.28287043  0.23852814 -0.20239643
  -0.22846912 -0.18873992 -0.07532035  0.0410943  -0.12707053  0.38650901
  -0.37282863  0.17286689 -0.2814909   0.48746171  0.52085674  0.17048032
   0.20418691  0.12151252  0.32242051  0.15891537  0.19528821  0.41947992
   0.08653768 -0.25342384  0.09858647 -0.10645376]]"
734,php判断远程文件或网站是否能打开,"//默认效果print_r(get_headers(""http://www.baidu.com/img/baidu_sylogo1.gif""));结果：Array([0] => HTTP/1.1 200 OK[1] => Date: Thu, 02 Jun 2011 02:47:27 GMT[2] => Server: Apache[3] => P3P: CP="" OTI DSP COR IVA OUR IND COM ""[4] => Set-Cookie: BAIDUID=7F6A5A2ED03878A7791C89C526966F3A:FG=1; expires=Fri, 01-Jun-12 02:47:27 GMT; max-age=31536000; path=/; domain=.baidu.com; version=1[5] => Last-Modified: Thu, 20 Jan 2011 07:15:35 GMT[6] => ETag: ""65e-49a41e65933c0""[7] => Accept-Ranges: bytes[8] => Content-Length: 1630[9] => Cache-Control: max-age=315360000[10] => Expires: Sun, 30 May 2021 02:47:27 GMT[11] => Connection: Close[12] => Content-Type: image/gif)//加参数1的效果print_r(get_headers(""http://www.baidu.com/img/baidu_sylogo1.gif"", 1));结果：Array([0] => HTTP/1.1 200 OK[Date] => Thu, 02 Jun 2011 02:49:28 GMT[Server] => Apache[P3P] => CP="" OTI DSP COR IVA OUR IND COM ""[Set-Cookie] => BAIDUID=4D875812FC482C0ADE4F5C17068849EE:FG=1; expires=Fri, 01-Jun-12 02:49:28 GMT; max-age=31536000; path=/; domain=.baidu.com; version=1[Last-Modified] => Thu, 20 Jan 2011 07:15:35 GMT[ETag] => ""65e-49a41e65933c0""[Accept-Ranges] => bytes[Content-Length] => 1630[Cache-Control] => max-age=315360000[Expires] => Sun, 30 May 2021 02:49:28 GMT[Connection] => Close[Content-Type] => image/gif)怎么样，get_headers函数还是不错的吧，不过既然效率有问题，那只好不优先考虑了，curl就不错，下面看看curl的做法function check_remote_file_exists($url){$curl = curl_init($url);// 不取回数据curl_setopt($curl, CURLOPT_NOBODY, true);curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'GET'); //不加这个会返回403，加了才返回正确的200，原因不明// 发送请求$result = curl_exec($curl);$found = false;// 如果请求没有发送失败if ($result !== false){// 再检查http响应码是否为200$statusCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);if ($statusCode == 200){$found = true;}}curl_close($curl);return $found;}$exists = check_remote_file_exists('http://www.baidu.com/img/baidu_sylogo1.gif');echo $exists ? '存在' : '不存在';$exists = check_remote_file_exists('http://www.baidu.com/test.jpg');echo $exists ? '存在' : '不存在'","['php', '判断', '远程', '文件', '网站', '是否', '打开', '默认', '效果', 'print', 'get', 'headers', 'http', 'www', 'baidu', 'com', 'img', 'baidu', 'sylogo1', 'gif', '结果', 'array', 'http', '1.1', '200', 'ok', 'date', 'thu', '02', 'jun', '2011', '02', '47', '27', 'gmt', 'server', 'apache', 'p3p', 'cp', 'oti', 'dsp', 'cor', 'iva', 'our', 'ind', 'com', 'set', 'cookie', 'baiduid', '7f6a5a2ed03878a7791c89c526966f3a', 'fg', 'expires', 'fri', '01', 'jun', '12', '02', '47', '27', 'gmt', 'max', 'age', '31536000', 'path', 'domain', 'baidu', 'com', 'version', 'last', 'modified', 'thu', '20', 'jan', '2011', '07', '15', '35', 'gmt', 'etag', '65e', '49a41e65933c0', 'accept', 'ranges', 'bytes', 'content', 'length', '1630', 'cache', 'control', 'max', 'age', '315360000', '10', 'expires', 'sun', '30', 'may', '2021', '02', '47', '27', 'gmt', '11', 'connection', 'close', '12', 'content', 'type', 'image', 'gif', '参数', '效果', 'print', 'get', 'headers', 'http', 'www', 'baidu', 'com', 'img', 'baidu', 'sylogo1', 'gif', '结果', 'array', 'http', '1.1', '200', 'ok', 'date', 'thu', '02', 'jun', '2011', '02', '49', '28', 'gmt', 'server', 'apache', 'p3p', 'cp', 'oti', 'dsp', 'cor', 'iva', 'our', 'ind', 'com', 'set', 'cookie', 'baiduid', '4d875812fc482c0ade4f5c17068849ee', 'fg', 'expires', 'fri', '01', 'jun', '12', '02', '49', '28', 'gmt', 'max', 'age', '31536000', 'path', 'domain', 'baidu', 'com', 'version', 'last', 'modified', 'thu', '20', 'jan', '2011', '07', '15', '35', 'gmt', 'etag', '65e', '49a41e65933c0', 'accept', 'ranges', 'bytes', 'content', 'length', '1630', 'cache', 'control', 'max', 'age', '315360000', 'expires', 'sun', '30', 'may', '2021', '02', '49', '28', 'gmt', 'connection', 'close', 'content', 'type', 'image', 'gif', '怎么样', 'get', 'headers', '函数', '还是', '不错', '不过', '既然', '效率', '问题', '只好', '优先', '考虑', 'curl', '不错', '下面', '看看', 'curl', '做法', 'function', 'check', 'remote', 'file', 'exists', 'url', 'curl', 'curl', 'init', 'url', '取回', '数据', 'curl', 'setopt', 'curl', 'curlopt', 'nobody', 'true', 'curl', 'setopt', 'curl', 'curlopt', 'customrequest', 'get', '这个', '返回', '403', '返回', '正确', '200', '原因', '不明', '发送', '请求', 'result', 'curl', 'exec', 'curl', 'found', 'false', '如果', '请求', '没有', '发送', '失败', 'if', 'result', 'false', '检查', 'http', '响应', '是否', '200', 'statuscode', 'curl', 'getinfo', 'curl', 'curlinfo', 'http', 'code', 'if', 'statuscode', '200', 'found', 'true', 'curl', 'close', 'curl', 'return', 'found', 'exists', 'check', 'remote', 'file', 'exists', 'http', 'www', 'baidu', 'com', 'img', 'baidu', 'sylogo1', 'gif', 'echo', 'exists', '存在', '存在', 'exists', 'check', 'remote', 'file', 'exists', 'http', 'www', 'baidu', 'com', 'test', 'jpg', 'echo', 'exists', '存在', '存在']","[[-0.2255583  -0.08579407  0.28668048  0.20493668  0.1828238  -0.41569919
  -0.05213429  0.45585408 -0.09801308 -0.16519058 -0.0581433  -0.41976035
  -0.08616383  0.47542547  0.11134574 -0.14404601 -0.09729405  0.00351058
   0.02094139 -0.45602609 -0.07088916  0.28788554 -0.11823086 -0.268921
  -0.02203908 -0.37668635 -0.32615033  0.01987821 -0.21398593 -0.08269707
   0.11168958  0.0730206   0.03771994 -0.089123   -0.23177569  0.33615127
  -0.21413879 -0.28912779  0.04105111 -0.6237234  -0.05589195 -0.53479608
  -0.0750557   0.01016283 -0.08762123 -0.29932705 -0.28828615  0.29770766
  -0.06381357  0.43090674  0.03521995 -0.27649299 -0.02641499 -0.18688829
  -0.0923361   0.39578159  0.08257198 -0.12528506  0.13094455 -0.14115193
   0.169724    0.17320938 -0.005614    0.07465118 -0.32446168  0.09388459
   0.00120292  0.01280901 -0.25995371  0.40656845  0.01042339 -0.1089015
   0.38682644 -0.31626982  0.52511026  0.37117199  0.19393525 -0.22244653
  -0.24595804 -0.12065371 -0.00970444  0.08476182 -0.1617736   0.43106546
  -0.31865246  0.1678846  -0.26603403  0.51382585  0.5279185   0.19866426
   0.13583958  0.11923403  0.30843084  0.15100263  0.20213057  0.39572784
   0.10884655 -0.25712631  0.12546978 -0.11401859]]"
740,2012年度PHP最佳类库收集,"下面是一些非常有用的PHP类库，相信一定可以为你的WEB开发提供更好和更为快速的方法。图表库下面的类库可以让你很简的创建复杂的图表和图片。当然，它们需要GD库的支持。pChart – 一个可以创建统计图的库。Libchart – 这也是一个简单的统计图库。JpGraph – 一个面向对象的图片创建类。Open Flash Chart – 这是一个基于Flash的统计图。RSS 解析解释RSS并是一件很单调的事情，不过幸好你有下面的类库可以帮助你方便地读取RSS的Feed。MagpieRSS – 开源的PHP版RSS解析器，据说功能强大，未验证。SimplePie – 这是一个非常快速，而且易用的RSS和Atom 解析库。缩略图生成phpThumb – 功能很强大，如何强大还是自己去体会吧。支付你的网站需要处理支付方面的事情？需要一个和支付网关的程序？下面这个程序可以帮到你。PHP Payment Library – 支持Paypal, Authorize.net 和2Checkout (2CO)OpenIDPHP-OpenID – 支持OpenID的一个PHP库。OpenID是帮助你使用相同的用户名和口令登录不同的网站的一种解决方案。如果你对OpenID不熟悉的话，你可以到这里看看：http://openid.net.cn/数据为抽象/对象关系映射ORMADOdb – 数据库抽象Doctrine – 对象关系映射Object relational mapper (ORM) ，需要 PHP 5.2.3+ 版本，一个非常强大的database abstraction layer (DBAL).Propel – 对象关系映射框架- PHP5Outlet – 也是关于对象关系映射的一个工具。注：对象关系映射（Object Relational Mapping，简称ORM）是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。 简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。本质上就是将数据从一种形式转换到另外一种形式。 这也同时暗示者额外的执行开销；然而，如果ORM作为一种中间件实现，则会有很多机会做优化，而这些在手写的持久层并不存在。 更重要的是用于控制转换的元数据需要提供和管理；但是同样，这些花费要比维护手写的方案要少；而且就算是遵守ODMG规范的对象数据库依然需要类级别的元数据。PDF 生成器FPDF – 这量一个可以让你生成PDF的纯PHP类库。Excel 相关你的站点需要生成Excel？没有问题，下面这两个类库可以让你轻松做到这一点。php-excel – 这是一个非常简单的Excel文件生成类。PHP Excel Reader – 可以解析并读取XLS文件中的数据。E-Mail 相关不喜欢PHP的mail函数？觉得不够强大？下面的PHP邮件相关的库绝对不会让你失望。Swift Mailer – 免费的超多功能的PHP邮件库。PHPMailer - 超强大的邮件发送类。单元测试如果你在使用测试驱动的方法开发你的程序，下面的类库和框架绝你能帮助你的开发。SimpleTest – 一个PHP的单元测试和网页测试的框架。PHPUnit – 来自xUnit 家族，提供一个框架可以让你方便地进行单元测试的案例开发。并可非常容易地分析其测试结果。","['2012', '年度', 'php', '最佳', '类库', '收集', '下面', '一些', '非常', '有用', 'php', '类库', '相信', '一定', '可以', 'web', '开发', '提供', '更好', '更为', '快速', '方法', '图表', '下面', '类库', '可以', '创建', '复杂', '图表', '图片', '当然', '它们', '需要', 'gd', '支持', 'pchart', '一个', '可以', '创建', '统计图', 'libchart', '一个', '简单', '统计', '图库', 'jpgraph', '一个', '面向对象', '图片', '创建', 'open', 'flash', 'chart', '这是', '一个', '基于', 'flash', '统计图', 'rss', '解析', '解释', 'rss', '一件', '单调', '事情', '不过', '幸好', '下面', '类库', '可以', '帮助', '方便', '读取', 'rss', 'feed', 'magpierss', '开源', 'php', 'rss', '解析器', '据说', '功能强大', '验证', 'simplepie', '这是', '一个', '非常', '快速', '而且', '易用', 'rss', 'atom', '解析', '缩略图', '生成', 'phpthumb', '功能', '强大', '如何', '强大', '还是', '自己', '体会', '支付', '网站', '需要', '处理', '支付', '方面', '事情', '需要', '一个', '支付', '网关', '程序', '下面', '这个', '程序', '可以', '帮到', 'php', 'payment', 'library', '支持', 'paypal', 'authorize', 'net', '2checkout', '2co', 'openidphp', 'openid', '支持', 'openid', '一个', 'php', 'openid', '帮助', '使用', '相同', '用户名', '口令', '登录', '不同', '网站', '一种', '解决方案', '如果', 'openid', '熟悉', '的话', '可以', '这里', '看看', 'http', 'openid', 'net', 'cn', '数据', '抽象', '对象', '关系', '映射', 'ormadodb', '数据库', '抽象', 'doctrine', '对象', '关系', '映射', 'object', 'relational', 'mapper', 'orm', '需要', 'php', '5.2', '版本', '一个', '非常', '强大', 'database', 'abstraction', 'layer', 'dbal', 'propel', '对象', '关系', '映射', '框架', 'php5outlet', '关于', '对象', '关系', '映射', '一个', '工具', '对象', '关系', '映射', 'object', 'relational', 'mapping', '简称', 'orm', '一种', '为了', '解决', '面向对象', '关系数据库', '存在', '互不', '匹配', '现象', '技术', '简单', 'orm', '通过', '使用', '描述', '对象', '数据库', '之间', '映射', '数据', '程序', '对象', '自动', '持久', '化到', '关系数据库', '本质', '就是', '数据', '一种', '形式', '转换', '另外', '一种', '形式', '同时', '暗示', '额外', '执行', '开销', '然而', '如果', 'orm', '作为', '一种', '中间件', '实现', '很多', '机会', '优化', '这些', '手写', '持久', '存在', '重要', '用于', '控制', '转换', '数据', '需要', '提供', '管理', '但是', '同样', '这些', '花费', '维护', '手写', '方案', '要少', '而且', '就算', '遵守', 'odmg', '规范', '对象', '数据库', '依然', '需要', '级别', '数据', 'pdf', '生成器', 'fpdf', '这量', '一个', '可以', '生成', 'pdf', 'php', '类库', 'excel', '相关', '站点', '需要', '生成', 'excel', '没有', '问题', '下面', '两个', '类库', '可以', '轻松', '做到', '一点', 'php', 'excel', '这是', '一个', '非常简单', 'excel', '文件', '生成', 'php', 'excel', 'reader', '可以', '解析', '读取', 'xls', '文件', '数据', 'mail', '相关', '喜欢', 'php', 'mail', '函数', '觉得', '不够', '强大', '下面', 'php', '邮件', '相关', '绝对', '不会', '失望', 'swift', 'mailer', '免费', '多功能', 'php', '邮件', 'phpmailer', '强大', '邮件', '发送', '单元测试', '如果', '使用', '测试', '驱动', '方法', '开发', '程序', '下面', '类库', '框架', '帮助', '开发', 'simpletest', '一个', 'php', '单元测试', '网页', '测试', '框架', 'phpunit', '来自', 'xunit', '家族', '提供', '一个', '框架', '可以', '方便', '进行', '单元测试', '案例', '开发', '非常容易', '分析', '测试', '结果']","[[-0.24498838 -0.14687597  0.19843736  0.18286401  0.28218973 -0.32337652
  -0.20084711  0.48179034  0.01025675  0.00439375 -0.06944678 -0.30611546
  -0.19128428  0.60031211  0.13698767 -0.10118009 -0.1599038   0.00200006
  -0.10515226 -0.42288331  0.04880141  0.22819782  0.01403067 -0.05881681
   0.13125961 -0.55140162 -0.27364056  0.10317157 -0.19398422 -0.05437045
   0.25918947  0.0390883  -0.02047294 -0.14774174 -0.09345836  0.32991682
  -0.11624831 -0.19361076  0.12110005 -0.74178901 -0.17188195 -0.55570578
  -0.02729662 -0.0851742  -0.17317929 -0.12370674 -0.26541359  0.48962271
  -0.15348403  0.35643038  0.21235213 -0.26662338 -0.10058553 -0.23775651
   0.09449655  0.38650799  0.26805584 -0.05180074  0.09510319 -0.08277259
   0.03308164  0.29873335  0.0316472   0.088591   -0.37876691 -0.02777048
   0.02819917 -0.00609653 -0.21688449  0.4299224   0.15347601 -0.25652182
   0.39562599 -0.31632867  0.56509185  0.13491636  0.22522232 -0.1275132
  -0.24917778 -0.23302982 -0.10651873 -0.02434694 -0.05142622  0.31137297
  -0.383475    0.19446109 -0.28176803  0.39259182  0.44844202  0.1175285
   0.31491647  0.12117436  0.34588305  0.18845191  0.18077461  0.37786141
   0.08696006 -0.27588729 -0.01394279 -0.08235744]]"
747,python在linux下安装方法（解决旧版本冲突）,"1．下载源代码 http://www.python.org/ftp/python/2.5.2/Python-2.5.2.tar.bz22．  安装$ tar –jxvf Python-2.5.2.tar.bz2$ cd Python-2.5.2$ ./configure$ make$ make install3. 测试在命令行下输入python，出现python解释器即表示已经正确安装。在suse10或rhel5（es5）下系统默认已经装了python但版本是2.4.x；本次安装后在shell中输入#python会发现显示结果：# pythonPython 2.4.3 (#1, Dec 11 2006, 11:38:52)[GCC 4.1.1 20061130 (Red Hat 4.1.1-43)] on linux2Type “help”, “copyright”, “credits” or “license” for more information.>>>版本还是2.4.x的解决办法：#cd /usr/bin#ll |grep python   //查看该目录下python#rm -rf python#ln -s PREFIX/Python-2.5.2/python ./python  //PREFIX为你解压python的目录#python# pythonPython 2.5.2 (#1, Dec 11 2006, 11:38:52)[GCC 4.1.1 20061130 (Red Hat 4.1.1-43)] on linux2Type “help”, “copyright”, “credits” or “license” for more information.>>>OK！问题解决！","['python', 'linux', '安装', '方法', '解决', '旧版本', '冲突', '下载', '源代码', 'http', 'www', 'python', 'org', 'ftp', 'python', '2.5', 'python', '2.5', 'tar', 'bz22', '安装', 'tar', 'jxvf', 'python', '2.5', 'tar', 'bz2', 'cd', 'python', '2.5', 'configure', 'make', 'make', 'install3', '测试', '命令行', '输入', 'python', '出现', 'python', '解释器', '表示', '已经', '正确', '安装', 'suse10', 'rhel5', 'es5', '系统', '默认', '已经', 'python', '版本', '2.4', '本次', '安装', 'shell', '输入', 'python', '发现', '显示', '结果', 'pythonpython', '2.4', 'dec', '11', '2006', '11', '38', '52', 'gcc', '4.1', '20061130', 'red', 'hat', '4.1', '43', 'on', 'linux2type', 'help', 'copyright', 'credits', 'or', 'license', 'for', 'more', 'information', '版本', '还是', '2.4', '解决办法', 'cd', 'usr', 'bin', 'll', 'grep', 'python', '查看', '目录', 'python', 'rm', 'rf', 'python', 'ln', 'prefix', 'python', '2.5', 'python', 'python', 'prefix', '解压', 'python', '目录', 'python', 'pythonpython', '2.5', 'dec', '11', '2006', '11', '38', '52', 'gcc', '4.1', '20061130', 'red', 'hat', '4.1', '43', 'on', 'linux2type', 'help', 'copyright', 'credits', 'or', 'license', 'for', 'more', 'information', 'ok', '问题', '解决']","[[-0.24966708 -0.11405266  0.2129315   0.20888768  0.22034774 -0.33399105
  -0.13015169  0.45456295 -0.03744952 -0.05513307 -0.0714832  -0.33896985
  -0.1159406   0.51478783  0.11813514 -0.12126958 -0.11570481 -0.00542133
  -0.04528499 -0.38484971  0.01167359  0.25421225 -0.04959028 -0.13606414
   0.06573958 -0.44841092 -0.27136513  0.06171438 -0.17423058 -0.07251643
   0.19144901  0.06197709 -0.01170318 -0.11373826 -0.13715064  0.33630866
  -0.14234569 -0.22755773  0.08949756 -0.6623974  -0.1013584  -0.48607579
  -0.02401418 -0.05288921 -0.13703052 -0.1683011  -0.28113124  0.40127231
  -0.10144968  0.33977743  0.11448764 -0.26782426 -0.06408736 -0.22261043
   0.02952355  0.3691418   0.17840472 -0.06416473  0.11336271 -0.09161562
   0.0869613   0.22257435  0.02367754  0.06230063 -0.34533579  0.02037306
   0.00952517  0.01911785 -0.21769225  0.39591582  0.07919711 -0.18024341
   0.37376221 -0.30292588  0.50919502  0.2193588   0.21695811 -0.16463319
  -0.23351981 -0.18113833 -0.07926128  0.00789296 -0.07898199  0.3550456
  -0.31779164  0.17232845 -0.25342678  0.41627015  0.44591173  0.14982252
   0.21997859  0.1110379   0.30914855  0.17240743  0.17474007  0.37341314
   0.08111164 -0.23766832  0.07933909 -0.09185378]]"
749,eclipse远程发布代码的方法（SSH自动同步）,eclipse有个插件，叫做Eclipse Remote System Explorer (RSE)，具体使用方法：1、下载RSE地址：http://download.eclipse.org/tm/downloads/drops/R-3.3.2-201202061000/2、安装到eclipse（3.4版本以上）解压RSE压缩包，直接把里面的内容复制到eclipse的根目录3、打开eclipse新建-》项目-》RSE-》connection填入IP，名字4、将eclipse的工作目录，切换到RSE5、右键新建一个connection，然后输入IP地址6、右键连接，然后输入用户名和密码，同步完成7、在sftp files里面新建一个filter，里面输入过滤的文件夹路径，比如/home/crazyant最后左边目录树，会出现服务器上相应的文件夹，可以直接编辑了注：本文有www.crazyant.net原创，转载请注明出处。,"['eclipse', '远程', '发布', '代码', '方法', 'ssh', '自动', '同步', 'eclipse', '有个', '插件', '叫做', 'eclipse', 'remote', 'system', 'explorer', 'rse', '具体', '使用', '方法', '下载', 'rse', '地址', 'http', 'download', 'eclipse', 'org', 'tm', 'downloads', 'drops', '3.3', '201202061000', '安装', 'eclipse', '3.4', '版本', '以上', '解压', 'rse', '压缩包', '直接', '里面', '内容', '复制到', 'eclipse', '根目录', '打开', 'eclipse', '新建', '项目', 'rse', 'connection', '填入', 'ip', '名字', 'eclipse', '工作', '目录', '切换', 'rse5', '右键', '新建', '一个', 'connection', '然后', '输入', 'ip地址', '右键', '连接', '然后', '输入', '用户名', '密码', '同步', '完成', 'sftp', 'files', '里面', '新建', '一个', 'filter', '里面', '输入', '过滤', '文件夹', '路径', '比如', 'home', 'crazyant', '最后', '左边', '目录', '出现', '服务器', '相应', '文件夹', '可以', '直接', '编辑', '本文', 'www', 'crazyant', 'net', '原创', '转载', '注明', '出处']","[[-0.24754024 -0.1199896   0.22422899  0.24614065  0.1954049  -0.35766315
  -0.12369218  0.46882894 -0.02866745 -0.0510255  -0.08220869 -0.36141892
  -0.12503633  0.53413043  0.10561644 -0.13218529 -0.12726566  0.00815542
  -0.02769563 -0.378213    0.02212689  0.25882603 -0.05994624 -0.1385241
   0.04722456 -0.45660806 -0.29782237  0.07605009 -0.17752664 -0.06874119
   0.19494481  0.09750361  0.0015434  -0.11337565 -0.15847266  0.34862651
  -0.13615998 -0.22146468  0.07960138 -0.65205851 -0.09879887 -0.49712889
  -0.02136335 -0.05896799 -0.1324661  -0.19237532 -0.30981967  0.42809769
  -0.04510688  0.33698557  0.10790236 -0.28320206 -0.01991401 -0.24739252
   0.01869261  0.399394    0.19128367 -0.07435138  0.12421291 -0.09648947
   0.10887465  0.22878247  0.0165672   0.06930689 -0.33945658  0.02844566
  -0.01685613  0.03661505 -0.19731739  0.40531437  0.07352624 -0.1852193
   0.39740432 -0.30688206  0.53924616  0.23605888  0.25960506 -0.18886205
  -0.19974162 -0.21387614 -0.10940832  0.010545   -0.09490133  0.36395503
  -0.36107322  0.16359142 -0.26868138  0.45319155  0.48866652  0.15271721
   0.21495953  0.12322251  0.30366292  0.16160786  0.18121798  0.41925943
   0.07416773 -0.22242447  0.12119392 -0.09000393]]"
754,Ubuntu 安装 PostgreSQL 和 python-psycopg2基础教程（以及错误解决）,"Django支持以下四种数据库PostgreSQL（pgql）、SQLite 3、MySQL、Oracle。PostgreSQL 和 MySQL都是最受人关注的开源数据库，MySQL在国内又相对盛行，这和php领域大力推崇lamp不无关系； 关于Mysql和PostgreSQL的对比网上有很多版本，也没必要去比较，不过可以确定的一点是PostgreSQL对Django的 GIS支持更加强大。在Ubuntu 系统下为Python Django安装 PostgreSQL 数据库，还包括pgadmin3 和 python-psycopg2 等。安装PostgreSQL 数据库sudo apt-get install postgresql postgresql-client postgresql-contrib安装过程提示：The following NEW packages will be installed:libossp-uuid16 libpq5 postgresql postgresql-8.4 postgresql-clientpostgresql-client-8.4 postgresql-client-common postgresql-commonpostgresql-contrib postgresql-contrib-8.4……Adding user postgres to group ssl-cert……Creating new cluster (configuration: /etc/postgresql/8.4/main, data: /var/lib/postgresql/8.4/main)…Moving configuration file /var/lib/postgresql/8.4/main/postgresql.conf to /etc/postgresql/8.4/main…Moving configuration file /var/lib/postgresql/8.4/main/pg_hba.conf to /etc/postgresql/8.4/main…Moving configuration file /var/lib/postgresql/8.4/main/pg_ident.conf to /etc/postgresql/8.4/main…Configuring postgresql.conf to use port 5432………* Starting PostgreSQL 8.4 database server [ OK ]Setting up postgresql (8.4.8-0ubuntu0.11.04) …Setting up postgresql-client (8.4.8-0ubuntu0.11.04) …Setting up postgresql-contrib-8.4 (8.4.8-0ubuntu0.11.04) …Setting up postgresql-contrib (8.4.8-0ubuntu0.11.04) …Processing triggers for libc-bin …即创建了配置文件的位置为：/etc/postgresql/8.4/main/可执行程序为： sudo /etc/init.d/postgresql {start|stop|restart|reload|force-reload|status}PostgreSQL 默认配置了允许本地机器访问（local access）的权限，PostgreSQL 安装完毕，使用系统账户postgres以postgres角色登录数据库设置密码，命令：sudo -u postgres psql。登录sql命令界面后，修改 postgres 用户的密码（psql-PostgresQL的命令行客户端）：postgres=# ALTER ROLE postgres WITH ENCRYPTED PASSWORD ‘mypassword’;postgres=# \q设置PostgreSQL启用远程访问1. 这里设置允许远程连接权限：sudo vi /etc/postgresql/8.4/main/postgresql.conf#listen_addresses = ‘localhost’ 去掉注释并修改为 listen_addresses = ‘*’#password_encryption = on 去掉注释：password_encryption = on2. 这里设置允许远程进行数据库操作：sudo vi /etc/postgresql/8.4/main/pg_hba.conf最后添加一行（允许局域网ip段或其他任何ip）：host all all 192.168.1.0/24 md5 其中24是CIDR地址，也可用网关代替。——————–最后pg_hba.conf可能为这样———————-# Database administrative login by UNIX socketslocal all postgres ident# TYPE DATABASE USER CIDR-ADDRESS METHOD# “local” is for Unix domain socket connections onlylocal all all ident# IPv4 local connections:host all all 127.0.0.1/32 md5# IPv6 local connections:host all all ::1/128 md5host all all 192.168.1.0/24 md5修改linux 用户postgres的密码sudo passwd -d postgres 删除密码sudo su postgres -c passwd 设置密码（su 切换当前用户到postgres）PostgreSQL创建用户和数据库登录后使用sql语句：create user “pytu” with password ‘mypassword’ nocreatedb;CREATE DATABASE pytb OWNER pytu ENCODING ‘UTF-8′;或命令行使用命令创建：sudo -u postgres createuser -D -P dbuser 弹出设置密码sudo -u postgres createdb -O dbuser mydb最后经过上面的配置记得重启：sudo /etc/init.d/postgresql restartUbuntu 10.04: /etc/init.d/postgresql-8.4 restart安装 PostgreSQL 数据库管理工具 pgadmin3sudo apt-get install pgadmin3实现和php 下的Mysql 管理工具 phpmyadmin类似的可视化数据库管理界面，终端输入pgadmin3启动时，Ubuntu 11.04下出现如下错误提示，不知是何原因：** (pgadmin3:5579): CRITICAL **: murrine_style_draw_flat_box: assertion `width >= -1′ failed为了启用pgAdmin 的一些功能，必须运行下面这段脚本（To enable the functions of the pgAdmin utility, run a script against the postgres database）：sudo -u postgres psql -d postgres < /usr/share/postgresql/8.4/contrib/adminpack.sql提示CREATE FUNCTION创建函数。不同Ubuntu版本，文件路径可能不同：如Ubuntu老版本使用pgAdmin8.1的路径是：/usr/share/postgresql/8.1/contrib/admin81.sql on current versions of Ubuntu.安装 psycopg2最后安装Python 的 PostgreSQL数据库驱动psycopg2：sudo apt-get install python-psycopg2验证psycopg2安装： >>> python >>> import psycopg2 >>> psycopg2.apilevel ’2.0′Ubuntu 下，Python PostgreSQL 数据库的安装和配置基本就完成了，有点要注意的是使用django-admin新建django 项目时候，源文件最好不要放在apache 或其他web 服务器的document root下，可能会被人看到源代码。FATAL: Ident authentication failed for user 问题当新建一个python project 并在settings.py 中输入以下数据库信息之后：DATABASES = {'default': {'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.'NAME': 'mydb', # Or path to database file if using sqlite3.'USER': 'dbuser', # Not used with sqlite3.'PASSWORD': 'mypassw', # Not used with sqlite3.'HOST': '', # Set to empty string for localhost. Not used with sqlite3.'PORT': '', # Set to empty string for default. Not used with sqlite3.}}测试PostgreSQL连接：$ python manage.py shell >>> from django.db import connection >>> cursor = connection.cursor()出现错误：Traceback (most recent call last):File “”, line 1, inFile “/usr/local/lib/python2.7/dist-packages/Django-1.3.1-py2.7.egg/django/db/backends/__init__.py”, line 250, in cursorcursor = self.make_debug_cursor(self._cursor())File “/usr/local/lib/python2.7/dist-packages/Django-1.3.1-py2.7.egg/django/db/backends/postgresql_psycopg2/base.py”, line 140, in _cursorself.connection = Database.connect(**conn_params)OperationalError: FATAL: Ident authentication failed for user “dbuser”出现这个错误的原因还是在于上面pg_hba.conf 文件的设置，Debian系（包括ubuntu）默认的pg_hba.conf 文件对于localhost本地机器的数据库访问方式是ident，它指的是只有Linux shell用户通过同名的postgreSQL 用户才能访问，也就是pg超级用户postgres 只能由linux 用户postgres 登录后操作。要解决类似OperationalError: FATAL: Ident authentication failed for user “postgres”的问题，有两种解决方法：1. 在执行$ python manage.py shell之前先$su postgres 切换为postgres 用户2. 修改pg_hba.conf 的客户端访问设置，将laocal 的访问由ident 改为trust，如：# TYPE DATABASE USER CIDR-ADDRESS METHODlocal all all trust修改完pg_hba.conf设置记得重启pg。安装了pg_ctl 也可以用pg_ctl reload。","['ubuntu', '安装', 'postgresql', 'python', 'psycopg2', '基础教程', '以及', '错误', '解决', 'django', '支持', '以下', '四种', '数据库', 'postgresql', 'pgql', 'sqlite', 'mysql', 'oracle', 'postgresql', 'mysql', '最受', '关注', '开源', '数据库', 'mysql', '国内', '相对', '盛行', 'php', '领域', '大力', '推崇', 'lamp', '不无关系', '关于', 'mysql', 'postgresql', '对比', '网上', '很多', '版本', '必要', '比较', '不过', '可以', '确定', '一点', 'postgresql', 'django', 'gis', '支持', '更加', '强大', 'ubuntu', '系统', '下为', 'python', 'django', '安装', 'postgresql', '数据库', '包括', 'pgadmin3', 'python', 'psycopg2', '安装', 'postgresql', '数据库', 'sudo', 'apt', 'get', 'install', 'postgresql', 'postgresql', 'client', 'postgresql', 'contrib', '安装', '过程', '提示', 'the', 'following', 'new', 'packages', 'will', 'be', 'installed', 'libossp', 'uuid16', 'libpq5', 'postgresql', 'postgresql', '8.4', 'postgresql', 'clientpostgresql', 'client', '8.4', 'postgresql', 'client', 'common', 'postgresql', 'commonpostgresql', 'contrib', 'postgresql', 'contrib', '8.4', 'adding', 'user', 'postgres', 'to', 'group', 'ssl', 'cert', 'creating', 'new', 'cluster', 'configuration', 'etc', 'postgresql', '8.4', 'main', 'data', 'var', 'lib', 'postgresql', '8.4', 'main', 'moving', 'configuration', 'file', 'var', 'lib', 'postgresql', '8.4', 'main', 'postgresql', 'conf', 'to', 'etc', 'postgresql', '8.4', 'main', 'moving', 'configuration', 'file', 'var', 'lib', 'postgresql', '8.4', 'main', 'pg', 'hba', 'conf', 'to', 'etc', 'postgresql', '8.4', 'main', 'moving', 'configuration', 'file', 'var', 'lib', 'postgresql', '8.4', 'main', 'pg', 'ident', 'conf', 'to', 'etc', 'postgresql', '8.4', 'main', 'configuring', 'postgresql', 'conf', 'to', 'use', 'port', '5432', 'starting', 'postgresql', '8.4', 'database', 'server', 'ok', 'setting', 'up', 'postgresql', '8.4', '0ubuntu0.11', '04', 'setting', 'up', 'postgresql', 'client', '8.4', '0ubuntu0.11', '04', 'setting', 'up', 'postgresql', 'contrib', '8.4', '8.4', '0ubuntu0.11', '04', 'setting', 'up', 'postgresql', 'contrib', '8.4', '0ubuntu0.11', '04', 'processing', 'triggers', 'for', 'libc', 'bin', '创建', '配置文件', '位置', 'etc', 'postgresql', '8.4', 'main', '可执行程序', 'sudo', 'etc', 'init', 'postgresql', 'start', 'stop', 'restart', 'reload', 'force', 'reload', 'status', 'postgresql', '默认', '配置', '允许', '本地', '机器', '访问', 'local', 'access', '权限', 'postgresql', '安装', '完毕', '使用', '系统', '账户', 'postgres', 'postgres', '角色', '登录', '数据库', '设置', '密码', '命令', 'sudo', 'postgres', 'psql', '登录', 'sql', '命令', '界面', '修改', 'postgres', '用户', '密码', 'psql', 'postgresql', '命令行', '客户端', 'postgres', 'alter', 'role', 'postgres', 'with', 'encrypted', 'password', 'mypassword', 'postgres', '设置', 'postgresql', '启用', '远程', '访问', '这里', '设置', '允许', '远程', '连接', '权限', 'sudo', 'vi', 'etc', 'postgresql', '8.4', 'main', 'postgresql', 'conf', 'listen', 'addresses', 'localhost', '去掉', '注释', '修改', 'listen', 'addresses', 'password', 'encryption', 'on', '去掉', '注释', 'password', 'encryption', 'on2', '这里', '设置', '允许', '远程', '进行', '数据库', '操作', 'sudo', 'vi', 'etc', 'postgresql', '8.4', 'main', 'pg', 'hba', 'conf', '最后', '添加', '一行', '允许', '局域网', 'ip', '其他', '任何', 'ip', 'host', 'all', 'all', '192.168', '1.0', '24', 'md5', '其中', '24', 'cidr', '地址', '可用', '网关', '代替', '最后', 'pg', 'hba', 'conf', '可能', '这样', '-#', 'database', 'administrative', 'login', 'by', 'unix', 'socketslocal', 'all', 'postgres', 'ident', 'type', 'database', 'user', 'cidr', 'address', 'method', 'local', 'is', 'for', 'unix', 'domain', 'socket', 'connections', 'onlylocal', 'all', 'all', 'ident', 'ipv4', 'local', 'connections', 'host', 'all', 'all', '127.0', '0.1', '32', 'md5', 'ipv6', 'local', 'connections', 'host', 'all', 'all', '128', 'md5host', 'all', 'all', '192.168', '1.0', '24', 'md5', '修改', 'linux', '用户', 'postgres', '密码', 'sudo', 'passwd', 'postgres', '删除', '密码', 'sudo', 'su', 'postgres', 'passwd', '设置', '密码', 'su', '切换', '当前', '用户', 'postgres', 'postgresql', '创建', '用户', '数据库', '登录', '使用', 'sql', '语句', 'create', 'user', 'pytu', 'with', 'password', 'mypassword', 'nocreatedb', 'create', 'database', 'pytb', 'owner', 'pytu', 'encoding', 'utf', '命令行', '使用', '命令', '创建', 'sudo', 'postgres', 'createuser', 'dbuser', '设置', '密码', 'sudo', 'postgres', 'createdb', 'dbuser', 'mydb', '最后', '经过', '上面', '配置', '记得', '重启', 'sudo', 'etc', 'init', 'postgresql', 'restartubuntu', '10.04', 'etc', 'init', 'postgresql', '8.4', 'restart', '安装', 'postgresql', '数据库', '管理工具', 'pgadmin3sudo', 'apt', 'get', 'install', 'pgadmin3', '实现', 'php', 'mysql', '管理工具', 'phpmyadmin', '类似', '可视化', '数据库', '管理', '界面', '终端', '输入', 'pgadmin3', '启动', 'ubuntu', '11.04', '出现', '如下', '错误', '提示', '不知', '何原因', 'pgadmin3', '5579', 'critical', 'murrine', 'style', 'draw', 'flat', 'box', 'assertion', 'width', 'failed', '为了', '启用', 'pgadmin', '一些', '功能', '必须', '运行', '下面', '脚本', 'to', 'enable', 'the', 'functions', 'of', 'the', 'pgadmin', 'utility', 'run', 'script', 'against', 'the', 'postgres', 'database', 'sudo', 'postgres', 'psql', 'postgres', 'usr', 'share', 'postgresql', '8.4', 'contrib', 'adminpack', 'sql', '提示', 'create', 'function', '创建', '函数', '不同', 'ubuntu', '版本', '文件', '路径', '可能', '不同', 'ubuntu', '版本', '使用', 'pgadmin8.1', '路径', 'usr', 'share', 'postgresql', '8.1', 'contrib', 'admin81', 'sql', 'on', 'current', 'versions', 'of', 'ubuntu', '安装', 'psycopg2', '最后', '安装', 'python', 'postgresql', '数据库', '驱动', 'psycopg2', 'sudo', 'apt', 'get', 'install', 'python', 'psycopg2', '验证', 'psycopg2', '安装', 'python', 'import', 'psycopg2', 'psycopg2', 'apilevel', '2.0', 'ubuntu', 'python', 'postgresql', '数据库', '安装', '配置', '基本', '完成', '有点', '注意', '使用', 'django', 'admin', '新建', 'django', '项目', '时候', '源文件', '最好', '不要', '放在', 'apache', '其他', 'web', '服务器', 'document', 'root', '可能', '看到', '源代码', 'fatal', 'ident', 'authentication', 'failed', 'for', 'user', '问题', '新建', '一个', 'python', 'project', 'settings', 'py', '输入', '以下', '数据库', '信息', '之后', 'databases', 'default', 'engine', 'django', 'db', 'backends', 'postgresql', 'psycopg2', 'add', 'postgresql', 'psycopg2', 'postgresql', 'mysql', 'sqlite3', 'or', 'oracle', 'name', 'mydb', 'or', 'path', 'to', 'database', 'file', 'if', 'using', 'sqlite3', 'user', 'dbuser', 'not', 'used', 'with', 'sqlite3', 'password', 'mypassw', 'not', 'used', 'with', 'sqlite3', 'host', 'set', 'to', 'empty', 'string', 'for', 'localhost', 'not', 'used', 'with', 'sqlite3', 'port', 'set', 'to', 'empty', 'string', 'for', 'default', 'not', 'used', 'with', 'sqlite3', '测试', 'postgresql', '连接', 'python', 'manage', 'py', 'shell', 'from', 'django', 'db', 'import', 'connection', 'cursor', 'connection', 'cursor', '出现', '错误', 'traceback', 'most', 'recent', 'call', 'last', 'file', 'line', 'infile', 'usr', 'local', 'lib', 'python2.7', 'dist', 'packages', 'django', '1.3', 'py2.7', 'egg', 'django', 'db', 'backends', '__', 'init', '__.', 'py', 'line', '250', 'in', 'cursorcursor', 'self', 'make', 'debug', 'cursor', 'self', '._', 'cursor', 'file', 'usr', 'local', 'lib', 'python2.7', 'dist', 'packages', 'django', '1.3', 'py2.7', 'egg', 'django', 'db', 'backends', 'postgresql', 'psycopg2', 'base', 'py', 'line', '140', 'in', 'cursorself', 'connection', 'database', 'connect', 'conn', 'params', 'operationalerror', 'fatal', 'ident', 'authentication', 'failed', 'for', 'user', 'dbuser', '出现', '这个', '错误', '原因', '还是', '在于', '上面', 'pg', 'hba', 'conf', '文件', '设置', 'debian', '包括', 'ubuntu', '默认', 'pg', 'hba', 'conf', '文件', '对于', 'localhost', '本地', '机器', '数据库', '访问', '方式', 'ident', '只有', 'linux', 'shell', '用户', '通过', '同名', 'postgresql', '用户', '才能', '访问', '就是', 'pg', '超级', '用户', 'postgres', '只能', 'linux', '用户', 'postgres', '登录', '操作', '解决', '类似', 'operationalerror', 'fatal', 'ident', 'authentication', 'failed', 'for', 'user', 'postgres', '问题', '两种', '解决', '方法', '执行', 'python', 'manage', 'py', 'shell', '之前', 'su', 'postgres', '切换', 'postgres', '用户', '修改', 'pg', 'hba', 'conf', '客户端', '访问', '设置', 'laocal', '访问', 'ident', '改为', 'trust', 'type', 'database', 'user', 'cidr', 'address', 'methodlocal', 'all', 'all', 'trust', '修改', 'pg', 'hba', 'conf', '设置', '记得', '重启', 'pg', '安装', 'pg', 'ctl', '可以', 'pg', 'ctl', 'reload']","[[-0.21534271 -0.11147     0.22936739  0.14491354  0.25375653 -0.3490204
  -0.11375826  0.4479019  -0.06302238 -0.10900523 -0.04570355 -0.35126452
  -0.13848345  0.50010246  0.14108747 -0.10538196 -0.11537181 -0.00258499
  -0.05365267 -0.47350328 -0.03792245  0.25048273 -0.04470236 -0.18874019
   0.0616985  -0.43867139 -0.28360183  0.03883476 -0.21772516 -0.07854441
   0.16558439  0.02098606  0.0110594  -0.12109152 -0.1634387   0.31663069
  -0.19271708 -0.2603409   0.07870883 -0.67741788 -0.11646741 -0.54156419
  -0.06032773 -0.0028195  -0.12314193 -0.21072864 -0.22778648  0.33841326
  -0.15615541  0.42297195  0.12808449 -0.26288926 -0.10915631 -0.1692612
  -0.01487203  0.36807574  0.14378399 -0.08377175  0.11530629 -0.12711747
   0.10245956  0.21722999  0.0170082   0.07949815 -0.35620396  0.0404689
   0.03395679 -0.01799577 -0.27998183  0.40343228  0.07917909 -0.1595797
   0.36403964 -0.30724067  0.52247272  0.25100299  0.1445759  -0.15409883
  -0.30124523 -0.118194   -0.00905058  0.05008805 -0.11864285  0.35915762
  -0.30894242  0.18899195 -0.2584124   0.4217313   0.45889532  0.149574
   0.21350252  0.10294871  0.33001235  0.17854385  0.1860387   0.33884906
   0.11974884 -0.28359205 -0.00448423 -0.11558995]]"
756,putty连接linux出现中文乱码的解决方法,1、在当前打开的putty界面的，上面栏上，右键弹出菜单，点击里面的Change Settings..2、点击左侧菜单栏的Window下面的Appearance选项，然后点change，用于设置字体打开Change...的菜单，显示的是字体设置，按照如下图设置：点击确定3、点击左侧菜单栏的translation，继续设置： 4、点击Apply，发现中文已经能够正常显示,"['putty', '连接', 'linux', '出现', '中文', '乱码', '解决', '方法', '当前', '打开', 'putty', '界面', '上面', '栏上', '右键', '菜单', '点击', '里面', 'change', 'settings', '..', '点击', '左侧', '菜单栏', 'window', '下面', 'appearance', '选项', '然后', 'change', '用于', '设置', '字体', '打开', 'change', '...', '菜单', '显示', '字体', '设置', '按照', '如下', '设置', '点击', '确定', '点击', '左侧', '菜单栏', 'translation', '继续', '设置', '点击', 'apply', '发现', '中文', '已经', '能够', '正常', '显示']","[[-0.25088256 -0.13314013  0.22485179  0.16494489  0.29020103 -0.34350208
  -0.16711952  0.47678995 -0.01904469 -0.04229662 -0.05735048 -0.33605099
  -0.17558597  0.57506673  0.14846655 -0.10405034 -0.1449987  -0.00685742
  -0.08984825 -0.46159056  0.01030453  0.24679715 -0.0071741  -0.11155886
   0.10607259 -0.52782579 -0.28199722  0.07364153 -0.21276095 -0.06723981
   0.22551766  0.02269078 -0.01327408 -0.1362204  -0.1196729   0.32940267
  -0.14868644 -0.22939211  0.10983556 -0.7451505  -0.15931449 -0.57273614
  -0.04260191 -0.06184029 -0.16023954 -0.1566011  -0.25570204  0.44279825
  -0.17527661  0.39908879  0.19052282 -0.26314016 -0.1134934  -0.22101045
   0.04912972  0.38638463  0.22236617 -0.06687716  0.10303155 -0.10187786
   0.05539248  0.27753476  0.02470375  0.08159666 -0.38075482 -0.00584061
   0.04093341 -0.01942733 -0.2501758   0.43188143  0.13099419 -0.22765256
   0.39269635 -0.32367539  0.56587558  0.18261695  0.19441351 -0.14125306
  -0.27911962 -0.19155375 -0.05944128  0.00940623 -0.07668689  0.33874603
  -0.3622591   0.20021253 -0.28079017  0.40988492  0.46123953  0.12730373
   0.28766691  0.11838454  0.3533642   0.1910202   0.18359089  0.36984681
   0.1019591  -0.29835622 -0.01830024 -0.09653487]]"
781,重装Win7后恢复和找回Ubuntu启动项,如果电脑之前装了ubuntu，后来又重装了win7，结果发现ubuntu的启动项不见了，是因为重装windows7后，安装系统将把MBR重写，所以安装完成后就会直接进入windows7而不再出现grub2的系统选择界面了。如果您遇到这种情况，完全不需要再把ubuntu重装，因为 ubuntu并未被破坏，只是少了一道通往ubuntu的“门”而已。我们现在就要设法重建一道这样的“门”。修复的方法很多，如果您不想涉及到启动代码的处理，而且对windows7的启动管理器情有独钟，希望把ubuntu加入到其中可以与windows7及其他一键还原软件并列以便选择。一款软件EasyBCD便可以实现。下面是软件的界面（推荐下载地址：点击）：下面先介绍一下添加ubuntu10.04的方法，这里以EasyBCD2.0.2为例：在windows7下安装完成后打开EasyBCD，单击左侧的“Add New Entry”，然后在“Operating Systems”中选择“Linux/BSD”选项卡，“Type”中选择“GRUB 2”，下面的名字可以改，比如改为“ubuntu”，然后点击下面的“Add Entry”即可。可以参照下面的图示：重新启动计算机后，会出现windows7的启动管理器，您会发现已经加入了ubuntu（若您没有为其改名将显示NeoSmart Linux）。当您选择进入时，系统会自动搜索到正确位置，然后熟悉的Grub2界面就会出现在您面前了。您可以选择进入各种ubuntu模式，或者再次进入windows7。其实EasyBCD是一款很好用的小软件，并不局限在windows7下使用，也并不局限修复ubuntu，您可以利用它做很多的有关启动参数的修改而无需记忆繁琐的代码，当然在这里还要给您一些附加的建议：1.若您要修复的是如ubuntu10.04及以上的版本的话，请务必选择“GRUB2”；若您要修复以“Grub”为引导的Linux系统时，请选择“GRUB”，并手动选择正确的位置；2.若您是在windows7下使用EasyBCD，请务必使用较新的版本，如本篇演示的版本；3.若您是要修复其他版本的windows或apple公司的Mac，也可以在相应的选项卡中选择；但请在高版本windows下安装此软件并修复低版本的windows，如windows7下修复windows xp；4.使用EasyBCD时具有一定的危险性，在删除系统启动相关参数时请慎重，一旦误删可能导致不必要的麻烦；,"['重装', 'win7', '恢复', '找回', 'ubuntu', '启动项', '如果', '电脑', '之前', 'ubuntu', '后来', '重装', 'win7', '结果', '发现', 'ubuntu', '启动项', '不见', '是因为', '重装', 'windows7', '安装', '系统', 'mbr', '重写', '所以', '安装', '完成', '直接', '进入', 'windows7', '不再', '出现', 'grub2', '系统', '选择', '界面', '如果', '遇到', '这种', '情况', '完全', '需要', 'ubuntu', '重装', '因为', 'ubuntu', '并未', '破坏', '只是', '一道', '通往', 'ubuntu', '而已', '我们', '现在', '就要', '设法', '重建', '一道', '这样', '修复', '方法', '很多', '如果', '不想', '涉及', '启动', '代码', '处理', '而且', 'windows7', '启动', '管理器', '情有独钟', '希望', 'ubuntu', '加入', '其中', '可以', 'windows7', '及其', '一键', '还原', '软件', '并列', '以便', '选择', '一款', '软件', 'easybcd', '可以', '实现', '下面', '软件', '界面', '推荐', '下载', '地址', '点击', '下面', '介绍', '一下', '添加', 'ubuntu10.04', '方法', '这里', 'easybcd2.0', '为例', 'windows7', '安装', '完成', '打开', 'easybcd', '单击', '左侧', 'add', 'new', 'entry', '然后', 'operating', 'systems', '选择', 'linux', 'bsd', '选项卡', 'type', '选择', 'grub', '下面', '名字', '可以', '比如', '改为', 'ubuntu', '然后', '点击', '下面', 'add', 'entry', '即可', '可以', '参照', '下面', '图示', '重新启动', '计算机', '出现', 'windows7', '启动', '管理器', '发现', '已经', '加入', 'ubuntu', '没有', '改名', '显示', 'neosmart', 'linux', '选择', '进入', '系统', '自动', '搜索', '正确', '位置', '然后', '熟悉', 'grub2', '界面', '出现', '面前', '可以', '选择', '进入', '各种', 'ubuntu', '模式', '或者', '再次', '进入', 'windows7', '其实', 'easybcd', '一款', '软件', '局限', 'windows7', '使用', '局限', '修复', 'ubuntu', '可以', '利用', '很多', '有关', '启动', '参数', '修改', '无需', '记忆', '繁琐', '代码', '当然', '这里', '还要', '一些', '附加', '建议', '修复', 'ubuntu10.04', '以上', '版本', '的话', '务必', '选择', 'grub2', '修复', 'grub', '引导', 'linux', '系统', '选择', 'grub', '手动', '选择', '正确', '位置', 'windows7', '使用', 'easybcd', '务必', '使用', '版本', '本篇', '演示', '版本', '修复', '其他', '版本', 'windows', 'apple', '公司', 'mac', '可以', '相应', '选项卡', '选择', '版本', 'windows', '安装', '软件', '修复', '低版本', 'windows', 'windows7', '修复', 'windows', 'xp', '使用', 'easybcd', '具有', '一定', '危险性', '删除', '系统启动', '相关', '参数', '时请', '慎重', '一旦', '误删', '可能', '导致', '不必要', '麻烦']","[[-0.24302254 -0.13786942  0.21309764  0.19240051  0.26022915 -0.33830502
  -0.17053756  0.47091069 -0.01329692 -0.02135614 -0.07257578 -0.32795457
  -0.16504274  0.56684044  0.12693864 -0.11235342 -0.14271095 -0.00188244
  -0.07955563 -0.41326648  0.02733704  0.24231369 -0.01310601 -0.09821285
   0.09987905 -0.50783085 -0.27763192  0.083619   -0.19297205 -0.06001681
   0.23234581  0.0561838  -0.01151835 -0.13265276 -0.11882865  0.33356619
  -0.12914166 -0.21310089  0.10752321 -0.71459004 -0.14221233 -0.54576966
  -0.0309422  -0.06523717 -0.15650584 -0.15134478 -0.28032426  0.45163786
  -0.13557361  0.35805987  0.17683864 -0.26714527 -0.08155042 -0.2359943
   0.05337463  0.38485403  0.23021774 -0.06105165  0.10011027 -0.08019625
   0.05687646  0.26827339  0.02287808  0.08331961 -0.36536546 -0.00919465
   0.01607573  0.00300087 -0.21856455  0.42134089  0.11847926 -0.22679774
   0.39173413 -0.31609845  0.54903388  0.17822614  0.22138358 -0.14446989
  -0.24193994 -0.21423369 -0.09002807 -0.00646671 -0.06428111  0.33412129
  -0.36757206  0.18909858 -0.27394943  0.41334559  0.45700194  0.13417652
   0.28100399  0.11907585  0.33541153  0.1777248   0.18276374  0.38328356
   0.09134307 -0.26862151  0.02510089 -0.08826014]]"
790,《SEO实战密码》高清电子版PDF下载地址（SEO学习必备）,最近想看一些SEO系统性的知识，网上各种SEO软文，看来看去，都没有什么深入的了解，于是网上搜书好久，最终还是豆瓣排名第一的《SEO实战密码》让我觉得非常好，最后找到了该书的电子版，放到我的网盘里，欢迎大家下载： 《SEO实战密码》高清电子版下载地址： http://pan.baidu.com/netdisk/singlepublic?fid=499662_2945757840,"['seo', '实战', '密码', '高清', '电子版', 'pdf', '下载', '地址', 'seo', '学习', '必备', '最近', '一些', 'seo', '系统性', '知识', '网上', '各种', 'seo', '软文', '看来看去', '没有', '什么', '深入', '了解', '于是', '网上', '搜书', '好久', '最终', '还是', '豆瓣', '排名', '第一', 'seo', '实战', '密码', '觉得', '非常', '最后', '找到', '该书', '电子版', '放到', '网盘', '欢迎', '大家', '下载', 'seo', '实战', '密码', '高清', '电子版', '下载', '地址', 'http', 'pan', 'baidu', 'com', 'netdisk', 'singlepublic', 'fid', '499662', '2945757840']","[[-0.20980195 -0.10303094  0.22072021  0.25361986  0.13740371 -0.34303758
  -0.09149547  0.41707579 -0.04357231 -0.06148374 -0.08262267 -0.34106585
  -0.0911186   0.46467951  0.07224086 -0.12909124 -0.10430062  0.01226101
   0.00824915 -0.31339411  0.00638617  0.24027042 -0.07973291 -0.16201215
   0.00820679 -0.37219086 -0.28058768  0.07003958 -0.15165691 -0.05857703
   0.15856912  0.12536547  0.01435951 -0.08618818 -0.1675394   0.31666969
  -0.13185456 -0.20061726  0.04742226 -0.54676483 -0.05069507 -0.43854751
  -0.02476486 -0.0406629  -0.10439009 -0.20685419 -0.30838435  0.36074655
   0.00155107  0.29037812  0.05247619 -0.25823705  0.02311505 -0.22376705
  -0.01260418  0.36389138  0.14717971 -0.07424056  0.11619703 -0.0769432
   0.12127382  0.18016491  0.00183302  0.06569824 -0.28379883  0.0443366
  -0.03653731  0.05024226 -0.16178702  0.36064998  0.03919369 -0.15074402
   0.36092697 -0.27858109  0.48136134  0.24678888  0.25922856 -0.19380279
  -0.15383107 -0.19904714 -0.1023203   0.02708054 -0.10228359  0.34868481
  -0.3306757   0.13910382 -0.23830011  0.44001381  0.46315694  0.15994177
   0.15830516  0.10649433  0.25543271  0.12903854  0.16584164  0.39938221
   0.06135017 -0.18333529  0.17342718 -0.07300398]]"
796,Python使用cookielib和urllib2模拟登陆新浪微博并抓取数据,"我们都知道HTTP是无连接的状态协议，但是客户端和服务器端需要保持一些相互信息，比如cookie，有了cookie，服务器才能知道刚才是这个用户登录了网站，才会给予客户端访问一些页面的权限。用浏览器登录新浪微博，必须先登录，登陆成功后，打开其他的网页才能够访问。用程序登录新浪微博或其他验证网站，关键点也在于需要保存cookie，之后附带cookie再来访问网站，才能够达到效果。这里就需要Python的cookielib和urllib2等的配合，将cookielib绑定到urllib2在一起，就能够在请求网页的时候附带cookie。具体做法，首先第一步，用firefox的httpfox插件，在浏览器衷开始浏览新浪微博首页，然后登陆，从httpfox的记录中，查看每一步发送了那些数据请求了那个URL；之后再python里面，模拟这个过程，用urllib2.urlopen发送用户名密码到登陆页面，获取登陆后的cookie，之后访问其他页面，获取微博数据。具体代码，来自豆瓣的一篇文章：地址本人加了点注释，欢迎大家一起品尝该同学的完美代码： # coding=utf8import urllibimport urllib2import cookielibimport base64import reimport jsonimport hashlib# 获取一个保存cookie的对象cj = cookielib.LWPCookieJar()# 将一个保存cookie对象，和一个HTTP的cookie的处理器绑定cookie_support = urllib2.HTTPCookieProcessor(cj)# 创建一个opener，将保存了cookie的http处理器，还有设置一个handler用于处理http的URL的打开opener = urllib2.build_opener(cookie_support, urllib2.HTTPHandler)# 将包含了cookie、http处理器、http的handler的资源和urllib2对象板顶在一起urllib2.install_opener(opener)postdata = {    'entry': 'weibo',    'gateway': '1',    'from': '',    'savestate': '7',    'userticket': '1',    'ssosimplelogin': '1',    'vsnf': '1',    'vsnval': '',    'su': '',    'service': 'miniblog',    'servertime': '',    'nonce': '',    'pwencode': 'wsse',    'sp': '',    'encoding': 'UTF-8',    'url': 'http://weibo.com/ajaxlogin.php?framelogin=1&callback=parent.sinaSSOController.feedBackUrlCallBack',    'returntype': 'META'}def get_servertime():    url = 'http://login.sina.com.cn/sso/prelogin.php?entry=weibo&callback=sinaSSOController.preloginCallBack&su=dW5kZWZpbmVk&client=ssologin.js(v1.3.18)&_=1329806375939'    data = urllib2.urlopen(url).read()    p = re.compile('\((.*)\)')    try:        json_data = p.search(data).group(1)        data = json.loads(json_data)        servertime = str(data['servertime'])        nonce = data['nonce']        return servertime, nonce    except:        print 'Get severtime error!'        return Nonedef get_pwd(pwd, servertime, nonce):    pwd1 = hashlib.sha1(pwd).hexdigest()    pwd2 = hashlib.sha1(pwd1).hexdigest()    pwd3_ = pwd2 + servertime + nonce    pwd3 = hashlib.sha1(pwd3_).hexdigest()    return pwd3def get_user(username):    username_ = urllib.quote(username)    username = base64.encodestring(username_)[:-1]    return usernamedef main():    username = 'www.crazyant.net'  # 微博账号    pwd = 'xxxx'  # 微博密码    url = 'http://login.sina.com.cn/sso/login.php?client=ssologin.js(v1.3.18)'    try:        servertime, nonce = get_servertime()    except:        return    global postdata    postdata['servertime'] = servertime    postdata['nonce'] = nonce    postdata['su'] = get_user(username)    postdata['sp'] = get_pwd(pwd, servertime, nonce)    postdata = urllib.urlencode(postdata)    headers = {'User-Agent':'Mozilla/5.0 (X11; Linux i686; rv:8.0) Gecko/20100101 Firefox/8.0'}    # 其实到了这里，已经能够使用urllib2请求新浪任何的内容了，这里已经登陆成功了    req = urllib2.Request(        url=url,        data=postdata,        headers=headers    )    result = urllib2.urlopen(req)    text = result.read()    # print text    p = re.compile('location\.replace\(\'(.*?)\'\)')    try:        login_url = p.search(text).group(1)        print login_url        # print login_url        urllib2.urlopen(login_url)        print ""login success""    except:        print 'Login error!'    # 测试读取数据，下面的URL，可以换成任意的地址，都能把内容读取下来    req = urllib2.Request(url='http://e.weibo.com/aj/mblog/mbloglist?page=1&count=15&max_id=3463810566724276&pre_page=1&end_id=3458270641877724&pagebar=1&_k=134138430655960&uid=2383944094&_t=0&__rnd=1341384513840',)    result = urllib2.urlopen(req)    text = result.read()    print len(result.read())    # unicode(eval(b),""utf-8"")    print eval(""u'''"" + text + ""'''"") main()其实获取了模拟登陆后的urllib2，可以做抓数据等任何事情，你甚至可以写一个多线程的爬虫来爬遍新浪微博，我一直有这个想法，可从来没有实现。如果您有什么进展，请联系我共同进步。","['python', '使用', 'cookielib', 'urllib2', '模拟', '登陆', '新浪', '微博', '抓取', '数据', '我们', '知道', 'http', '连接', '状态', '协议', '但是', '客户端', '服务器端', '需要', '保持', '一些', '相互', '信息', '比如', 'cookie', 'cookie', '服务器', '才能', '知道', '刚才', '这个', '用户', '登录', '网站', '给予', '客户端', '访问', '一些', '页面', '权限', '浏览器', '登录', '新浪', '微博', '必须', '登录', '登陆', '成功', '打开', '其他', '网页', '能够', '访问', '程序', '登录', '新浪', '微博', '其他', '验证', '网站', '关键点', '在于', '需要', '保存', 'cookie', '之后', '附带', 'cookie', '再来', '访问', '网站', '能够', '达到', '效果', '这里', '需要', 'python', 'cookielib', 'urllib2', '配合', 'cookielib', '绑定', 'urllib2', '一起', '能够', '请求', '网页', '时候', '附带', 'cookie', '具体做法', '首先', '第一步', 'firefox', 'httpfox', '插件', '浏览器', '开始', '浏览', '新浪', '微博', '首页', '然后', '登陆', 'httpfox', '记录', '查看', '一步', '发送', '那些', '数据', '请求', '那个', 'url', '之后', 'python', '里面', '模拟', '这个', '过程', 'urllib2', 'urlopen', '发送', '用户名', '密码', '登陆', '页面', '获取', '登陆', 'cookie', '之后', '访问', '其他', '页面', '获取', '微博', '数据', '具体', '代码', '来自', '豆瓣', '一篇', '文章', '地址', '本人', '注释', '欢迎', '大家', '一起', '品尝', '同学', '完美', '代码', 'coding', 'utf8import', 'urllibimport', 'urllib2import', 'cookielibimport', 'base64import', 'reimport', 'jsonimport', 'hashlib', '获取', '一个', '保存', 'cookie', '对象', 'cj', 'cookielib', 'lwpcookiejar', '一个', '保存', 'cookie', '对象', '一个', 'http', 'cookie', '处理器', '绑定', 'cookie', 'support', 'urllib2', 'httpcookieprocessor', 'cj', '创建', '一个', 'opener', '保存', 'cookie', 'http', '处理器', '还有', '设置', '一个', 'handler', '用于', '处理', 'http', 'url', '打开', 'opener', 'urllib2', 'build', 'opener', 'cookie', 'support', 'urllib2', 'httphandler', '包含', 'cookie', 'http', '处理器', 'http', 'handler', '资源', 'urllib2', '对象', '板顶', '一起', 'urllib2', 'install', 'opener', 'opener', 'postdata', 'entry', 'weibo', 'gateway', 'from', 'savestate', 'userticket', 'ssosimplelogin', 'vsnf', 'vsnval', 'su', 'service', 'miniblog', 'servertime', 'nonce', 'pwencode', 'wsse', 'sp', 'encoding', 'utf', 'url', 'http', 'weibo', 'com', 'ajaxlogin', 'php', 'framelogin', 'callback', 'parent', 'sinassocontroller', 'feedbackurlcallback', 'returntype', 'meta', 'def', 'get', 'servertime', 'url', 'http', 'login', 'sina', 'com', 'cn', 'sso', 'prelogin', 'php', 'entry', 'weibo', 'callback', 'sinassocontroller', 'prelogincallback', 'su', 'dw5kzwzpbmvk', 'client', 'ssologin', 'js', 'v1.3', '18', '&_', '1329806375939', 'data', 'urllib2', 'urlopen', 'url', 'read', 're', 'compile', 'try', 'json', 'data', 'search', 'data', 'group', 'data', 'json', 'loads', 'json', 'data', 'servertime', 'str', 'data', 'servertime', 'nonce', 'data', 'nonce', 'return', 'servertime', 'nonce', 'except', 'print', 'get', 'severtime', 'error', 'return', 'nonedef', 'get', 'pwd', 'pwd', 'servertime', 'nonce', 'pwd1', 'hashlib', 'sha1', 'pwd', 'hexdigest', 'pwd2', 'hashlib', 'sha1', 'pwd1', 'hexdigest', 'pwd3', 'pwd2', 'servertime', 'nonce', 'pwd3', 'hashlib', 'sha1', 'pwd3', 'hexdigest', 'return', 'pwd3def', 'get', 'user', 'username', 'username', 'urllib', 'quote', 'username', 'username', 'base64', 'encodestring', 'username', 'return', 'usernamedef', 'main', 'username', 'www', 'crazyant', 'net', '微博', '账号', 'pwd', 'xxxx', '微博', '密码', 'url', 'http', 'login', 'sina', 'com', 'cn', 'sso', 'login', 'php', 'client', 'ssologin', 'js', 'v1.3', '18', 'try', 'servertime', 'nonce', 'get', 'servertime', 'except', 'return', 'global', 'postdata', 'postdata', 'servertime', 'servertime', 'postdata', 'nonce', 'nonce', 'postdata', 'su', 'get', 'user', 'username', 'postdata', 'sp', 'get', 'pwd', 'pwd', 'servertime', 'nonce', 'postdata', 'urllib', 'urlencode', 'postdata', 'headers', 'user', 'agent', 'mozilla', '5.0', 'x11', 'linux', 'i686', 'rv', '8.0', 'gecko', '20100101', 'firefox', '8.0', '其实', '这里', '已经', '能够', '使用', 'urllib2', '请求', '新浪', '任何', '内容', '这里', '已经', '登陆', '成功', 'req', 'urllib2', 'request', 'url', 'url', 'data', 'postdata', 'headers', 'headers', 'result', 'urllib2', 'urlopen', 'req', 'text', 'result', 'read', 'print', 'text', 're', 'compile', 'location', 'replace', 'try', 'login', 'url', 'search', 'text', 'group', 'print', 'login', 'url', 'print', 'login', 'url', 'urllib2', 'urlopen', 'login', 'url', 'print', 'login', 'success', 'except', 'print', 'login', 'error', '测试', '读取数据', '下面', 'url', '可以', '换成', '任意', '地址', '内容', '读取', '下来', 'req', 'urllib2', 'request', 'url', 'http', 'weibo', 'com', 'aj', 'mblog', 'mbloglist', 'page', 'count', '15', 'max', 'id', '3463810566724276', 'pre', 'page', 'end', 'id', '3458270641877724', 'pagebar', '&_', '134138430655960', 'uid', '2383944094', '&_', '&__', 'rnd', '1341384513840', 'result', 'urllib2', 'urlopen', 'req', 'text', 'result', 'read', 'print', 'len', 'result', 'read', 'unicode', 'eval', 'utf', 'print', 'eval', 'text', 'main', '其实', '获取', '模拟', '登陆', 'urllib2', '可以', '数据', '任何', '事情', '甚至', '可以', '一个', '多线程', '爬虫', '新浪', '微博', '一直', '这个', '想法', '从来', '没有', '实现', '如果', '什么', '进展', '联系', '共同进步']","[[-0.20734898 -0.10694888  0.23790697  0.17260395  0.22043711 -0.35511067
  -0.10614952  0.44257552 -0.05117357 -0.10021781 -0.05578211 -0.35627821
  -0.12495723  0.49501956  0.1209123  -0.11259431 -0.11688329  0.00232553
  -0.03214476 -0.43457827 -0.02563518  0.24237569 -0.06389818 -0.18589884
   0.03788981 -0.42312019 -0.28792658  0.05222846 -0.20086732 -0.06829466
   0.15526779  0.0541632   0.01674161 -0.11112458 -0.17242575  0.31629035
  -0.17129944 -0.24556997  0.0657781  -0.63857708 -0.09920684 -0.5220751
  -0.05408853 -0.01497213 -0.11019346 -0.22170779 -0.25126594  0.34523986
  -0.10128072  0.39137634  0.10583076 -0.25794355 -0.05983854 -0.18517178
  -0.01910264  0.37125617  0.14234098 -0.08923223  0.11135675 -0.11387911
   0.11138314  0.20702706  0.00627356  0.08112783 -0.32987536  0.04593128
   0.01509136 -0.00094206 -0.24212485  0.39454076  0.06997281 -0.15953313
   0.36688293 -0.29701809  0.51308594  0.2616289   0.18344532 -0.17200951
  -0.25360723 -0.14681109 -0.03628744  0.04853272 -0.11944294  0.35603111
  -0.32124168  0.17517562 -0.25876303  0.43787999  0.4724149   0.15498438
   0.19454565  0.1071479   0.31148422  0.15743624  0.18092497  0.36118585
   0.09649528 -0.25754602  0.05254569 -0.10463878]]"
808,珠玑：在仔细研究数据的基础上得出程序的结构,优化代码，编写优秀程序绝佳的方法，就是对数据的研究。对数据的仔细研究，之后采用合适的良好的数据结构，会对程序结构代码极大地优化和良好的改变。该章节试着解决这样的问题：很多繁琐、重复、耦合、难以维护的程序，其实可以用简单的数据结构应用，变得精巧、清晰和完美。举个例子，一个程序需要统计1到500之间的数字，每个数字在文本中出现的次数，可能会有人写出这样的程序：if( k==1 ) c1++;if( k==2 ) c2++;if( k==3 ) c3++;if( k==498 ) c498++;if( k==499 ) c499++;if( k==500 ) c500++;该程序用了500个变量存储每个数字出现的次数，然而仔细研究发现可以用一个500个元素的数组轻松实现。恰当的数据视图实际上决定了程序的结构，很多程序都可以通过重新组织内部数据而变得更小（并且更好）。使用模板技术来解决格式化大型文本的需求。能用小程序实现的，就不要编写大型程序。比如要处理某个N=23的情况的程序，其实完全可以编写只针对N的程序，最后将N赋值为23来实现。程序员在节省空间方面无计可施时，将自己从代码里解脱出来，退回起点并集中心里研究数据，常常能有奇效。（数据的）表示形式是程序设计的根本。以下是一些参考方法：使用数组重新编写重复代码。冗余的相似代码常常可以用最简单的数组来描述。封装复杂结构。如果数据结构比较复杂，直接抽象成类尽可能使用高级工具：超文本、名值对、电子表格、数据库、编程语言从数据得出程序的结构：通过使用恰当的数据结构替代复杂的代码，从数据可以得到程序的结构。万变不离其宗：在动手编码之前，优秀的程序员会彻底理解输入、输出和中间数据结构，并围绕这些结构创建程序。,"['珠玑', '仔细', '研究', '数据', '基础', '得出', '程序', '结构', '优化', '代码', '编写', '优秀', '程序', '绝佳', '方法', '就是', '数据', '研究', '数据', '仔细', '研究', '之后', '采用', '合适', '良好', '数据结构', '程序结构', '代码', '极大', '优化', '良好', '改变', '章节', '试着', '解决', '这样', '问题', '很多', '繁琐', '重复', '耦合', '难以', '维护', '程序', '其实', '可以', '简单', '数据结构', '应用', '变得', '精巧', '清晰', '完美', '举个', '例子', '一个', '程序', '需要', '统计', '500', '之间', '数字', '每个', '数字', '文本', '出现', '次数', '可能', '有人', '写出', '这样', '程序', 'if', 'c1', '++', 'if', 'c2', '++', 'if', 'c3', '++', 'if', '498', 'c498', '++', 'if', '499', 'c499', '++', 'if', '500', 'c500', '++', '程序', '500', '变量', '存储', '每个', '数字', '出现', '次数', '然而', '仔细', '研究', '发现', '可以', '一个', '500', '元素', '数组', '轻松', '实现', '恰当', '数据', '视图', '实际上', '决定', '程序', '结构', '很多', '程序', '可以', '通过', '重新', '组织', '内部', '数据', '变得', '并且', '更好', '使用', '模板', '技术', '解决', '格式化', '大型', '文本', '需求', '能用', '程序实现', '不要', '编写', '大型', '程序', '比如', '处理', '某个', '23', '情况', '程序', '其实', '完全', '可以', '编写', '针对', '程序', '最后', '赋值', '23', '实现', '程序员', '节省', '空间', '方面', '无计可施', '自己', '代码', '解脱', '出来', '退回', '起点', '集中', '心里', '研究', '数据', '常常', '奇效', '数据', '表示', '形式', '程序设计', '根本', '以下', '一些', '参考', '方法', '使用', '数组', '重新', '编写', '重复', '代码', '冗余', '相似', '代码', '常常', '可以', '简单', '数组', '描述', '封装', '复杂', '结构', '如果', '数据结构', '比较复杂', '直接', '抽象', '成类', '尽可能', '使用', '高级', '工具', '超文本', '名值', '电子表格', '数据库', '编程语言', '数据', '得出', '程序', '结构', '通过', '使用', '恰当', '数据结构', '替代', '复杂', '代码', '数据', '可以', '得到', '程序', '结构', '万变不离其宗', '动手', '编码', '之前', '优秀', '程序员', '彻底', '理解', '输入', '输出', '中间', '数据结构', '围绕', '这些', '结构', '创建', '程序']","[[-0.23834285 -0.13267025  0.19902151  0.14699731  0.29307962 -0.30934613
  -0.19609469  0.45946398  0.00578492 -0.00477029 -0.05766618 -0.29642915
  -0.18120105  0.57602548  0.14712795 -0.09123575 -0.14918582 -0.00665537
  -0.11371529 -0.43223667  0.03586363  0.21697111  0.01557576 -0.06553434
   0.13156733 -0.53006386 -0.26041617  0.09381329 -0.19269124 -0.0523088
   0.24403967  0.01695094 -0.02660174 -0.14069694 -0.08374026  0.31147015
  -0.11767968 -0.19927492  0.1208121  -0.73501285 -0.17725015 -0.54901102
  -0.03221001 -0.07524935 -0.16885879 -0.12208923 -0.23990244  0.45773458
  -0.1821762   0.3657123   0.21322076 -0.25182494 -0.12230466 -0.22049616
   0.08849567  0.36236428  0.25072972 -0.04757873  0.0849769  -0.08280204
   0.02154532  0.28937173  0.02816648  0.08630855 -0.37013153 -0.02532381
   0.04738841 -0.01845591 -0.22956241  0.41877943  0.15367492 -0.2443959
   0.37481055 -0.30562434  0.5395319   0.13349936  0.19376671 -0.11833225
  -0.26453483 -0.20687711 -0.07995821 -0.01936606 -0.04956043  0.30005693
  -0.35503321  0.19846745 -0.27386271  0.36966616  0.420956    0.11479347
   0.30921907  0.11283723  0.34567079  0.18374286  0.17607664  0.3439365
   0.09177451 -0.28605938 -0.04245843 -0.0852636 ]]"
811,"django1.4设置模板路径和CSS,JS,image等路径的方法","对于DJANGO这类MVC框架来说，路径问题可以称为一个谜一样的东西，很多人因为对路径不知道如何处理而觉得MVC实在是云里雾里不知所云。本文主要解决django中关于模板路径设置、CSS文件路径设置、JS文件路径设置、图片路径设置等常见问题。文中将templates和media(包含js、css、images目录）放到了项目目录的根目录，更具有一般性质。设定模板路径设置模板路径比较简单，只要在setting.py里面的TEMPLATE_DIRS选项里面加上这么一句话即可：import os.pathTEMPLATE_DIRS = (    os.path.join(os.path.dirname(__file__), '../templates').replace('\\','/'),   ) 这意味着，你可以在项目的根目录下面，建立一个templates目录，里面放你所有的模板设定CSS/JS/IMAGES等路径1、在setting.py里面，加入下面一句话，指定根目录下面的media路径：STATIC_PATH= os.path.join(os.path.dirname(__file__), '../media').replace('\\','/') 2、在urls.py里面设定这么一句话，将请求CSS/JS/IMAGES的URL转到该地方(r'^site_media/(?P<path>.*)$','django.views.static.serve',{'document_root':settings.STATIC_PATH}), 3、那么在我们的模板里面，现在已经可以用以下方法访问JS/CSS/IMAGES<link href=""/site_media/style/style.css"" rel=""stylesheet"" type=""text/css"" /> 该方法的一个优点是，不用详细设置JS、CSS、images三个不同的路径，只要设定一个，在模版文件里面，直接指定文件的子目录就可以了，比如图片和JS可以这么写：<img src='/site_media/images/a.jpg'><script src='/site_media/js/s.js'> </script>请看这里，我们并没有在urls.py中指定/site_media/images这样的路径。","['django1.4', '设置', '模板', '路径', 'css', 'js', 'image', '路径', '方法', '对于', 'django', '这类', 'mvc', '框架', '来说', '路径', '问题', '可以', '称为', '一个', '谜一样', '东西', '很多', '因为', '路径', '知道', '如何', '处理', '觉得', 'mvc', '实在', '云里雾里', '不知所云', '本文', '主要', '解决', 'django', '关于', '模板', '路径', '设置', 'css', '文件', '路径', '设置', 'js', '文件', '路径', '设置', '图片', '路径', '设置', '常见问题', '文中', 'templates', 'media', '包含', 'js', 'css', 'images', '目录', '放到', '项目', '目录', '根目录', '具有', '一般', '性质', '设定', '模板', '路径', '设置', '模板', '路径', '比较简单', '只要', 'setting', 'py', '里面', 'template', 'dirs', '选项', '里面', '加上', '这么', '一句', '即可', 'import', 'os', 'pathtemplate', 'dirs', 'os', 'path', 'join', 'os', 'path', 'dirname', '__', 'file', '__', '..', 'templates', 'replace', '意味着', '可以', '项目', '根目录', '下面', '建立', '一个', 'templates', '目录', '里面', '所有', '模板', '设定', 'css', 'js', 'images', '路径', 'setting', 'py', '里面', '加入', '下面', '一句', '指定', '根目录', '下面', 'media', '路径', 'static', 'path', 'os', 'path', 'join', 'os', 'path', 'dirname', '__', 'file', '__', '..', 'media', 'replace', 'urls', 'py', '里面', '设定', '这么', '一句', '请求', 'css', 'js', 'images', 'url', '转到', '地方', 'site', 'media', 'path', 'django', 'views', 'static', 'serve', 'document', 'root', 'settings', 'static', 'path', '那么', '我们', '模板', '里面', '现在', '已经', '可以', '以下', '方法', '访问', 'js', 'css', 'images', 'link', 'href', 'site', 'media', 'style', 'style', 'css', 'rel', 'stylesheet', 'type', 'text', 'css', '方法', '一个', '优点', '不用', '详细', '设置', 'js', 'css', 'images', '三个', '不同', '路径', '只要', '设定', '一个', '模版', '文件', '里面', '直接', '指定', '文件', '子目录', '可以', '比如', '图片', 'js', '可以', '这么', 'img', 'src', 'site', 'media', 'images', 'jpg', 'script', 'src', 'site', 'media', 'js', 'js', 'script', '这里', '我们', '没有', 'urls', 'py', '指定', 'site', 'media', 'images', '这样', '路径']","[[-0.22610701 -0.13630812  0.21993436  0.14822843  0.2801832  -0.34494249
  -0.14867468  0.46707177 -0.04090194 -0.07466268 -0.04800116 -0.33980176
  -0.1802985   0.54346096  0.14836177 -0.10585894 -0.13827715  0.00502035
  -0.08428234 -0.48297216 -0.01907989  0.24897964 -0.0088435  -0.14996553
   0.09592556 -0.49642097 -0.28333747  0.05751062 -0.22936706 -0.06768249
   0.2054824   0.0145135   0.00953768 -0.14440666 -0.14425468  0.3194405
  -0.17899954 -0.24822022  0.09968247 -0.72225457 -0.15170393 -0.56761083
  -0.0542221  -0.02759868 -0.14297169 -0.17878592 -0.21924036  0.39499234
  -0.17001384  0.41914892  0.177091   -0.26909794 -0.12120867 -0.18453458
   0.02085013  0.38034326  0.19004884 -0.08221185  0.11714086 -0.12890133
   0.07988847  0.26185384  0.02911611  0.09179419 -0.38061674  0.01836366
   0.03394173 -0.02223616 -0.27596242  0.42160411  0.1073221  -0.19954754
   0.38387437 -0.31768765  0.55946283  0.20676767  0.15600194 -0.13490342
  -0.30432708 -0.14787784 -0.03703708  0.02006431 -0.10417175  0.34124328
  -0.34006381  0.19096578 -0.27344403  0.41191077  0.45691505  0.12595746
   0.26045666  0.11050314  0.34034951  0.18947242  0.1865578   0.3537963
   0.1226021  -0.29170769 -0.04209578 -0.11114886]]"
814,Django中定制自己的User和Group管理模块（类似对admin的二次开发）,django的admin后台管理实在强大，其实对于普通模型来说倒没什么，关键是对于权限系统，比如User和Group的管理，它做的非常好，让人总是想要充分利用它本身的功能。然而在admin后台上直接进行二次开发有很多不友好的地方，比如你如果简单的扩充了User表，却不能够在系统本身的User模型中管理添加的字段，这涉及到dj源码（修改源码绝对不是好主意）因此必须得自己来写权限系统，其实这里我们是对django的contrib下面的auth进行接口编写，下面是示意图：其实正是因为对Auth(包括User和Group)的增删改查和对Auth的使用（验证权限等）之间没有直接的关系，因此我们可以简单的把Django核心中的User和Group作为一个简单的模型来使用，比如对Group的添加、修改、删除等等。而使用的时候，因为直接访问的还是核心，它并不知道我们偷偷的写了很多源码自己来操纵User和Group，一切皆数据，数据即中介，对User和Group的使用，知识对数据的简单访问而已。思路已经理清，可以对User和Group做如下的操纵来实现自己的、类似于Admin站点管理的模块：我们要使用的，只是源码核心中的User和Group的模型类model，因此我们可以建立自己模型表单，哈哈，简单的访问该模型表单，我们就是对User和Group的数据进行操作，简单吧~。,"['django', '定制', '自己', 'user', 'group', '管理', '模块', '类似', 'admin', '二次开发', 'django', 'admin', '后台', '管理', '实在', '强大', '其实', '对于', '普通', '模型', '来说', '没什么', '关键', '对于', '权限', '系统', '比如', 'user', 'group', '管理', '非常', '总是', '想要', '充分利用', '本身', '功能', '然而', 'admin', '台上', '直接', '进行', '二次开发', '很多', '友好', '地方', '比如', '如果', '简单', '扩充', 'user', '能够', '系统', '本身', 'user', '模型', '管理', '添加', '涉及', 'dj', '源码', '修改', '源码', '绝对', '不是', '主意', '因此', '必须', '自己', '权限', '系统', '其实', '这里', '我们', 'django', 'contrib', '下面', 'auth', '进行', '接口', '编写', '下面', '示意图', '其实', '正是', '因为', 'auth', '包括', 'user', 'group', '增删', '改查', 'auth', '使用', '验证', '权限', '之间', '没有', '直接', '关系', '因此', '我们', '可以', '简单', 'django', '核心', 'user', 'group', '作为', '一个', '简单', '模型', '使用', '比如', 'group', '添加', '修改', '删除', '等等', '使用', '时候', '因为', '直接', '访问', '还是', '核心', '并不知道', '我们', '偷偷', '很多', '源码', '自己', '操纵', 'user', 'group', '一切', '数据', '数据', '中介', 'user', 'group', '使用', '知识', '数据', '简单', '访问', '而已', '思路', '已经', '理清', '可以', 'user', 'group', '如下', '操纵', '实现', '自己', '类似', 'admin', '站点', '管理', '模块', '我们', '使用', '只是', '源码', '核心', 'user', 'group', '模型', 'model', '因此', '我们', '可以', '建立', '自己', '模型', '表单', '哈哈', '简单', '访问', '模型', '表单', '我们', '就是', 'user', 'group', '数据', '进行', '操作', '简单']","[[-0.27041858 -0.15516594  0.23004877  0.17678161  0.333237   -0.36644225
  -0.21802178  0.53591838  0.00278747 -0.00870704 -0.06958789 -0.34762323
  -0.21262883  0.66435747  0.16355331 -0.10687229 -0.16813449 -0.00901035
  -0.12175661 -0.49368809  0.03991821  0.25715258  0.01415869 -0.08609771
   0.14763401 -0.61073799 -0.30330759  0.10266002 -0.22253776 -0.06216461
   0.28279611  0.03025959 -0.02384868 -0.15989854 -0.1032597   0.36259733
  -0.1385857  -0.23213624  0.12914115 -0.84254967 -0.19808404 -0.63674679
  -0.03553227 -0.08226055 -0.18719313 -0.14660635 -0.27935707  0.52378043
  -0.20215249  0.42466986  0.23889276 -0.2889456  -0.13440117 -0.24753277
   0.08936926  0.41909593  0.28368803 -0.05766949  0.09849249 -0.09613485
   0.03714908  0.33131841  0.02637217  0.09972368 -0.42533409 -0.02694454
   0.05039868 -0.02046316 -0.26633468  0.48224365  0.16788187 -0.28388994
   0.43532218 -0.35569571  0.63272251  0.16021955  0.22970798 -0.14296242
  -0.30291639 -0.237288   -0.0910189  -0.01055764 -0.06527663  0.35060141
  -0.41508023  0.22930663 -0.31795995  0.43840332  0.49665507  0.13292507
   0.35134105  0.13232461  0.39654942  0.2085195   0.20320224  0.40477844
   0.10669076 -0.32905575 -0.04355272 -0.09317106]]"
818,Python模拟登陆新浪微博并实现投票功能,"上次发了一篇文章，题目叫做《Python使用cookielib和urllib2模拟登陆新浪微博并抓取数据》，里面的代码请不要怀疑，我测试过它是正确的。新浪微博的模拟登陆，有个前提条件，你用新浪微博账号登陆的时候，新浪没有提示你输入验证码。若需要输入验证码，不好意思这里不作处理，你可以用以下几种方法解决验证码问题：1、用图片识别软件识别，不过识别正确率会很低2、登陆的时候如果需要验证码，我们的自己的程序就弹出验证码的图片，自己手工输入3、外包给验证码输入公司，比如100元，把图片传过去，他给你送回文字结果10000个程序运行到了后面，我提到urllib2里面的cookie已经存放了我们请求任何页面需要的数据，因此可以用urllib2请求任何页面、发微薄、投票实现任何事情，详细见如下代码，猥琐的分隔栏下面是新增的内容，为了方便，我把上次的代码一起贴出来了，代码注释很给力，大家可以看一看，本代码测试成功：# coding=utf8import urllibimport urllib2import cookielibimport base64import reimport jsonimport hashlibimport timefrom django.template.defaultfilters import urlencode# 获取一个保存cookie的对象cj = cookielib.LWPCookieJar()# 将一个保存cookie对象，和一个HTTP的cookie的处理器绑定cookie_support = urllib2.HTTPCookieProcessor(cj)# 创建一个opener，将保存了cookie的http处理器，还有设置一个handler用于处理http的URL的打开opener = urllib2.build_opener(cookie_support, urllib2.HTTPHandler)# 将包含了cookie、http处理器、http的handler的资源和urllib2对象板顶在一起urllib2.install_opener(opener)postdata = {    'entry': 'weibo',    'gateway': '1',    'from': '',    'savestate': '7',    'userticket': '1',    'ssosimplelogin': '1',    'vsnf': '1',    'vsnval': '',    'su': '',    'service': 'miniblog',    'servertime': '',    'nonce': '',    'pwencode': 'wsse',    'sp': '',    'encoding': 'UTF-8',    'url': 'http://weibo.com/ajaxlogin.php?framelogin=1&callback=parent.sinaSSOController.feedBackUrlCallBack',    'returntype': 'META'}def get_servertime():    url = 'http://login.sina.com.cn/sso/prelogin.php?entry=weibo&callback=sinaSSOController.preloginCallBack&su=dW5kZWZpbmVk&client=ssologin.js(v1.3.18)&_=1329806375939'    data = urllib2.urlopen(url).read()    p = re.compile('\((.*)\)')    try:        json_data = p.search(data).group(1)        data = json.loads(json_data)        servertime = str(data['servertime'])        nonce = data['nonce']        return servertime, nonce    except:        print 'Get severtime error!'        return Nonedef get_pwd(pwd, servertime, nonce):    pwd1 = hashlib.sha1(pwd).hexdigest()    pwd2 = hashlib.sha1(pwd1).hexdigest()    pwd3_ = pwd2 + servertime + nonce    pwd3 = hashlib.sha1(pwd3_).hexdigest()    return pwd3def get_user(username):    username_ = urllib.quote(username)    username = base64.encodestring(username_)[:-1]    return usernamedef main():    username = 'www.crazyant.net'  # 微博账号    pwd = 'xxx'  # 微博密码    url = 'http://login.sina.com.cn/sso/login.php?client=ssologin.js(v1.3.18)'    try:        servertime, nonce = get_servertime()    except:        return    global postdata    postdata['servertime'] = servertime    postdata['nonce'] = nonce    postdata['su'] = get_user(username)    postdata['sp'] = get_pwd(pwd, servertime, nonce)    postdata = urllib.urlencode(postdata)    headers = {'User-Agent':'Mozilla/5.0 (X11; Linux i686; rv:8.0) Gecko/20100101 Firefox/8.0'               , 'Referer':'http://vote.weibo.com/vid=1890981'               }        # 到此已经能够使用urllib2请求新浪任何的内容，登陆成功    req = urllib2.Request(        url=url,        data=postdata,        headers=headers    )    result = urllib2.urlopen(req)    text = result.read()    # print text    p = re.compile('location\.replace\(\'(.*?)\'\)')    try:        login_url = p.search(text).group(1)        print login_url        # print login_url        urllib2.urlopen(login_url)        print ""login success""    except:        print 'Login error!'    # 测试读取数据，下面的URL，可以换成任意的地址，都能把内容读取下来    #---------------------------------------------------------    # 以下为2012年7月25日21新增：    # 对一个投票页面进行投票    #---------------------------------------------------------    # 首先请求一下投票页面，这样做只是为了该页面会返回cookie，我们要保存cookie    res = urllib2.urlopen('http://vote.weibo.com/vid=1890981')    # 分析了投票的流程，需要如下几个参数的值    votedata = {              'item':'1',              'share':'1',              'poll_id':'1890981',              'poll_category':'0',              '_t':'0'    }    # 原文的那个headers少了一项Referer，结果导致投票不成功，所以这里加上    headers_more = {'User-Agent':'Mozilla/5.0 (X11; Linux i686; rv:8.0) Gecko/20100101 Firefox/8.0'               , 'Referer':'http://vote.weibo.com/vid=1890981'               }    # 把投票的参数的值进行编码，用于urllib2请求的时候附带    votedata = urllib.urlencode(votedata)    # URL、数据、请求HTTP头，我们伪造了一个请求包    req = urllib2.Request(        url='http://vote.weibo.com/poll/joined',        data=votedata,        headers=headers_more    )    # 发出请求包，到页面看一看，投票OK    result = urllib2.urlopen(req)    # 把返回的内容存下来看看，其实这一步无必要了    text = result.read()    f = open('out.txt', 'w')    f.write(text)    print 'ok'main() ","['python', '模拟', '登陆', '新浪', '微博', '实现', '投票', '功能', '上次', '发了', '一篇', '文章', '题目', '叫做', 'python', '使用', 'cookielib', 'urllib2', '模拟', '登陆', '新浪', '微博', '抓取', '数据', '里面', '代码', '不要', '怀疑', '测试', '正确', '新浪', '微博', '模拟', '登陆', '有个', '前提条件', '新浪', '微博', '账号', '登陆', '时候', '新浪', '没有', '提示', '输入', '验证码', '需要', '输入', '验证码', '不好意思', '这里', '处理', '可以', '以下', '几种', '方法', '解决', '验证码', '问题', '图片', '识别', '软件', '识别', '不过', '识别', '正确率', '登陆', '时候', '如果', '需要', '验证码', '我们', '自己', '程序', '弹出', '验证码', '图片', '自己', '手工', '输入', '外包', '验证码', '输入', '公司', '比如', '100', '图片', '过去', '送回', '文字', '结果', '10000', '程序运行', '后面', '提到', 'urllib2', '里面', 'cookie', '已经', '存放', '我们', '请求', '任何', '页面', '需要', '数据', '因此', '可以', 'urllib2', '请求', '任何', '页面', '微薄', '投票', '实现', '任何', '事情', '详细', '如下', '代码', '猥琐', '分隔', '下面', '新增', '内容', '为了', '方便', '上次', '代码', '一起', '贴出来', '代码', '注释', '大家', '可以', '看一看', '代码', '测试', '成功', 'coding', 'utf8import', 'urllibimport', 'urllib2import', 'cookielibimport', 'base64import', 'reimport', 'jsonimport', 'hashlibimport', 'timefrom', 'django', 'template', 'defaultfilters', 'import', 'urlencode', '获取', '一个', '保存', 'cookie', '对象', 'cj', 'cookielib', 'lwpcookiejar', '一个', '保存', 'cookie', '对象', '一个', 'http', 'cookie', '处理器', '绑定', 'cookie', 'support', 'urllib2', 'httpcookieprocessor', 'cj', '创建', '一个', 'opener', '保存', 'cookie', 'http', '处理器', '还有', '设置', '一个', 'handler', '用于', '处理', 'http', 'url', '打开', 'opener', 'urllib2', 'build', 'opener', 'cookie', 'support', 'urllib2', 'httphandler', '包含', 'cookie', 'http', '处理器', 'http', 'handler', '资源', 'urllib2', '对象', '板顶', '一起', 'urllib2', 'install', 'opener', 'opener', 'postdata', 'entry', 'weibo', 'gateway', 'from', 'savestate', 'userticket', 'ssosimplelogin', 'vsnf', 'vsnval', 'su', 'service', 'miniblog', 'servertime', 'nonce', 'pwencode', 'wsse', 'sp', 'encoding', 'utf', 'url', 'http', 'weibo', 'com', 'ajaxlogin', 'php', 'framelogin', 'callback', 'parent', 'sinassocontroller', 'feedbackurlcallback', 'returntype', 'meta', 'def', 'get', 'servertime', 'url', 'http', 'login', 'sina', 'com', 'cn', 'sso', 'prelogin', 'php', 'entry', 'weibo', 'callback', 'sinassocontroller', 'prelogincallback', 'su', 'dw5kzwzpbmvk', 'client', 'ssologin', 'js', 'v1.3', '18', '&_', '1329806375939', 'data', 'urllib2', 'urlopen', 'url', 'read', 're', 'compile', 'try', 'json', 'data', 'search', 'data', 'group', 'data', 'json', 'loads', 'json', 'data', 'servertime', 'str', 'data', 'servertime', 'nonce', 'data', 'nonce', 'return', 'servertime', 'nonce', 'except', 'print', 'get', 'severtime', 'error', 'return', 'nonedef', 'get', 'pwd', 'pwd', 'servertime', 'nonce', 'pwd1', 'hashlib', 'sha1', 'pwd', 'hexdigest', 'pwd2', 'hashlib', 'sha1', 'pwd1', 'hexdigest', 'pwd3', 'pwd2', 'servertime', 'nonce', 'pwd3', 'hashlib', 'sha1', 'pwd3', 'hexdigest', 'return', 'pwd3def', 'get', 'user', 'username', 'username', 'urllib', 'quote', 'username', 'username', 'base64', 'encodestring', 'username', 'return', 'usernamedef', 'main', 'username', 'www', 'crazyant', 'net', '微博', '账号', 'pwd', 'xxx', '微博', '密码', 'url', 'http', 'login', 'sina', 'com', 'cn', 'sso', 'login', 'php', 'client', 'ssologin', 'js', 'v1.3', '18', 'try', 'servertime', 'nonce', 'get', 'servertime', 'except', 'return', 'global', 'postdata', 'postdata', 'servertime', 'servertime', 'postdata', 'nonce', 'nonce', 'postdata', 'su', 'get', 'user', 'username', 'postdata', 'sp', 'get', 'pwd', 'pwd', 'servertime', 'nonce', 'postdata', 'urllib', 'urlencode', 'postdata', 'headers', 'user', 'agent', 'mozilla', '5.0', 'x11', 'linux', 'i686', 'rv', '8.0', 'gecko', '20100101', 'firefox', '8.0', 'referer', 'http', 'vote', 'weibo', 'com', 'vid', '1890981', '已经', '能够', '使用', 'urllib2', '请求', '新浪', '任何', '内容', '登陆', '成功', 'req', 'urllib2', 'request', 'url', 'url', 'data', 'postdata', 'headers', 'headers', 'result', 'urllib2', 'urlopen', 'req', 'text', 'result', 'read', 'print', 'text', 're', 'compile', 'location', 'replace', 'try', 'login', 'url', 'search', 'text', 'group', 'print', 'login', 'url', 'print', 'login', 'url', 'urllib2', 'urlopen', 'login', 'url', 'print', 'login', 'success', 'except', 'print', 'login', 'error', '测试', '读取数据', '下面', 'url', '可以', '换成', '任意', '地址', '内容', '读取', '下来', '#---------------------------------------------------------', '以下', '2012', '25', '21', '新增', '一个', '投票', '页面', '进行', '投票', '#---------------------------------------------------------', '首先', '请求', '一下', '投票', '页面', '这样', '只是', '为了', '页面', '返回', 'cookie', '我们', '保存', 'cookie', 'res', 'urllib2', 'urlopen', 'http', 'vote', 'weibo', 'com', 'vid', '1890981', '分析', '投票', '流程', '需要', '如下', '几个', '参数', 'votedata', 'item', 'share', 'poll', 'id', '1890981', 'poll', 'category', '原文', '那个', 'headers', '一项', 'referer', '结果', '导致', '投票', '成功', '所以', '这里', '加上', 'headers', 'more', 'user', 'agent', 'mozilla', '5.0', 'x11', 'linux', 'i686', 'rv', '8.0', 'gecko', '20100101', 'firefox', '8.0', 'referer', 'http', 'vote', 'weibo', 'com', 'vid', '1890981', '投票', '参数', '进行', '编码', '用于', 'urllib2', '请求', '时候', '附带', 'votedata', 'urllib', 'urlencode', 'votedata', 'url', '数据', '请求', 'http', '我们', '伪造', '一个', '请求', 'req', 'urllib2', 'request', 'url', 'http', 'vote', 'weibo', 'com', 'poll', 'joined', 'data', 'votedata', 'headers', 'headers', 'more', '发出请求', '页面', '看一看', '投票', 'ok', 'result', 'urllib2', 'urlopen', 'req', '返回', '内容', '下来', '看看', '其实', '一步', '必要', 'text', 'result', 'read', 'open', 'out', 'txt', 'write', 'text', 'print', 'ok', 'main']","[[-0.21040319 -0.1087971   0.23811123  0.1821004   0.21700139 -0.35584633
  -0.1084694   0.44508239 -0.04949234 -0.09600373 -0.05893569 -0.35738316
  -0.12407059  0.49921859  0.11808036 -0.11510775 -0.1186531   0.00305802
  -0.03070388 -0.42808045 -0.0225695   0.24453532 -0.06406137 -0.18198229
   0.03650179 -0.42426704 -0.29053571  0.05615121 -0.19827676 -0.0673116
   0.1583735   0.06032176  0.01626424 -0.11113601 -0.1727684   0.3198743
  -0.16861343 -0.24281154  0.06568711 -0.63789547 -0.0970979  -0.5205019
  -0.05217517 -0.01867254 -0.11140676 -0.2217058  -0.26017692  0.35226288
  -0.09400508  0.38496219  0.10410541 -0.26109396 -0.05292576 -0.1918845
  -0.01596099  0.37551137  0.14730187 -0.08829871  0.11203457 -0.10997033
   0.1112799   0.20778903  0.00643282  0.08179785 -0.32932935  0.0443779
   0.01066864  0.00428708 -0.23573062  0.39613498  0.07065312 -0.16181233
   0.37047508 -0.29862367  0.51526152  0.26047079  0.19340876 -0.17481207
  -0.24687788 -0.1559863  -0.04399089  0.04436603 -0.11687136  0.35789049
  -0.32735411  0.17500633 -0.25980645  0.44117893  0.47599316  0.15706891
   0.19526086  0.10815792  0.31066235  0.15758525  0.18163001  0.37008165
   0.09287282 -0.25339613  0.0627953  -0.10283634]]"
821,PHP远程操纵Wordpress的方法(流程剖析）,"一直想写一个给wordpress群发文章的应用，这样我就能自动采集文章，然后写个脚本自动发送文章了，哈哈。虽然用python干这种事情貌似更加擅长，但是我想做个web界面访问该应用，而python的虚拟主机现在还好少（至少PHP真的很容易有），于是拿起老本行，用PHP来搞定。学PHP也已经有很长时间，从原来的纯手工编写，到后来的网上找类库自己整合，再到如今的直接使用框架。我再也不愿意从头开始写程序，现成的框架有大量的优秀代码，拿来用能实现目标何乐而不为，之前也用过zend、thinkphp、codeigniter，前两者其实都不错，但是现在我还是很偏爱codeigniter，就因为它强大的在线文档。我使用的是CI(codeigniter)的“XML-RPC 和 XML-RPC 服务器类”，以下代码实现了将服务器wordpress站点的标签信息获取下来打印：public function index(){    //加载CI的xmlrpc类库    $this->load->library('xmlrpc');    //设定远程的XMLRPC.php文件的地址    $this->xmlrpc->server('http://jobrule.sinaapp.com/xmlrpc.php');    /*     * 设定需要操作的方法，该字符串，可以在wordpress服务器上     * 的/wp-includes/class-wp-xmlrpc-server.php里面找到     */    $this->xmlrpc->method('wp.getTags');    /*     * 设定请求参数，可以直接去看class-wp-xmlrpc-server.php的源代码，     * 其中第0个是id，第一个和第二个是用户名密码     */    $request = array('','admin', '123456789');    //将参数设定到请求里面，这时候还没有发送请求    $this->xmlrpc->request($request);    //发送请求    if ( ! $this->xmlrpc->send_request()){        echo $this->xmlrpc->display_error();    }    //打印结果看一看    echo ""<pre>"";    print_r( $this->xmlrpc->display_response());    echo ""</pre>"";    //$this->load->view('welcome_message');} CI的官方文档列出了xmlrpc类的API：$this->xmlrpc->server()：设定发送请求的服务器URL和端口号$this->xmlrpc->timeout()：设定一个发送请求的响应时间$this->xmlrpc->method()：设定请求的服务方法字符串（重要）$this->xmlrpc->request()：绑定发送请求的数据参数，并不发送请求$this->xmlrpc->send_request()：发送请求$this->xmlrpc->display_error()：打印错误信息$this->xmlrpc->display_response()：打印返回的响应信息$this->xmlrpc->set_debug(TRUE)：开发过程中打印一些调试信息关键在于$this->xmlrpc->method()，该接口设定向服务器发送什么样的请求。下载一个wordpress源码，打开\wp-includes\class-wp-xmlrpc-server.php文件，可以看到所有的我们能够调用的服务：// WordPress API'wp.getUsersBlogs'=> 'this:wp_getUsersBlogs','wp.newPost'=> 'this:wp_newPost','wp.editPost'=> 'this:wp_editPost','wp.deletePost'=> 'this:wp_deletePost','wp.getPost'=> 'this:wp_getPost','wp.getPosts'=> 'this:wp_getPosts','wp.newTerm'=> 'this:wp_newTerm','wp.editTerm'=> 'this:wp_editTerm','wp.deleteTerm'=> 'this:wp_deleteTerm','wp.getTerm'=> 'this:wp_getTerm','wp.getTerms'=> 'this:wp_getTerms','wp.getTaxonomy'=> 'this:wp_getTaxonomy','wp.getTaxonomies'=> 'this:wp_getTaxonomies','wp.getPage'=> 'this:wp_getPage','wp.getPages'=> 'this:wp_getPages','wp.newPage'=> 'this:wp_newPage','wp.deletePage'=> 'this:wp_deletePage','wp.editPage'=> 'this:wp_editPage','wp.getPageList'=> 'this:wp_getPageList','wp.getAuthors'=> 'this:wp_getAuthors','wp.getCategories'=> 'this:mw_getCategories',// Alias'wp.getTags'=> 'this:wp_getTags','wp.newCategory'=> 'this:wp_newCategory','wp.deleteCategory'=> 'this:wp_deleteCategory','wp.suggestCategories'=> 'this:wp_suggestCategories','wp.uploadFile'=> 'this:mw_newMediaObject',// Alias'wp.getCommentCount'=> 'this:wp_getCommentCount','wp.getPostStatusList'=> 'this:wp_getPostStatusList','wp.getPageStatusList'=> 'this:wp_getPageStatusList','wp.getPageTemplates'=> 'this:wp_getPageTemplates','wp.getOptions'=> 'this:wp_getOptions','wp.setOptions'=> 'this:wp_setOptions','wp.getComment'=> 'this:wp_getComment','wp.getComments'=> 'this:wp_getComments','wp.deleteComment'=> 'this:wp_deleteComment','wp.editComment'=> 'this:wp_editComment','wp.newComment'=> 'this:wp_newComment','wp.getCommentStatusList' => 'this:wp_getCommentStatusList','wp.getMediaItem'=> 'this:wp_getMediaItem','wp.getMediaLibrary'=> 'this:wp_getMediaLibrary','wp.getPostFormats'     => 'this:wp_getPostFormats','wp.getPostType'=> 'this:wp_getPostType','wp.getPostTypes'=> 'this:wp_getPostTypes',// Blogger API'blogger.getUsersBlogs' => 'this:blogger_getUsersBlogs','blogger.getUserInfo' => 'this:blogger_getUserInfo','blogger.getPost' => 'this:blogger_getPost','blogger.getRecentPosts' => 'this:blogger_getRecentPosts','blogger.getTemplate' => 'this:blogger_getTemplate','blogger.setTemplate' => 'this:blogger_setTemplate','blogger.newPost' => 'this:blogger_newPost','blogger.editPost' => 'this:blogger_editPost','blogger.deletePost' => 'this:blogger_deletePost',// MetaWeblog API (with MT extensions to structs)'metaWeblog.newPost' => 'this:mw_newPost','metaWeblog.editPost' => 'this:mw_editPost','metaWeblog.getPost' => 'this:mw_getPost','metaWeblog.getRecentPosts' => 'this:mw_getRecentPosts','metaWeblog.getCategories' => 'this:mw_getCategories','metaWeblog.newMediaObject' => 'this:mw_newMediaObject',// MetaWeblog API aliases for Blogger API// see http://www.xmlrpc.com/stories/storyReader$2460'metaWeblog.deletePost' => 'this:blogger_deletePost','metaWeblog.getTemplate' => 'this:blogger_getTemplate','metaWeblog.setTemplate' => 'this:blogger_setTemplate','metaWeblog.getUsersBlogs' => 'this:blogger_getUsersBlogs',// MovableType API'mt.getCategoryList' => 'this:mt_getCategoryList','mt.getRecentPostTitles' => 'this:mt_getRecentPostTitles','mt.getPostCategories' => 'this:mt_getPostCategories','mt.setPostCategories' => 'this:mt_setPostCategories','mt.supportedMethods' => 'this:mt_supportedMethods','mt.supportedTextFilters' => 'this:mt_supportedTextFilters','mt.getTrackbackPings' => 'this:mt_getTrackbackPings','mt.publishPost' => 'this:mt_publishPost',// PingBack'pingback.ping' => 'this:pingback_ping','pingback.extensions.getPingbacks' => 'this:pingback_extensions_getPingbacks','demo.sayHello' => 'this:sayHello','demo.addTwoNumbers' => 'this:addTwoNumbers' 根据方法名字，很容易知道是什么意思。要知道某一个方法需要发送什么参数，直接找到该方法，方法的注释可以看出需要什么参数，比如发送文章的newpost方法，根据注释知道需要如下参数：/** * Create a new post for any registered post type. * * @since 3.4.0 * * @param array $args Method parameters. Contains: *  - int     $blog_id *  - string  $username *  - string  $password *  - array   $content_struct *      $content_struct can contain: *      - post_type (default: 'post') *      - post_status (default: 'draft') *      - post_title *      - post_author *      - post_exerpt *      - post_content *      - post_date_gmt | post_date *      - post_format *      - post_password *      - comment_status - can be 'open' | 'closed' *      - ping_status - can be 'open' | 'closed' *      - sticky *      - post_thumbnail - ID of a media item to use as the post thumbnail/featured image *      - custom_fields - array, with each element containing 'key' and 'value' *      - terms - array, with taxonomy names as keys and arrays of term IDs as values *      - terms_names - array, with taxonomy names as keys and arrays of term names as values *      - enclosure *      - any other fields supported by wp_insert_post() * @return string post_id */ 至此PHP远程操作wordpress的基本流程已经非常清晰，本文使用的是CI的xmlrpc类，网友可以自己网上随便找个开源类代替，他们的接口肯定大同小异。关键是弄懂了服务端提供了什么服务，直接调用就好了。","['php', '远程', '操纵', 'wordpress', '方法', '流程', '剖析', '一直', '一个', 'wordpress', '群发', '文章', '应用', '这样', '自动', '采集', '文章', '然后', '写个', '脚本', '自动', '发送', '文章', '哈哈', '虽然', 'python', '这种', '事情', '貌似', '更加', '擅长', '但是', 'web', '界面', '访问', '应用', 'python', '虚拟主机', '现在', '还好', '至少', 'php', '真的', '容易', '于是', '老本行', 'php', '搞定', 'php', '已经', '长时间', '原来', '纯手工', '编写', '后来', '网上', '类库', '自己', '整合', '如今', '直接', '使用', '框架', '再也', '愿意', '从头开始', '程序', '现成', '框架', '大量', '优秀', '代码', '拿来', '用能', '实现目标', '何乐而不为', '之前', 'zend', 'thinkphp', 'codeigniter', '两者', '其实', '不错', '但是', '现在', '还是', '偏爱', 'codeigniter', '因为', '强大', '在线', '文档', '使用', 'ci', 'codeigniter', 'xml', 'rpc', 'xml', 'rpc', '服务器', '以下', '代码', '实现', '服务器', 'wordpress', '站点', '标签', '信息', '获取', '下来', '打印', 'public', 'function', 'index', '加载', 'ci', 'xmlrpc', '类库', 'this', 'load', 'library', 'xmlrpc', '设定', '远程', 'xmlrpc', 'php', '文件', '地址', 'this', 'xmlrpc', 'server', 'http', 'jobrule', 'sinaapp', 'com', 'xmlrpc', 'php', '设定', '需要', '操作', '方法', '字符串', '可以', 'wordpress', '服务器', 'wp', 'includes', 'class', 'wp', 'xmlrpc', 'server', 'php', '里面', '找到', 'this', 'xmlrpc', 'method', 'wp', 'gettags', '设定', '请求', '参数', '可以', '直接', 'class', 'wp', 'xmlrpc', 'server', 'php', '源代码', '其中', 'id', '第一个', '第二个', '用户名', '密码', 'request', 'array', 'admin', '123456789', '参数', '设定', '请求', '里面', '这时候', '没有', '发送', '请求', 'this', 'xmlrpc', 'request', 'request', '发送', '请求', 'if', 'this', 'xmlrpc', 'send', 'request', 'echo', 'this', 'xmlrpc', 'display', 'error', '打印', '结果', '看一看', 'echo', 'pre', 'print', 'this', 'xmlrpc', 'display', 'response', 'echo', 'pre', 'this', 'load', 'view', 'welcome', 'message', 'ci', '官方', '文档', '列出', 'xmlrpc', 'api', 'this', 'xmlrpc', 'server', '设定', '发送', '请求', '服务器', 'url', '端口号', 'this', 'xmlrpc', 'timeout', '设定', '一个', '发送', '请求', '响应', '时间', 'this', 'xmlrpc', 'method', '设定', '请求', '服务', '方法', '字符串', '重要', 'this', 'xmlrpc', 'request', '绑定', '发送', '请求', '数据', '参数', '发送', '请求', 'this', 'xmlrpc', 'send', 'request', '发送', '请求', 'this', 'xmlrpc', 'display', 'error', '打印', '错误信息', 'this', 'xmlrpc', 'display', 'response', '打印', '返回', '响应', '信息', 'this', 'xmlrpc', 'set', 'debug', 'true', '开发', '过程', '打印', '一些', '调试信息', '关键在于', 'this', 'xmlrpc', 'method', '接口', '设定', '服务器发送', '什么样', '请求', '下载', '一个', 'wordpress', '源码', '打开', 'wp', 'includes', 'class', 'wp', 'xmlrpc', 'server', 'php', '文件', '可以', '看到', '所有', '我们', '能够', '调用', '服务', 'wordpress', 'api', 'wp', 'getusersblogs', 'this', 'wp', 'getusersblogs', 'wp', 'newpost', 'this', 'wp', 'newpost', 'wp', 'editpost', 'this', 'wp', 'editpost', 'wp', 'deletepost', 'this', 'wp', 'deletepost', 'wp', 'getpost', 'this', 'wp', 'getpost', 'wp', 'getposts', 'this', 'wp', 'getposts', 'wp', 'newterm', 'this', 'wp', 'newterm', 'wp', 'editterm', 'this', 'wp', 'editterm', 'wp', 'deleteterm', 'this', 'wp', 'deleteterm', 'wp', 'getterm', 'this', 'wp', 'getterm', 'wp', 'getterms', 'this', 'wp', 'getterms', 'wp', 'gettaxonomy', 'this', 'wp', 'gettaxonomy', 'wp', 'gettaxonomies', 'this', 'wp', 'gettaxonomies', 'wp', 'getpage', 'this', 'wp', 'getpage', 'wp', 'getpages', 'this', 'wp', 'getpages', 'wp', 'newpage', 'this', 'wp', 'newpage', 'wp', 'deletepage', 'this', 'wp', 'deletepage', 'wp', 'editpage', 'this', 'wp', 'editpage', 'wp', 'getpagelist', 'this', 'wp', 'getpagelist', 'wp', 'getauthors', 'this', 'wp', 'getauthors', 'wp', 'getcategories', 'this', 'mw', 'getcategories', 'alias', 'wp', 'gettags', 'this', 'wp', 'gettags', 'wp', 'newcategory', 'this', 'wp', 'newcategory', 'wp', 'deletecategory', 'this', 'wp', 'deletecategory', 'wp', 'suggestcategories', 'this', 'wp', 'suggestcategories', 'wp', 'uploadfile', 'this', 'mw', 'newmediaobject', 'alias', 'wp', 'getcommentcount', 'this', 'wp', 'getcommentcount', 'wp', 'getpoststatuslist', 'this', 'wp', 'getpoststatuslist', 'wp', 'getpagestatuslist', 'this', 'wp', 'getpagestatuslist', 'wp', 'getpagetemplates', 'this', 'wp', 'getpagetemplates', 'wp', 'getoptions', 'this', 'wp', 'getoptions', 'wp', 'setoptions', 'this', 'wp', 'setoptions', 'wp', 'getcomment', 'this', 'wp', 'getcomment', 'wp', 'getcomments', 'this', 'wp', 'getcomments', 'wp', 'deletecomment', 'this', 'wp', 'deletecomment', 'wp', 'editcomment', 'this', 'wp', 'editcomment', 'wp', 'newcomment', 'this', 'wp', 'newcomment', 'wp', 'getcommentstatuslist', 'this', 'wp', 'getcommentstatuslist', 'wp', 'getmediaitem', 'this', 'wp', 'getmediaitem', 'wp', 'getmedialibrary', 'this', 'wp', 'getmedialibrary', 'wp', 'getpostformats', 'this', 'wp', 'getpostformats', 'wp', 'getposttype', 'this', 'wp', 'getposttype', 'wp', 'getposttypes', 'this', 'wp', 'getposttypes', 'blogger', 'api', 'blogger', 'getusersblogs', 'this', 'blogger', 'getusersblogs', 'blogger', 'getuserinfo', 'this', 'blogger', 'getuserinfo', 'blogger', 'getpost', 'this', 'blogger', 'getpost', 'blogger', 'getrecentposts', 'this', 'blogger', 'getrecentposts', 'blogger', 'gettemplate', 'this', 'blogger', 'gettemplate', 'blogger', 'settemplate', 'this', 'blogger', 'settemplate', 'blogger', 'newpost', 'this', 'blogger', 'newpost', 'blogger', 'editpost', 'this', 'blogger', 'editpost', 'blogger', 'deletepost', 'this', 'blogger', 'deletepost', 'metaweblog', 'api', 'with', 'mt', 'extensions', 'to', 'structs', 'metaweblog', 'newpost', 'this', 'mw', 'newpost', 'metaweblog', 'editpost', 'this', 'mw', 'editpost', 'metaweblog', 'getpost', 'this', 'mw', 'getpost', 'metaweblog', 'getrecentposts', 'this', 'mw', 'getrecentposts', 'metaweblog', 'getcategories', 'this', 'mw', 'getcategories', 'metaweblog', 'newmediaobject', 'this', 'mw', 'newmediaobject', 'metaweblog', 'api', 'aliases', 'for', 'blogger', 'api', 'see', 'http', 'www', 'xmlrpc', 'com', 'stories', 'storyreader', '2460', 'metaweblog', 'deletepost', 'this', 'blogger', 'deletepost', 'metaweblog', 'gettemplate', 'this', 'blogger', 'gettemplate', 'metaweblog', 'settemplate', 'this', 'blogger', 'settemplate', 'metaweblog', 'getusersblogs', 'this', 'blogger', 'getusersblogs', 'movabletype', 'api', 'mt', 'getcategorylist', 'this', 'mt', 'getcategorylist', 'mt', 'getrecentposttitles', 'this', 'mt', 'getrecentposttitles', 'mt', 'getpostcategories', 'this', 'mt', 'getpostcategories', 'mt', 'setpostcategories', 'this', 'mt', 'setpostcategories', 'mt', 'supportedmethods', 'this', 'mt', 'supportedmethods', 'mt', 'supportedtextfilters', 'this', 'mt', 'supportedtextfilters', 'mt', 'gettrackbackpings', 'this', 'mt', 'gettrackbackpings', 'mt', 'publishpost', 'this', 'mt', 'publishpost', 'pingback', 'pingback', 'ping', 'this', 'pingback', 'ping', 'pingback', 'extensions', 'getpingbacks', 'this', 'pingback', 'extensions', 'getpingbacks', 'demo', 'sayhello', 'this', 'sayhello', 'demo', 'addtwonumbers', 'this', 'addtwonumbers', '根据', '方法', '名字', '容易', '知道', '什么', '意思', '知道', '一个', '方法', '需要', '发送', '什么', '参数', '直接', '找到', '方法', '方法', '注释', '可以', '看出', '需要', '什么', '参数', '比如', '发送', '文章', 'newpost', '方法', '根据', '注释', '知道', '需要', '如下', '参数', 'create', 'new', 'post', 'for', 'any', 'registered', 'post', 'type', 'since', '3.4', 'param', 'array', 'args', 'method', 'parameters', 'contains', 'int', 'blog', 'id', 'string', 'username', 'string', 'password', 'array', 'content', 'struct', 'content', 'struct', 'can', 'contain', 'post', 'type', 'default', 'post', 'post', 'status', 'default', 'draft', 'post', 'title', 'post', 'author', 'post', 'exerpt', 'post', 'content', 'post', 'date', 'gmt', 'post', 'date', 'post', 'format', 'post', 'password', 'comment', 'status', 'can', 'be', 'open', 'closed', 'ping', 'status', 'can', 'be', 'open', 'closed', 'sticky', 'post', 'thumbnail', 'id', 'of', 'media', 'item', 'to', 'use', 'as', 'the', 'post', 'thumbnail', 'featured', 'image', 'custom', 'fields', 'array', 'with', 'each', 'element', 'containing', 'key', 'and', 'value', 'terms', 'array', 'with', 'taxonomy', 'names', 'as', 'keys', 'and', 'arrays', 'of', 'term', 'ids', 'as', 'values', 'terms', 'names', 'array', 'with', 'taxonomy', 'names', 'as', 'keys', 'and', 'arrays', 'of', 'term', 'names', 'as', 'values', 'enclosure', 'any', 'other', 'fields', 'supported', 'by', 'wp', 'insert', 'post', 'return', 'string', 'post', 'id', '至此', 'php', '远程', '操作', 'wordpress', '基本', '流程', '已经', '非常', '清晰', '本文', '使用', 'ci', 'xmlrpc', '网友', '可以', '自己', '网上', '随便', '找个', '开源', '代替', '他们', '接口', '肯定', '大同小异', '关键', '弄懂', '服务端', '提供', '什么', '服务', '直接', '调用']","[[-0.33342386 -0.07034333  0.46171579  0.10532955  0.42567856 -0.38905652
   0.01466989  0.39709094 -0.17160918 -0.19710729 -0.01637998 -0.51521799
  -0.02490627  0.36707122  0.26831727 -0.03830426 -0.15157822 -0.18177742
  -0.11970146 -0.65158057 -0.01665218  0.27020766 -0.08583418 -0.22059149
  -0.06819888 -0.44604561 -0.386831   -0.08139375 -0.34293215 -0.23880941
   0.06683316  0.00224134 -0.08707285 -0.04404379 -0.22910294  0.38051696
  -0.2841709  -0.34272018 -0.01769738 -0.77411401 -0.12770548 -0.70998541
  -0.12130478 -0.03865404 -0.08923977 -0.21135576 -0.40923364  0.28347076
  -0.34047866  0.63721818  0.11922656 -0.24160899 -0.05752429 -0.29134802
  -0.03388237  0.29215686  0.02737011  0.0248379   0.09393802 -0.04825511
   0.03050592  0.17140418  0.02973338  0.01726604 -0.34632413  0.05296954
   0.16846959  0.03565788 -0.24224752  0.55065009  0.08356437 -0.16666672
   0.39776476 -0.35664614  0.60932784  0.28235582  0.23571073 -0.11104506
  -0.29614173 -0.32568991  0.16246806  0.24767779 -0.21256876  0.40910854
  -0.45669881  0.31329879 -0.31755811  0.47653178  0.6012379   0.20678317
   0.23775391  0.01000835  0.48695686  0.22844531  0.19953076  0.4462788
   0.06768709 -0.38237294  0.08609103 -0.11169185]]"
855,使用Google搭建自己的SVN或Git或Mercurial代码服务器之完美教程,随着自己写的代码越来越多，但是每次写都会发现之前写过类似的现在却发现找不到了；或者在一个地方写了代码，得拷到另一个地方继续写；又或者自己写了很大的程序，每次备份的方法都是复制整个项目，粘贴到另一个地方去；又或者多人合作，总是找不到一个很好的代码合作方法。你的答案，是代码托管，比如SVN，比如Git，比如Mercurial，它们把你的代码放到服务器上，关键记录了你每次的修改代码的记录，这样你可以将你的代码还原到以前的版本，非常轻松。个人当然要找免费的代码托管服务器，我用的是GOOGLE，我很喜欢GOOGLE，我推荐大家也用它。以下是使用Google搭建SVN或Git或Mercurial的详细教程：1、注册GOOGLE账户（如果有了，跳到第2步）注册地址：https://accounts.google.com/SignUp2、登陆GOOGLE登陆地址：https://accounts.google.com3、进入GOOGLE的代码界面输入地址：https://code.google.com/intl/zh-CN/，进入到代码管理的主界面：4、点击Create a new project，我们创建一个新项目输入验证码，然后点Create project按钮提交5、使用客户端访问自己的代码托管现在已经建立了一个SVN服务器（其他的类似），我们可以使用SVN、GIT、Mercurial各自的客户端进行操作，下面的步骤，我一TortoiseSVN为例进行介绍首先，下载TortoiseSVN并安装，TortoiseSVN下载地址：http://tortoisesvn.net/downloads.html6、找到自己的SVN服务器的地址7、在客户端使用该地址，checkout，然后上传一个文件给服务器点OK，会把服务器上的内容和本地同步，文件夹上有个绿色的对号，说明同步成功：然后，我在里面新建一个文件，test.py，将文件Add到SVN里（还没有提交）然后，点击提交，就会把新增的文件，提交到服务器，这时候需要输入用户名密码，其中用户名是你注册的google的邮箱，密码在这里：打开后复制密码，填写后，点OK，就会提交成功了：至此教程结束，有人会说遇到了个问题，就是连不到服务器，嘿嘿，这个问题你需要自己搜索一些方法了。,"['使用', 'google', '搭建', '自己', 'svn', 'git', 'mercurial', '代码', '服务器', '完美', '教程', '随着', '自己', '代码', '越来越', '但是', '每次', '发现', '之前', '写过', '类似', '现在', '发现', '不到', '或者', '一个', '地方', '代码', '拷到', '一个', '地方', '继续', '或者', '自己', '很大', '程序', '每次', '备份', '方法', '复制', '整个', '项目', '粘贴', '一个', '地方', '或者', '多人', '合作', '总是', '不到', '一个', '代码', '合作', '方法', '答案', '代码', '托管', '比如', 'svn', '比如', 'git', '比如', 'mercurial', '它们', '代码', '放到', '服务器', '关键', '记录', '每次', '修改', '代码', '记录', '这样', '可以', '代码', '还原', '以前', '版本', '非常', '轻松', '个人', '当然', '免费', '代码', '托管', '服务器', '我用', 'google', '喜欢', 'google', '推荐', '大家', '以下', '使用', 'google', '搭建', 'svn', 'git', 'mercurial', '详细', '教程', '注册', 'google', '账户', '如果', '跳到', '注册', '地址', 'https', 'accounts', 'google', 'com', 'signup2', '登陆', 'google', '登陆', '地址', 'https', 'accounts', 'google', 'com3', '进入', 'google', '代码', '界面', '输入', '地址', 'https', 'code', 'google', 'com', 'intl', 'zh', 'cn', '进入', '代码', '管理', '界面', '点击', 'create', 'new', 'project', '我们', '创建', '一个', '项目', '输入', '验证码', '然后', 'create', 'project', '按钮', '提交', '使用', '客户端', '访问', '自己', '代码', '托管', '现在', '已经', '建立', '一个', 'svn', '服务器', '其他', '类似', '我们', '可以', '使用', 'svn', 'git', 'mercurial', '各自', '客户端', '进行', '操作', '下面', '步骤', 'tortoisesvn', '为例', '进行', '介绍', '首先', '下载', 'tortoisesvn', '安装', 'tortoisesvn', '下载', '地址', 'http', 'tortoisesvn', 'net', 'downloads', 'html6', '找到', '自己', 'svn', '服务器', '地址', '客户端', '使用', '地址', 'checkout', '然后', '上传', '一个', '文件', '服务器', 'ok', '服务器', '内容', '本地', '同步', '文件夹', '绿色', '说明', '同步', '成功', '然后', '里面', '新建', '一个', '文件', 'test', 'py', '文件', 'add', 'svn', '没有', '提交', '然后', '点击', '提交', '新增', '文件', '提交', '服务器', '这时候', '需要', '输入', '用户名', '密码', '其中', '用户名', '注册', 'google', '邮箱', '密码', '这里', '打开', '复制', '密码', '填写', 'ok', '提交', '成功', '至此', '教程', '结束', '有人', '遇到', '问题', '就是', '不到', '服务器', '嘿嘿', '这个', '问题', '需要', '自己', '搜索', '一些', '方法']","[[-0.24812221 -0.14485752  0.21156957  0.21962839  0.24526171 -0.34537759
  -0.17974866  0.48762146 -0.00165181 -0.00901504 -0.08353223 -0.33218733
  -0.17266976  0.58789747  0.11855138 -0.11833221 -0.15137661  0.00728894
  -0.07080841 -0.39415244  0.04451687  0.24210431 -0.0102352  -0.08693988
   0.09911435 -0.5207528  -0.28685664  0.10230923 -0.18515504 -0.05543034
   0.24477688  0.07828221 -0.01390973 -0.13680083 -0.12046097  0.34331369
  -0.12013565 -0.20180617  0.10522084 -0.71284709 -0.13908109 -0.54151116
  -0.02003914 -0.07958014 -0.16260517 -0.15292892 -0.29719519  0.48139274
  -0.10125118  0.33970011  0.17413255 -0.27635156 -0.05526931 -0.25380162
   0.06902209  0.39818496  0.24802297 -0.0590158   0.10701954 -0.07733059
   0.06194859  0.27726742  0.02456595  0.08497796 -0.36383019 -0.01159009
   0.00401458  0.01632308 -0.20287209  0.4270449   0.12466251 -0.23770073
   0.40696078 -0.31901766  0.5669431   0.17358699  0.25672457 -0.15701999
  -0.22319553 -0.24263692 -0.11993128 -0.0135096  -0.06597792  0.33309562
  -0.39032397  0.18273761 -0.28097263  0.4271824   0.47223209  0.13320086
   0.28374871  0.12456053  0.32876604  0.17519485  0.18363742  0.40968869
   0.07815922 -0.25570253  0.05514371 -0.07942909]]"
874,2012年度读写Excel文件的最佳PHP类库收集,PHPExcel  PHPExcel是一个使用纯PHP编写的类库，它提供了一系列的类用于读写不同的表格式的文件，比如Excel（BIFF格式).xls文件，Excel 2007 (OfficeOpenXML格式).xlsx文件，CSV文件，Libre/OpenOffice Calc .ods文件，Gnumeric文件，PDF文件，HTML文件等等。本项目使用微软的OpenXML标准和PHP进行构建。 SimpleExcel PHP  该PHP类库是一个简单但是非常强大的，支持对微软的Excel、XML、CSV格式文件进行写和解析的类库。 它支持按行读取单元行，或者仅仅一个单元格的内容（和获取一列一样）。 PHP-Excel 用于生成Excel文件的一个简洁的类库。 它需要一个二维数组作为参数，并且使用一个很简单的函数来转换数据。 PHP Export Data 一个简单的类库，用于类表格的数据导出到类似Excel的文件，比如XML、CSV和TSV。它支持按流的方式将内容输出到一个文件，或者直接输出到浏览器。因此它很适合到处大型的数据集合（这样你就不会出现内存不够的情况了）。 Excel Writer (XML) for PHP 是一系列的PHP类库，允许动态的生成Excel文件。它几乎可以称作微软XML体系的一个完整实现。 PHP Excel Reader 该PHP类库体现了在SourceForge上的一个关于PHP对于Excel读取的项目的良好进展。 它直接用二进制的方式读取XLS文件，并且能够从任何单元格返回值和相关联的格式。   本文来自疯狂的蚂蚁www.crazyant.net,"['2012', '年度', '读写', 'excel', '文件', '最佳', 'php', '类库', '收集', 'phpexcel', 'phpexcel', '一个', '使用', 'php', '编写', '类库', '提供', '一系列', '用于', '读写', '不同', '格式', '文件', '比如', 'excel', 'biff', '格式', 'xls', '文件', 'excel', '2007', 'officeopenxml', '格式', 'xlsx', '文件', 'csv', '文件', 'libre', 'openoffice', 'calc', 'ods', '文件', 'gnumeric', '文件', 'pdf', '文件', 'html', '文件', '等等', '项目', '使用', '微软', 'openxml', '标准', 'php', '进行', '构建', 'simpleexcel', 'php', 'php', '类库', '一个', '简单', '但是', '非常', '强大', '支持', '微软', 'excel', 'xml', 'csv', '格式文件', '进行', '解析', '类库', '支持', '按行', '读取', '单元', '或者', '仅仅', '一个', '单元格', '内容', '获取', '一列', '一样', 'php', 'excel', '用于', '生成', 'excel', '文件', '一个', '简洁', '类库', '需要', '一个二维', '数组', '作为', '参数', '并且', '使用', '一个', '简单', '函数', '转换', '数据', 'php', 'export', 'data', '一个', '简单', '类库', '用于', '表格', '数据', '导出', '类似', 'excel', '文件', '比如', 'xml', 'csv', 'tsv', '支持', '按流', '方式', '内容', '输出', '一个', '文件', '或者', '直接', '输出', '浏览器', '因此', '适合', '到处', '大型', '数据', '集合', '这样', '不会', '出现', '内存', '不够', '情况', 'excel', 'writer', 'xml', 'for', 'php', '一系列', 'php', '类库', '允许', '动态', '生成', 'excel', '文件', '几乎', '可以', '称作', '微软', 'xml', '体系', '一个', '完整', '实现', 'php', 'excel', 'reader', 'php', '类库', '体现', 'sourceforge', '一个', '关于', 'php', '对于', 'excel', '读取', '项目', '良好', '进展', '直接', '二进制', '方式', '读取', 'xls', '文件', '并且', '能够', '任何', '单元格', '返回值', '相关联', '格式', '本文', '来自', '疯狂', '蚂蚁', 'www', 'crazyant', 'net']","[[-0.26737781 -0.16590213  0.21325746  0.21157483  0.2821588  -0.35686828
  -0.20449803  0.51807458  0.00887979 -0.0131281  -0.07937616 -0.33589021
  -0.2022437   0.6290843   0.13229487 -0.11489091 -0.17189664  0.00649018
  -0.09592652 -0.4454217   0.04464393  0.25053208  0.00136708 -0.07964998
   0.12609141 -0.57856014 -0.30267503  0.1111519  -0.2109375  -0.06180625
   0.26367171  0.0550471  -0.02071609 -0.15590918 -0.1215874   0.35884279
  -0.13423073 -0.21286718  0.12089478 -0.77691442 -0.16751349 -0.59051186
  -0.02358155 -0.08593504 -0.17737398 -0.15312009 -0.28678192  0.52486791
  -0.13276411  0.38002135  0.21342434 -0.29352954 -0.0853643  -0.25113102
   0.08095758  0.4202148   0.27508368 -0.06906262  0.11563052 -0.10150063
   0.05702747  0.31003401  0.03268072  0.08887211 -0.39461719 -0.01586
   0.01709812  0.00507758 -0.22666034  0.45629024  0.15961996 -0.25772361
   0.42807026 -0.33367754  0.60599295  0.17008973  0.24943819 -0.15288972
  -0.26018127 -0.24598971 -0.11070187 -0.0223579  -0.06950623  0.34535011
  -0.4112077   0.19337254 -0.30341211  0.44302559  0.49539799  0.13300487
   0.32075251  0.13376237  0.35722304  0.20156196  0.19568559  0.42311654
   0.08264445 -0.28584358  0.01053581 -0.09669033]]"
886,PHP读写Word文件的最佳类库收集,PHPWordPHPWord是一个用PHP编写的、用于创建Word文档的类库。PHPWord基于两个神奇的类库PHPExcel / PHPPowerPoint创建的。它的大部分特性：插入并格式化文档片段插入并格式文本片段插入文本片段插入页面片段插入并格式化图像和二进制的OLE对象插入并格式化水印插入页眉和页脚插入并格式化表格插入动态的标题和表格形式的内容插入并格式化列表插入并该格式化高亮的超链接非常简洁的模板系统下载地址：http://phpword.codeplex.com/releases/view/49543PHPDocxPHPDocx是一个用于生成完全动态的、完全兼容的Word文档的PHP类库。你可能需要直接从任何数据集合或者表格文件来生成报表。这些报表也许会包括图标、图片、表格、开头、结束等等数据。PHPDocx能够使用一些预定义的模板文件来生成Word文档，这大大简化了工作量。使用很少的一些代码，你能够将PHPDocx集成到你的WEB站点或网络应用，这样能够为你的用户或雇员提供一个很有价值的服务。 本文来自疯狂的蚂蚁的博客：www.crazyant.net,"['php', '读写', 'word', '文件', '最佳', '类库', '收集', 'phpwordphpword', '一个', 'php', '编写', '用于', '创建', 'word', '文档', '类库', 'phpword', '基于', '两个', '神奇', '类库', 'phpexcel', 'phppowerpoint', '创建', '大部分', '特性', '插入', '格式化', '文档', '片段', '插入', '格式', '文本', '片段', '插入', '文本', '片段', '插入', '页面', '片段', '插入', '格式化', '图像', '二进制', 'ole', '对象', '插入', '格式化', '水印', '插入', '页眉', '页脚', '插入', '格式化', '表格', '插入', '动态', '标题', '表格', '形式', '内容', '插入', '格式化', '列表', '插入', '格式化', '高亮', '超链接', '非常', '简洁', '模板', '系统', '下载', '地址', 'http', 'phpword', 'codeplex', 'com', 'releases', 'view', '49543phpdocxphpdocx', '一个', '用于', '生成', '完全', '动态', '完全', '兼容', 'word', '文档', 'php', '类库', '可能', '需要', '直接', '任何', '数据', '集合', '或者', '表格', '文件', '生成', '报表', '这些', '报表', '也许', '包括', '图标', '图片', '表格', '开头', '结束', '等等', '数据', 'phpdocx', '能够', '使用', '一些', '预定', '模板', '文件', '生成', 'word', '文档', '大大简化', '工作量', '使用', '很少', '一些', '代码', '能够', 'phpdocx', '集成', 'web', '站点', '网络应用', '这样', '能够', '用户', '雇员', '提供', '一个', '价值', '服务', '本文', '来自', '疯狂', '蚂蚁', '博客', 'www', 'crazyant', 'net']","[[-0.25645809 -0.13666512  0.23503116  0.21764268  0.24468095 -0.36914585
  -0.16077254  0.49522902 -0.01426778 -0.04076559 -0.07647933 -0.35867569
  -0.1599902   0.59219801  0.12454546 -0.12514391 -0.14949122  0.00500008
  -0.0650269  -0.42537431  0.02962565  0.25370769 -0.03263281 -0.11867516
   0.08331784 -0.52621202 -0.3077076   0.08981045 -0.19967902 -0.06498228
   0.22768216  0.07064388 -0.00279583 -0.13142924 -0.14356078  0.35073272
  -0.13857167 -0.22433479  0.09837925 -0.72394656 -0.13721001 -0.56479375
  -0.03428058 -0.07298753 -0.15685421 -0.18308467 -0.30470702  0.47031319
  -0.10243712  0.37557602  0.15904973 -0.28908872 -0.05771364 -0.24905262
   0.04399688  0.41136725  0.23253791 -0.07238767  0.11537681 -0.10199972
   0.07876068  0.27298808  0.0189484   0.08016273 -0.3733429   0.00737497
   0.01003905  0.01350807 -0.2211548   0.44001733  0.11434532 -0.22466384
   0.41799151 -0.33021718  0.58091659  0.21215502  0.24717944 -0.17590178
  -0.23286406 -0.22461461 -0.10320424  0.00474573 -0.0843817   0.3642264
  -0.39182027  0.18671646 -0.29004191  0.45820055  0.50102251  0.14878236
   0.26905756  0.12708827  0.3385809   0.17618558  0.19248336  0.42240308
   0.08755245 -0.27009646  0.06097928 -0.09068129]]"
897,国外10个非常有趣的PHP博客,"David Walsh blogDavid Walsh是一个非常有经验的PHP开发者，他参与了很多大型的项目。在他的博客中你能发现几乎每天的对PHP开发的建议。Roshan's blog在该Roshan Bhattarai博客中你能够发现非常多的关于PHP开发的很有趣的文章。Woork - Antonio Lupetti的博客.Antonio Lupetti是一个很专业的博客写作人，他写的文章大部分都是关于PHP编程的。Tobias Schlitt - 充满了对PHP的热爱 是一个Tobias Schlitt写的专注于PHP的博客。分类包括PHP, PEAR, Geek等等。Paul M. Johns BlogPaul是一个国际上承认的PHP专家，现在是OmniTI公司的一个高级程序员。在博客中，他写了很多关于他的项目的文章，但也涉及到了管理、商业、政治和文化的一些内容。Antti H. - 一个通向软件技术的旅程Antti Holvikari所作的一个非常有趣的关于PHP开发的博客。There and Back AgainJoshua Eichorn所作的专注于AJAX、PHP和开源的博客。Chris Shiflett - 关注PHP和WEB应用的安全 Chris Shiflett所作的专注于PHP的博客。他也是《Essential PHP Security》一书的作者，该书被O'Reilly出版社出版。Guru PHP - PHP权威观点Maartin Brampton所作的一个有趣的PHP博客，他本人是一个PHP开发的专家。Stuart Herbert On PHPStuart Hermert通过博客分享他关于部署PHP应用和维护PHP服务器的经验。","['国外', '10', '非常', '有趣', 'php', '博客', 'david', 'walsh', 'blogdavid', 'walsh', '一个', '非常', '经验', 'php', '开发者', '参与', '很多', '大型', '项目', '博客', '发现', '几乎', '每天', 'php', '开发', '建议', 'roshan', 'blog', 'roshan', 'bhattarai', '博客', '能够', '发现', '非常', '关于', 'php', '开发', '有趣', '文章', 'woork', 'antonio', 'lupetti', '博客', 'antonio', 'lupetti', '一个', '专业', '博客', '写作', '文章', '大部分', '关于', 'php', '编程', 'tobias', 'schlitt', '充满', 'php', '热爱', '一个', 'tobias', 'schlitt', '专注', 'php', '博客', '分类', '包括', 'php', 'pear', 'geek', '等等', 'paul', 'johns', 'blogpaul', '一个', '国际', '承认', 'php', '专家', '现在', 'omniti', '公司', '一个', '高级', '程序员', '博客', '很多', '关于', '项目', '文章', '涉及', '管理', '商业', '政治', '文化', '一些', '内容', 'antti', '一个', '通向', '软件技术', '旅程', 'antti', 'holvikari', '所作', '一个', '非常', '有趣', '关于', 'php', '开发', '博客', 'there', 'and', 'back', 'againjoshua', 'eichorn', '所作', '专注', 'ajax', 'php', '开源', '博客', 'chris', 'shiflett', '关注', 'php', 'web', '应用', '安全', 'chris', 'shiflett', '所作', '专注', 'php', '博客', 'essential', 'php', 'security', '一书', '作者', '该书', 'reilly', '出版社', '出版', 'guru', 'php', 'php', '权威', '观点', 'maartin', 'brampton', '所作', '一个', '有趣', 'php', '博客', '本人', '一个', 'php', '开发', '专家', 'stuart', 'herbert', 'on', 'phpstuart', 'hermert', '通过', '博客', '分享', '关于', '部署', 'php', '应用', '维护', 'php', '服务器', '经验']","[[-0.2541182  -0.14356304  0.22119656  0.23589587  0.23968247 -0.35460811
  -0.1706077   0.48735251 -0.01334783 -0.02419048 -0.08232848 -0.33894084
  -0.16300517  0.58107509  0.11574343 -0.11398544 -0.14229481  0.0014704
  -0.0622724  -0.40764199  0.0302642   0.25735827 -0.02769524 -0.10704821
   0.09093322 -0.51254786 -0.3003379   0.09467168 -0.19032001 -0.0618075
   0.23701588  0.07252034 -0.00593252 -0.1268808  -0.13658323  0.3517659
  -0.13790354 -0.21070602  0.10045748 -0.71338779 -0.12876079 -0.53949443
  -0.02682224 -0.07180818 -0.15657772 -0.167883   -0.30404514  0.47181514
  -0.09877007  0.35877769  0.15794264 -0.27991001 -0.05766671 -0.24461023
   0.05935756  0.40083729  0.23085388 -0.06912229  0.11502543 -0.08802921
   0.07228398  0.26820126  0.02673198  0.08241893 -0.36782179 -0.00226153
   0.00429457  0.01293403 -0.20775262  0.43349158  0.11593027 -0.2260888
   0.40543152 -0.3261744   0.56556619  0.1917818   0.25805282 -0.16636831
  -0.22785658 -0.23872248 -0.10909024 -0.0078724  -0.07869353  0.35263459
  -0.38730436  0.18238295 -0.28561022  0.44021401  0.48059224  0.14458084
   0.26283374  0.12461213  0.33288559  0.18633319  0.18913374  0.40992343
   0.07477652 -0.25493894  0.06883217 -0.0821019 ]]"
912,PHP的验证码实现（w3schools推荐）,"本文使用PHP一些可用的特性实现了验证码功能。该教程非常的简单，使用可以改变的字体生成了验证码图片，正如我们所了解的，验证码是用于避免垃圾评论或者自动提交的。本验证码程序的资源：下载地址在线演示captcha_code_file.php代码：<?php session_start();//设置: 你可以在这里修改验证码图片的参数$image_width = 120;$image_height = 40;$characters_on_image = 6;$font = './monofont.ttf'; //以下字符将用于验证码中的字符 //为了避免混淆去掉了数字1和字母i$possible_letters = '23456789bcdfghjkmnpqrstvwxyz';$random_dots = 10;$random_lines = 30;$captcha_text_color=""0x142864"";$captcha_noice_color = ""0x142864""; $code = ''; $i = 0;while ($i < $characters_on_image) {     $code .= substr($possible_letters, mt_rand(0, strlen($possible_letters)-1), 1);    $i++;}$font_size = $image_height * 0.75; $image = @imagecreate($image_width, $image_height);/* 设置背景、文本和干扰的噪点 */ $background_color = imagecolorallocate($image, 255, 255, 255);$arr_text_color = hexrgb($captcha_text_color); $text_color = imagecolorallocate($image, $arr_text_color['red'], $arr_text_color['green'], $arr_text_color['blue']);$arr_noice_color = hexrgb($captcha_noice_color); $image_noise_color = imagecolorallocate($image, $arr_noice_color['red'], $arr_noice_color['green'], $arr_noice_color['blue']);/* 在背景上随机的生成干扰噪点 */ for( $i=0; $i<$random_dots; $i++ ) {    imagefilledellipse($image, mt_rand(0,$image_width),    mt_rand(0,$image_height), 2, 3, $image_noise_color);}/* 在背景图片上，随机生成线条 */ for( $i=0; $i<$random_lines; $i++ ) {    imageline($image, mt_rand(0,$image_width), mt_rand(0,$image_height),    mt_rand(0,$image_width), mt_rand(0,$image_height), $image_noise_color);}/* 生成一个文本框，然后在里面写生6个字符 */ $textbox = imagettfbbox($font_size, 0, $font, $code); $x = ($image_width - $textbox[4])/2;$y = ($image_height - $textbox[5])/2;imagettftext($image, $font_size, 0, $x, $y, $text_color, $font , $code);/* 将验证码图片在HTML页面上显示出来 */ header('Content-Type: image/jpeg');// 设定图片输出的类型imagejpeg($image);//显示图片imagedestroy($image);//销毁图片实例$_SESSION['6_letters_code'] = $code;function hexrgb ($hexstr) {    $int = hexdec($hexstr);    return array( ""red"" => 0xFF & ($int >> 0x10),                ""green"" => 0xFF & ($int >> 0x8),                ""blue"" => 0xFF & $int    );}?> 验证验证码正确或错误的方法验证码图片上的文字被存放到了SESSION 变量里面，验证的时候，我们需要将SESSION 里面的值和用户输入的值进行比较即可。$_SESSION[6_letters_code] - 存放着验证码的文字值$_POST[6_letters_code] - 这是用户输入的验证码的内容index.php代码包含了HTML, CSS, Javascript and PHP代码：<?php session_start(); if(isset($_REQUEST['Submit'])){     // 服务器端验证的代码    if(empty($_SESSION['6_letters_code'] ) ||        strcasecmp($_SESSION['6_letters_code'], $_POST['6_letters_code']) != 0)    {         $msg=""验证失败！"";    }else{        //验证码验证正确，这里放验证成功后的代码    }} ?><style type=""text/css"">.table {    font-family:Arial, Helvetica, sans-serif;    font-size:12px;    color:#333;    background-color:#E4E4E4;}.table td {    background-color:#F8F8F8;}</style><form action="""" method=""post"" name=""form1"" id=""form1"" >  <table width=""400"" border=""0"" align=""center"" cellpadding=""5"" cellspacing=""1"" class=""table"">    <?php if(isset($msg)){?>    <tr>      <td colspan=""2"" align=""center"" valign=""top""><?php echo $msg;?></td>    </tr>    <?php } ?>    <tr>      <td align=""right"" valign=""top""> 验证码:</td>      <td><img src=""captcha_code_file.php?rand=<?php echo rand();?>"" id='captchaimg'><br>        <label for='message'>请输入上面的验证码 :</label>        <br>        <input id=""6_letters_code"" name=""6_letters_code"" type=""text"">        <br>        无法读图片吗？点击 <a href='javascript: refreshCaptcha();'>here</a> 刷新        </p></td>    </tr>    <tr>      <td> </td>      <td><input name=""Submit"" type=""submit"" onclick=""return validate();"" value=""提交""></td>    </tr>  </table></form><script type='text/javascript'>function refreshCaptcha(){    var img = document.images['captchaimg'];    img.src = img.src.substring(0,img.src.lastIndexOf(""?""))+""?rand=""+Math.random()*1000;}</script> ","['php', '验证码', '实现', 'w3schools', '推荐', '本文', '使用', 'php', '一些', '可用', '特性', '实现', '验证码', '功能', '教程', '非常', '简单', '使用', '可以', '改变', '字体', '生成', '验证码', '图片', '正如', '我们', '了解', '验证码', '用于', '避免', '垃圾', '评论', '或者', '自动', '提交', '验证码', '程序', '资源', '下载', '地址', '在线', '演示', 'captcha', 'code', 'file', 'php', '代码', 'php', 'session', 'start', '设置', '可以', '这里', '修改', '验证码', '图片', '参数', 'image', 'width', '120', 'image', 'height', '40', 'characters', 'on', 'image', 'font', 'monofont', 'ttf', '以下', '字符', '用于', '验证码', '字符', '为了', '避免', '混淆', '去掉', '数字', '字母', 'possible', 'letters', '23456789bcdfghjkmnpqrstvwxyz', 'random', 'dots', '10', 'random', 'lines', '30', 'captcha', 'text', 'color', '0x142864', 'captcha', 'noice', 'color', '0x142864', 'code', 'while', 'characters', 'on', 'image', 'code', 'substr', 'possible', 'letters', 'mt', 'rand', 'strlen', 'possible', 'letters', '++', 'font', 'size', 'image', 'height', '0.75', 'image', 'imagecreate', 'image', 'width', 'image', 'height', '设置', '背景', '文本', '干扰', '噪点', 'background', 'color', 'imagecolorallocate', 'image', '255', '255', '255', 'arr', 'text', 'color', 'hexrgb', 'captcha', 'text', 'color', 'text', 'color', 'imagecolorallocate', 'image', 'arr', 'text', 'color', 'red', 'arr', 'text', 'color', 'green', 'arr', 'text', 'color', 'blue', 'arr', 'noice', 'color', 'hexrgb', 'captcha', 'noice', 'color', 'image', 'noise', 'color', 'imagecolorallocate', 'image', 'arr', 'noice', 'color', 'red', 'arr', 'noice', 'color', 'green', 'arr', 'noice', 'color', 'blue', '背景', '随机', '生成', '干扰', '噪点', 'for', 'random', 'dots', '++', 'imagefilledellipse', 'image', 'mt', 'rand', 'image', 'width', 'mt', 'rand', 'image', 'height', 'image', 'noise', 'color', '背景图片', '随机', '生成', '线条', 'for', 'random', 'lines', '++', 'imageline', 'image', 'mt', 'rand', 'image', 'width', 'mt', 'rand', 'image', 'height', 'mt', 'rand', 'image', 'width', 'mt', 'rand', 'image', 'height', 'image', 'noise', 'color', '生成', '一个', '文本框', '然后', '里面', '写生', '个字符', 'textbox', 'imagettfbbox', 'font', 'size', 'font', 'code', 'image', 'width', 'textbox', 'image', 'height', 'textbox', 'imagettftext', 'image', 'font', 'size', 'text', 'color', 'font', 'code', '验证码', '图片', 'html', '页面', '显示', '出来', 'header', 'content', 'type', 'image', 'jpeg', '设定', '图片', '输出', '类型', 'imagejpeg', 'image', '显示', '图片', 'imagedestroy', 'image', '销毁', '图片', '实例', 'session', 'letters', 'code', 'code', 'function', 'hexrgb', 'hexstr', 'int', 'hexdec', 'hexstr', 'return', 'array', 'red', '0xff', 'int', '0x10', 'green', '0xff', 'int', '0x8', 'blue', '0xff', 'int', '验证', '验证码', '正确', '错误', '方法', '验证码', '图片', '文字', '存放', 'session', '变量', '里面', '验证', '时候', '我们', '需要', 'session', '里面', '用户', '输入', '进行', '比较', '即可', 'session', 'letters', 'code', '存放', '验证码', '文字', 'post', 'letters', 'code', '这是', '用户', '输入', '验证码', '内容', 'index', 'php', '代码', '包含', 'html', 'css', 'javascript', 'and', 'php', '代码', 'php', 'session', 'start', 'if', 'isset', 'request', 'submit', '服务器端', '验证', '代码', 'if', 'empty', 'session', 'letters', 'code', 'strcasecmp', 'session', 'letters', 'code', 'post', 'letters', 'code', 'msg', '验证', '失败', 'else', '验证码', '验证', '正确', '这里', '验证', '成功', '代码', 'style', 'type', 'text', 'css', 'table', 'font', 'family', 'arial', 'helvetica', 'sans', 'serif', 'font', 'size', '12px', 'color', '333', 'background', 'color', 'e4e4e4', 'table', 'td', 'background', 'color', 'f8f8f8', 'style', 'form', 'action', 'method', 'post', 'name', 'form1', 'id', 'form1', 'table', 'width', '400', 'border', 'align', 'center', 'cellpadding', 'cellspacing', 'class', 'table', 'php', 'if', 'isset', 'msg', 'tr', 'td', 'colspan', 'align', 'center', 'valign', 'top', 'php', 'echo', 'msg', 'td', 'tr', 'php', 'tr', 'td', 'align', 'right', 'valign', 'top', '验证码', 'td', 'td', 'img', 'src', 'captcha', 'code', 'file', 'php', 'rand', 'php', 'echo', 'rand', 'id', 'captchaimg', 'br', 'label', 'for', 'message', '输入', '上面', '验证码', 'label', 'br', 'input', 'id', 'letters', 'code', 'name', 'letters', 'code', 'type', 'text', 'br', '无法', '图片', '点击', 'href', 'javascript', 'refreshcaptcha', 'here', '刷新', 'td', 'tr', 'tr', 'td', 'td', 'td', 'input', 'name', 'submit', 'type', 'submit', 'onclick', 'return', 'validate', 'value', '提交', 'td', 'tr', 'table', 'form', 'script', 'type', 'text', 'javascript', 'function', 'refreshcaptcha', 'var', 'img', 'document', 'images', 'captchaimg', 'img', 'src', 'img', 'src', 'substring', 'img', 'src', 'lastindexof', 'rand', 'math', 'random', '1000', 'script']","[[-0.21342072 -0.09145983  0.25118843  0.12934792  0.250891   -0.34470779
  -0.09657799  0.42321505 -0.06719006 -0.11975693 -0.03686205 -0.35756392
  -0.11738004  0.46839458  0.14408143 -0.097425   -0.11094693 -0.01720383
  -0.05397048 -0.47650188 -0.04498319  0.24300113 -0.06466812 -0.19578128
   0.03591024 -0.41875272 -0.28634305  0.02992583 -0.21854314 -0.07870635
   0.13669811  0.00966155  0.00322741 -0.10117421 -0.16555715  0.30303188
  -0.19104849 -0.26017026  0.06481247 -0.65098531 -0.1113511  -0.54275774
  -0.07003925 -0.00866549 -0.11080405 -0.21871325 -0.22308943  0.31357227
  -0.15969962  0.43511637  0.11705814 -0.24431682 -0.10056721 -0.16752208
  -0.0228563   0.34944292  0.1212996  -0.08815496  0.10676633 -0.12655532
   0.09125338  0.20130881  0.01117889  0.07573965 -0.32951436  0.04925397
   0.05045957 -0.02346755 -0.26593606  0.39678606  0.08339099 -0.14928591
   0.34892582 -0.29658971  0.49906903  0.26647936  0.14409902 -0.15618954
  -0.28285405 -0.12135771  0.01361484  0.06378303 -0.1216341   0.35420556
  -0.30657486  0.19289205 -0.25978286  0.41758186  0.45733261  0.15633651
   0.19593148  0.09291904  0.33106156  0.16677258  0.17676143  0.32450803
   0.10253432 -0.28712661  0.00769203 -0.11299735]]"
914,程序员做开发，前台、后台、测试哪个累？,聊天得来的，一个新产品要上马的时候：1、刚开始后台累、持续时间短2、中间阶段前太累，持续时间长3、测试中间、后面一直累、持续时间最长，但压力比前两个小 其实吧，你做哪个，你就觉得哪个累~^_^,"['程序员', '开发', '前台', '后台', '测试', '哪个', '聊天', '得来', '一个', '产品', '上马', '时候', '开始', '后台', '持续时间', '中间', '阶段', '前太累', '持续时间', '测试', '中间', '后面', '一直', '持续时间', '最长', '压力', '比前', '两个', '其实', '哪个', '觉得', '哪个']","[[-0.24370847 -0.13157443  0.21185973  0.15625608  0.28194669 -0.33145659
  -0.17488425  0.46722367 -0.00879237 -0.02001342 -0.0551949  -0.31889053
  -0.17639129  0.57869252  0.14844741 -0.10386802 -0.14588106 -0.00316081
  -0.1002109  -0.44320346  0.02289697  0.23629664  0.0025002  -0.08890087
   0.11711292 -0.52598333 -0.27138797  0.08007454 -0.20108443 -0.05966163
   0.23939009  0.02061    -0.01265073 -0.13809467 -0.09698373  0.31987169
  -0.13191143 -0.21121202  0.1118852  -0.7333474  -0.1712888  -0.56092547
  -0.03977591 -0.0716092  -0.16153102 -0.13881224 -0.2534898   0.45062834
  -0.1763268   0.38044172  0.19667339 -0.25773762 -0.114348   -0.22049175
   0.06726177  0.37377325  0.23828297 -0.06130091  0.09257042 -0.09125896
   0.0391824   0.28503213  0.02040226  0.08369241 -0.37419752 -0.01236265
   0.04262167 -0.0204775  -0.23616079  0.42325864  0.13130805 -0.23814127
   0.38252671 -0.32187958  0.5522081   0.15881188  0.19776952 -0.13587483
  -0.26197483 -0.20295904 -0.07917004 -0.00869215 -0.06111602  0.32212723
  -0.35776372  0.19623809 -0.27651069  0.39211528  0.43763021  0.12726459
   0.2983324   0.11571698  0.34846707  0.18179492  0.18329262  0.3594694
   0.10383531 -0.29155391 -0.01985964 -0.08591357]]"
920,PHP创建和解析JSON数据的方法,"JSON可以解释为“JavaScript的对象表示方法”，也就是说JSON的概念是来源于JavaScript的，对于WEB开发模式来说，下面这个图大家肯定很熟悉：由此可以看到，客户端浏览器和服务器端脚本需要交换数据。对于小数据或无格式数据，直接用简单的POST和GET用字符串方法提交过去就可以，但是一些大型的数据，最好使用有格式的方法交换，比如JSON和XML。JSON是什么？JSON一种用于在互联网络中传输超量数据的数据交换格式。虽然在Internet中交换数据XML占主要地位，然而JSON却更加的简单并且适用于轻型的数据。尽管JSON当初是被JavaScript发明并且用于访问远程数据的，它现在却被广泛适用于各种语言，因为JSON是一种于平台无关的数据格式。JSON数据的数据类型和实例JSON支持各种各样的数据类型，包括数字、字符串、布尔值、数组数据甚至对象数据（是一个集合，每个元素都是键：值对形式，使用逗号分隔，并且使用大括号包裹）。让我们看一个JSON数据的简单例子，该例子表示一个雇员的详细信息：{""id"":""1"",""name"":""mike"",""country"":""usa"",""office"":[""microsoft"",""oracle""]}使用PHP创建和解析JSON数据的方法PHP从5.2.0版本以后提供了JSON扩展来处理JSON数据，通过PHP有两个函数json_encode()和json_decode非常方便的对JSON数据进行转换和解析。首先，让我们看一段PHP用数组创建如上各式的JSON的代码：$json_data = array ('id'=>1,'name'=>""mike"",'country'=>'usa',""office""=>array(""microsoft"",""oracle""));echo json_encode($json_data); 该代码直接产生了JSON数据。现在让我们用PHP将上面的JSON解码：$json_string='{""id"":1,""name"":""mike"",""country"":""usa"",""office"":[""microsoft"",""oracle""]} ';$obj=json_decode($json_string); 现在变量$obj包含了使用PHP解析后的JSON数据，你可以使用以下的方法来输出和访问：echo $obj->name; //displays mikeecho $obj->office[0]; //displays microsoft 你猜的没错$obj->office是一个数组，你能够使用PHP的foreach方法遍历它：foreach($obj->office as $val)    echo $val; ","['php', '创建', '解析', 'json', '数据', '方法', 'json', '可以', '解释', 'javascript', '对象', '表示', '方法', '也就是说', 'json', '概念', '来源于', 'javascript', '对于', 'web', '开发', '模式', '来说', '下面', '这个', '大家', '肯定', '熟悉', '由此', '可以', '看到', '客户端', '浏览器', '服务器端', '脚本', '需要', '交换', '数据', '对于', '数据', '格式', '数据', '直接', '简单', 'post', 'get', '字符串', '方法', '提交', '过去', '可以', '但是', '一些', '大型', '数据', '最好', '使用', '格式', '方法', '交换', '比如', 'json', 'xml', 'json', '什么', 'json', '一种', '用于', '互联网络', '传输', '超量', '数据', '数据交换', '格式', '虽然', 'internet', '交换', '数据', 'xml', '主要', '地位', '然而', 'json', '更加', '简单', '并且', '适用', '轻型', '数据', '尽管', 'json', '当初', 'javascript', '发明', '并且', '用于', '访问', '远程', '数据', '现在', '广泛', '适用', '各种', '语言', '因为', 'json', '一种', '平台', '无关', '数据格式', 'json', '数据', '数据类型', '实例', 'json', '支持', '各种各样', '数据类型', '包括', '数字', '字符串', '布尔值', '数组', '数据', '甚至', '对象', '数据', '一个', '集合', '每个', '元素', '形式', '使用', '逗号', '分隔', '并且', '使用', '大括号', '包裹', '我们', '一个', 'json', '数据', '简单', '例子', '例子', '表示', '一个', '雇员', '详细信息', 'id', 'name', 'mike', 'country', 'usa', 'office', 'microsoft', 'oracle', '使用', 'php', '创建', '解析', 'json', '数据', '方法', 'php', '5.2', '版本', '以后', '提供', 'json', '扩展', '处理', 'json', '数据', '通过', 'php', '两个', '函数', 'json', 'encode', 'json', 'decode', '非常', '方便', 'json', '数据', '进行', '转换', '解析', '首先', '我们', '一段', 'php', '数组', '创建', '各式', 'json', '代码', 'json', 'data', 'array', 'id', 'name', 'mike', 'country', 'usa', 'office', 'array', 'microsoft', 'oracle', 'echo', 'json', 'encode', 'json', 'data', '代码', '直接', '产生', 'json', '数据', '现在', '我们', 'php', '上面', 'json', '解码', 'json', 'string', 'id', 'name', 'mike', 'country', 'usa', 'office', 'microsoft', 'oracle', 'obj', 'json', 'decode', 'json', 'string', '现在', '变量', 'obj', '包含', '使用', 'php', '解析', 'json', '数据', '可以', '使用', '以下', '方法', '输出', '访问', 'echo', 'obj', 'name', 'displays', 'mikeecho', 'obj', 'office', 'displays', 'microsoft', '没错', 'obj', 'office', '一个', '数组', '能够', '使用', 'php', 'foreach', '方法', '遍历', 'foreach', 'obj', 'office', 'as', 'val', 'echo', 'val']","[[-0.23287882 -0.14314258  0.20789328  0.14514774  0.3126715  -0.33311338
  -0.20807154  0.49003738  0.00583593 -0.01989961 -0.0572698  -0.30906831
  -0.20393875  0.60700875  0.15502474 -0.0907019  -0.15784349  0.00511178
  -0.12044572 -0.48063353  0.02295873  0.2256429   0.01323902 -0.08864991
   0.13216022 -0.55583204 -0.28280118  0.09615199 -0.21624691 -0.0522716
   0.24829095  0.0133861  -0.01520762 -0.15435328 -0.10540049  0.32518481
  -0.13851897 -0.21245999  0.12436167 -0.77070574 -0.18674448 -0.59546883
  -0.04153443 -0.06236506 -0.17162108 -0.14411324 -0.22980345  0.46682657
  -0.18994059  0.4043596   0.22849361 -0.26529926 -0.13243959 -0.20793722
   0.08023347  0.38789952  0.25515962 -0.06199357  0.09308929 -0.101639
   0.03637583  0.30116059  0.0293278   0.10226538 -0.38656774 -0.01876988
   0.0524587  -0.02945389 -0.254814    0.44271315  0.1659709  -0.25485727
   0.39245842 -0.32243344  0.57223619  0.15587737  0.18240392 -0.1213984
  -0.29346688 -0.20026616 -0.06808466 -0.00805618 -0.06640707  0.31582045
  -0.37745904  0.20848849 -0.29306337  0.39415541  0.45652806  0.11497896
   0.32535211  0.11432056  0.36437668  0.19697158  0.18728424  0.35375281
   0.09978184 -0.30543616 -0.07120256 -0.09828656]]"
930,PHP和MySQL处理树状、分级、无限分类、分层数据的方法,"文章标题中的多个词语表达的其实是一个意思，就是递归分类数据，分级数据非常类似数据结构中的树状结构，即每个节点有自己的孩子节点，孩子结点本身也是父亲节点。这是一个递归、分层形式。可以称之为树形层级数据。层级数据结构是编程语言中非常普通的一种数据结构，它代表一系列的数据每一项都有一个父亲节点（除了根节点）和其他多个孩子结点。WEB开发人员使用层级数据结构用于非常多的场景，包括内容管理系统CMS、论坛主题、邮件列表，还有电子商务网站的产品分类等。本文章主要介绍了使用PHP和MYSQL来管理分级数据的方法，在其中将给出两种最流行的分级数据模型：邻接表模型嵌套集合模型邻接表模型用于分层数据邻接表模型是一种分级数据模型，其中每个节点有一个指向其父亲的指针（根节点该指针为空值），使用下面的SQL语句将建立该结构并插入测试数据：-- ------------------------------------------------------------ 表的结构 `category`--CREATE TABLE IF NOT EXISTS `category` (  `category_id` int(10) NOT NULL AUTO_INCREMENT,  `category_name` varchar(50) NOT NULL,  `parent_id` int(10) DEFAULT NULL,  PRIMARY KEY (`category_id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=15 ;---- 转存表中的数据 `category`--INSERT INTO `category` (`category_id`, `category_name`, `parent_id`) VALUES(1, 'A', NULL),(2, 'B', 1),(3, 'C', 1),(4, 'D', 1),(5, 'E', 2),(6, 'F', 2),(7, 'I', 4),(8, 'G', 5),(9, 'H', 5),(10, 'J', 7),(11, 'K', 10),(12, 'L', 10);建立完成后，数据库中存在了数据，并且分类图是每个节点为(关键字：数据库ID）。parent_id就是它的父节点的ID号，这种方法非常简单，因为能很容易的看清楚父子关系。使用以下的简单PHP函数代码可以很容易的输出树状路径：<?phpfunction get_path($category_id) {    $con = mysql_connect(""localhost"",""root"",""123456"");    if (!$con) {        die('数据库连接失败: ' . mysql_error());    }    mysql_select_db('test', $con);     // 查找当前节点的父节点的ID，这里使用表自身与自身连接实现    $sql = ""        SELECT c1.parent_id, c2.category_name AS parent_name         FROM category AS c1        LEFT JOIN category AS c2         ON c1.parent_id=c2.category_id         WHERE c1.category_id='$category_id' "";    //echo $sql.""<br>"";//测试把SQL打印出来，拿到数据库执行一下看看结果    $result = mysql_query($sql);    $row = mysql_fetch_array($result);//现在$row数组存了父亲节点的ID和名称信息    // 将树状路径保存在数组里面    $path = array();    //如果父亲节点不为空（根节点），就把父节点加到路径里面    if ($row['parent_id']!=NULL)     {        //将父节点信息存入一个数组元素        $parent[0]['category_id'] = $row['parent_id'];        $parent[0]['category_name'] = $row['parent_name'];        //递归的将父节点加到路径中        $path = array_merge(get_path($row['parent_id']), $parent);    }   return $path;}//根据上面的图可以看出，K的ID是11，我们就用它来测试路径$path =  get_path(11);echo ""<h2>路径数组：</h2>"";echo ""<pre>"";print_r($path);echo ""</pre>"";//将路径到根节点的路径打印出来//打印结果：J>I>D>A>echo ""<h2>向根节点打印路径：</h2>"";for ($i=count($path)-1; $i>=0; $i--){     echo $path[$i]['category_name']. '>';}?> 由此可以知道怎样找到一个叶子节点（没有孩子的节点）到根节点的路径，下面来看怎样从根节点往下来遍历层级结构，通过节点的层级关系来打印所有的节点：<?phpfunction display_children($category_id, $level) {    $con = mysql_connect(""localhost"",""root"",""123456"");    if (!$con) {        die('数据库连接失败: ' . mysql_error());    }    mysql_select_db('test', $con);     // 获得当前节点的所有孩子节点（直接孩子，没有孙子）    $result = mysql_query(""SELECT * FROM category WHERE parent_id='$category_id'"");    // 遍历孩子节点，打印节点    while ($row = mysql_fetch_array($result))     {        // 根据层级，按照缩进格式打印节点的名字        // 这里只是打印，你可以将以下代码改成其他，比如把节点信息存储起来        echo str_repeat('--',$level) . $row['category_name'] . ""<br/>"";       // 递归的打印所有的孩子节点       display_children($row['category_id'], $level+1);    }}//根节点是A:1我们就用它来打印所有的节点display_children(1, 0);?> 然而，邻接表模型（每个节点存储父亲节点信息）有它的劣势，首先使用数据库的查询语句很难直接实现它，需要借助PHP代码实现。SQL语句需要你知道节点位于哪一个层级。并且每个树层是使用SQL的自我表连接实现的，这意味着树的每一层处理都会降低数据库的性能。删除节点的过程也会导致一些问题，如果只删除了某个节点它却有孩子，结果是它的孩子成了孤儿（就是没有父亲了），真正的体现就是，这些孩子节点从树中相当于“消失了”。嵌套集合模型用于树形分层结构数据嵌套集合模型，也叫做先根遍历树算法，也是一种处理树形层级数据的方法。代替节点间的父子关系，层级使用嵌套的容器的集合来表示，其中每个节点具有两个值，一个left，一个right。决定left和right的值的过程是从左到右进行的，首先给left赋值，让后向下遍历节点的孩子们，最后才能得到节点的right的值。SQL语句如下所示：CREATE TABLE category (        category_id INT(10) AUTO_INCREMENT PRIMARY KEY,        category_name VARCHAR(50) NOT NULL,        lft INT(10) NOT NULL,        rgt INT(10) NOT NULL);现在可以用一句SQL查询得到整个树的节点：SELECT * FROM category WHERE lft BETWEEN 1 AND 14 ORDER BY lft ASC在本SQL中的两个数字值1和14就是根节点的left和right值。类似的如果想得到某个节点的所有孩子节点，只需要将该SQL语句的1和14替换成本节点的left和right值就可以了。例如，如果想得到所有男人的衣服，可以用下面的SQL语句：SELECT * FROM category WHERE lft BETWEEN 2 AND 7 ORDER BY lft ASC想找到一条到某个节点的路径，用一条SQL语句就可以搞定：SELECT * FROM category WHERE lft < 9 AND rgt > 10 ORDER BY lft ASC请仔细观察一下一些叶子节点到根节点的路径。就会发现所有的祖先都有更小的左值和更大的右值。本例子中一条到裙子分类的路径被取出。观察一下裙子的所有left值都小于9，right值都大于10，其他的非祖先节点都不满足该要求。尽管嵌套集合模型更加复杂并且有些难以理解，它有非常多的优势。它不需要依赖其他资源（比如PHP代码），也不需要递归。同时，数据库查询语句非常的简单，大多数用一条SQL语句就可以搞定。这些特性都能够显著的增加应用程序的性能，使得它能够用可接受的速度来处理复杂的层级结构。然而万事皆无完美，更新该层级结构（增加或删除节点）却更加的复杂，并且可能会非常慢。增加一个节点到层级结构的方法：将一个节点插入到层级数据中，需要整个树很多节点的left和right值的更新。例如，如果你想将一个男士运动鞋的分类插入到男性衣服的短裤后面。那么所有你必须将大于6的所有left和right值都增加2。为什么呢？因为短裤的right值是6，那你就必须将你的新分类的left和right值设定为7和8，当然，以下两条SQL就可以解决：UPDATE category SET rgt=rgt+2 WHERE rgt>6UPDATE category SET lft=lft+2 WHERE lft>6现在树中间已经有空隙用来插入新分类了，用一条SQL插入该节点：INSERT INTO category (category_name,lft,rgt) VALUES ('Sneakers', '7', '8')树形层级数据中删除一个节点的方法：在层级集合模型中删除一个节点的方法，比在邻接表中相同的操作稍微难一些。不同的操作的复杂程度是不同的，比如删除一个叶子节点和一个带孩子节点就很不同。要删除一个叶子节点，先将所有left和right大于该节点left和right值的节点的left和right减去2，然后再删除该节点。以下使用SQL实现该过程：UPDATE category SET lft=lft-2 WHERE lft>5UPDATE category SET rgt=rgt-2 WHERE rgt>6DELETE FROM category WHERE lft='5' AND rgt='6'该例子中短裤节点被删除了。如果要删除的节点有孩子节点的话，删除过程会多一个步骤:比如我们删除男性衣服分类的时候：UPDATE category SET lft=lft-1, rgt=rgt-1 WHERE lft>2 AND rgt<7UPDATE category SET lft=lft-2 WHERE lft>7UPDATE category SET rgt=rgt-2 WHERE rgt>7DELETE FROM category WHERE lft='2' AND rgt='7'哪种模型对于处理树形分层数据更好？哪种情况更好呢，看情况。如果需要一个更加灵活的模型，更容易更新，就用邻接表模型吧。如果分类构成了一棵复杂的数，并且更新不需要很频繁，用嵌套集合模型肯定是上上之选。本文内容翻译自：访问，其中原文中的代码有些问题，本人添加了测试数据并改正了代码。","['php', 'mysql', '处理', '树状', '分级', '无限', '分类', '分层', '数据', '方法', '文章', '标题', '多个', '词语', '表达', '其实', '一个', '意思', '就是', '递归', '分类', '数据', '分级', '数据', '非常', '类似', '数据结构', '树状', '结构', '每个', '节点', '自己', '孩子', '节点', '孩子', '结点', '本身', '父亲', '节点', '这是', '一个', '递归', '分层', '形式', '可以', '称之为', '树形', '层级', '数据', '层级', '数据结构', '编程语言', '非常', '普通', '一种', '数据结构', '代表', '一系列', '数据', '每一项', '一个', '父亲', '节点', '除了', '节点', '其他', '多个', '孩子', '结点', 'web', '开发人员', '使用', '层级', '数据结构', '用于', '非常', '场景', '包括', '内容', '管理系统', 'cms', '论坛', '主题', '邮件', '列表', '还有', '电子商务', '网站', '产品', '分类', '文章', '主要', '介绍', '使用', 'php', 'mysql', '管理', '分级', '数据', '方法', '其中', '给出', '两种', '流行', '分级', '数据模型', '邻接', '模型', '嵌套', '集合', '模型', '邻接', '模型', '用于', '分层', '数据', '邻接', '模型', '一种', '分级', '数据模型', '其中', '每个', '节点', '一个', '指向', '父亲', '指针', '节点', '指针', '空值', '使用', '下面', 'sql', '语句', '建立', '结构', '插入', '测试数据', '--', '------------------------------------------------------------', '结构', 'category', '--', 'create', 'table', 'if', 'not', 'exists', 'category', 'category', 'id', 'int', '10', 'not', 'null', 'auto', 'increment', 'category', 'name', 'varchar', '50', 'not', 'null', 'parent', 'id', 'int', '10', 'default', 'null', 'primary', 'key', 'category', 'id', 'engine', 'innodb', 'default', 'charset', 'utf8', 'auto', 'increment', '15', '----', '转存', '表中', '数据', 'category', '--', 'insert', 'into', 'category', 'category', 'id', 'category', 'name', 'parent', 'id', 'values', 'null', '10', '11', '10', '12', '10', '建立', '完成', '数据库', '存在', '数据', '并且', '分类', '图是', '每个', '节点', '关键字', '数据库', 'id', 'parent', 'id', '就是', '节点', 'id', '这种', '方法', '非常简单', '因为', '容易', '看清楚', '父子关系', '使用', '以下', '简单', 'php', '函数', '代码', '可以', '容易', '输出', '树状', '路径', 'phpfunction', 'get', 'path', 'category', 'id', 'con', 'mysql', 'connect', 'localhost', 'root', '123456', 'if', 'con', 'die', '数据库', '连接', '失败', 'mysql', 'error', 'mysql', 'select', 'db', 'test', 'con', '查找', '当前', '节点', '节点', 'id', '这里', '使用', '自身', '自身', '连接', '实现', 'sql', 'select', 'c1', 'parent', 'id', 'c2', 'category', 'name', 'as', 'parent', 'name', 'from', 'category', 'as', 'c1', 'left', 'join', 'category', 'as', 'c2', 'on', 'c1', 'parent', 'id', 'c2', 'category', 'id', 'where', 'c1', 'category', 'id', 'category', 'id', 'echo', 'sql', 'br', '测试', 'sql', '打印', '出来', '拿到', '数据库', '执行', '一下', '看看', '结果', 'result', 'mysql', 'query', 'sql', 'row', 'mysql', 'fetch', 'array', 'result', '现在', 'row', '数组', '父亲', '节点', 'id', '名称', '信息', '树状', '路径', '保存', '数组', '里面', 'path', 'array', '如果', '父亲', '节点', '不为', '节点', '节点', '路径', '里面', 'if', 'row', 'parent', 'id', 'null', '将父', '节点', '信息', '存入', '一个', '数组', '元素', 'parent', 'category', 'id', 'row', 'parent', 'id', 'parent', 'category', 'name', 'row', 'parent', 'name', '递归', '节点', '路径', 'path', 'array', 'merge', 'get', 'path', 'row', 'parent', 'id', 'parent', 'return', 'path', '根据', '上面', '可以', '看出', 'id', '11', '我们', '测试', '路径', 'path', 'get', 'path', '11', 'echo', 'h2', '路径', '数组', 'h2', 'echo', 'pre', 'print', 'path', 'echo', 'pre', '路径', '节点', '路径', '打印', '出来', '打印', '结果', 'echo', 'h2', '向根', '节点', '打印', '路径', 'h2', 'for', 'count', 'path', '--', 'echo', 'path', 'category', 'name', '由此', '可以', '知道', '怎样', '找到', '一个', '叶子', '节点', '没有', '孩子', '节点', '节点', '路径', '下面', '来看', '怎样', '从根', '节点', '下来', '遍历', '层级', '结构', '通过', '节点', '层级', '关系', '打印', '所有', '节点', 'phpfunction', 'display', 'children', 'category', 'id', 'level', 'con', 'mysql', 'connect', 'localhost', 'root', '123456', 'if', 'con', 'die', '数据库', '连接', '失败', 'mysql', 'error', 'mysql', 'select', 'db', 'test', 'con', '获得', '当前', '节点', '所有', '孩子', '节点', '直接', '孩子', '没有', '孙子', 'result', 'mysql', 'query', 'select', 'from', 'category', 'where', 'parent', 'id', 'category', 'id', '遍历', '孩子', '节点', '打印', '节点', 'while', 'row', 'mysql', 'fetch', 'array', 'result', '根据', '层级', '按照', '缩进', '格式', '打印', '节点', '名字', '这里', '只是', '打印', '可以', '以下', '代码', '改成', '其他', '比如', '节点', '信息', '存储', '起来', 'echo', 'str', 'repeat', '--', 'level', 'row', 'category', 'name', 'br', '递归', '打印', '所有', '孩子', '节点', 'display', 'children', 'row', 'category', 'id', 'level', '节点', '我们', '打印', '所有', '节点', 'display', 'children', '然而', '邻接', '模型', '每个', '节点', '存储', '父亲', '节点', '信息', '劣势', '首先', '使用', '数据库', '查询', '语句', '很难', '直接', '实现', '需要', '借助', 'php', '代码', '实现', 'sql', '语句', '需要', '知道', '节点', '位于', '一个', '层级', '并且', '每个', '树层', '使用', 'sql', '自我', '连接', '实现', '意味着', '一层', '处理', '降低', '数据库', '性能', '删除', '节点', '过程', '导致', '一些', '问题', '如果', '删除', '某个', '节点', '孩子', '结果', '孩子', '孤儿', '就是', '没有', '父亲', '真正', '体现', '就是', '这些', '孩子', '节点', '从树中', '相当于', '消失', '嵌套', '集合', '模型', '用于', '树形', '分层', '结构', '数据', '嵌套', '集合', '模型', '叫做', '先根', '遍历', '算法', '一种', '处理', '树形', '层级', '数据', '方法', '代替', '节点', '父子关系', '层级', '使用', '嵌套', '容器', '集合', '表示', '其中', '每个', '节点', '具有', '两个', '一个', 'left', '一个', 'right', '决定', 'left', 'right', '过程', '从左到右', '进行', '首先', 'left', '赋值', '向下', '遍历', '节点', '孩子', '最后', '才能', '得到', '节点', 'right', 'sql', '语句', '如下', '所示', 'create', 'table', 'category', 'category', 'id', 'int', '10', 'auto', 'increment', 'primary', 'key', 'category', 'name', 'varchar', '50', 'not', 'null', 'lft', 'int', '10', 'not', 'null', 'rgt', 'int', '10', 'not', 'null', '现在', '可以', '一句', 'sql', '查询', '得到', '整个', '节点', 'select', 'from', 'category', 'where', 'lft', 'between', 'and', '14', 'order', 'by', 'lft', 'asc', 'sql', '两个', '数字', '14', '就是', '节点', 'left', 'right', '类似', '如果', '想得到', '某个', '节点', '所有', '孩子', '节点', '需要', 'sql', '语句', '14', '替换', '成本', '节点', 'left', 'right', '可以', '例如', '如果', '想得到', '所有', '男人', '衣服', '可以', '下面', 'sql', '语句', 'select', 'from', 'category', 'where', 'lft', 'between', 'and', 'order', 'by', 'lft', 'asc', '找到', '一条', '某个', '节点', '路径', '一条', 'sql', '语句', '可以', '搞定', 'select', 'from', 'category', 'where', 'lft', 'and', 'rgt', '10', 'order', 'by', 'lft', 'asc', '仔细观察', '一下', '一些', '叶子', '节点', '节点', '路径', '发现', '所有', '祖先', '左值', '右值', '例子', '一条', '裙子', '分类', '路径', '取出', '观察', '一下', '裙子', '所有', 'left', '小于', 'right', '大于', '10', '其他', '祖先', '节点', '满足', '要求', '尽管', '嵌套', '集合', '模型', '更加', '复杂', '并且', '有些', '难以', '理解', '非常', '优势', '需要', '依赖', '其他', '资源', '比如', 'php', '代码', '需要', '递归', '同时', '数据库', '查询', '语句', '非常', '简单', '大多数', '一条', 'sql', '语句', '可以', '搞定', '这些', '特性', '能够', '显著', '增加', '应用程序', '性能', '使得', '能够', '接受', '速度', '处理', '复杂', '层级', '结构', '然而', '万事', '完美', '更新', '层级', '结构', '增加', '删除', '节点', '更加', '复杂', '并且', '可能', '非常', '增加', '一个', '节点', '层级', '结构', '方法', '一个', '节点', '插入', '层级', '数据', '需要', '整个', '很多', '节点', 'left', 'right', '更新', '例如', '如果', '一个', '男士', '运动鞋', '分类', '插入', '男性', '衣服', '短裤', '后面', '那么', '所有', '必须', '大于', '所有', 'left', 'right', '增加', '为什么', '因为', '短裤', 'right', '必须', '分类', 'left', 'right', '设定', '当然', '以下', '两条', 'sql', '可以', '解决', 'update', 'category', 'set', 'rgt', 'rgt', 'where', 'rgt', '6update', 'category', 'set', 'lft', 'lft', 'where', 'lft', '现在', '中间', '已经', '空隙', '用来', '插入', '分类', '一条', 'sql', '插入', '节点', 'insert', 'into', 'category', 'category', 'name', 'lft', 'rgt', 'values', 'sneakers', '树形', '层级', '数据', '删除', '一个', '节点', '方法', '层级', '集合', '模型', '删除', '一个', '节点', '方法', '邻接', '表中', '相同', '操作', '稍微', '一些', '不同', '操作', '复杂程度', '不同', '比如', '删除', '一个', '叶子', '节点', '一个', '孩子', '节点', '不同', '删除', '一个', '叶子', '节点', '所有', 'left', 'right', '大于', '节点', 'left', 'right', '节点', 'left', 'right', '减去', '然后', '删除', '节点', '以下', '使用', 'sql', '实现', '过程', 'update', 'category', 'set', 'lft', 'lft', 'where', 'lft', '5update', 'category', 'set', 'rgt', 'rgt', 'where', 'rgt', '6delete', 'from', 'category', 'where', 'lft', 'and', 'rgt', '例子', '短裤', '节点', '删除', '如果', '删除', '节点', '孩子', '节点', '的话', '删除', '过程', '会多', '一个', '步骤', '比如', '我们', '删除', '男性', '衣服', '分类', '时候', 'update', 'category', 'set', 'lft', 'lft', 'rgt', 'rgt', 'where', 'lft', 'and', 'rgt', '7update', 'category', 'set', 'lft', 'lft', 'where', 'lft', '7update', 'category', 'set', 'rgt', 'rgt', 'where', 'rgt', '7delete', 'from', 'category', 'where', 'lft', 'and', 'rgt', '模型', '对于', '处理', '树形', '分层', '数据', '更好', '情况', '更好', '情况', '如果', '需要', '一个', '更加', '灵活', '模型', '容易', '更新', '邻接', '模型', '如果', '分类', '构成', '一棵', '复杂', '并且', '更新', '需要', '频繁', '嵌套', '集合', '模型', '肯定', '之选', '本文', '内容', '翻译', '访问', '其中', '原文中', '代码', '有些', '问题', '本人', '添加', '测试数据', '改正', '代码']","[[-2.33635528e-01 -1.23782464e-01  2.34606615e-01  1.17720098e-01
   3.28495406e-01 -3.57981758e-01 -1.80094544e-01  5.05416994e-01
  -2.76952225e-02 -7.22473278e-02 -4.90905608e-02 -3.41633471e-01
  -1.90894674e-01  5.93806365e-01  1.72855924e-01 -9.26957364e-02
  -1.40979185e-01 -7.43529235e-04 -1.08820679e-01 -5.34267724e-01
  -1.01452912e-02  2.44661960e-01 -1.88213444e-02 -1.53729113e-01
   1.10183513e-01 -5.47296441e-01 -3.11131006e-01  6.92184871e-02
  -2.41977913e-01 -6.19579545e-02  2.15828206e-01  4.63776907e-03
  -1.58085180e-02 -1.46411718e-01 -1.31912833e-01  3.32751220e-01
  -1.76137923e-01 -2.48769832e-01  1.07468559e-01 -7.91776077e-01
  -1.83145617e-01 -6.29391074e-01 -6.35100540e-02 -3.55902403e-02
  -1.59745157e-01 -1.90421426e-01 -2.25882937e-01  4.18690984e-01
  -2.16979091e-01  4.66040927e-01  2.05988622e-01 -2.68806027e-01
  -1.50759559e-01 -1.85542071e-01  3.31448207e-02  3.85382620e-01
   2.15436383e-01 -7.51955473e-02  9.78550222e-02 -1.27162111e-01
   6.11786921e-02  2.76678620e-01  1.72862239e-02  9.95629509e-02
  -3.88207699e-01  9.74930537e-03  7.41985388e-02 -4.50493439e-02
  -2.98219954e-01  4.50843007e-01  1.46199761e-01 -2.24009240e-01
   3.87344957e-01 -3.36469551e-01  5.79673419e-01  2.19851820e-01
   1.49530546e-01 -1.35687296e-01 -3.29362365e-01 -1.52512123e-01
  -1.70064435e-02  3.68509368e-02 -8.72374977e-02  3.55674841e-01
  -3.65733316e-01  2.26010620e-01 -2.96626455e-01  4.29371012e-01
   4.87885175e-01  1.43890789e-01  3.07287015e-01  1.18143627e-01
   3.85643082e-01  1.94972003e-01  1.98952276e-01  3.48025092e-01
   1.17228142e-01 -3.36330960e-01 -7.65094017e-02 -1.13268770e-01]]"
955,Ubuntu10.10 Server+Nginx+Django+Postgresql安装步骤,"1，安装Ubuntu 10.101.1 使用默认安装，在更新apt的时候选择跳过1.2 设置管理员的用户名和密码1.3 安装openssh-server启动ssh服务，方便使用Bitvise Tunnelier，putty工具进行管理sudo apt-get install openssh-server2, 更新源2.1 sudo vi /etc/apt/sources.list 编辑源列表#163的，速度很不错的deb http://mirrors.163.com/Ubuntu/ maverick main restricted universe multiversedeb http://mirrors.163.com/Ubuntu/ maverick-security main restricted universe multiversedeb http://mirrors.163.com/Ubuntu/ maverick-updates main restricted universe multiversedeb http://mirrors.163.com/Ubuntu/ maverick-proposed main restricted universe multiversedeb http://mirrors.163.com/Ubuntu/ maverick-backports main restricted universe multiversedeb-src http://mirrors.163.com/Ubuntu/ maverick main restricted universe multiversedeb-src http://mirrors.163.com/Ubuntu/ maverick-security main restricted universe multiversedeb-src http://mirrors.163.com/Ubuntu/ maverick-updates main restricted universe multiversedeb-src http://mirrors.163.com/Ubuntu/ maverick-proposed main restricted universe multiversedeb-src http://mirrors.163.com/Ubuntu/ maverick-backports main restricted universe multiversedeb http://archive.Ubuntu.com/ubuntu/ maverick main restricted universe multiversedeb http://archive.Ubuntu.com/ubuntu/ maverick-security main restricted universe multiversedeb http://archive.Ubuntu.com/ubuntu/ maverick-updates main restricted universe multiversedeb http://archive.Ubuntu.com/ubuntu/ maverick-proposed main restricted universe multiversedeb http://archive.Ubuntu.com/ubuntu/ maverick-backports main restricted universe multiversedeb-src http://archive.Ubuntu.com/ubuntu/ maverick main restricted universe multiversedeb-src http://archive.Ubuntu.com/ubuntu/ maverick-security main restricted universe multiversedeb-src http://archive.Ubuntu.com/ubuntu/ maverick-updates main restricted universe multiversedeb-src http://archive.Ubuntu.com/ubuntu/ maverick-proposed main restricted universe multiversedeb-src http://archive.Ubuntu.com/ubuntu/ maverick-backports main restricted universe multiverseo#LUPA的源，速度也很好的（开源社区）deb http://mirror.lupaworld.com/Ubuntu maverick main restricted universe multiversedeb http://mirror.lupaworld.com/Ubuntu maverick-security main restricted universe multiversedeb http://mirror.lupaworld.com/Ubuntu maverick-updates main restricted universe multiversedeb http://mirror.lupaworld.com/Ubuntu maverick-backports main restricted universe multiversedeb http://mirror.lupaworld.com/Ubuntu maverick-proposed main restricted universe multiversedeb-src http://mirror.lupaworld.com/Ubuntu maverick main restricted universe multiversedeb-src http://mirror.lupaworld.com/Ubuntu maverick-security main restricted universe multiversedeb-src http://mirror.lupaworld.com/Ubuntu maverick-updates main restricted universe multiversedeb-src http://mirror.lupaworld.com/Ubuntu maverick-backports main restricted universe multiversedeb-src http://mirror.lupaworld.com/Ubuntu maverick-proposed main restricted universe multiverse#sohu的源deb http://mirrors.sohu.com/Ubuntu/ maverick main restricteddeb-src http://mirrors.sohu.com/Ubuntu/ maverick main restricteddeb http://mirrors.sohu.com/Ubuntu/ maverick-updates main restricteddeb-src http://mirrors.sohu.com/Ubuntu/ maverick-updates main restricteddeb http://mirrors.sohu.com/Ubuntu/ maverick universedeb-src http://mirrors.sohu.com/Ubuntu/ maverick universedeb http://mirrors.sohu.com/Ubuntu/ maverick-updates universedeb-src http://mirrors.sohu.com/Ubuntu/ maverick-updates universedeb http://mirrors.sohu.com/Ubuntu/ maverick multiversedeb-src http://mirrors.sohu.com/Ubuntu/ maverick multiversedeb http://mirrors.sohu.com/Ubuntu/ maverick-updates multiversedeb-src http://mirrors.sohu.com/Ubuntu/ maverick-updates multiverse#官方的Ubuntu 10.10要保留几个用于紧急www.linuxidc.com更新deb http://security.Ubuntu.com/ubuntu maverick-security main restricteddeb-src http://security.Ubuntu.com/ubuntu maverick-security main restricteddeb http://security.Ubuntu.com/ubuntu maverick-security universedeb-src http://security.Ubuntu.com/ubuntu maverick-security universedeb http://security.Ubuntu.com/ubuntu maverick-security multiversedeb-src http://security.Ubuntu.com/ubuntu maverick-security multiverse注意vi命令: i写入模式 ESC退出写入模式，进入命令模式 wq保存退出命令dd 删除正行 x删除单个字符3，更新apt-get并安装基本编译环境sudo apt-get updatesudo apt-get install build-essential 4，安装Djangowget http://media.djangoproject.com/releases/1.2/Django-1.2.3.tar.gz tar zxvf Django-1.2.3.tar.gzcd Django-1.2.3.tar.gzsudo python setup.py install 5，部署项目将项目拷贝到/build/script-2.6/里6，安装Postgresql6.1 安装数据库sudo apt-get install postgresql6.2 修改Linux用户postgres的密码sudo passwd postgres6.3 修改数据库超级用户postgres的密码6.3.1 切换到Linux下postgres用户sudo su postgres6.3.2 登录postgres数据库psql postgres6.3.3 修改密码ALTER USER postgres with PASSWORD '新密码';6.4 添加自定义的用户和数据库6.4.1 添加用户并修改密码create user 用户名;ALTER USER 用户名 with PASSWORD '新密码';6.4.2 创建个属于自定义用户的数据库create database 数据库名 owner 用户名6.4.3 查询数据库和表以及用户select * from pg_database;select * from pg_user;select * from pg_tables;\q退出退出postgres用户模式 exit6.5 修改/etc/postgresql/8.4/main/pg_hba.conf 配置文件将md5为trustsudo vi /etc/postgresql/8.4/main/pg_hba.conflocal trusthosts trust6.6 重启postgressudo /etc/init.d/postgresql-8.4 restart 7，修改项目相应的settings.py文件DATABASES = {'default': {'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.'NAME': '数据库名', # Or path to database file if using sqlite3.'USER': '数据库所有者用户名', # Not used with sqlite3.'PASSWORD': '数据库所有者密码', # Not used with sqlite3.'HOST': '', # Set to empty string for localhost. Not used with sqlite3.'PORT': '', # Set to empty string for default. Not used with sqlite3.}}8, 安装Psycopg2驱动程序8.1 安装相关包sudo apt-get install python-devsudo apt-get install libpq-dev 8.2 下载并安装Psycopg2wget http://initd.org/psycopg/tarballs/psycopg2-2.2.2.tar.gztar zxvf psycopg2-2.2.2.tar.gzcd psycopg2-2.2.2sudo python setup.py install 9，安装nginx并配置9.1安装最新的nginx版本sudo su -echo ""deb http://ppa.launchpad.net/nginx/stable/Ubuntu lucid main"" >> /etc/apt/sources.listapt-key adv --keyserver keyserver.Ubuntu.com --recv-keys C300EE8Capt-get updateapt-get install nginxsudo apt-get install python-flup9.2 配置nginx的配置文件sudo vi /etc/nginx/nginx.conf 在http节中加入server {listen 80;server_name ourscopee.com www.ourscopee.com;location / {fastcgi_pass 127.0.0.1:8080; #转发8080端口的信息fastcgi_param PATH_INFO $fastcgi_script_name;fastcgi_param REQUEST_METHOD $request_method;fastcgi_param QUERY_STRING $query_string;fastcgi_param CONTENT_TYPE $content_type;fastcgi_param CONTENT_LENGTH $content_length;fastcgi_pass_header Authorization;fastcgi_intercept_errors off;fastcgi_param SERVER_PROTOCOL $server_protocol;fastcgi_param SERVER_PORT $server_port;fastcgi_param SERVER_NAME $server_name;}location ^~ /media/ {alias /home/lynne/Django-1.2.3/django/contrib/admin/media/; #lynne注意Django静态文件的路径} 9.3 重启nginxsudo ./etc/init.d/postgresql restart 10，测试1,测试Django与数据库python manage.py syncdb2,测试Django本身WebServerpython manage.py runserver 绑定ip地址:绑定的端口号3,测试Django与nginx的fastcgi模式配合开启nginx服务sudo /etc/init.d/nginx start开启django的fastcgi模式到8080端口 11，测试 http://服务器的ip/TODO：1)Memcache未加入和配置2）未进行高并发测试3）配置未完全掌握并优化尤其是fastcgi的配置","['ubuntu10.10', 'server', 'nginx', 'django', 'postgresql', '安装', '步骤', '安装', 'ubuntu', '10.101', '使用', '默认', '安装', '更新', 'apt', '时候', '选择', '跳过', '1.2', '设置', '管理员', '用户名', '密码', '1.3', '安装', 'openssh', 'server', '启动', 'ssh', '服务', '方便使用', 'bitvise', 'tunnelier', 'putty', '工具', '进行', '管理', 'sudo', 'apt', 'get', 'install', 'openssh', 'server2', '更新', '2.1', 'sudo', 'vi', 'etc', 'apt', 'sources', 'list', '编辑', '列表', '163', '速度', '不错', 'deb', 'http', 'mirrors.163', 'com', 'ubuntu', 'maverick', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'mirrors.163', 'com', 'ubuntu', 'maverick', 'security', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'mirrors.163', 'com', 'ubuntu', 'maverick', 'updates', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'mirrors.163', 'com', 'ubuntu', 'maverick', 'proposed', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'mirrors.163', 'com', 'ubuntu', 'maverick', 'backports', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'mirrors.163', 'com', 'ubuntu', 'maverick', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'mirrors.163', 'com', 'ubuntu', 'maverick', 'security', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'mirrors.163', 'com', 'ubuntu', 'maverick', 'updates', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'mirrors.163', 'com', 'ubuntu', 'maverick', 'proposed', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'mirrors.163', 'com', 'ubuntu', 'maverick', 'backports', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'archive', 'ubuntu', 'com', 'ubuntu', 'maverick', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'archive', 'ubuntu', 'com', 'ubuntu', 'maverick', 'security', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'archive', 'ubuntu', 'com', 'ubuntu', 'maverick', 'updates', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'archive', 'ubuntu', 'com', 'ubuntu', 'maverick', 'proposed', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'archive', 'ubuntu', 'com', 'ubuntu', 'maverick', 'backports', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'archive', 'ubuntu', 'com', 'ubuntu', 'maverick', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'archive', 'ubuntu', 'com', 'ubuntu', 'maverick', 'security', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'archive', 'ubuntu', 'com', 'ubuntu', 'maverick', 'updates', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'archive', 'ubuntu', 'com', 'ubuntu', 'maverick', 'proposed', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'archive', 'ubuntu', 'com', 'ubuntu', 'maverick', 'backports', 'main', 'restricted', 'universe', 'multiverseo', 'lupa', '速度', '开源', '社区', 'deb', 'http', 'mirror', 'lupaworld', 'com', 'ubuntu', 'maverick', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'mirror', 'lupaworld', 'com', 'ubuntu', 'maverick', 'security', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'mirror', 'lupaworld', 'com', 'ubuntu', 'maverick', 'updates', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'mirror', 'lupaworld', 'com', 'ubuntu', 'maverick', 'backports', 'main', 'restricted', 'universe', 'multiversedeb', 'http', 'mirror', 'lupaworld', 'com', 'ubuntu', 'maverick', 'proposed', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'mirror', 'lupaworld', 'com', 'ubuntu', 'maverick', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'mirror', 'lupaworld', 'com', 'ubuntu', 'maverick', 'security', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'mirror', 'lupaworld', 'com', 'ubuntu', 'maverick', 'updates', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'mirror', 'lupaworld', 'com', 'ubuntu', 'maverick', 'backports', 'main', 'restricted', 'universe', 'multiversedeb', 'src', 'http', 'mirror', 'lupaworld', 'com', 'ubuntu', 'maverick', 'proposed', 'main', 'restricted', 'universe', 'multiverse', 'sohu', 'deb', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'main', 'restricteddeb', 'src', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'main', 'restricteddeb', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'updates', 'main', 'restricteddeb', 'src', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'updates', 'main', 'restricteddeb', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'universedeb', 'src', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'universedeb', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'updates', 'universedeb', 'src', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'updates', 'universedeb', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'multiversedeb', 'src', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'multiversedeb', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'updates', 'multiversedeb', 'src', 'http', 'mirrors', 'sohu', 'com', 'ubuntu', 'maverick', 'updates', 'multiverse', '官方', 'ubuntu', '10.10', '保留', '几个', '用于', '紧急', 'www', 'linuxidc', 'com', '更新', 'deb', 'http', 'security', 'ubuntu', 'com', 'ubuntu', 'maverick', 'security', 'main', 'restricteddeb', 'src', 'http', 'security', 'ubuntu', 'com', 'ubuntu', 'maverick', 'security', 'main', 'restricteddeb', 'http', 'security', 'ubuntu', 'com', 'ubuntu', 'maverick', 'security', 'universedeb', 'src', 'http', 'security', 'ubuntu', 'com', 'ubuntu', 'maverick', 'security', 'universedeb', 'http', 'security', 'ubuntu', 'com', 'ubuntu', 'maverick', 'security', 'multiversedeb', 'src', 'http', 'security', 'ubuntu', 'com', 'ubuntu', 'maverick', 'security', 'multiverse', '注意', 'vi', '命令', '写入', '模式', 'esc', '退出', '写入', '模式', '进入', '命令', '模式', 'wq', '保存', '退出', '命令', 'dd', '删除', '删除', '单个', '字符', '更新', 'apt', 'get', '安装', '基本', '编译', '环境', 'sudo', 'apt', 'get', 'updatesudo', 'apt', 'get', 'install', 'build', 'essential', '安装', 'djangowget', 'http', 'media', 'djangoproject', 'com', 'releases', '1.2', 'django', '1.2', 'tar', 'gz', 'tar', 'zxvf', 'django', '1.2', 'tar', 'gzcd', 'django', '1.2', 'tar', 'gzsudo', 'python', 'setup', 'py', 'install', '部署', '项目', '项目', '拷贝到', 'build', 'script', '2.6', '安装', 'postgresql6.1', '安装', '数据库', 'sudo', 'apt', 'get', 'install', 'postgresql6.2', '修改', 'linux', '用户', 'postgres', '密码', 'sudo', 'passwd', 'postgres6.3', '修改', '数据库', '超级', '用户', 'postgres', '密码', '6.3', '切换', 'linux', 'postgres', '用户', 'sudo', 'su', 'postgres6.3', '登录', 'postgres', '数据库', 'psql', 'postgres6.3', '修改', '密码', 'alter', 'user', 'postgres', 'with', 'password', '新密码', '6.4', '添加', '自定义', '用户', '数据库', '6.4', '添加', '用户', '修改', '密码', 'create', 'user', '用户名', 'alter', 'user', '用户名', 'with', 'password', '新密码', '6.4', '创建', '属于', '自定义', '用户', '数据库', 'create', 'database', '数据库', 'owner', '用户名', '6.4', '查询数据库', '和表', '以及', '用户', 'select', 'from', 'pg', 'database', 'select', 'from', 'pg', 'user', 'select', 'from', 'pg', 'tables', '退出', '退出', 'postgres', '用户', '模式', 'exit6.5', '修改', 'etc', 'postgresql', '8.4', 'main', 'pg', 'hba', 'conf', '配置文件', 'md5', 'trustsudo', 'vi', 'etc', 'postgresql', '8.4', 'main', 'pg', 'hba', 'conflocal', 'trusthosts', 'trust6.6', '重启', 'postgressudo', 'etc', 'init', 'postgresql', '8.4', 'restart', '修改', '项目', '相应', 'settings', 'py', '文件', 'databases', 'default', 'engine', 'django', 'db', 'backends', 'postgresql', 'psycopg2', 'add', 'postgresql', 'psycopg2', 'postgresql', 'mysql', 'sqlite3', 'or', 'oracle', 'name', '数据库', 'or', 'path', 'to', 'database', 'file', 'if', 'using', 'sqlite3', 'user', '数据库', '所有者', '用户名', 'not', 'used', 'with', 'sqlite3', 'password', '数据库', '所有者', '密码', 'not', 'used', 'with', 'sqlite3', 'host', 'set', 'to', 'empty', 'string', 'for', 'localhost', 'not', 'used', 'with', 'sqlite3', 'port', 'set', 'to', 'empty', 'string', 'for', 'default', 'not', 'used', 'with', 'sqlite3', '安装', 'psycopg2', '驱动程序', '8.1', '安装', '相关', 'sudo', 'apt', 'get', 'install', 'python', 'devsudo', 'apt', 'get', 'install', 'libpq', 'dev', '8.2', '下载', '安装', 'psycopg2wget', 'http', 'initd', 'org', 'psycopg', 'tarballs', 'psycopg2', '2.2', 'tar', 'gztar', 'zxvf', 'psycopg2', '2.2', 'tar', 'gzcd', 'psycopg2', '2.2', '2sudo', 'python', 'setup', 'py', 'install', '安装', 'nginx', '配置', '9.1', '安装', '最新', 'nginx', '版本', 'sudo', 'su', 'echo', 'deb', 'http', 'ppa', 'launchpad', 'net', 'nginx', 'stable', 'ubuntu', 'lucid', 'main', 'etc', 'apt', 'sources', 'listapt', 'key', 'adv', '--', 'keyserver', 'keyserver', 'ubuntu', 'com', '--', 'recv', 'keys', 'c300ee8capt', 'get', 'updateapt', 'get', 'install', 'nginxsudo', 'apt', 'get', 'install', 'python', 'flup9.2', '配置', 'nginx', '配置文件', 'sudo', 'vi', 'etc', 'nginx', 'nginx', 'conf', 'http', '节中', '加入', 'server', 'listen', '80', 'server', 'name', 'ourscopee', 'com', 'www', 'ourscopee', 'com', 'location', 'fastcgi', 'pass', '127.0', '0.1', '8080', '转发', '8080', '端口', '信息', 'fastcgi', 'param', 'path', 'info', 'fastcgi', 'script', 'name', 'fastcgi', 'param', 'request', 'method', 'request', 'method', 'fastcgi', 'param', 'query', 'string', 'query', 'string', 'fastcgi', 'param', 'content', 'type', 'content', 'type', 'fastcgi', 'param', 'content', 'length', 'content', 'length', 'fastcgi', 'pass', 'header', 'authorization', 'fastcgi', 'intercept', 'errors', 'off', 'fastcgi', 'param', 'server', 'protocol', 'server', 'protocol', 'fastcgi', 'param', 'server', 'port', 'server', 'port', 'fastcgi', 'param', 'server', 'name', 'server', 'name', 'location', 'media', 'alias', 'home', 'lynne', 'django', '1.2', 'django', 'contrib', 'admin', 'media', 'lynne', '注意', 'django', '静态', '文件', '路径', '9.3', '重启', 'nginxsudo', 'etc', 'init', 'postgresql', 'restart', '10', '测试', '测试', 'django', '数据库', 'python', 'manage', 'py', 'syncdb2', '测试', 'django', '本身', 'webserverpython', 'manage', 'py', 'runserver', '绑定', 'ip', '地址', '绑定', '端口号', '测试', 'django', 'nginx', 'fastcgi', '模式', '配合', '开启', 'nginx', '服务', 'sudo', 'etc', 'init', 'nginx', 'start', '开启', 'django', 'fastcgi', '模式', '8080', '端口', '11', '测试', 'http', '服务器', 'ip', 'todo', 'memcache', '加入', '配置', '进行', '并发', '测试', '配置', '完全', '掌握', '优化', '尤其', 'fastcgi', '配置']","[[-0.21367091 -0.11839553  0.3004679   0.33083479  0.1115044  -0.46331421
  -0.04912646  0.49673615 -0.11182759 -0.16885722 -0.10676462 -0.45944126
  -0.07337552  0.49280848  0.06169618 -0.18393889 -0.10012816  0.03604545
   0.06957797 -0.39467337 -0.06400886  0.3215759  -0.16146117 -0.30362784
  -0.06971041 -0.33727743 -0.36709562  0.05111616 -0.19997325 -0.07439342
   0.1141488   0.18638454  0.06654037 -0.09131721 -0.29896047  0.39305235
  -0.21671058 -0.29830151  0.02177861 -0.58020089  0.0195136  -0.51924535
  -0.05983506  0.03803466 -0.07273595 -0.35493929 -0.38622641  0.31833148
   0.06559279  0.37660875 -0.02732726 -0.34250174  0.08225235 -0.23113299
  -0.12256011  0.46548256  0.08982001 -0.13381975  0.16611516 -0.1165628
   0.23509681  0.14370947 -0.01162377  0.08775969 -0.31320576  0.11387464
  -0.09645884  0.08728321 -0.2228011   0.41840286 -0.03209988 -0.09520686
   0.43445816 -0.33822426  0.54824361  0.42767014  0.27748817 -0.26714504
  -0.19714269 -0.1694849  -0.07918727  0.07770847 -0.17730111  0.48663486
  -0.3717114   0.15400271 -0.27073274  0.59363257  0.60266193  0.23567338
   0.09708581  0.11793258  0.27814139  0.13863772  0.2158496   0.49982783
   0.0937162  -0.19288915  0.27761388 -0.11991797]]"
970,PHP开发者最好的学习资源收集,以下内容翻译自：phpbuilder.com的PHP Developer Resources文章。资源全为英文资料，不过英文很多文章确实写的非常好！当今PHP是开发WEB应用程序最流行的脚本语言之一。由此可以发现internet.com上有非常多的好PHP资源。以下是我们的一些最好的PHP资源，包括一些有特色的教程和一些你可能不知道的离线资源。  internet.com的PHP版块  Developer.com的PHP版块  ScriptSearch.com的PHP版块  devx.com的PHP版块  htmlgoodies.com的PHP版块  databasejournal.com的PHP功能性文章  WebReference.com的PHP版块  phpbuilder.com的论坛  phpbuilder.com的文章列表  phpbuilder.com上的PHP手册  phpbuilder.com上的代码片段库  hotscripts.com  有特色的PHP教程  学习PHP  使用PHP处理文件  对PHP的介绍  怎样使用PHP和MYSQL实现搜索功能  PHP的类继承  怎样在SQL数据库中直接存储图片  PHP的类  使PHP作为一种Shell脚本语言  使用PHP发邮件的时候，怎样防止垃圾邮件  离线资源  PHP官方文档  Zend引擎  PHPDeveloper  PHP Weblog  确实有一些好资源，这些关键词可以作为搜索引擎搜索，另外internet.com的PHP模块的文章真的很不错。 其他的一些好资源 http://www.9lessons.info http://phpacademy.org,"['php', '开发者', '最好', '学习', '资源', '收集', '以下内容', '翻译', 'phpbuilder', 'com', 'php', 'developer', 'resources', '文章', '资源', '全为', '英文', '资料', '不过', '英文', '很多', '文章', '确实', '非常', '当今', 'php', '开发', 'web', '应用程序', '流行', '脚本语言', '之一', '由此', '可以', '发现', 'internet', 'com', '非常', 'php', '资源', '以下', '我们', '一些', '最好', 'php', '资源', '包括', '一些', '特色', '教程', '一些', '可能', '知道', '离线', '资源', 'internet', 'com', 'php', '版块', 'developer', 'com', 'php', '版块', 'scriptsearch', 'com', 'php', '版块', 'devx', 'com', 'php', '版块', 'htmlgoodies', 'com', 'php', '版块', 'databasejournal', 'com', 'php', '功能性', '文章', 'webreference', 'com', 'php', '版块', 'phpbuilder', 'com', '论坛', 'phpbuilder', 'com', '文章', '列表', 'phpbuilder', 'com', 'php', '手册', 'phpbuilder', 'com', '代码', '片段', 'hotscripts', 'com', '特色', 'php', '教程', '学习', 'php', '使用', 'php', '处理', '文件', 'php', '介绍', '怎样', '使用', 'php', 'mysql', '实现', '搜索', '功能', 'php', '继承', '怎样', 'sql', '数据库', '直接', '存储', '图片', 'php', 'php', '作为', '一种', 'shell', '脚本语言', '使用', 'php', '发邮件', '时候', '怎样', '防止', '垃圾邮件', '离线', '资源', 'php', '官方', '文档', 'zend', '引擎', 'phpdeveloper', 'php', 'weblog', '确实', '一些', '资源', '这些', '关键词', '可以', '作为', '搜索引擎', '搜索', '另外', 'internet', 'com', 'php', '模块', '文章', '真的', '不错', '其他', '一些', '资源', 'http', 'www.9', 'lessons', 'info', 'http', 'phpacademy', 'org']","[[-0.27953974 -0.1512188   0.2705112   0.36578812  0.17174098 -0.43563471
  -0.14536438  0.55402043 -0.04633359 -0.0621465  -0.12573189 -0.42532272
  -0.12520029  0.61233233  0.07828733 -0.16769967 -0.14351949  0.01953612
   0.00851976 -0.38494811  0.01954717  0.32239767 -0.10336568 -0.18359258
   0.0186416  -0.48587319 -0.37014467  0.10902356 -0.18913854 -0.07335337
   0.2234896   0.17073566  0.01239838 -0.11516819 -0.22142113  0.43339494
  -0.16489784 -0.25206725  0.07400275 -0.70628619 -0.05457013 -0.54794798
  -0.02136718 -0.05175981 -0.13975116 -0.25557654 -0.41704572  0.49086661
   0.02247133  0.3427887   0.07066884 -0.34754263  0.04496031 -0.29989985
   0.00714084  0.48860657  0.21460413 -0.09380363  0.15986273 -0.08722451
   0.15774561  0.23638604  0.01566729  0.08626407 -0.36559174  0.0369236
  -0.07093604  0.08229961 -0.19266624  0.47067245  0.05758218 -0.20102606
   0.47685857 -0.36858301  0.61369039  0.30672537  0.35931148 -0.24108031
  -0.19489086 -0.28478836 -0.15621825  0.01168463 -0.11795313  0.44887672
  -0.4442303   0.17757353 -0.31328371  0.56151358  0.59773926  0.20599373
   0.21057471  0.13985852  0.32744395  0.18299224  0.21375394  0.53449207
   0.06092929 -0.20855934  0.24855244 -0.0884377 ]]"
1001,对Django框架架构和Request/Response处理流程的分析,"一、 处理过程的核心概念如下图所示django的总览图，整体上把握以下django的组成：核心在于中间件middleware，django所有的请求、返回都由中间件来完成。中间件，就是处理HTTP的request和response的，类似插件，比如有Request中间件、view中间件、response中间件、exception中间件等，Middleware都需要在 ""project/settings.py"" 中 MIDDLEWARE_CLASSES 的定义。大致的程序流程图如下所示：首先，Middleware都需要在 ""project/settings.py"" 中 MIDDLEWARE_CLASSES 的定义， 一个HTTP请求，将被这里指定的中间件从头到尾处理一遍，暂且称这些需要挨个处理的中间件为处理链，如果链中某个处理器处理后没有返回response，就把请求传递给下一个处理器；如果链中某个处理器返回了response，直接跳出处理链由response中间件处理后返回给客户端，可以称之为短路处理。二、 中间件中的方法Django处理一个Request的过程是首先通过中间件，然后再通过默认的URL方式进行的。我们可以在Middleware这个地方把所有Request拦截住，用我们自己的方式完成处理以后直接返回Response。因此了解中间件的构成是非常必要的。Initializer: __init__(self)出于性能的考虑，每个已启用的中间件在每个服务器进程中只初始化一次。也就是说 __init__() 仅在服务进程启动的时候调用，而在针对单个request处理时并不执行。对一个middleware而言，定义 __init__() 方法的通常原因是检查自身的必要性。如果 __init__() 抛出异常 django.core.exceptions.MiddlewareNotUsed ,则Django将从middleware栈中移出该middleware。在中间件中定义 __init__() 方法时，除了标准的 self 参数之外，不应定义任何其它参数。Request预处理函数: process_request(self, request)这个方法的调用时机在Django接收到request之后，但仍未解析URL以确定应当运行的view之前。Django向它传入相应的 HttpRequest 对象，以便在方法中修改。process_request() 应当返回 None 或 HttpResponse 对象.如果返回 None , Django将继续处理这个request，执行后续的中间件， 然后调用相应的view.如果返回 HttpResponse 对象，Django 将不再执行任何其它的中间件(无视其种类)以及相应的view。 Django将立即返回该 HttpResponse .View预处理函数: process_view(self, request, callback, callback_args, callback_kwargs)这个方法的调用时机在Django执行完request预处理函数并确定待执行的view之后，但在view函数实际执行之前。requestHttpRequest 对象。callback Django将调用的处理request的python函数. 这是实际的函数对象本身, 而不是字符串表述的函数名。args将传入view的位置参数列表，但不包括 request 参数(它通常是传入view的第一个参数)kwargs将传入view的关键字参数字典.如同 process_request() , process_view() 应当返回 None 或 HttpResponse 对象。 如果返回 None , Django将继续处理这个 request ，执行后续的中间件， 然后调用相应的view如果返回 HttpResponse 对象，Django 将不再执行 任何 其它的中间件(不论种类)以及相应的view。Django将立即返回Response后处理函数: process_response(self, request, response)这个方法的调用时机在Django执行view函数并生成response之后。该处理器能修改response的内容；一个常见的用途是内容压缩，如gzip所请求的HTML页面。这个方法的参数相当直观: request 是request对象，而 response 则是从view中返回的response对象。process_response() 必须 返回 HttpResponse 对象. 这个response对象可以是传入函数的那一个原始对象(通常已被修改)，也可以是全新生成的。Exception后处理函数: process_exception(self, request, exception)这个方法只有在request处理过程中出了问题并且view函数抛出了一个未捕获的异常时才会被调用。这个钩子可以用来发送错误通知，将现场相关信息输出到日志文件, 或者甚至尝试从错误中自动恢复。这个函数的参数除了一贯的 request 对象之外，还包括view函数抛出的实际的异常对象 exception 。process_exception() 应当返回 None 或 HttpResponse 对象. 如果返回 None , Django将用框架内置的异常处理机制继续处理相应request。如果返回 HttpResponse 对象, Django 将使用该response对象，而短路框架内置的异常处理机制以下几章会详细介绍该机制。三、 Django目录结构conf主要有两个作用：1) 处理全局配置, 比如数据库、加载的应用、 MiddleWare等 2) 处理urls配置, 就是url与view的映射关系。contrib (贡献)由Django的开发者贡献的功能模块，不过既然都已经随版本发布， 就表示是官方的。coreDjango的核心处理库，包括url分析、处理请求、缓存等，其中处理请求是核心了，比如处理fastcgi就是由wsgi.py处理。db顾名思义，处理与数据库相关的，就是ORM。dispatch (分派，派遣)其实这不是Django原创，是pydispatch库，主要处 理消费者-工作者模式。forms && newforms && oldforms处理html的表单，不用多介绍。middleware中间件，就是处理HTTP的request和response的，类似插件。比 如默认的common中间件的一个功能：当一个页面没有找对对应的 pattern时， 会自定加上‘/’重新处理。比如访问/blog时，而定义的pattern是‘^blog/$’， 所以找不到对应的pattern，会自动再用/blog/查找，当然前提是 APPEND_SLASH=True。templateDjango的模板templatetags处理Application的tag的wrapper，就是将INSTALLED_APPS中 所有的templatetags目录添加到 django.templatetags目录中，则当使用 {{load blog}}记载tag时，就可以使用 import django.templatetags.blog 方式加载了。不过这有一个问题，如果其他Application目录中也有blog.py， 这会加载第一个出现blog.py的tag。其实在 Django中，有许多需要处理重名 的地方，比如template，需要格外小心，这个后续在介绍。utils公共库，很多公用的类都在放在这里。views最基本的view方法。四、 Django 术语在应用 Django 的时候，我们经常听到一些术语：Project指一个完整的Web服务，一般由多个模块组成。Application可以理解为模块，比如用户管理、博客管理等，包含了数据的组成和数据的显示，Applicaiton都需要在 ""project/settings.py"" 中 INSTALLED_APPS 的定义。Middleware就是处理request和response的插件, Middleware都需要在 ""project/settings.py"" 中 MIDDLEWARE_CLASSES 的定义。Loader模板加载器, 其实就是为了读取 Template 文件的类，默认的有通过文件系统加载和在 ""Application/templates"" 目录中加载，Loader都需要在 ""project/settings.py"" 中 TEMPLATE_LOADERS 的定义。五、 处理流程其实和其他Web框架一样，HTTP处理的流程大致相同，Django处理一个Request的过程是首先通过中间件，然后再通过默认的URL方式进行的。我们可以在Middleware这个地方把所有Request拦截住，用我们自己的方式完成处理以后直接返回Response。1. 加载配置Django的配置都在 ""Project/settings.py"" 中定义，可以是Django的配置，也 可以是自定义的配置，并且都通过 django.conf.settings 访问，非常方便。2. 启动最核心动作的是通过 django.core.management.commands.runfcgi 的 Command 来启动，它运行 django.core.servers.fastcgi 中的 runfastcgi ， runfastcgi 使用了 flup 的 WSGIServer 来启动 fastcgi 。而 WSGIServer 中携带了 django.core.handlers.wsgi 的 WSGIHandler 类的一个实例，通过 WSGIHandler来处理由Web服务器(比如Apache，Lighttpd等)传过来的请求，此 时才是真正进入Django的世界。3. 处理 Request当有HTTP请求来时， WSGIHandler 就开始工作了,它从 BaseHandler 继承而来。 WSGIHandler 为每个请求创建一个 WSGIRequest 实例，而 WSGIRequest 是从 http.HttpRequest 继承而来。接下来就开始创建 Response 了.4. 创建ResponseBaseHandler 的 get_response 方法就是根据 request 创建 response ， 而 具体生成 response 的动作就是执行 urls.py 中对应的view函数了，这也是 Django可以处理“友好URL”的关键步骤，每个这样的函数都要返回一个 Response 实例。此时一般的做法是通过 loader 加载 template 并生成页面内 容，其中重要的就是通过 ORM 技术从数据库中取出数据，并渲染到 Template 中，从而生成具体的页面了5. 处理ResponseDjango 返回 Response 给 flup ， flup 就取出 Response 的内容返回给 Web 服务器，由后者返回给浏览器。总之， Django 在 fastcgi 中主要做了两件事：处理 Request 和创建 Response ， 而它们对应的核心就是“urls分析”、“模板技术”和“ORM技术”如图所示，一个HTTP请求，首先被转化成一个HttpRequest对象，然后该对象被传递给Request中间件处理，如果该中间件返回了Response，则直接传递给Response中间件做收尾处理。否则的话Request中间件将访问URL配置，确定哪个view来处理，在确定了哪个view要执行，但是还没有执行该view的时候，系统会把request传递给View中间件处理器进行处理，如果该中间件返回了Response，那么该Response直接被传递给Response中间件进行后续处理，否则将执行确定的View函数处理并返回Response，在这个过程中如果引发了异常并抛出，会被Exception中间件处理器进行处理。六、 详细全流程一个 Request 到达了！首先发生的是一些和 Django有关(前期准备）的其他事情，分别是：1. 如果是 Apache/mod_python 提供服务，request 由 mod_python 创建的 django.core.handlers.modpython.ModPythonHandler 实例传递给 Django。2. 如果是其他服务器，则必须兼容 WSGI，这样，服务器将创建一个 django.core.handlers.wsgi.WsgiHandler 实例。这两个类都继承自 django.core.handlers.base.BaseHandler，它包含对任何类 型的 request 来说都需要的公共代码。有一个处理器(Handler)了当上面其中一个处理器实例化后，紧接着发生了一系列的事情：1. 这个处理器（handler）导入你的 Django 配置文件。2. 这个处理器导入 Django 的自定义异常类。3. 这个处理器调用它自己的 load_middleware 方法，加载所有列在 MIDDLEWARE_CLASSES 中的 middleware 类并且内省它们。最后一条有点复杂，我们仔细瞧瞧。一 个 middleware 类可以渗入处理过程的四个阶段：request，view，response 和 exception。要做到这一点，只需要定义指定的、恰当的方 法：process_request，process_view， process_response 和 process_exception。middleware 可以定义其中任何一个或所有这些方法，这取 决于你想要它提供什么样的功能。当处理器内省 middleware 时，它查找上述名字的方法，并建立四个列表作为处理器的实例变量：1. _request_middleware 是一个保存 process_request 方法的列表（在每一 种情况下，它们是真正的方法，可以直接调用），这些方法来自于任一个定 义了它们的 middleware 类。1. _view_middleware 是一个保存 process_view 方法的列表，这些方法来自 于任一个定义了它们的 middleware 类。2. _response_middleware 是一个保存 process_response 方法的列表，这些 方法来自于任一个定义了它们的 middleware 类。3. _exception_middleware 是一个保存 process_exception 方法的列表，这 些方法来自于任一个定义了它们的 middleware 类。绿灯：现在开始现在处理器已经准备好真正开始处理了，因此它给调度程序发送一个信号 request_started（Django 内部的调度程序允许各种不同的组件声明它们正在干 什么，并可以写一些代码监听特定的事件。关于这一点目前还没有官方的文档， 但在 wiki上有一些注释。）。接下来它实例化一个 django.http.HttpRequest 的子类。根据不同的处理器，可能是 django.core.handlers.modpython.ModPythonRequest 的一个实例，也可能是 django.core.handlers.wsgi.WSGIRequest 的一个实例。需要两个不同的类是因 为 mod_python 和 WSGI APIs 以不同的格式传入 request 信息，这个信息需要 解析为 Django 能够处理的一个单独的标准格式。一旦一个 HttpRequest 或者类似的东西存在了，处理器就调用它自己的 get_response 方法，传入这个 HttpRequest 作为唯一的参数。这里就是几乎所 有真正的活动发生的地方。Middleware，第一回合get_response 做的第一件事就是遍历处理器的 _request_middleware 实例变量 并调用其中的每一个方法，传入 HttpRequest 的实例作为参数。for middleware_method in self._request_middleware:response = middleware_method(request)if response:break这些方法可以选 择短路剩下的处理并立即让 get_response 返回，通过返回自身的一个值（如果 它们这样做，返回值必须是 django.http.HttpResponse 的一个实例，后面会讨 论到）。如果其中之一这样做了，我们会立即回到主处理器代码，get_response 不会等着看其它 middleware 类想要做什么，它直接返回，然后处理器进入 response 阶段。然而，更一般的情况是，这里应用的 middleware 方法简单地做一些处理并决定 是否增加，删除或补充 request 的属性。关于解析假设没有一个作用于 request 的 middleware 直接返回 response，处理器下一 步会尝试解析请求的 URL。它在配置文件中寻找一个叫做 ROOT_URLCONF 的配 置，用这个配置加上根 URL /，作为参数来创建 django.core.urlresolvers.RegexURLResolver 的一个实例，然后调用它的 resolve 方法来解析请求的 URL 路径。URL resolver 遵循一个相当简单的模式。对于在 URL 配置文件中根据 ROOT_URLCONF 的配置产生的每一个在 urlpatterns 列表中的条目，它会检查请 求的 URL 路径是否与这个条目的正则表达式相匹配，如果是的话，有两种选择：1. 如果这个条目有一个可以调用的 include，resolver 截取匹配的 URL，转 到 include 指定的 URL 配置文件并开始遍历其中 urlpatterns 列表中的 每一个条目。根据你 URL 的深度和模块性，这可能重复好几次。2. 否则，resolver 返回三个条目：匹配的条目指定的 view function；一个 从 URL 得到的未命名匹配组（被用来作为 view 的位置参数）；一个关键 字参数字典，它由从 URL 得到的任意命名匹配组和从 URLConf 中得到的任 意其它关键字参数组合而成。注意这一过程会在匹配到第一个指定了 view 的条目时停止，因此最好让你的 URL 配置从复杂的正则过渡到简单的正则，这样能确保 resolver 不会首先匹配 到简单的那一个而返回错误的 view function。如果没有找到匹配的条目，resolver 会产生 django.core.urlresolvers.Resolver404 异常，它是 django.http.Http404 例 外的子类。后面我们会知道它是如何处理的。Middleware，第二回合一旦知道了所需的 view function 和相关的参数，处理器就会查看它的 _view_middleware 列表，并调用其中的方法，传入 HttpRequst，view function，针对这个 view 的位置参数列表和关键字参数字典。# Apply view middlewarefor middleware_method in self._view_middleware:response = middleware_method(request, callback, callback_args, callback_kwargs)if response:break还有，middleware 有可能介入这一阶段并强迫处理器立即返回。进入 View如果处理过程这时候还在继续的话，处理器会调用 view function。Django 中的 Views 不很严格因为它只需要满足几个条件：² 必须可以被调用。² 必须接受 django.http.HttpRequest 的实例作为第一位值参数。² 必须能产生一个异常或返回 django.http.HttpResponse 的一个实例。除了这些，你就可以天马行空了。尽管如此，一般来说，views 会使用 Django 的 database API 来创建，检索，更新和删除数据库的某些东西，还会加载并渲 染一个模板来呈现一些东西给最终用户。模板Django 的模板系统有两个部分：一部分是给设计师使用的混入少量其它东西的 HTML，另一部分是给程序员使用纯 Python。从一个 HTML 作者的角度，Django 的模板系统非常简单，需要知道的仅有三个结构：² 变量引用。在模板中是这样： {{ foo }}。² 模板过滤。在上面的例子中使用过滤竖线是这样：{{ foo|bar }}。通常这 用来格式化输出（比如：运行 Textile，格式化日期等等）。² 模板标签。是这样：{% baz %}。这是模板的“逻辑”实现的地方，你可以 {% if foo %}，{% for bar in foo %}，等等，if 和 for 都是模板标签。变量引用以一种非常简单的方式工作。如果你只是要打印变量，只要 {{ foo }}，模板系统就会输出它。这里唯一的复杂情况是 {{ foo.bar }}，这时模板系 统按顺序尝试几件事：1. 首先它尝试一个字典方式的查找，看看 foo['bar'] 是否存在。如果存在， 则它的值被输出，这个过程也随之结束。2. 如果字典查找失败，模板系统尝试属性查找，看看 foo.bar 是否存在。同 时它还检查这个属性是否可以被调用，如果可以，调用之。3. 如果属性查找失败，模板系统尝试把它作为列表索引进行查找。如果所有这些都失败了，模板系统输出配置 TEMPLATE_STRING_IF_INVALID 的值，默认是空字符串。模板过滤就是简单的 Python functions，它接受一个值和一个参数，返回一个新的值。比如，date 过滤用一个 Python datetime 对象作为它的值，一个标准的 strftime 格式化字符串作为它的参数，返回对 datetime 对象应用了格式化字符 串之后的结果。模板标签用在事情有一点点复杂的地方，它是你了解 Django 的模板系统是如何 真正工作的地方。Django 模板的结构在内部，一个 Django 模板体现为一个 “nodes” 集合，它们都是从基本的 django.template.Node 类继承而来。Nodes 可以做各种处理，但有一个共同点： 每一个 Node 必须有一个叫做 render 的方法，它接受的第二个参数（第一个参 数，显然是 Node 实例）是 django.template.Context 的一个实例，这是一个类 似于字典的对象，包含所有模板可以获得的变量。Node 的 render 方法必须返回 一个字符串，但如果 Node 的工作不是输出（比如，它是要通过增加，删除或修 改传入的 Context 实例变量中的变量来修改模板上下文），可以返回空字符串。Django 包含许多 Node 的子类来提供有用的功能。比如，每个内置的模板标签都 被一个 Node 的子类处理（比如，IfNode 实现了 if 标签，ForNode 实现了 for 标签，等等）。所有内置标签可以在 django.template.defaulttags 找到。实际上，上面介绍的所有模板结构都是某种形式的 Nodes，纯文本也不异常。变 量查找由 VariableNode 处理，出于自然，过滤也应用在 VariableNode 上，标 签是各种类型的 Nodes，纯文本是一个 TextNode。一般来说，一个 view 渲染一个模板要经过下面的步骤，依次是：1. 加载需要渲染的模板。这是由 django.template.loader.get_template 完 成的，它能利用这许多方法中的任意一个来定位需要的模板文件。 get_template 函数返回一个 django.template.Template 实例，其中包含 经过解析的模板和用到的方法。2. 实例化一个 Context 用来渲染模板。如果用的是 Context 的子类 django.template.RequestContext，那么附带的上下文处理函数就会自动添 加在 view 中没有定义的变量。Context 的构建器方法用一个键/值对的字 典（对于模板，它将变为名/值变量）作为它唯一的参数，RequestContext 则用 HttpRequest 的一个实例和一个字典。3. 调用 Template 实例的 render 方法，Context 对象作为第一个位置参数。Template 的 render 方法的返回值是一个字符串，它由 Template 中所有 Nodes 的 render 方法返回的值连接而成，调用顺序为它们出现在 Template 中 的顺序。关于 Response，一点点一旦一个模板完成渲染，或者产生了其它某些合适的输出，view 就会负责产生一 个 django.http.HttpResponse 实例，它的构建器接受两个可选的参数：1. 一个作为 response 主体的字符串（它应该是第一位置参数，或者是关键字 参数 content）。大部分时间，这将作为渲染一个模板的输出，但不是必须 这样，在这里你可以传入任何有效的 Python 字符串。2. 作 为 response 的 Content-Type header 的值（它应该是第二位置参数， 或者是关键字参数 mine_type）。如果没有提供这个参数，Django 将会使 用配置中 DEFAULT_MIME_TYPE 的值和 DEFAULT_CHARSET 的值，如果你没有 在 Django 的全局配置文件中更改它们的话，分别是 “text/html” 和 “utf-8”。Middleware，第三回合：异常如果 view 函数，或者其中的什么东西，发生了异常，那么 get_response（我知 道我们已经花了些时间深入 views 和 templates，但是一旦 view 返回或产生异常，我们仍将重拾处理器中间的 get_response 方法）将遍历它的 _exception_middleware 实例变量并调用那里的每个方法，传入 HttpResponse 和这个 exception 作为参数。如果顺利，这些方法中的一个会实例化一个 HttpResponse 并返回它。仍然没有响应？这时候有可能还是没有得到一个 HttpResponse，这可能有几个原因：1. view 可能没有返回值。2. view 可能产生了异常但没有一个 middleware 能处理它。3. 一个 middleware 方法试图处理一个异常时自己又产生了一个新的异常。这时候，get_response 会回到自己的异常处理机制中，它们有几个层次：1. 如果 exception 是 Http404 并且 DEBUG 设置为 True，get_response 将 执行 view django.views.debug.technical_404_response，传入 HttpRequest 和 exception 作为参数。这个 view 会展示 URL resolver 试图匹配的模式信息。2. 如果 DEBUG 是 False 并且异常是 Http404，get_response 会调用 URL resolver 的 resolve_404 方法。这个方法查看 URL 配置以判断哪一个 view 被指定用来处理 404 错误。默认是 django.views.defaults.page_not_found，但可以在 URL 配置中给 handler404 变量赋值来更改。3. 对于任何其它类型的异常，如果 DEBUG 设置为 True，get_response 将执 行 view django.views.debug.technical_500_response，传入 HttpRequest 和 exception 作为参数。这个 view 提供了关于异常的详细 信息，包括 traceback，每一个层次 stack 中的本地变量，HttpRequest 对象的详细描述和所有无效配置的列表。4. 如果 DEBUG 是 False，get_response 会调用 URL resolver 的 resolve_500 方法，它和 resolve_404 方法非常相似，这时默认的 view 是 django.views.defaults.server_error，但可以在 URL 配置中给 handler500 变量赋值来更改。此外，对于除了 django.http.Http404 或 Python 内置的 SystemExit 之外的任 何异常，处理器会给调度者发送信号 got_request_exception，在返回之前，构 建一个关于异常的描述，把它发送给列在 Django 配置文件的 ADMINS 配置中的 每一个人。Middleware，最后回合现在，无论 get_response 在哪一个层次上发生错误，它都会返回一个 HttpResponse 实例，因此我们回到处理器的主要部分。一旦它获得一个 HttpResponse 它做的第一件事就是遍历它的 _response_middleware 实例变量并 应用那里的方法，传入 HttpRequest 和 HttpResponse 作为参数。finally:# Reset URLconf for this thread on the way out for complete# isolation of request.urlconfurlresolvers.set_urlconf(None)try:# Apply response middleware, regardless of the responsefor middleware_method in self._response_middleware:response = middleware_method(request, response)response = self.apply_response_fixes(request, response)注意对于任何想改变点什么的 middleware 来说，这是它们的最后机会。The check is in the mail是该结束的时候了。一旦 middleware 完成了最后环节，处理器将给调度者发送 信号 request_finished，对与想在当前的 request 中执行的任何东西来说，这 绝对是最后的调用。监听这个信号的处理者会清空并释放任何使用中的资源。比 如，Django 的 request_finished 监听者会关闭所有数据库连接。这件事发生以后，处理器会构建一个合适的返回值送返给实例化它的任何东西 （现在，是一个恰当的 mod_python response 或者一个 WSGI 兼容的 response，这取决于处理器）并返回。呼呼结束了，从开始到结束，这就是 Django 如何处理一个 request。","['django', '框架', '架构', 'request', 'response', '处理', '流程', '分析', '处理过程', '核心', '概念', '如下', '所示', 'django', '总览', '整体', '把握', '以下', 'django', '组成', '核心', '在于', '中间件', 'middleware', 'django', '所有', '请求', '返回', '中间件', '完成', '中间件', '就是', '处理', 'http', 'request', 'response', '类似', '插件', '比如', 'request', '中间件', 'view', '中间件', 'response', '中间件', 'exception', '中间件', 'middleware', '需要', 'project', 'settings', 'py', 'middleware', 'classes', '定义', '大致', '程序', '流程图', '如下', '所示', '首先', 'middleware', '需要', 'project', 'settings', 'py', 'middleware', 'classes', '定义', '一个', 'http', '请求', '这里', '指定', '中间件', '从头到尾', '处理', '一遍', '暂且', '这些', '需要', '挨个', '处理', '中间件', '处理', '如果', '链中', '某个', '处理器', '处理', '没有', '返回', 'response', '请求', '传递', '一个', '处理器', '如果', '链中', '某个', '处理器', '返回', 'response', '直接', '跳出', '处理', 'response', '中间件', '处理', '返回', '客户端', '可以', '称之为', '短路', '处理', '中间件', '方法', 'django', '处理', '一个', 'request', '过程', '首先', '通过', '中间件', '然后', '通过', '默认', 'url', '方式', '进行', '我们', '可以', 'middleware', '这个', '地方', '所有', 'request', '拦截', '我们', '自己', '方式', '完成', '处理', '以后', '直接', '返回', 'response', '因此', '了解', '中间件', '构成', '非常', '必要', 'initializer', '__', 'init', '__', 'self', '出于', '性能', '考虑', '每个', '启用', '中间件', '每个', '服务器', '进程', '初始化', '一次', '也就是说', '__', 'init', '__', '服务', '进程', '启动', '时候', '调用', '针对', '单个', 'request', '处理', '执行', '一个', 'middleware', '而言', '定义', '__', 'init', '__', '方法', '通常', '原因', '检查', '自身', '必要性', '如果', '__', 'init', '__', '抛出', '异常', 'django', 'core', 'exceptions', 'middlewarenotused', 'django', 'middleware', '栈中', '移出', 'middleware', '中间件', '定义', '__', 'init', '__', '方法', '除了', '标准', 'self', '参数', '之外', '定义', '任何', '其它', '参数', 'request', '预处理', '函数', 'process', 'request', 'self', 'request', '这个', '方法', '调用', '时机', 'django', '接收', 'request', '之后', '解析', 'url', '确定', '应当', '运行', 'view', '之前', 'django', '传入', '相应', 'httprequest', '对象', '以便', '方法', '修改', 'process', 'request', '应当', '返回', 'none', 'httpresponse', '对象', '如果', '返回', 'none', 'django', '继续', '处理', '这个', 'request', '执行', '后续', '中间件', '然后', '调用', '相应', 'view', '如果', '返回', 'httpresponse', '对象', 'django', '不再', '执行', '任何', '其它', '中间件', '无视', '种类', '以及', '相应', 'view', 'django', '立即', '返回', 'httpresponse', 'view', '预处理', '函数', 'process', 'view', 'self', 'request', 'callback', 'callback', 'args', 'callback', 'kwargs', '这个', '方法', '调用', '时机', 'django', '执行', 'request', '预处理', '函数', '确定', '执行', 'view', '之后', 'view', '函数', '实际', '执行', '之前', 'requesthttprequest', '对象', 'callback', 'django', '调用', '处理', 'request', 'python', '函数', '这是', '实际', '函数', '对象', '本身', '不是', '字符串', '表述', '函数', 'args', '传入', 'view', '位置', '参数', '列表', '包括', 'request', '参数', '通常', '传入', 'view', '第一个', '参数', 'kwargs', '传入', 'view', '关键字', '参数', '字典', '如同', 'process', 'request', 'process', 'view', '应当', '返回', 'none', 'httpresponse', '对象', '如果', '返回', 'none', 'django', '继续', '处理', '这个', 'request', '执行', '后续', '中间件', '然后', '调用', '相应', 'view', '如果', '返回', 'httpresponse', '对象', 'django', '不再', '执行', '任何', '其它', '中间件', '不论', '种类', '以及', '相应', 'view', 'django', '立即', '返回', 'response', '处理函数', 'process', 'response', 'self', 'request', 'response', '这个', '方法', '调用', '时机', 'django', '执行', 'view', '函数', '生成', 'response', '之后', '处理器', '修改', 'response', '内容', '一个', '常见', '用途', '内容', '压缩', 'gzip', '请求', 'html', '页面', '这个', '方法', '参数', '相当', '直观', 'request', 'request', '对象', 'response', '是从', 'view', '返回', 'response', '对象', 'process', 'response', '必须', '返回', 'httpresponse', '对象', '这个', 'response', '对象', '可以', '传入', '函数', '一个', '原始', '对象', '通常', '修改', '可以', '全新', '生成', 'exception', '处理函数', 'process', 'exception', 'self', 'request', 'exception', '这个', '方法', '只有', 'request', '处理过程', '中出', '问题', '并且', 'view', '函数', '抛出', '一个', '捕获', '异常', '时才', '调用', '这个', '钩子', '可以', '用来', '发送', '错误', '通知', '现场', '相关', '信息', '输出', '日志', '文件', '或者', '甚至', '尝试', '错误', '自动', '恢复', '这个', '函数', '参数', '除了', '一贯', 'request', '对象', '之外', '包括', 'view', '函数', '抛出', '实际', '异常', '对象', 'exception', 'process', 'exception', '应当', '返回', 'none', 'httpresponse', '对象', '如果', '返回', 'none', 'django', '框架', '内置', '异常', '处理', '机制', '继续', '处理', '相应', 'request', '如果', '返回', 'httpresponse', '对象', 'django', '使用', 'response', '对象', '短路', '框架', '内置', '异常', '处理', '机制', '以下', '几章', '详细', '介绍', '机制', 'django', '目录', '结构', 'conf', '主要', '两个', '作用', '处理', '全局', '配置', '比如', '数据库', '加载', '应用', 'middleware', '处理', 'urls', '配置', '就是', 'url', 'view', '映射', '关系', 'contrib', '贡献', 'django', '开发者', '贡献', '功能模块', '不过', '既然', '已经', '版本', '发布', '表示', '官方', 'coredjango', '核心', '处理', '包括', 'url', '分析', '处理', '请求', '缓存', '其中', '处理', '请求', '核心', '比如', '处理', 'fastcgi', '就是', 'wsgi', 'py', '处理', 'db', '顾名思义', '处理', '数据库', '相关', '就是', 'orm', 'dispatch', '分派', '派遣', '其实', '不是', 'django', '原创', 'pydispatch', '主要', '消费者', '工作者', '模式', 'forms', '&&', 'newforms', '&&', 'oldforms', '处理', 'html', '表单', '不用', '介绍', 'middleware', '中间件', '就是', '处理', 'http', 'request', 'response', '类似', '插件', '默认', 'common', '中间件', '一个', '功能', '一个', '页面', '没有', '对应', 'pattern', '自定', '加上', '重新处理', '比如', '访问', 'blog', '定义', 'pattern', 'blog', '所以', '不到', '对应', 'pattern', '自动', '再用', 'blog', '查找', '当然', '前提', 'append', 'slash', 'true', 'templatedjango', '模板', 'templatetags', '处理', 'application', 'tag', 'wrapper', '就是', 'installed', 'apps', '所有', 'templatetags', '目录', '添加', 'django', 'templatetags', '目录', '使用', 'load', 'blog', '记载', 'tag', '可以', '使用', 'import', 'django', 'templatetags', 'blog', '方式', '加载', '不过', '这有', '一个', '问题', '如果', '其他', 'application', '目录', 'blog', 'py', '这会', '加载', '第一个', '出现', 'blog', 'py', 'tag', '其实', 'django', '许多', '需要', '处理', '重名', '地方', '比如', 'template', '需要', '格外', '小心', '这个', '后续', '介绍', 'utils', '公共', '很多', '公用', '放在', '这里', 'views', '基本', 'view', '方法', 'django', '术语', '应用', 'django', '时候', '我们', '经常', '听到', '一些', '术语', 'project', '一个', '完整', 'web', '服务', '一般', '多个', '模块', '组成', 'application', '可以', '理解', '模块', '比如', '用户', '管理', '博客', '管理', '包含', '数据', '组成', '数据', '显示', 'applicaiton', '需要', 'project', 'settings', 'py', 'installed', 'apps', '定义', 'middleware', '就是', '处理', 'request', 'response', '插件', 'middleware', '需要', 'project', 'settings', 'py', 'middleware', 'classes', '定义', 'loader', '模板', '加载', '其实', '就是', '为了', '读取', 'template', '文件', '默认', '通过', '文件系统', '加载', 'application', 'templates', '目录', '加载', 'loader', '需要', 'project', 'settings', 'py', 'template', 'loaders', '定义', '处理', '流程', '其实', '其他', 'web', '框架', '一样', 'http', '处理', '流程', '大致相同', 'django', '处理', '一个', 'request', '过程', '首先', '通过', '中间件', '然后', '通过', '默认', 'url', '方式', '进行', '我们', '可以', 'middleware', '这个', '地方', '所有', 'request', '拦截', '我们', '自己', '方式', '完成', '处理', '以后', '直接', '返回', 'response', '加载', '配置', 'django', '配置', 'project', 'settings', 'py', '定义', '可以', 'django', '配置', '可以', '自定义', '配置', '并且', '通过', 'django', 'conf', 'settings', '访问', '非常', '方便', '启动', '核心', '动作', '通过', 'django', 'core', 'management', 'commands', 'runfcgi', 'command', '启动', '运行', 'django', 'core', 'servers', 'fastcgi', 'runfastcgi', 'runfastcgi', '使用', 'flup', 'wsgiserver', '启动', 'fastcgi', 'wsgiserver', '携带', 'django', 'core', 'handlers', 'wsgi', 'wsgihandler', '一个', '实例', '通过', 'wsgihandler', '处理', 'web', '服务器', '比如', 'apache', 'lighttpd', '传过来', '请求', '时才', '真正', '进入', 'django', '世界', '处理', 'request', '当有', 'http', '请求', '来时', 'wsgihandler', '开始', '工作', 'basehandler', '继承', 'wsgihandler', '每个', '请求', '创建', '一个', 'wsgirequest', '实例', 'wsgirequest', '是从', 'http', 'httprequest', '继承', '接下来', '开始', '创建', 'response', '创建', 'responsebasehandler', 'get', 'response', '方法', '就是', '根据', 'request', '创建', 'response', '具体', '生成', 'response', '动作', '就是', '执行', 'urls', 'py', '对应', 'view', '函数', 'django', '可以', '处理', '友好', 'url', '关键步骤', '每个', '这样', '函数', '返回', '一个', 'response', '实例', '此时', '一般', '做法', '通过', 'loader', '加载', 'template', '生成', '页面', '其中', '重要', '就是', '通过', 'orm', '技术', '数据库', '取出', '数据', '渲染', 'template', '从而', '生成', '具体', '页面', '处理', 'responsedjango', '返回', 'response', 'flup', 'flup', '取出', 'response', '内容', '返回', 'web', '服务器', '后者', '返回', '浏览器', '总之', 'django', 'fastcgi', '主要', '两件事', '处理', 'request', '创建', 'response', '它们', '对应', '核心', '就是', 'urls', '分析', '模板', '技术', 'orm', '技术', '如图所示', '一个', 'http', '请求', '首先', '转化成', '一个', 'httprequest', '对象', '然后', '对象', '传递', 'request', '中间件', '处理', '如果', '中间件', '返回', 'response', '直接', '传递', 'response', '中间件', '收尾', '处理', '否则', '的话', 'request', '中间件', '访问', 'url', '配置', '确定', '哪个', 'view', '处理', '确定', '哪个', 'view', '执行', '但是', '没有', '执行', 'view', '时候', '系统', 'request', '传递', 'view', '中间件', '处理器', '进行', '处理', '如果', '中间件', '返回', 'response', '那么', 'response', '直接', '传递', 'response', '中间件', '进行', '后续', '处理', '否则', '执行', '确定', 'view', '函数', '处理', '返回', 'response', '这个', '过程', '如果', '引发', '异常', '抛出', 'exception', '中间件', '处理器', '进行', '处理', '详细', '流程', '一个', 'request', '到达', '首先', '发生', '一些', 'django', '有关', '前期', '准备', '其他', '事情', '分别', '如果', 'apache', 'mod', 'python', '提供', '服务', 'request', 'mod', 'python', '创建', 'django', 'core', 'handlers', 'modpython', 'modpythonhandler', '实例', '传递', 'django', '如果', '其他', '服务器', '必须', '兼容', 'wsgi', '这样', '服务器', '创建', '一个', 'django', 'core', 'handlers', 'wsgi', 'wsgihandler', '实例', '两个', '继承', 'django', 'core', 'handlers', 'base', 'basehandler', '包含', '任何', 'request', '来说', '需要', '公共', '代码', '一个', '处理器', 'handler', '上面', '其中', '一个', '处理器', '实例', '化后', '紧接着', '发生', '一系列', '事情', '这个', '处理器', 'handler', '导入', 'django', '配置文件', '这个', '处理器', '导入', 'django', '自定义', '异常', '这个', '处理器', '调用', '自己', 'load', 'middleware', '方法', '加载', '所有', 'middleware', 'classes', 'middleware', '并且', '内省', '它们', '最后', '一条', '有点', '复杂', '我们', '仔细', '瞧瞧', 'middleware', '可以', '渗入', '处理过程', '四个', '阶段', 'request', 'view', 'response', 'exception', '做到', '一点', '需要', '定义', '指定', '恰当', 'process', 'request', 'process', 'view', 'process', 'response', 'process', 'exception', 'middleware', '可以', '定义', '其中', '任何', '一个', '所有', '这些', '方法', '这取', '决于', '想要', '提供', '什么样', '功能', '处理器', '内省', 'middleware', '查找', '上述', '名字', '方法', '建立', '四个', '列表', '作为', '处理器', '实例', '变量', 'request', 'middleware', '一个', '保存', 'process', 'request', '方法', '列表', '情况', '它们', '真正', '方法', '可以', '直接', '调用', '这些', '方法', '来自', '于任', '一个', '它们', 'middleware', 'view', 'middleware', '一个', '保存', 'process', 'view', '方法', '列表', '这些', '方法', '来自', '于任', '一个', '定义', '它们', 'middleware', 'response', 'middleware', '一个', '保存', 'process', 'response', '方法', '列表', '这些', '方法', '来自', '于任', '一个', '定义', '它们', 'middleware', 'exception', 'middleware', '一个', '保存', 'process', 'exception', '方法', '列表', '方法', '来自', '于任', '一个', '定义', '它们', 'middleware', '绿灯', '现在', '开始', '现在', '处理器', '已经', '准备', '真正', '开始', '处理', '因此', '调度', '程序', '发送', '一个', '信号', 'request', 'started', 'django', '内部', '调度', '程序', '允许', '各种', '不同', '组件', '声明', '它们', '正在', '什么', '可以', '一些', '代码', '监听', '特定', '事件', '关于', '一点', '目前', '没有', '官方', '文档', 'wiki', '一些', '注释', '接下来', '实例', '一个', 'django', 'http', 'httprequest', '子类', '根据', '不同', '处理器', '可能', 'django', 'core', 'handlers', 'modpython', 'modpythonrequest', '一个', '实例', '可能', 'django', 'core', 'handlers', 'wsgi', 'wsgirequest', '一个', '实例', '需要', '两个', '不同', 'mod', 'python', 'wsgi', 'apis', '不同', '格式', '传入', 'request', '信息', '这个', '信息', '需要', '解析', 'django', '能够', '处理', '一个', '单独', '标准', '格式', '一旦', '一个', 'httprequest', '或者', '类似', '东西', '存在', '处理器', '调用', '自己', 'get', 'response', '方法', '传入', '这个', 'httprequest', '作为', '唯一', '参数', '这里', '就是', '几乎', '真正', '活动', '发生', '地方', 'middleware', '第一', '回合', 'get', 'response', '第一件', '就是', '遍历', '处理器', 'request', 'middleware', '实例', '变量', '调用', '其中', '一个', '方法', '传入', 'httprequest', '实例', '作为', '参数', 'for', 'middleware', 'method', 'in', 'self', '._', 'request', 'middleware', 'response', 'middleware', 'method', 'request', 'if', 'response', 'break', '这些', '方法', '可以', '短路', '剩下', '处理', '立即', 'get', 'response', '返回', '通过', '返回', '自身', '一个', '如果', '它们', '这样', '返回值', '必须', 'django', 'http', 'httpresponse', '一个', '实例', '后面', '会讨', '如果', '其中', '之一', '这样', '我们', '立即', '回到', '处理器', '代码', 'get', 'response', '不会', '其它', 'middleware', '想要', '什么', '直接', '返回', '然后', '处理器', '进入', 'response', '阶段', '然而', '一般', '情况', '这里', '应用', 'middleware', '方法', '简单', '一些', '处理', '决定', '是否', '增加', '删除', '补充', 'request', '属性', '关于', '解析', '假设', '没有', '一个', '作用', 'request', 'middleware', '直接', '返回', 'response', '处理器', '步会', '尝试', '解析', '请求', 'url', '配置文件', '寻找', '一个', '叫做', 'root', 'urlconf', '这个', '配置', '加上', 'url', '作为', '参数', '创建', 'django', 'core', 'urlresolvers', 'regexurlresolver', '一个', '实例', '然后', '调用', 'resolve', '方法', '解析', '请求', 'url', '路径', 'url', 'resolver', '遵循', '一个', '相当', '简单', '模式', '对于', 'url', '配置文件', '根据', 'root', 'urlconf', '配置', '产生', '一个', 'urlpatterns', '列表', '条目', '它会', '检查', 'url', '路径', '是否', '这个', '目的', '正则表达式', '相匹配', '如果', '的话', '两种', '选择', '如果', '这个', '条目', '一个', '可以', '调用', 'include', 'resolver', '截取', '匹配', 'url', 'include', '指定', 'url', '配置文件', '开始', '遍历', '其中', 'urlpatterns', '列表', '一个', '条目', '根据', 'url', '深度', '模块性', '可能', '重复', '几次', '否则', 'resolver', '返回', '三个', '条目', '匹配', '条目', '指定', 'view', 'function', '一个', 'url', '得到', '未命名', '匹配', '用来', '作为', 'view', '位置', '参数', '一个', '关键', '参数', '字典', 'url', '得到', '任意', '命名', '匹配', '组和', 'urlconf', '得到', '其它', '关键字', '参数', '组合而成', '注意', '这一', '过程', '匹配', '第一个', '指定', 'view', '条目', '停止', '因此', '最好', 'url', '配置', '复杂', '正则', '过渡', '简单', '正则', '这样', '确保', 'resolver', '不会', '首先', '匹配', '简单', '一个', '返回', '错误', 'view', 'function', '如果', '没有', '找到', '匹配', '条目', 'resolver', '产生', 'django', 'core', 'urlresolvers', 'resolver404', '异常', 'django', 'http', 'http404', '子类', '后面', '我们', '知道', '如何', '处理', 'middleware', '第二', '回合', '一旦', '知道', 'view', 'function', '相关', '参数', '处理器', '查看', 'view', 'middleware', '列表', '调用', '其中', '方法', '传入', 'httprequst', 'view', 'function', '针对', '这个', 'view', '位置', '参数', '列表', '关键字', '参数', '字典', 'apply', 'view', 'middlewarefor', 'middleware', 'method', 'in', 'self', '._', 'view', 'middleware', 'response', 'middleware', 'method', 'request', 'callback', 'callback', 'args', 'callback', 'kwargs', 'if', 'response', 'break', '还有', 'middleware', '可能', '介入', '这一', '阶段', '强迫', '处理器', '立即', '返回', '进入', 'view', '如果', '处理过程', '这时候', '继续', '的话', '处理器', '调用', 'view', 'function', 'django', 'views', '严格', '因为', '需要', '满足', '几个', '条件', '必须', '可以', '调用', '必须', '接受', 'django', 'http', 'httprequest', '实例', '作为', '第一位', '参数', '必须', '产生', '一个', '异常', '返回', 'django', 'http', 'httpresponse', '一个', '实例', '除了', '这些', '可以', '天马行空', '尽管如此', '一般来说', 'views', '使用', 'django', 'database', 'api', '创建', '检索', '更新', '删除', '数据库', '某些', '东西', '还会', '加载', '一个', '模板', '呈现', '一些', '东西', '最终用户', '模板', 'django', '模板', '系统', '两个', '部分', '一部分', '设计师', '使用', '混入', '少量', '其它', '东西', 'html', '一部分', '程序员', '使用', 'python', '一个', 'html', '作者', '角度', 'django', '模板', '系统', '非常简单', '需要', '知道', '三个', '结构', '变量', '引用', '模板', '中是', '这样', 'foo', '模板', '过滤', '上面', '例子', '使用', '过滤', '竖线', '这样', 'foo', 'bar', '通常', '用来', '格式化', '输出', '比如', '运行', 'textile', '格式化', '日期', '等等', '模板', '标签', '这样', 'baz', '这是', '模板', '逻辑', '实现', '地方', '可以', 'if', 'foo', 'for', 'bar', 'in', 'foo', '等等', 'if', 'for', '模板', '标签', '变量', '引用', '一种', '非常简单', '方式', '工作', '如果', '只是', '打印', '变量', '只要', 'foo', '模板', '系统', '输出', '这里', '唯一', '复杂', '情况', 'foo', 'bar', '这时', '模板', '顺序', '尝试', '几件事', '首先', '尝试', '一个', '字典', '方式', '查找', '看看', 'foo', 'bar', '是否', '存在', '如果', '存在', '输出', '这个', '过程', '随之', '结束', '如果', '字典', '查找', '失败', '模板', '系统', '尝试', '属性', '查找', '看看', 'foo', 'bar', '是否', '存在', '检查', '这个', '属性', '是否', '可以', '调用', '如果', '可以', '调用', '如果', '属性', '查找', '失败', '模板', '系统', '尝试', '作为', '列表', '索引', '进行', '查找', '如果', '所有', '这些', '失败', '模板', '系统', '输出', '配置', 'template', 'string', 'if', 'invalid', '默认', '字符串', '模板', '过滤', '就是', '简单', 'python', 'functions', '接受', '一个', '一个', '参数', '返回', '一个', '比如', 'date', '过滤', '一个', 'python', 'datetime', '对象', '作为', '一个', '标准', 'strftime', '格式化', '字符串', '作为', '参数', '返回', 'datetime', '对象', '应用', '格式化', '字符', '之后', '结果', '模板', '标签', '事情', '一点点', '复杂', '地方', '了解', 'django', '模板', '系统', '如何', '真正', '工作', '地方', 'django', '模板', '结构', '内部', '一个', 'django', '模板', '体现', '一个', 'nodes', '集合', '它们', '是从', '基本', 'django', 'template', 'node', '继承', 'nodes', '可以', '各种', '处理', '一个', '共同点', '一个', 'node', '必须', '一个', '叫做', 'render', '方法', '接受', '第二个', '参数', '第一个', '显然', 'node', '实例', 'django', 'template', 'context', '一个', '实例', '这是', '一个', '似于', '字典', '对象', '包含', '所有', '模板', '可以', '获得', '变量', 'node', 'render', '方法', '必须', '返回', '一个', '字符串', '如果', 'node', '工作', '不是', '输出', '比如', '通过', '增加', '删除', '或修', '传入', 'context', '实例', '变量', '变量', '修改', '模板', '上下文', '可以', '返回', '字符串', 'django', '包含', '许多', 'node', '子类', '提供', '有用', '功能', '比如', '每个', '内置', '模板', '标签', '一个', 'node', '子类', '处理', '比如', 'ifnode', '实现', 'if', '标签', 'fornode', '实现', 'for', '标签', '等等', '所有', '内置', '标签', '可以', 'django', 'template', 'defaulttags', '找到', '实际上', '上面', '介绍', '所有', '模板', '结构', '某种', '形式', 'nodes', '文本', '异常', '查找', 'variablenode', '处理', '出于', '自然', '过滤', '应用', 'variablenode', '签是', '各种类型', 'nodes', '文本', '一个', 'textnode', '一般来说', '一个', 'view', '渲染', '一个', '模板', '经过', '下面', '步骤', '依次', '加载', '需要', '渲染', '模板', 'django', 'template', 'loader', 'get', 'template', '利用', '许多', '方法', '任意', '一个', '定位', '需要', '模板', '文件', 'get', 'template', '函数', '返回', '一个', 'django', 'template', 'template', '实例', '其中', '包含', '经过', '解析', '模板', '用到', '方法', '实例', '一个', 'context', '用来', '渲染', '模板', '如果', 'context', '子类', 'django', 'template', 'requestcontext', '那么', '附带', '上下文', '处理函数', '自动', 'view', '没有', '定义', '变量', 'context', '构建', '方法', '一个', '对于', '模板', '变为', '变量', '作为', '唯一', '参数', 'requestcontext', 'httprequest', '一个', '实例', '一个', '字典', '调用', 'template', '实例', 'render', '方法', 'context', '对象', '作为', '第一个', '位置', '参数', 'template', 'render', '方法', '返回值', '一个', '字符串', 'template', '所有', 'nodes', 'render', '方法', '返回', '连接', '而成', '调用', '顺序', '它们', '出现', 'template', '顺序', '关于', 'response', '一点点', '一旦', '一个', '模板', '完成', '渲染', '或者', '产生', '其它', '某些', '合适', '输出', 'view', '负责', '产生', 'django', 'http', 'httpresponse', '实例', '构建', '接受', '两个', '可选', '参数', '一个', '作为', 'response', '主体', '字符串', '应该', '第一', '位置', '参数', '或者', '关键字', '参数', 'content', '大部分', '时间', '作为', '渲染', '一个', '模板', '输出', '不是', '必须', '这样', '这里', '可以', '传入', '任何', '有效', 'python', '字符串', 'response', 'content', 'type', 'header', '应该', '第二', '位置', '参数', '或者', '关键字', '参数', 'mine', 'type', '如果', '没有', '提供', '这个', '参数', 'django', '将会', '配置', 'default', 'mime', 'type', 'default', 'charset', '如果', '没有', 'django', '全局', '配置文件', '更改', '它们', '的话', '分别', 'text', 'html', 'utf', 'middleware', '第三', '回合', '异常', '如果', 'view', '函数', '或者', '其中', '什么', '东西', '发生', '异常', '那么', 'get', 'response', '我知', '我们', '已经', '时间', '深入', 'views', 'templates', '但是', '一旦', 'view', '返回', '产生', '异常', '我们', '重拾', '处理器', '中间', 'get', 'response', '方法', '遍历', 'exception', 'middleware', '实例', '变量', '调用', '那里', '每个', '方法', '传入', 'httpresponse', '这个', 'exception', '作为', '参数', '如果', '顺利', '这些', '方法', '一个', '实例', '一个', 'httpresponse', '返回', '仍然', '没有响应', '这时候', '可能', '还是', '没有', '得到', '一个', 'httpresponse', '可能', '几个', '原因', 'view', '可能', '没有', '返回值', 'view', '可能', '产生', '异常', '没有', '一个', 'middleware', '处理', '一个', 'middleware', '方法', '试图', '处理', '一个', '异常', '自己', '产生', '一个', '异常', '这时候', 'get', 'response', '回到', '自己', '异常', '处理', '机制', '它们', '几个', '层次', '如果', 'exception', 'http404', '并且', 'debug', '设置', 'true', 'get', 'response', '执行', 'view', 'django', 'views', 'debug', 'technical', '404', 'response', '传入', 'httprequest', 'exception', '作为', '参数', '这个', 'view', '展示', 'url', 'resolver', '试图', '匹配', '模式', '信息', '如果', 'debug', 'false', '并且', '异常', 'http404', 'get', 'response', '调用', 'url', 'resolver', 'resolve', '404', '方法', '这个', '方法', '查看', 'url', '配置', '判断', '一个', 'view', '指定', '用来', '处理', '404', '错误', '默认', 'django', 'views', 'defaults', 'page', 'not', 'found', '可以', 'url', '配置', 'handler404', '变量', '赋值', '更改', '对于', '任何', '其它', '类型', '异常', '如果', 'debug', '设置', 'true', 'get', 'response', 'view', 'django', 'views', 'debug', 'technical', '500', 'response', '传入', 'httprequest', 'exception', '作为', '参数', '这个', 'view', '提供', '关于', '异常', '详细', '信息', '包括', 'traceback', '一个', '层次', 'stack', '本地', '变量', 'httprequest', '对象', '详细描述', '所有', '无效', '配置', '列表', '如果', 'debug', 'false', 'get', 'response', '调用', 'url', 'resolver', 'resolve', '500', '方法', 'resolve', '404', '方法', '非常', '相似', '这时', '默认', 'view', 'django', 'views', 'defaults', 'server', 'error', '可以', 'url', '配置', 'handler500', '变量', '赋值', '更改', '此外', '对于', '除了', 'django', 'http', 'http404', 'python', '内置', 'systemexit', '之外', '异常', '处理器', '调度', '发送', '信号', 'got', 'request', 'exception', '返回', '之前', '一个', '关于', '异常', '描述', '发送给', 'django', '配置文件', 'admins', '配置', '一个', 'middleware', '最后', '回合', '现在', '无论', 'get', 'response', '一个', '层次', '发生', '错误', '返回', '一个', 'httpresponse', '实例', '因此', '我们', '回到', '处理器', '主要', '部分', '一旦', '获得', '一个', 'httpresponse', '第一件', '就是', '遍历', 'response', 'middleware', '实例', '变量', '应用', '那里', '方法', '传入', 'httprequest', 'httpresponse', '作为', '参数', 'finally', 'reset', 'urlconf', 'for', 'this', 'thread', 'on', 'the', 'way', 'out', 'for', 'complete', 'isolation', 'of', 'request', 'urlconfurlresolvers', 'set', 'urlconf', 'none', 'try', 'apply', 'response', 'middleware', 'regardless', 'of', 'the', 'responsefor', 'middleware', 'method', 'in', 'self', '._', 'response', 'middleware', 'response', 'middleware', 'method', 'request', 'response', 'response', 'self', 'apply', 'response', 'fixes', 'request', 'response', '注意', '对于', '任何', '改变', '什么', 'middleware', '来说', '这是', '它们', '最后', '机会', 'the', 'check', 'is', 'in', 'the', 'mail', '结束', '时候', '一旦', 'middleware', '完成', '最后', '环节', '处理器', '调度', '发送', '信号', 'request', 'finished', '当前', 'request', '执行', '任何', '东西', '来说', '绝对', '最后', '调用', '监听', '这个', '信号', '处理', '清空', '释放', '任何', '使用', '资源', 'django', 'request', 'finished', '监听', '关闭', '所有', '数据库', '连接', '这件', '发生', '以后', '处理器', '构建', '一个', '合适', '返回值', '送返', '实例', '化它', '任何', '东西', '现在', '一个', '恰当', 'mod', 'python', 'response', '或者', '一个', 'wsgi', '兼容', 'response', '取决于', '处理器', '返回', '呼呼', '结束', '开始', '结束', '就是', 'django', '如何', '处理', '一个', 'request']","[[-0.23930455 -0.1505701   0.22223288  0.15488314  0.31321587 -0.35250211
  -0.19495046  0.50503032 -0.00873655 -0.02744654 -0.05420362 -0.34055087
  -0.2089524   0.62983666  0.16776568 -0.1100657  -0.17038047  0.00861105
  -0.11316517 -0.50074722  0.01855395  0.24276659  0.01518436 -0.09797386
   0.12835691 -0.57416473 -0.29331402  0.08766043 -0.22962251 -0.05884309
   0.25193466  0.01403509  0.00210478 -0.16524568 -0.11747745  0.33830129
  -0.15677257 -0.22967123  0.12443496 -0.79812533 -0.19253097 -0.61572962
  -0.05391871 -0.05861599 -0.1720505  -0.16010578 -0.24931956  0.46902276
  -0.19004573  0.42226708  0.22241943 -0.28466366 -0.13126709 -0.21906852
   0.07725111  0.41321086  0.2545886  -0.06933835  0.10406997 -0.11471361
   0.05286634  0.30539988  0.0299839   0.10794789 -0.41276187 -0.01134128
   0.04215905 -0.02516648 -0.27364126  0.45815903  0.1484896  -0.25398903
   0.41722834 -0.34013696  0.60254476  0.16802306  0.18861805 -0.1309611
  -0.30340518 -0.20241582 -0.07638859 -0.00514728 -0.08043678  0.33769696
  -0.3875389   0.21164554 -0.29699328  0.41969419  0.48196935  0.12519364
   0.31941278  0.12306492  0.37398936  0.19955125  0.19868415  0.38203265
   0.11916965 -0.31660459 -0.06903631 -0.10364596]]"
1005,Django关于站点管理Admin Site的常见问题解决方法,"1. 改变django默认语言的方法？仅需添加’django.middleware.locale.LocaleMiddlewar'到 MIDDLEWARE_CLASSES设置中，并确保它在’django.contrib.sessions.middleware.SessionMiddleware’* 之后* 。2. 怎样将已有models加入到admin管理中？本问题用实例演示，假如有个app叫做books，该app包里包含3个模块Publisher、Author和Book，以下是将该三个模块添加到admin管理中的步骤：在`` books`` 目录下(`` mysite/books`` )，创建一个文件：`` admin.py``在admin.py中输入以下代码from django.contrib import adminfrom mysite.books.models import Publisher, Author, Book#以下3句，实现将模块添加到后台管理admin.site.register(Publisher)admin.site.register(Author)admin.site.register(Book)3) 重启服务器，刷新后台界面（比如http://127.0.0.1:8000/admin）发现添加成功3. 为什么用admin.site.register(x)注册了x模块，后台却无法显示？admin后台管理模块，第一步是执行autodiscover函数，该函数是根据settings.INSTALLED_APPS来逐个处理每个模块的，注册了模块却无法生效，肯定是因为没有将模块添加到配置文件的INSTALLED_APPS中。以下是autodiscover关于注册模块的部分代码for app in settings.INSTALLED_APPS:mod = import_module(app)# Attempt to import the app's admin module.try:    before_import_registry = copy.copy(site._registry)import_module('%s.admin' % app) 4. 为什么我没有写admin.py，后台却默认显示了Auth的Groups和Users两个模块？这是因为：1) 我们在INSTALLED_APPS增加了'django.contrib.auth'选项，admin.autodiscover会去该包查找admin.py2) 在django的源码包django.contrib.auth里面，我们找到了admin.py,并且里面刚好注册了Groups和Users两个模块看代码：admin.site.register(Group, GroupAdmin)admin.site.register(User, UserAdmin)  又比如后台默认页显示了sites模块，找到contrib.sites，也可以发现admin.py，以下是它的内容：from django.contrib import adminfrom django.contrib.sites.models import Siteclass SiteAdmin(admin.ModelAdmin):list_display = ('domain', 'name')search_fields = ('domain', 'name')admin.site.register(Site, SiteAdmin) 其实不难发现，contrib里面的包，大部分都自含admin.py文件，这也就是说，只要在INSTALLED_APPS中添加了该目录中的某个包，后台就能够对它进行管理了。5. 怎样让某个表单字段是可选填写的？想要哪个字段是可选填写的，就在该Model的该字段的选项中（括号内）加上blank=True即可，如下所示：class Author(models.Model):first_name = models.CharField(max_length=30)last_name = models.CharField(max_length=40)email = models.EmailField(blank=True) 所有的字段，默认blank=false，所以都是必填不能为空的6. 设置日期型和数字型字段可选的方法？Django生成CREATE TABLE语句自动为每个字段显式加上NOT NULL，在管理工具中，如果你留空一个字符型字段，它会为此插入一个空字符串（而* 不是*NULL），但是，其它数据类型有例外：日期型、时间型和数字型字段不接受空字符串。如果你想允许一个日期型（DateField、TimeField、DateTimeField）或数字型（IntegerField、DecimalField、FloatField）字段为空，你需要使用null=True * 和* blank=True。class Book(models.Model):title = models.CharField(max_length=100)authors = models.ManyToManyField(Author)publisher = models.ForeignKey(Publisher)publication_date = models.DateField(blank=True, null=True ) 因为null=True改变了数据的语义，即改变了CREATE TABLE语句，把publication_date字段上的NOT NULL删除了。 要完成这些改动，我们还需要更新数据库。7. 怎样更改表单中字段的说明文字？在编辑页面中，每个字段的标签都是从模块的字段名称生成的，然而，字段名称并不总是贴切的。有些情况下，你可能想自定义一个标签。 你只需在模块中指定verbose_name。class Author(models.Model):first_name = models.CharField(max_length=30)last_name = models.CharField(max_length=40)email = models.EmailField(blank=True,verbose_name='e-mail' ) 8. ModelAdmin类是干什么的？像blank=True、null=True和verbose_name修改其实是模块级别，而不是管理级别的。 也就是说，这些修改实质上是构成模块的一部分，并且正好被管理工具使用，而不是专门针对管理工具的。Django还提供了大量选项让你针对特别的模块自定义管理工具。 这些选项都在ModelAdmin classes里面，这些类包含了管理工具中针对特别模块的配置。9. 怎样自定义后台管理的列表页面？看代码和解释：#怎样自定义列表页面？class AuthorAdmin(admin.ModelAdmin):#列表页，列表顶部显示的字段名称list_display = ('first_name', 'last_name', 'email')#列表页出现搜索框，参数是搜索的域search_fields = ('first_name', 'last_name')#右侧会出现过滤器，根据字段类型，过滤器显示过滤选项list_filter = ('publication_date',)#页面中的列表顶端会有一个逐层深入的导航条，逐步迭代选项date_hierarchy = 'publication_date'#自然是排序所用了，减号代表降序排列ordering = ('-publication_date',)#将Author模块和管理类绑定在一起，注册到后台管理admin.site.register(Author, AuthorAdmin) 10. 怎样自定义编辑后台管理的表单页面？#以下显示怎样自定义表单编辑页面的显示，注意它和列表页是在一个Admin类内部的class BookAdmin(admin.ModelAdmin):## 这里可以写一些列表页面自定义选项## 以下是表单编辑页面自定义选项# 表单编辑页面，字段显示的顺序，如果没有某个选项，就不会显示fields = ('title', 'authors', 'publisher', 'publication_date')# 有了该设定，表单中该选项，变成了一个用JS动态选择的选择框，就是左右两列\# 左边选择，右边显示被选中的内容，# 强烈建议针对那些拥有十个以上选项的""多对多字段""使用filter_horizontalfilter_horizontal = ('authors',)# 用于外键，并且外键超级多的时候，是一个包含外键字段名称的元组，# 它包含的字段将被展现成`` 文本框`` ，而不再是`` 下拉框``raw_id_fields = ('publisher',) ","['django', '关于', '站点', '管理', 'admin', 'site', '常见问题', '解决', '方法', '改变', 'django', '默认', '语言', '方法', '添加', 'django', 'middleware', 'locale', 'localemiddlewar', 'middleware', 'classes', '设置', '确保', 'django', 'contrib', 'sessions', 'middleware', 'sessionmiddleware', '之后', '怎样', '已有', 'models', '加入', 'admin', '管理', '问题', '实例', '演示', '假如', '有个', 'app', '叫做', 'books', 'app', '包里', '包含', '模块', 'publisher', 'author', 'book', '以下', '三个', '模块', '添加', 'admin', '管理', '步骤', 'books', '目录', 'mysite', 'books', '创建', '一个', '文件', 'admin', 'py', 'admin', 'py', '输入', '以下', '代码', 'from', 'django', 'contrib', 'import', 'adminfrom', 'mysite', 'books', 'models', 'import', 'publisher', 'author', 'book', '以下', '实现', '模块', '添加', '后台', '管理', 'admin', 'site', 'register', 'publisher', 'admin', 'site', 'register', 'author', 'admin', 'site', 'register', 'book', '重启', '服务器', '刷新', '后台', '界面', '比如', 'http', '127.0', '0.1', '8000', 'admin', '发现', '添加', '成功', '为什么', 'admin', 'site', 'register', '注册', '模块', '后台', '无法', '显示', 'admin', '后台', '管理', '模块', '第一步', '执行', 'autodiscover', '函数', '函数', '根据', 'settings', 'installed', 'apps', '逐个', '处理', '每个', '模块', '注册', '模块', '无法', '生效', '肯定', '是因为', '没有', '模块', '添加', '配置文件', 'installed', 'apps', '以下', 'autodiscover', '关于', '注册', '模块', '部分', '代码', 'for', 'app', 'in', 'settings', 'installed', 'apps', 'mod', 'import', 'module', 'app', 'attempt', 'to', 'import', 'the', 'app', 'admin', 'module', 'try', 'before', 'import', 'registry', 'copy', 'copy', 'site', '._', 'registry', 'import', 'module', 'admin', 'app', '为什么', '没有', 'admin', 'py', '后台', '默认', '显示', 'auth', 'groups', 'users', '两个', '模块', '是因为', '我们', 'installed', 'apps', '增加', 'django', 'contrib', 'auth', '选项', 'admin', 'autodiscover', '查找', 'admin', 'py2', 'django', '源码', 'django', 'contrib', 'auth', '里面', '我们', '找到', 'admin', 'py', '并且', '里面', '刚好', '注册', 'groups', 'users', '两个', '模块', '代码', 'admin', 'site', 'register', 'group', 'groupadmin', 'admin', 'site', 'register', 'user', 'useradmin', '比如', '后台', '默认页', '显示', 'sites', '模块', '找到', 'contrib', 'sites', '可以', '发现', 'admin', 'py', '以下', '内容', 'from', 'django', 'contrib', 'import', 'adminfrom', 'django', 'contrib', 'sites', 'models', 'import', 'siteclass', 'siteadmin', 'admin', 'modeladmin', 'list', 'display', 'domain', 'name', 'search', 'fields', 'domain', 'name', 'admin', 'site', 'register', 'site', 'siteadmin', '其实', '不难', '发现', 'contrib', '里面', '大部分', '自含', 'admin', 'py', '文件', '也就是说', '只要', 'installed', 'apps', '添加', '目录', '某个', '后台', '能够', '进行', '管理', '怎样', '某个', '单字', '可选', '填写', '想要', '哪个', '字段', '可选', '填写', 'model', '选项', '括号', '加上', 'blank', 'true', '即可', '如下', '所示', 'class', 'author', 'models', 'model', 'first', 'name', 'models', 'charfield', 'max', 'length', '30', 'last', 'name', 'models', 'charfield', 'max', 'length', '40', 'email', 'models', 'emailfield', 'blank', 'true', '所有', '默认', 'blank', 'false', '所以', '必填', '不能', '为空', '设置', '日期', '数字型', '字段', '可选', '方法', 'django', '生成', 'create', 'table', '语句', '自动', '每个', '字段', '显式', '加上', 'not', 'null', '管理工具', '如果', '留空', '一个', '字符', '它会', '为此', '插入', '一个', '字符串', '不是', 'null', '但是', '其它', '数据类型', '例外', '日期', '时间', '数字型', '字段', '接受', '字符串', '如果', '允许', '一个', '日期', 'datefield', 'timefield', 'datetimefield', '数字型', 'integerfield', 'decimalfield', 'floatfield', '字段', '需要', '使用', 'null', 'true', 'blank', 'true', 'class', 'book', 'models', 'model', 'title', 'models', 'charfield', 'max', 'length', '100', 'authors', 'models', 'manytomanyfield', 'author', 'publisher', 'models', 'foreignkey', 'publisher', 'publication', 'date', 'models', 'datefield', 'blank', 'true', 'null', 'true', '因为', 'null', 'true', '改变', '数据', '语义', '改变', 'create', 'table', '语句', 'publication', 'date', '字段', 'not', 'null', '删除', '完成', '这些', '改动', '我们', '需要', '更新', '数据库', '怎样', '更改', '表单', '中字', '说明', '文字', '编辑', '页面', '每个', '字段', '标签', '是从', '模块', '字段名', '生成', '然而', '字段名', '总是', '贴切', '有些', '情况', '可能', '自定义', '一个', '标签', '模块', '指定', 'verbose', 'name', 'class', 'author', 'models', 'model', 'first', 'name', 'models', 'charfield', 'max', 'length', '30', 'last', 'name', 'models', 'charfield', 'max', 'length', '40', 'email', 'models', 'emailfield', 'blank', 'true', 'verbose', 'name', 'mail', 'modeladmin', '干什么', 'blank', 'true', 'null', 'true', 'verbose', 'name', '修改', '其实', '模块', '级别', '不是', '管理', '级别', '也就是说', '这些', '修改', '实质', '构成', '模块', '一部分', '并且', '正好', '管理工具', '使用', '不是', '专门', '针对', '管理工具', 'django', '提供', '大量', '选项', '针对', '特别', '模块', '自定义', '管理工具', '这些', '选项', 'modeladmin', 'classes', '里面', '这些', '包含', '管理工具', '针对', '特别', '模块', '配置', '怎样', '自定义', '后台', '管理', '列表', '页面', '代码', '解释', '怎样', '自定义', '列表', '页面', 'class', 'authoradmin', 'admin', 'modeladmin', '列表', '列表', '顶部', '显示', '字段名', 'list', 'display', 'first', 'name', 'last', 'name', 'email', '列表', '出现', '搜索', '参数', '搜索', 'search', 'fields', 'first', 'name', 'last', 'name', '右侧', '出现', '过滤器', '根据', '类型', '过滤器', '显示', '过滤', '选项', 'list', 'filter', 'publication', 'date', '页面', '列表', '顶端', '一个', '逐层', '深入', '导航条', '逐步', '迭代', '选项', 'date', 'hierarchy', 'publication', 'date', '自然', '排序', '所用', '减号', '代表', '降序', '排列', 'ordering', 'publication', 'date', 'author', '模块', '管理', '绑定', '一起', '注册', '后台', '管理', 'admin', 'site', 'register', 'author', 'authoradmin', '10', '怎样', '自定义', '编辑', '后台', '管理', '表单', '页面', '以下', '显示', '怎样', '自定义', '表单', '编辑', '页面', '显示', '注意', '列表', '一个', 'admin', '内部', 'class', 'bookadmin', 'admin', 'modeladmin', '##', '这里', '可以', '一些', '列表', '页面', '自定义', '选项', '##', '以下', '表单', '编辑', '页面', '自定义', '选项', '表单', '编辑', '页面', '显示', '顺序', '如果', '没有', '某个', '选项', '不会', '显示', 'fields', 'title', 'authors', 'publisher', 'publication', 'date', '设定', '表单', '中该', '选项', '变成', '一个', 'js', '动态', '选择', '选择', '就是', '左右', '两列', '左边', '选择', '右边', '显示', '选中', '内容', '强烈建议', '针对', '那些', '拥有', '十个', '以上', '选项', '使用', 'filter', 'horizontalfilter', 'horizontal', 'authors', '用于', '外键', '并且', '外键', '超级', '时候', '一个', '包含', '外键', '字段名', '元组', '包含', '展现', '文本框', '不再', '下拉框', 'raw', 'id', 'fields', 'publisher']","[[-0.21418046 -0.10763989  0.21789274  0.12981425  0.26188813 -0.32845936
  -0.13159854  0.43619351 -0.04059889 -0.0765433  -0.03951751 -0.32649065
  -0.14896608  0.51002535  0.1468673  -0.09918512 -0.12377249 -0.00583639
  -0.07550464 -0.45885763 -0.02019598  0.2301442  -0.02587543 -0.14670064
   0.07779556 -0.45631317 -0.26786271  0.04940338 -0.20643012 -0.06323114
   0.17968357  0.0086223   0.00285306 -0.12227425 -0.13573021  0.29994514
  -0.16331157 -0.23632127  0.08693742 -0.67757405 -0.13952084 -0.53637998
  -0.05798839 -0.02536981 -0.13153369 -0.17961575 -0.21355043  0.35853263
  -0.16662893  0.40473142  0.1539642  -0.24586062 -0.1162875  -0.17225256
   0.01394807  0.35320973  0.16684846 -0.07579027  0.09960845 -0.11745329
   0.07193685  0.23332706  0.01679057  0.08218909 -0.3476359   0.0233697
   0.0479037  -0.02775978 -0.26026512  0.39525008  0.09919839 -0.18004897
   0.35296734 -0.29840356  0.50949911  0.21211328  0.14501207 -0.13957965
  -0.27919169 -0.13305534 -0.0233137   0.0306228  -0.09447467  0.32744947
  -0.3089998   0.18874165 -0.25669842  0.38911926  0.43522561  0.13306576
   0.2394091   0.10399948  0.32443731  0.17083111  0.17776552  0.32159642
   0.11032001 -0.28464842 -0.03065591 -0.10315499]]"
1014,使用PHP连接、操纵Memcached的原理和教程,"Memcahced开源分布式内存对象缓存系统通过减少数据库的负担，从而能够加速你的web应用。在本文中我将解释怎样实现一个基于Memcahced的缓存系统。数据库实例中使用的数据库表包含一个自增的id，一个标题和一个链接字段：CREATE TABLE demos(id INT PRIMARY KEY AUTO_INCREMENT,title VARCHAR(300), link VARCHAR(300), );第一次用户请求到达第一次用户发送请求，PHP程序会在访问db数据库的同时，将访问的数据写入Memcached系统。如图所示，user发送了req请求，application发送数据请求到database，database在将数据返回给application的同时，将数据缓存到了Memcached服务器。第二次用户请求到达了第二次用户请求到达，会直接读取Memcached服务器的缓存，而不是数据库中的内容，从而减轻了服务器的负担。本图显示，第二次的请求，application直接从Memcached(简称Mc)读取数据。Memcached的安装方法网络上有大量关于Memcached安装的方法，其实它就是一个缓存服务器应用程序，意思就像是你装了个Mysql一样，装好了用账号密码IP地址连一下就能使用。以下是一些很好的资源：php_memcache.dll在windows上安装Memcached的方法在Windows7的Xampp上安装Memcached的方法在Windows7上的PHP5.3安装Memcached的方法index.php用PHP操作Memcached的演示 <?phpinclude('db.php');$memcache = new Memcache;$memcache->connect('localhost', 11211) or die (""Could not connect"");//缓存服务器中，都是键值对，这里我们设定唯一的键$key = md5('www.crazyant.net'); $cache_result = array();//根据键，从缓存服务器中获取它的值$cache_result = $memcache->get($key); //如果存在该键对应的值，说明缓存中存在该内容if($cache_result){    //那我们直接取出缓存的内容就可以了    $demos_result=$cache_result;} else {    //如果缓存中没有该键对应的值数据，说明请求是第一次到达    //首先，我们需要从数据库中取出该值    $v=mysql_query(""select * from demos order by id desc"");    while($row=mysql_fetch_array($v)){        //取出的内容就是我们需要的        $demos_result[]=$row;     }    //最后，将这次从数据库取出的内容，放到Memcached缓存服务器，这里就是缓存的精髓    $memcache->set($key, $demos_result, MEMCACHE_COMPRESSED, 1200); }//前面的所有操作，最终返回了我们需要的数据// foreach($demos_result as $row){    echo '<a href='.$row['link'].'>'.$row['title'].'</a>';}?> db.php用于连接数据库的代码你需要改变代码中的IP地址、用户名、密码、数据库名字。<?php$mysql_hostname = ""localhost"";$mysql_user = ""username"";$mysql_password = ""password"";$mysql_database = ""database"";$bd = mysql_connect($mysql_hostname, $mysql_user, $mysql_password)     or die(""Opps some thing went wrong"");mysql_select_db($mysql_database, $bd) or die(""Opps some thing went wrong"");?> 注：本文参考Memcached with PHP","['使用', 'php', '连接', '操纵', 'memcached', '原理', '教程', 'memcahced', '开源', '分布式', '内存', '对象', '缓存', '系统', '通过', '减少', '数据库', '负担', '从而', '能够', '加速', 'web', '应用', '本文', '解释', '怎样', '实现', '一个', '基于', 'memcahced', '缓存', '系统', '数据库', '实例', '使用', '数据库', '包含', '一个', '自增', 'id', '一个', '标题', '一个', '链接', 'create', 'table', 'demos', 'id', 'int', 'primary', 'key', 'auto', 'increment', 'title', 'varchar', '300', 'link', 'varchar', '300', '第一次', '用户', '请求', '到达', '第一次', '用户', '发送', '请求', 'php', '程序', '访问', 'db', '数据库', '同时', '访问', '数据', '写入', 'memcached', '系统', '如图所示', 'user', '发送', 'req', '请求', 'application', '发送数据', '请求', 'database', 'database', '数据', '返回', 'application', '同时', '数据', '缓存', 'memcached', '服务器', '第二次', '用户', '请求', '到达', '第二次', '用户', '请求', '到达', '直接', '读取', 'memcached', '服务器', '缓存', '不是', '数据库', '内容', '从而', '减轻', '服务器', '负担', '本图', '显示', '第二次', '请求', 'application', '直接', 'memcached', '简称', 'mc', '读取数据', 'memcached', '安装', '方法', '网络', '大量', '关于', 'memcached', '安装', '方法', '其实', '就是', '一个', '缓存', '服务器应用程序', '意思', '像是', 'mysql', '一样', '装好', '账号密码', 'ip地址', '一下', '使用', '以下', '一些', '资源', 'php', 'memcache', 'dll', 'windows', '安装', 'memcached', '方法', 'windows7', 'xampp', '安装', 'memcached', '方法', 'windows7', 'php5.3', '安装', 'memcached', '方法', 'index', 'php', 'php', '操作', 'memcached', '演示', 'phpinclude', 'db', 'php', 'memcache', 'new', 'memcache', 'memcache', 'connect', 'localhost', '11211', 'or', 'die', 'could', 'not', 'connect', '缓存', '服务器', '键值', '这里', '我们', '设定', '唯一', 'key', 'md5', 'www', 'crazyant', 'net', 'cache', 'result', 'array', '根据', '缓存', '服务器', '获取', 'cache', 'result', 'memcache', 'get', 'key', '如果', '存在', '该键', '对应', '说明', '缓存', '存在', '内容', 'if', 'cache', 'result', '我们', '直接', '取出', '缓存', '内容', '可以', 'demos', 'result', 'cache', 'result', 'else', '如果', '缓存', '没有', '该键', '对应', '数据', '说明', '请求', '第一次', '到达', '首先', '我们', '需要', '数据库', '取出', '该值', 'mysql', 'query', 'select', 'from', 'demos', 'order', 'by', 'id', 'desc', 'while', 'row', 'mysql', 'fetch', 'array', '取出', '内容', '就是', '我们', '需要', 'demos', 'result', 'row', '最后', '这次', '数据库', '取出', '内容', '放到', 'memcached', '缓存', '服务器', '这里', '就是', '缓存', '精髓', 'memcache', 'set', 'key', 'demos', 'result', 'memcache', 'compressed', '1200', '前面', '所有', '操作', '最终', '返回', '我们', '需要', '数据', 'foreach', 'demos', 'result', 'as', 'row', 'echo', 'href', 'row', 'link', 'row', 'title', 'db', 'php', '用于', '连接', '数据库', '代码', '需要', '改变', '代码', 'ip地址', '用户名', '密码', '数据库', '名字', 'php', 'mysql', 'hostname', 'localhost', 'mysql', 'user', 'username', 'mysql', 'password', 'password', 'mysql', 'database', 'database', 'bd', 'mysql', 'connect', 'mysql', 'hostname', 'mysql', 'user', 'mysql', 'password', 'or', 'die', 'opps', 'some', 'thing', 'went', 'wrong', 'mysql', 'select', 'db', 'mysql', 'database', 'bd', 'or', 'die', 'opps', 'some', 'thing', 'went', 'wrong', '本文', '参考', 'memcached', 'with', 'php']","[[-2.38850401e-01 -1.36641665e-01  2.23174240e-01  1.65787056e-01
   2.93140293e-01 -3.51826942e-01 -1.73537328e-01  4.97189890e-01
  -2.18484101e-02 -5.18736933e-02 -6.25606171e-02 -3.39930282e-01
  -1.77231919e-01  5.84738071e-01  1.44317535e-01 -1.00894624e-01
  -1.43683685e-01  1.83499184e-04 -8.87328341e-02 -4.75562138e-01
   1.16516965e-02  2.43466874e-01 -1.92275348e-02 -1.29051957e-01
   1.04693350e-01 -5.29035082e-01 -3.00247830e-01  8.14154740e-02
  -2.17730500e-01 -6.86486796e-02  2.23839310e-01  3.68639592e-02
  -1.43277789e-02 -1.40795156e-01 -1.33967749e-01  3.39558297e-01
  -1.59997400e-01 -2.31901354e-01  1.04273436e-01 -7.53309464e-01
  -1.57696921e-01 -5.86378766e-01 -4.20654306e-02 -4.99541123e-02
  -1.57719414e-01 -1.74262324e-01 -2.57892961e-01  4.44204087e-01
  -1.67069423e-01  4.13116034e-01  1.85851160e-01 -2.76824519e-01
  -1.10656867e-01 -2.15940353e-01  4.93518678e-02  3.94873490e-01
   2.19566524e-01 -6.71329095e-02  1.09006537e-01 -1.07769108e-01
   6.64056898e-02  2.69706980e-01  2.60368807e-02  9.00837969e-02
  -3.81832276e-01  1.57196419e-03  4.27061818e-02 -1.30723728e-02
  -2.61795436e-01  4.42003949e-01  1.37886201e-01 -2.26810746e-01
   3.96436950e-01 -3.27656976e-01  5.74514584e-01  2.01076111e-01
   1.95793788e-01 -1.44169895e-01 -2.93015279e-01 -1.91846245e-01
  -5.75893582e-02  1.97204074e-02 -8.67755963e-02  3.50330189e-01
  -3.73967750e-01  2.07864857e-01 -2.89405293e-01  4.27834457e-01
   4.82888305e-01  1.37784371e-01  2.90406541e-01  1.14921666e-01
   3.64774698e-01  1.95637470e-01  1.90472589e-01  3.73256694e-01
   9.90700893e-02 -2.98814282e-01 -1.52378735e-02 -1.01902509e-01]]"
1022,PHP对数组的高级遍历和操作处理方法,"PHP对数组的处理可以称为该语言最有吸引力的特性之一，它支持70多种数组相关的函数。不论你想翻转一个数组、判断某个值在数组中是否存在、将数组转换成一个字符串还是计算数组的大小，仅仅执行一个现有的函数就可以完成。然而也有一些数组相关的任务对开发者的要求就较高，仅仅知道手册有某个功能是不能解决的，这些任务就需要对PHP的原始特性有一些深入的理解，还需要一些解决问题的想象力。多维关联数组排序PHP提供了一些数组排序的函数，比如sort(), ksort()，和asort()，但是却没有提供对多维关联数组的排序。比如这样的数组：Array(  [0] => Array    (      [name] => chess      [price] => 12.99    )  [1] => Array    (      [name] => checkers      [price] => 9.99    )  [2] => Array    (      [name] => backgammon      [price] => 29.99    ))  要将该数组按照升序排序，你需要自己写一个函数用于比较价格，然后将该函数作为回调函数传递给usort()函数来实现该功能：function comparePrice($priceA, $priceB){    return $priceA['price'] - $priceB['price'];}usort($games, 'comparePrice'); 执行了该程序片段，数组就会被排序，结果如下所示：Array(  [0] => Array    (      [name] => checkers      [price] => 9.99    )  [1] => Array    (      [name] => chess      [price] => 12.99    )  [2] => Array    (      [name] => backgammon      [price] => 29.99    )) 要将该数组按照降序排序，把comparePrice()函数里面的两个减的数调换位置就可以了。逆序遍历数组PHP的While循环和For循环是遍历一个数组最常用的方法。但是你怎样遍历像下面这个数组呢？ Array(  [0] => Array    (      [name] => Board      [games] => Array        (          [0] => Array            (              [name] => chess              [price] => 12.99            )          [1] => Array            (              [name] => checkers              [price] => 9.99            )        )    )) PHP标准库中有一个对集合的迭代器iterators类，它不仅仅能够用于遍历一些异构的数据结构（比如文件系统和数据库查询结果集），也可以对一些不知道大小的嵌套数组的遍历。比如对上面的数组的遍历，可以使用RecursiveArrayIterator迭代器进行： $iterator = new RecursiveArrayIterator($games); iterator_apply($iterator, 'navigateArray', array($iterator)); function navigateArray($iterator) { while ($iterator->valid()) { if ($iterator->hasChildren()) { navigateArray($iterator->getChildren()); } else { printf(""%s: %s"", $iterator->key(), $iterator->current());} $iterator->next(); } } 执行该段代码会给出以下的结果： name: Boardname: chessprice: 12.99name: checkersprice: 9.99 过滤关联数组的结果假定你得到了如下一个数组，但是你仅仅想操作价格低于$11.99的元素： Array(  [0] => Array    (      [name] => checkers      [price] => 9.99    )  [1] => Array    (      [name] => chess      [price] => 12.99    )  [2] => Array    (      [name] => backgammon      [price] => 29.99    )) 使用array_reduce()函数可以很简单的实现： function filterGames($game){return ($game['price'] < 11.99);}$names = array_filter($games, 'filterGames'); array_reduce()函数会过滤掉不满足回调函数的所有的元素，本例子的回调函数就是filterGames。任何价格低于11.99的元素会被留下，其他的会被剔除。该代码段的执行结果：Array(  [1] => Array    (      [name] => checkers      [price] => 9.99    )) 对象转换成数组一个需求就是将对象转换成数组形式，方法比你想象的简单很多，仅仅强制转换就可以了！例子：class Game {public $name;public $price;}$game = new Game();$game->name = 'chess';$game->price = 12.99;print_r(array($game)); 执行该例子就会产生如下结果：Array([0] => Game Object  (    [name] => chess    [price] => 12.99  )) 将对象转换成数组会出现一些不可预料的副作用。比如上面的代码段，所有的成员变量都是public类型的，但是对于private私有变量的返回结果会变得不一样。下面是另外一个例子：class Game {public $name;private $_price;public function setPrice($price)  {$this->_price = $price;}}$game = new Game();$game->name = 'chess';$game->setPrice(12.99);print_r(array($game)); 执行该代码片段：Array([0] => Game Object  (    [name] => chess    [_price:Game:private] => 12.99  )) 正如你所看到的，为了进行区分，数组中保存的私有变量的key被自动改变了。数组的“自然排序”PHP对于“字母数字”字符串的排序结果是不确定的。举个例子，假定你有很多图片名称存放于数组中：$arr = array(0=>'madden2011.png',1=>'madden2011-1.png',2=>'madden2011-2.png',3=>'madden2012.png'); 你怎样对这个数组进行排序呢？如果你用sort()对该数组排序，结果是这样的：Array(    [0] => madden2011-1.png    [1] => madden2011-2.png    [2] => madden2011.png    [3] => madden2012.png) 有时候这就是我们想要的，但是我们想保留原来的下标怎么办？解决该问题可以使用natsort()函数，该函数用一种自然的方法对数组排序：<?php$arr = array(0=>'madden2011.png',1=>'madden2011-1.png',2=>'madden2011-2.png',3=>'madden2012.png');natsort($arr);echo ""<pre>""; print_r($arr); echo ""</pre>"";?> 运行结果：Array(    [1] => madden2011-1.png    [2] => madden2011-2.png    [0] => madden2011.png    [3] => madden2012.png) 总结及延伸PHP的数组遍历和操作能力确实非常强大，然而对一些稍复杂问题的解决方法却不是那么明显。其实在任何领域都是这样，一个语言和语法提供的都是基本的操作，对于复杂的问题的解决办法都需要开发者自己的思考、想象力和代码编写来完成。","['php', '数组', '高级', '遍历', '操作', '处理', '方法', 'php', '数组', '处理', '可以', '称为', '语言', '最有', '吸引力', '特性', '之一', '支持', '70', '多种', '数组', '相关', '函数', '不论', '翻转', '一个', '数组', '判断', '某个', '数组', '是否', '存在', '数组', '转换成', '一个', '字符串', '还是', '计算', '数组', '大小', '仅仅', '执行', '一个', '现有', '函数', '可以', '完成', '然而', '一些', '数组', '相关', '任务', '开发者', '要求', '仅仅', '知道', '手册', '某个', '功能', '不能', '解决', '这些', '任务', '需要', 'php', '原始', '特性', '一些', '深入', '理解', '需要', '一些', '解决问题', '想象力', '多维', '关联', '数组', '排序', 'php', '提供', '一些', '数组', '排序', '函数', '比如', 'sort', 'ksort', 'asort', '但是', '没有', '提供', '多维', '关联', '数组', '排序', '比如', '这样', '数组', 'array', 'array', 'name', 'chess', 'price', '12.99', 'array', 'name', 'checkers', 'price', '9.99', 'array', 'name', 'backgammon', 'price', '29.99', '数组', '按照', '升序', '排序', '需要', '自己', '一个', '函数', '用于', '比较', '价格', '然后', '函数', '作为', '回调', '函数', '传递', 'usort', '函数', '实现', '功能', 'function', 'compareprice', 'pricea', 'priceb', 'return', 'pricea', 'price', 'priceb', 'price', 'usort', 'games', 'compareprice', '执行', '程序', '片段', '数组', '排序', '结果', '如下', '所示', 'array', 'array', 'name', 'checkers', 'price', '9.99', 'array', 'name', 'chess', 'price', '12.99', 'array', 'name', 'backgammon', 'price', '29.99', '数组', '按照', '降序', '排序', 'compareprice', '函数', '里面', '两个', '调换', '位置', '可以', '逆序', '遍历', '数组', 'php', 'while', '循环', 'for', '循环', '遍历', '一个', '数组', '常用', '方法', '但是', '怎样', '遍历', '下面', '这个', '数组', 'array', 'array', 'name', 'board', 'games', 'array', 'array', 'name', 'chess', 'price', '12.99', 'array', 'name', 'checkers', 'price', '9.99', 'php', '标准', '库中', '一个', '集合', '迭代', 'iterators', '不仅仅', '能够', '用于', '遍历', '一些', '异构', '数据结构', '比如', '文件系统', '数据库', '查询', '结果', '可以', '一些', '知道', '大小', '嵌套', '数组', '遍历', '比如', '上面', '数组', '遍历', '可以', '使用', 'recursivearrayiterator', '迭代', '进行', 'iterator', 'new', 'recursivearrayiterator', 'games', 'iterator', 'apply', 'iterator', 'navigatearray', 'array', 'iterator', 'function', 'navigatearray', 'iterator', 'while', 'iterator', 'valid', 'if', 'iterator', 'haschildren', 'navigatearray', 'iterator', 'getchildren', 'else', 'printf', 'iterator', 'key', 'iterator', 'current', 'iterator', 'next', '执行', '该段', '代码', '给出', '以下', '结果', 'name', 'boardname', 'chessprice', '12.99', 'name', 'checkersprice', '9.99', '过滤', '关联', '数组', '结果', '假定', '得到', '如下', '一个', '数组', '但是', '仅仅', '操作', '价格', '低于', '11.99', '元素', 'array', 'array', 'name', 'checkers', 'price', '9.99', 'array', 'name', 'chess', 'price', '12.99', 'array', 'name', 'backgammon', 'price', '29.99', '使用', 'array', 'reduce', '函数', '可以', '简单', '实现', 'function', 'filtergames', 'game', 'return', 'game', 'price', '11.99', 'names', 'array', 'filter', 'games', 'filtergames', 'array', 'reduce', '函数', '过滤', '满足', '回调', '函数', '所有', '元素', '例子', '回调', '函数', '就是', 'filtergames', '任何', '价格', '低于', '11.99', '元素', '留下', '其他', '剔除', '代码段', '执行', '结果', 'array', 'array', 'name', 'checkers', 'price', '9.99', '对象', '转换成', '数组', '一个', '需求', '就是', '对象', '转换成', '数组', '形式', '方法', '想象', '简单', '很多', '仅仅', '强制', '转换', '可以', '例子', 'class', 'game', 'public', 'name', 'public', 'price', 'game', 'new', 'game', 'game', 'name', 'chess', 'game', 'price', '12.99', 'print', 'array', 'game', '执行', '例子', '产生', '如下', '结果', 'array', 'game', 'object', 'name', 'chess', 'price', '12.99', '对象', '转换成', '数组', '出现', '一些', '不可', '预料', '副作用', '比如', '上面', '代码段', '所有', '成员', '变量', 'public', '类型', '但是', '对于', 'private', '私有', '变量', '返回', '结果', '变得', '一样', '下面', '另外', '一个', '例子', 'class', 'game', 'public', 'name', 'private', 'price', 'public', 'function', 'setprice', 'price', 'this', 'price', 'price', 'game', 'new', 'game', 'game', 'name', 'chess', 'game', 'setprice', '12.99', 'print', 'array', 'game', '执行', '代码', '片段', 'array', 'game', 'object', 'name', 'chess', 'price', 'game', 'private', '12.99', '正如', '看到', '为了', '进行', '区分', '数组', '保存', '私有', '变量', 'key', '自动', '改变', '数组', '自然', '排序', 'php', '对于', '字母', '数字', '字符串', '排序', '结果', '确定', '举个', '例子', '假定', '很多', '图片', '名称', '存放', '数组', 'arr', 'array', 'madden2011', 'png', 'madden2011', 'png', 'madden2011', 'png', 'madden2012', 'png', '怎样', '这个', '数组', '进行', '排序', '如果', 'sort', '数组', '排序', '结果', '这样', 'array', 'madden2011', 'png', 'madden2011', 'png', 'madden2011', 'png', 'madden2012', 'png', '有时候', '就是', '我们', '想要', '但是', '我们', '保留', '原来', '下标', '怎么办', '解决', '问题', '可以', '使用', 'natsort', '函数', '函数', '一种', '自然', '方法', '数组', '排序', 'php', 'arr', 'array', 'madden2011', 'png', 'madden2011', 'png', 'madden2011', 'png', 'madden2012', 'png', 'natsort', 'arr', 'echo', 'pre', 'print', 'arr', 'echo', 'pre', '运行', '结果', 'array', 'madden2011', 'png', 'madden2011', 'png', 'madden2011', 'png', 'madden2012', 'png', '总结', '延伸', 'php', '数组', '遍历', '操作能力', '确实', '非常', '强大', '然而', '一些', '复杂', '问题', '解决', '方法', '不是', '那么', '明显', '其实', '任何', '领域', '这样', '一个', '语言', '语法', '提供', '基本', '操作', '对于', '复杂', '问题', '解决办法', '需要', '开发者', '自己', '思考', '想象力', '代码', '编写', '完成']","[[-0.21521256 -0.1201243   0.23339885  0.1044284   0.32697062 -0.34967238
  -0.183364    0.48212372 -0.02030189 -0.06730223 -0.02919153 -0.32635479
  -0.19648452  0.59920338  0.18904888 -0.08415509 -0.15150672  0.00648702
  -0.1195887  -0.54864148 -0.02794598  0.22652494 -0.00647131 -0.13496391
   0.11047702 -0.53368455 -0.29199827  0.06969333 -0.24397136 -0.05539903
   0.21398704 -0.02824245  0.00226055 -0.15383774 -0.13698734  0.31037497
  -0.17557084 -0.23901234  0.11673052 -0.78394212 -0.19663718 -0.62456595
  -0.07099105 -0.02759544 -0.15795954 -0.19142776 -0.19825616  0.40774029
  -0.23130189  0.47704908  0.20857548 -0.26282649 -0.16616081 -0.17133342
   0.05642428  0.39194138  0.20943733 -0.08329745  0.09614043 -0.14538061
   0.05421551  0.28081796  0.029116    0.12002489 -0.3844906   0.00685901
   0.0759015  -0.05547622 -0.29912364  0.45522772  0.15534134 -0.22570088
   0.38202449 -0.32428395  0.56952205  0.21486368  0.12582541 -0.12285957
  -0.33474134 -0.14530992 -0.00383335  0.02242165 -0.09742164  0.33419068
  -0.36448445  0.21914378 -0.30260603  0.40777502  0.4734047   0.13446351
   0.30698624  0.11091946  0.37649339  0.20053108  0.19992858  0.33398691
   0.1108237  -0.33245542 -0.12207458 -0.12361637]]"
1030,2012年百度、腾讯、微软、奇虎360、人人、去哪网找工作经历总结,找实习遇到的挫折 2012年4月，首战开启。腾讯、百度、奇虎360、微软、绿盟科技奔赴西安招聘实习生，这是初战，因为没有笔试面试经验，没有对知识进行针对性的复习，我输的很惨。 先说笔试，腾讯笔试通过、百度笔试没过、奇虎360笔试没过、微软忘了投（因为不想写英文简历）、绿盟科技笔试通过。  腾讯一面，考的非常全面，从网络操作系统数据库到算法和当面写代码，不足在于代码写的不规范。面完了面试官对我说，你来错了部门，我这边是客户端开发可你一点都不会，然后推荐我到后台开发。于是去了后台部门继续一面，这次面试，因为我在客户端开发面的感觉不错，所以有点掉以轻心，从面试官看来，那就是心不在焉，结果这次面试失败。血一样的教训1：如果你表现一点点心不在焉，面试立马失败。血一样的教训2：不要问面试官自己通过了没，回答可能虽然是得综合考虑，其实显示了你的不自信。去腾讯二面霸面，告知没有可能。 百度没有面试机会，微软没有面试机会。  奇虎360没有收到面试通知，我去霸面，在阳光下暴晒2天最后还是没能有一次面试机会。当时我感到特别的郁闷和伤心，我等了这么久，连一个面试的机会都不给，是公司不人性化吗？我得从自身找原因，笔试没通过，那就是知识准备不足，下次一定注意。对于霸面来说，自己不自在，公司也不是很欢迎的。血一样的教训3：如果你对笔试不重视，想要用霸面来取得面试机会，成功几率极其的低，请重视笔试。 绿盟科技的笔试中规中矩，考的比较广，前面的奇虎给我伤害较大，后面我也做了一些复习，所以通过了笔试。之后进入面试，面试官说C/C++人太多，要不要试试WEB，我说可以。对于WEB我从大二就开始接触，然后做了很多项目，了解各种技术，比如HTML/CSS/JS/JQUERY/JSON/XML/PHP/JSP/ASP/MYSQL/模版/缓存/框架/MVC，说起WEB我能罗列一大筐，面试的是我后来的实习导师，她主要问我了解哪些实践的技术，表示满意。于是我接到了绿盟的实习Offer。 在绿盟科技实习的日子  绿盟科技是一个很人性化的公司，文化开发多元化，员工积极向上奋发图强，做事认真一丝不苟。虽然只实习了2个月，我想给它这么高的评价。这是我第一次接触实际的工作，导师和总监给了我极大的自由，各种技术培训、技术指导、发衣服、免费喝饮料、聚餐，让我感到工作氛围的和谐自在，同时我学到了python和django的实际开发技术，这对后来我拿到一些其他公司的offer有不可磨灭的作用。    正规战争爆发前的准备  为了准备9月份开始的正规战争，我主要做了一下一些准备：  1、创建程序员求职网www.51projob.com，每天关注往年笔试题面试题  2、实习期间，只看了一本书，该书对我后期找工作的帮助可以成为奠基基础，《编程珠玑》，这是一本神书，里面提到的一些思想，甚至让我在任何面试中都能提出和应用。  3、看完《大话数据结构》、部分《编程之美》、部分《深入理解计算机系统》、《C和指针》、《C++ Primer 4th》、《数据结构与算法分析 C语言描述》部分内容，凡是我看到的内容在笔试面试中都用应用，所以一分努力一分收获一点不差  4、8月底接触到一本书，该书对我的面试起到了决定性作用，《剑指offer》这本书从面试题出发，几乎涵盖了所有可能的解决思路和方法，尤其是里面介绍的考察点，比如代码要检查空指针要释放空间、面试要突出自己的发散思维和联想思维能力等等，这些简直可以成为九阳神功，之后的运用也屡试不爽。  5、同学买了本书一直没看，《这就是搜索引擎》，我拿来翻了翻觉得很有意思，于是从头到尾一周看完，结果后面的互联网面试中，这本书起到了很多的帮助    2012年9月15日正规战争开始-2012年10月15日正规战争基本结束  从9月15开始，各大名企纷纷上阵，百度腾讯微软阿里奇虎人人去哪网美团纷纷驾临西安，航天科技科工等研究所纷纷亮相，每天从早到晚各种跑各种赶场子，有一次上午在西交大参加笔试11点结束，我跑到一个地方参加了一个面试，又奔赴另一个地方参加一个面试，完了赶回西交大参加下午2点的另一场笔试，当时下来脚磨了两个大泡，走路都一拐一拐的。对于笔试，我坚信只要写得多，把自己知道的想到的都写出来，一般都能通过。对于面试，刚开始青涩、拘谨、紧张，慢慢的开始放开、发散、微笑、自信。    如果在9月15附近有笔试机会、面试机会，一定要把握，哪怕是一个很小的公司，你一定要全力以赴高精神应对，因为这是个练级，对后面的发挥极其重要。如果取得了一个offer，你的自信开始建立，之后就能更加充分的发挥自己的能力取得更好的offer。    去哪网，中国最大的旅游酒店订票网站，2010年获得百度的融资，近两年急速扩张高速发展。2012年全国招聘人数很是庞大。我之前投了简历，笔试的时候却忘了去，后来听说给出了18W的薪水，我极其后悔。当听一个朋友说还有霸面机会，我二话没说拿上简历就冲了。到了那里说后台人太多，要不要试试WEB前端，我说可以试试看。面试官很和蔼，给我出了10道JS题目，只做对4个，正忐忑不安的时候，面试官说这个已经不错了。于是让我写了两个函数，一个普通的字符串处理，一个ajax调用，我写了很久，把我知道的都给抖了出来；之后二面聊得比较简单，以为WEB前端貌似非常的缺人，最后得到了offer。这个offer我极其珍惜，因为是我对自己的第一个证明，后面的面试也有了自信和底气。    搜狗，在同学们口中相传的，搜狗是个发展很不错的公司，有王小川这样优秀的产品经理，前途很是辉煌。然而搜狗给我的面试体验却不好，一面问了我很多陌生的面试算法题，每次我都绞尽脑汁的从多角度思考，勉强给出结果，后来问了一些WEB开发、搜索相关的知识才有所弥补。二面过程，简直是我从找工作到结束以来最惨痛的一次经历，该面试官应该是处于思想领域的一位算法高手，问的问题不从常理出发，所有的都得自己联想和发散思考，想的我头都麻了，最后面给出的结果他都不满意，总共面了2个小时让我也错过了GOOGLE的笔试，他给我的评价很差说我不适合搞算法。但是说我开发还行，把我推荐到WEB开发部门。第二天参加WEB开发部门一面，面试官不问我框架、缓存、架构、原理，偏偏喜欢问我JS的语法细节，让我顿时从头到尾做了一下无脑人士。本以为搜狗已经没希望了，结果在10月20日左右，收到搜狗电话，让我准备第二天的电话面试，顿时感觉稍微有点信心。电话面试中，问了不少实验室的研究方向，跟自然语言处理相关的，因为自己在实验室做的东西不是很深入，所以一些东西也未能说明白，搜狗的通知现在还在等，说不定还有希望。    百度，百度的面试很正规考察的更加深入、有广度并且着重算法知识的基本功，一面简直可以成为算法面，各种面试题纷至沓来，写程序，不过有《剑指offeer》和《编程珠玑》两本书的内功修为，我勉强应付了下来，当然一些发散性的题目，我从各个角度出发，也给出了简单的答案。之后开始问操作系统、数据库、linux，自己是考研过来的，所以这些都还记得一些，一面通过。二面是比较顺利的一次面试，面试官看我简历较多WEB经历，于是和我讨论python、web开发、apache、tomcat、java等一些实践经验，面试官很是厉害，我说我阅读过django代码，他直接给我提出了一个关键性的问题，就是django对请求的执行流程，我知道这是碰上高手了，因为他说他也读过源码，于是老老实实把我自己知道的给说了一些，面试官微笑了一下。之后问我一个发散的问题，比如比赛怎样选出最终的冠军，刚开始我用归并，面试官说太复杂了，并且奇数怎么处理，后来想到冒泡反而正确了。三面遇到一个让我感觉上很舒服的人，他的谈吐很自信，让人感到他知识的渊博，给我一个系统设计题，我就从负载均衡、redis缓存、mysql主从同步等各方面进行了尝试，面试官表示满意。最后拿到了百度的offer。    腾讯，笔试稍微有点不正规，因为我看到很多人在讨论。后来收到了一面通知，一面时间不是很长，首先自我介绍的时候，我侧重介绍了对WEB开发的经验和一些实际的理解，然后面试官问我一些HTTP的原理，让我写HTTP的header，我写了个大概，又问了一下C++的面向对象部分的知识。之后和我聊了一些开发的经验，写了个小程序就结束了。因为我要去北京，并且自己坚信要去一个公司就去总部，所以二面就没参加。    人人网，人人其实最近几年在积聚实力，招聘的人数还是很多。HR是个美女很健谈，等一面的时候就聊了一些，她了解到我在做一个网站表示很赞赏。一面也很顺利，因为面试官研究生方向和我一样，和我聊了一下自然语言处理的相关技术，然后写了个算法题，之后问了一些C++、WEB开发基础知识就过了。二面面试官和我一个学校，聊得也很欢，但是他给我的评价却不高，给我出了3个面试题，其实都是我以前做过的我都知道答案，然而他给我的要求是不要用书上看到的，因为都是背下来的。于是我就绥了，被各种提示用新思路换角度解决，最后虽然给出了方案，但是时间有点久表示对我不太满意。之后让我问问题，我了解到是同校学长，就让给我提建议，学长说了很多，让我受益匪浅，并说我的工程经验比较多，还是有机会的。之后收到了人人offer。    期间有很多国企，比如国家工程中心、航天3院、航天5院、航天2院、大唐电信我都投了简历，并且有几个参加了面试。尤其航天恒星公司，参加了10个面试官面试我一个人的高紧张大型面试场面；和大唐电信的面试官聊得非常开心等等。后来因为个人比较想去互联网公司，就没有费心去找。    微软，微软公司的气魄和实力在面试的时候完美的表现了出来，国际化、富有、有气度气魄，显示了国际大公司的形象。一面面试官关注性格、负责任的态度、能力、特长等，几乎没问技术题，一直问我自己比别人强的地方在哪里，因为这些我平时都没想过，并且别的公司也都没问过，面试完让我惊出一身冷汗。二面面试官非常和蔼，面带微笑，问我的题目非常有广度，我答得都是一些基本的概念，可能因为了解的还算比较多，面试官微笑结束。最后收到三面通知，竟然是英文面试，因为之前从来没有和人用英文交流过，所以我很紧张，面试的时候问我一些项目的问题，我都没能很好的解答，对于一些开放性的问题，语言限制了我的思考，给出的方案自己都感觉说不出来，最后三面失败。当时听到这个消息我很沮丧了一下，因为越到后面找工作，对于每个公司我既然投了，就会用百分之百的精力去应对，失败的结果让我感觉不是很好。不过这之间确实锻炼了不少能力，尤其英文面试，我毕竟也噼里啪啦说了近1个小时，之后的几天每天走在路上都想蹦出个英文单词炫一下。感觉对英语心理上也是有个战胜吧。    最后的回顾 到现在基本上互联网公司已经结束了，简单回顾一下，我想说以下一些经验和教训： 1、一定要重视笔试 2、面试时一定要微笑、多用手势、自信、真正的思考、发散思维和快速回答 3、多做准备，多复习看书，可以说任何你看到的知识都能在面试笔试中遇到， 4、有针对性，如果你不想去深圳，就不要投那边的公司，多把精力放到你的目标上 5、一旦有个目标，那就用你所有的精力和能量去应对吧。   今天在博客园上看了一篇文章，题目是 一个面试官眼里的校园招聘——写给求职心切的应届毕业生 感觉写的很好，于是我做了以下的回复来总结我这期间的路程： “终于找完工作了，整个过程真是惊险刺激加紧张。我遇到的面试官都还不错，能感觉出来想要从多方面对我了解：代码、算法、思维敏捷度、知识宽度等等，大公司考的比较综合比如设计思路和整体把握，小公司考的比较具体比如特定的语言语法。每次面试，必定要对自己“伪装”一下，早上起来洗个头，照照镜子，整理整理衣服，走在路上深呼吸，说10遍“我能成功”，电梯里不停的给自己打气。简历面试官先打招呼，多微笑，回答问题时看着对方的眼睛，多用手势解释，对于问题表现的要深究不气馁，思考的时候要做出思考的样子，想出新点子的时候要说”哎呀，我想到一个新思路“，等等。这是一个博弈的过程，是一个PK的过程。你想要什么样的人，我就变成什么样的人，我自己都不知道我是什么样的人，那我变成你需要的人，不一定是伪装对吧？”,"['2012', '百度', '腾讯', '微软', '奇虎', '360', '人人', '哪网', '工作', '经历', '总结', '实习', '遇到', '挫折', '2012', '首战', '开启', '腾讯', '百度', '奇虎', '360', '微软', '绿盟', '科技', '奔赴', '西安', '招聘', '实习生', '这是', '初战', '因为', '没有', '笔试', '面试', '经验', '没有', '知识', '进行', '针对性', '复习', '我输', '很惨', '先说', '笔试', '腾讯', '笔试', '通过', '百度', '笔试', '奇虎', '360', '笔试', '微软', '因为', '不想', '英文简历', '绿盟', '科技', '笔试', '通过', '腾讯', '一面', '非常', '全面', '网络操作系统', '数据库', '算法', '当面', '代码', '不足', '在于', '代码', '规范', '面完', '面试官', '部门', '这边', '客户端', '开发', '一点', '不会', '然后', '推荐', '后台', '开发', '于是', '后台', '部门', '继续', '一面', '这次', '面试', '因为', '客户端', '开发', '感觉', '不错', '所以', '有点', '掉以轻心', '面试官', '看来', '就是', '心不在焉', '结果', '这次', '面试', '失败', '一样', '教训', '如果', '表现', '一点点', '心不在焉', '面试', '立马', '失败', '一样', '教训', '不要', '面试官', '自己', '通过', '回答', '可能', '虽然', '综合', '考虑', '其实', '显示', '自信', '腾讯', '二面', '霸面', '告知', '没有', '可能', '百度', '没有', '面试', '机会', '微软', '没有', '面试', '机会', '奇虎', '360', '没有', '收到', '面试', '通知', '霸面', '阳光', '暴晒', '最后', '还是', '没能', '一次', '面试', '机会', '当时', '感到', '特别', '郁闷', '伤心', '这么久', '一个', '面试', '机会', '公司', '人性化', '自身', '原因', '笔试', '通过', '就是', '知识', '准备', '不足', '下次', '一定', '注意', '对于', '霸面', '来说', '自己', '不自在', '公司', '不是', '欢迎', '一样', '教训', '如果', '笔试', '重视', '想要', '用霸面', '取得', '面试', '机会', '成功', '几率', '极其', '重视', '笔试', '绿盟', '科技', '笔试', '中规中矩', '比较', '前面', '奇虎', '伤害', '较大', '后面', '一些', '复习', '所以', '通过', '笔试', '之后', '进入', '面试', '面试官', 'c++', '人太多', '不要', '试试', 'web', '可以', '对于', 'web', '大二', '开始', '接触', '然后', '很多', '项目', '了解', '各种', '技术', '比如', 'html', 'css', 'js', 'jquery', 'json', 'xml', 'php', 'jsp', 'asp', 'mysql', '模版', '缓存', '框架', 'mvc', '说起', 'web', '我能', '罗列', '一大', '面试', '后来', '实习', '导师', '主要', '了解', '哪些', '实践', '技术', '表示满意', '于是', '接到', '绿盟', '实习', 'offer', '绿盟', '科技', '实习', '日子', '绿盟', '科技', '一个', '人性化', '公司', '文化', '开发', '多元化', '员工', '积极向上', '奋发图强', '做事', '认真', '一丝不苟', '虽然', '实习', '这么', '评价', '第一次', '接触', '实际', '工作', '导师', '总监', '极大', '自由', '各种', '技术培训', '技术', '指导', '衣服', '免费', '饮料', '聚餐', '感到', '工作', '氛围', '和谐', '同时', '学到', 'python', 'django', '实际', '开发技术', '后来', '拿到', '一些', '其他', '公司', 'offer', '不可磨灭', '作用', '正规', '战争', '爆发', '准备', '为了', '准备', '月份', '开始', '正规', '战争', '主要', '一下', '一些', '准备', '创建', '程序员', '求职网', 'www.51', 'projob', 'com', '每天', '关注', '往年', '笔试', '面试题', '实习', '期间', '本书', '该书', '后期', '工作', '帮助', '可以', '成为', '奠基', '基础', '编程', '珠玑', '这是', '一本', '神书', '里面', '提到', '一些', '思想', '甚至', '任何', '面试', '提出', '应用', '大话', '数据结构', '部分', '编程', '之美', '部分', '深入', '理解', '计算机系统', '指针', 'c++', 'primer', '4th', '数据结构', '算法', '分析', 'c语言', '描述', '部分', '内容', '凡是', '看到', '内容', '笔试', '面试', '应用', '所以', '一分', '努力', '一分收获', '一点', '不差', '月底', '接触', '本书', '该书', '面试', '起到', '决定性', '作用', 'offer', '本书', '面试题', '出发', '几乎', '涵盖', '所有', '可能', '解决', '思路', '方法', '尤其', '里面', '介绍', '考察点', '比如', '代码', '检查', '指针', '释放', '空间', '面试', '突出', '自己', '发散', '思维', '联想', '思维能力', '等等', '这些', '简直', '可以', '成为', '九阳', '神功', '之后', '运用', '屡试不爽', '同学', '本书', '一直', '就是', '搜索引擎', '拿来', '觉得很有', '意思', '于是', '从头到尾', '一周', '结果', '后面', '互联网', '面试', '本书', '起到', '很多', '帮助', '2012', '15', '正规', '战争', '开始', '2012', '10', '15', '正规', '战争', '基本', '结束', '15', '开始', '各大', '名企', '纷纷', '上阵', '百度', '腾讯', '微软', '阿里', '奇虎', '人人', '网美团', '纷纷', '驾临', '西安', '航天', '科技', '科工', '研究所', '纷纷', '亮相', '每天', '从早到晚', '各种', '各种', '赶场子', '一次', '上午', '交大', '参加', '笔试', '11', '结束', '一个', '地方', '参加', '一个', '面试', '奔赴', '一个', '地方', '参加', '一个', '面试', '赶回', '交大', '参加', '下午', '一场', '笔试', '当时', '下来', '脚磨', '两个', '大泡', '走路', '一拐', '一拐', '对于', '笔试', '坚信', '只要', '自己', '知道', '想到', '出来', '一般', '通过', '对于', '面试', '开始', '青涩', '拘谨', '紧张', '慢慢', '开始', '放开', '发散', '微笑', '自信', '如果', '15', '附近', '笔试', '机会', '面试', '机会', '一定', '把握', '哪怕', '一个', '很小', '公司', '一定', '全力以赴', '精神', '应对', '因为', '练级', '后面', '发挥', '极其重要', '如果', '取得', '一个', 'offer', '自信', '开始', '建立', '之后', '更加', '充分', '发挥', '自己', '能力', '取得', '更好', 'offer', '哪网', '中国', '最大', '旅游', '酒店', '订票', '网站', '2010', '获得', '百度', '融资', '近两年', '急速', '扩张', '高速', '发展', '2012', '全国', '招聘', '人数', '庞大', '之前', '投了', '简历', '笔试', '时候', '后来', '听说', '给出', '18w', '薪水', '极其', '后悔', '一个', '朋友', '还有', '霸面', '机会', '二话没说', '简历', '那里', '后台', '人太多', '不要', '试试', 'web', '前端', '可以', '试试看', '面试官', '和蔼', '10', 'js', '题目', '忐忑不安', '时候', '面试官', '这个', '已经', '不错', '于是', '两个', '函数', '一个', '普通', '字符串', '处理', '一个', 'ajax', '调用', '知道', '出来', '之后', '二面', '聊得', '比较简单', '以为', 'web', '前端', '貌似', '非常', '缺人', '最后', '得到', 'offer', '这个', 'offer', '极其', '珍惜', '因为', '自己', '第一个', '证明', '后面', '面试', '自信', '底气', '搜狗', '同学', '口中', '相传', '搜狗', '发展', '不错', '公司', '有王', '小川', '这样', '优秀', '产品', '经理', '前途', '辉煌', '然而', '搜狗', '面试', '体验', '不好', '一面', '很多', '陌生', '面试', '算法', '每次', '绞尽脑汁', '多角度', '思考', '勉强', '给出', '结果', '后来', '一些', 'web', '开发', '搜索', '相关', '知识', '有所', '弥补', '二面', '过程', '简直', '工作', '结束', '以来', '惨痛', '一次', '经历', '面试官', '应该', '处于', '思想', '领域', '一位', '算法', '高手', '问题', '常理', '出发', '所有', '自己', '联想', '发散', '思考', '最后', '给出', '结果', '满意', '总共', '小时', '错过', 'google', '笔试', '评价', '很差', '适合', '算法', '但是', '开发', '推荐', 'web', '开发', '部门', '第二天', '参加', 'web', '开发', '部门', '一面', '面试官', '不问', '框架', '缓存', '架构', '原理', '偏偏', '喜欢', 'js', '语法', '细节', '顿时', '从头到尾', '一下', '无脑', '人士', '以为', '搜狗', '已经', '希望', '结果', '10', '20', '左右', '收到', '搜狗', '电话', '准备', '第二天', '电话', '面试', '顿时', '感觉', '稍微', '有点', '信心', '电话', '面试', '不少', '实验室', '研究', '方向', '自然语言', '处理', '相关', '因为', '自己', '实验室', '东西', '不是', '深入', '所以', '一些', '东西', '未能', '明白', '搜狗', '通知', '现在', '说不定', '还有', '希望', '百度', '百度', '面试', '正规', '考察', '更加', '深入', '广度', '并且', '着重', '算法', '知识', '基本功', '一面', '简直', '可以', '成为', '算法', '各种', '面试题', '纷至沓来', '程序', '不过', 'offeer', '编程', '珠玑', '两本书', '内功', '修为', '勉强', '应付', '下来', '当然', '一些', '发散', '题目', '各个', '角度', '出发', '给出', '简单', '答案', '之后', '开始', '操作系统', '数据库', 'linux', '自己', '考研', '过来', '所以', '这些', '记得', '一些', '一面', '通过', '二面', '比较顺利', '一次', '面试', '面试官', '简历', 'web', '经历', '于是', '讨论', 'python', 'web', '开发', 'apache', 'tomcat', 'java', '一些', '实践经验', '面试官', '厉害', '阅读', 'django', '代码', '直接', '提出', '一个', '关键性', '问题', '就是', 'django', '请求', '执行', '流程', '知道', '这是', '碰上', '高手', '因为', '读过', '源码', '于是', '老老实实', '自己', '知道', '一些', '面试官', '微笑', '一下', '之后', '一个', '发散', '问题', '比如', '比赛', '怎样', '选出', '最终', '冠军', '开始', '我用', '归并', '面试官', '复杂', '并且', '奇数', '怎么', '处理', '后来', '想到', '冒泡', '反而', '正确', '三面', '遇到', '一个', '感觉', '舒服', '谈吐', '自信', '感到', '知识', '渊博', '一个', '系统', '设计', '负载', '均衡', 'redis', '缓存', 'mysql', '主从', '同步', '方面', '进行', '尝试', '面试官', '表示满意', '最后', '拿到', '百度', 'offer', '腾讯', '笔试', '稍微', '有点', '正规', '因为', '看到', '很多', '讨论', '后来', '收到', '一面', '通知', '一面', '时间', '不是', '很长', '首先', '自我介绍', '时候', '侧重', '介绍', 'web', '开发', '经验', '一些', '实际', '理解', '然后', '面试官', '一些', 'http', '原理', 'http', 'header', '大概', '一下', 'c++', '面向对象', '部分', '知识', '之后', '一些', '开发', '经验', '程序', '结束', '因为', '我要', '北京', '并且', '自己', '坚信', '一个', '公司', '总部', '所以', '二面', '参加', '人人', '人人', '其实', '最近', '几年', '积聚', '实力', '招聘', '人数', '还是', '很多', 'hr', '美女', '健谈', '一面', '时候', '一些', '了解', '一个', '网站', '表示', '赞赏', '一面', '顺利', '因为', '面试官', '研究生', '方向', '一样', '一下', '自然语言', '处理', '相关', '技术', '然后', '算法', '之后', '一些', 'c++', 'web', '开发', '基础知识', '二面', '面试官', '一个', '学校', '聊得', '很欢', '但是', '评价', '面试题', '其实', '以前', '做过', '知道', '答案', '然而', '要求', '不要', '书上', '看到', '因为', '背下来', '于是', '各种', '提示', '新思路', '角度', '解决', '最后', '虽然', '给出', '方案', '但是', '时间', '有点', '表示', '满意', '之后', '问题', '了解', '同校', '学长', '就让', '建议', '学长', '很多', '受益匪浅', '工程', '经验', '比较', '还是', '机会', '之后', '收到', '人人', 'offer', '期间', '很多', '国企', '比如', '国家', '工程', '中心', '航天', '航天', '航天', '大唐电信', '简历', '并且', '几个', '参加', '面试', '尤其', '航天', '恒星', '公司', '参加', '10', '面试官', '面试', '一个', '紧张', '大型', '面试', '场面', '大唐电信', '面试官', '聊得', '非常', '开心', '等等', '后来', '因为', '个人', '比较', '互联网', '公司', '没有', '费心', '微软', '微软公司', '气魄', '实力', '面试', '时候', '完美', '表现', '出来', '国际化', '富有', '气度', '气魄', '显示', '国际', '公司', '形象', '一面', '面试官', '关注', '性格', '负责', '态度', '能力', '特长', '几乎', '没问', '技术', '一直', '自己', '别人', '地方', '哪里', '因为', '这些', '平时', '没想', '并且', '别的', '公司', '问过', '面试', '完让', '惊出', '一身', '冷汗', '二面', '面试官', '非常', '和蔼', '面带微笑', '题目', '非常', '广度', '我答', '一些', '基本', '概念', '可能', '因为', '了解', '比较', '面试官', '微笑', '结束', '最后', '收到', '三面', '通知', '竟然', '英文', '面试', '因为', '之前', '从来', '没有', '人用', '英文', '交流', '所以', '紧张', '面试', '时候', '一些', '项目', '问题', '没能', '解答', '对于', '一些', '开放性', '问题', '语言', '限制', '思考', '给出', '方案', '自己', '感觉', '说不出来', '最后', '三面', '失败', '当时', '听到', '这个', '消息', '沮丧', '一下', '因为', '越到', '后面', '工作', '对于', '每个', '公司', '既然', '投了', '就会用', '百分之百', '精力', '应对', '失败', '结果', '感觉', '不是', '不过', '之间', '确实', '锻炼', '不少', '能力', '尤其', '英文', '面试', '毕竟', '噼里啪啦', '小时', '之后', '几天', '每天', '路上', '蹦出', '英文单词', '一下', '感觉', '英语', '心理', '战胜', '最后', '回顾', '现在', '基本上', '互联网', '公司', '已经', '结束', '简单', '回顾', '一下', '以下', '一些', '经验', '教训', '一定', '重视', '笔试', '面试', '一定', '微笑', '多用', '手势', '自信', '真正', '思考', '发散', '思维', '快速', '回答', '准备', '复习', '看书', '可以', '任何', '看到', '知识', '面试', '笔试', '遇到', '针对性', '如果', '不想', '深圳', '不要', '那边', '公司', '精力', '放到', '目标', '一旦', '有个', '目标', '所有', '精力', '能量', '应对', '今天', '博客园', '一篇', '文章', '题目', '一个', '面试官', '眼里', '校园', '招聘', '写给', '求职', '心切', '应届', '毕业生', '感觉', '于是', '以下', '回复', '总结', '期间', '路程', '终于', '工作', '整个', '过程', '真是', '惊险刺激', '紧张', '遇到', '面试官', '不错', '感觉', '出来', '想要', '多方面', '了解', '代码', '算法', '思维', '敏捷', '知识', '宽度', '等等', '公司', '比较', '综合', '比如', '设计', '思路', '整体', '把握', '公司', '比较', '具体', '比如', '特定', '语言', '语法', '每次', '面试', '必定', '自己', '伪装', '一下', '早上', '起来', '个头', '照镜子', '整理', '整理', '衣服', '路上', '深呼吸', '10', '我能', '成功', '电梯', '不停', '自己', '打气', '简历', '面试官', '打招呼', '微笑', '回答', '问题', '看着', '对方', '眼睛', '多用', '手势', '解释', '对于', '问题', '表现', '深究', '气馁', '思考', '时候', '做出', '思考', '样子', '出新', '点子', '时候', '要说', '哎呀', '想到', '一个', '新思路', '等等', '这是', '一个', '博弈', '过程', '一个', 'pk', '过程', '想要', '什么样', '变成', '什么样', '自己', '知道', '什么样', '变成', '需要', '一定', '伪装']","[[-0.2261788  -0.11266903  0.20140835  0.15546639  0.2461622  -0.31186761
  -0.15116928  0.42405366 -0.01197909 -0.02254374 -0.05565035 -0.29904801
  -0.14990669  0.51892542  0.12829441 -0.09752389 -0.12845871 -0.01038445
  -0.07776621 -0.39129649  0.01968062  0.22024007 -0.00622641 -0.08688663
   0.0937845  -0.4700299  -0.2502187   0.06938005 -0.17610326 -0.05424639
   0.21586751  0.03279154 -0.01179596 -0.11809407 -0.09440686  0.29647612
  -0.11796564 -0.1953284   0.0945098  -0.66424326 -0.14152269 -0.50539245
  -0.03773677 -0.06457799 -0.14412936 -0.13529638 -0.24644559  0.40628712
  -0.14523872  0.34303397  0.16167816 -0.23491664 -0.09262559 -0.20863025
   0.05262996  0.3410516   0.21030667 -0.05495244  0.08351808 -0.07661679
   0.04247159  0.25158069  0.01794446  0.07445259 -0.33778519 -0.00790978
   0.03446869 -0.01322862 -0.205492    0.38700819  0.10973339 -0.21275568
   0.35300663 -0.29006648  0.50492825  0.1572099   0.19513444 -0.13216113
  -0.22688756 -0.1915151  -0.07323525 -0.00277366 -0.05803766  0.30159543
  -0.32756058  0.1789955  -0.2521082   0.37154759  0.40803027  0.12209318
   0.25935829  0.10886418  0.31364134  0.16034308  0.16460078  0.33517037
   0.08861139 -0.25869662  0.00850267 -0.07196229]]"
1036,Django基本命令最全收集,"Django是一个python用于快速开发web应用的框架，它的很多特性使用极其方便快捷。当创建一个django项目和对项目进行管理的时候，会涉及到很多命令行命令。本文对其进行一些总结，以供方便查询。 django-admin.py startproject mysite 该命令在当前目录创建一个 mysite 目录。 django-admin.py这个文件在C:\Python27\Lib\site-packages\django\bin文件夹里，可以把该目录添加到系统Path里面。 Django内置一个轻量级的Web服务器。 进入 mysite 目录的话，现在进入其中，并运行 python manage.py runserver 命令 启动服务器，用http://127.0.0.1:8000/可以进行浏览了，8000是默认的端口号。 python manage.py runserver 8080 更改服务器端口号 python manage.py shell 启动交互界面 python manage.py startapp books 创建一个app，名为books python manage.py validate 验证Django数据模型代码是否有错误 python manage.py sqlall books 为模型产生sql代码 python manage.py syncdb 运行sql语句，创建模型相应的Table python manage.py dbshell 启动数据库的命令行工具 manage.py sqlall books 查看books这个app下所有的表 python manage.py syncdb 同步数据库,生成管理界面使用的额外的数据库表","['django', '基本', '命令', '最全', '收集', 'django', '一个', 'python', '用于', '快速', '开发', 'web', '应用', '框架', '很多', '特性', '使用', '极其', '方便快捷', '创建', '一个', 'django', '项目', '项目', '进行', '管理', '时候', '涉及', '很多', '命令行', '命令', '本文', '进行', '一些', '总结', '以供', '方便', '查询', 'django', 'admin', 'py', 'startproject', 'mysite', '命令', '当前目录', '创建', '一个', 'mysite', '目录', 'django', 'admin', 'py', '这个', '文件', 'python27', 'lib', 'site', 'packages', 'django', 'bin', '文件夹', '可以', '目录', '添加', '系统', 'path', '里面', 'django', '内置', '一个', '轻量级', 'web', '服务器', '进入', 'mysite', '目录', '的话', '现在', '进入', '其中', '运行', 'python', 'manage', 'py', 'runserver', '命令', '启动', '服务器', 'http', '127.0', '0.1', '8000', '可以', '进行', '浏览', '8000', '默认', '端口号', 'python', 'manage', 'py', 'runserver', '8080', '更改', '服务器端', '口号', 'python', 'manage', 'py', 'shell', '启动', '交互', '界面', 'python', 'manage', 'py', 'startapp', 'books', '创建', '一个', 'app', '名为', 'books', 'python', 'manage', 'py', 'validate', '验证', 'django', '数据模型', '代码', '是否', '错误', 'python', 'manage', 'py', 'sqlall', 'books', '模型', '产生', 'sql', '代码', 'python', 'manage', 'py', 'syncdb', '运行', 'sql', '语句', '创建', '模型', '相应', 'table', 'python', 'manage', 'py', 'dbshell', '启动', '数据库', '命令行', '工具', 'manage', 'py', 'sqlall', 'books', '查看', 'books', '这个', 'app', '所有', 'python', 'manage', 'py', 'syncdb', '同步', '数据库', '生成', '管理', '界面', '使用', '额外', '数据库']","[[-2.65499624e-01 -1.44903007e-01  2.13233207e-01  1.96429194e-01
   2.85670821e-01 -3.49664592e-01 -1.86286299e-01  5.09759466e-01
  -9.80119907e-03 -2.33647618e-02 -7.24965584e-02 -3.40613973e-01
  -1.77204655e-01  6.06292941e-01  1.45005644e-01 -1.19413300e-01
  -1.53066285e-01  2.13807450e-03 -9.10991622e-02 -4.44185180e-01
   3.60882574e-02  2.54404430e-01 -8.33926795e-03 -9.82347210e-02
   1.19320601e-01 -5.51727601e-01 -2.90139144e-01  8.95157028e-02
  -2.02910761e-01 -6.53821030e-02  2.48329016e-01  4.85023125e-02
  -2.02880812e-02 -1.47320663e-01 -1.18888911e-01  3.56149647e-01
  -1.40651275e-01 -2.26126644e-01  1.18428749e-01 -7.67425655e-01
  -1.59422366e-01 -5.69257675e-01 -2.70796649e-02 -7.02587330e-02
  -1.71780030e-01 -1.50652171e-01 -2.79208761e-01  4.83276161e-01
  -1.52209232e-01  3.80215184e-01  1.92302753e-01 -2.87368364e-01
  -1.01865802e-01 -2.40069923e-01  7.22616406e-02  4.03609091e-01
   2.47104568e-01 -5.99780024e-02  1.10029602e-01 -9.71933825e-02
   5.80238514e-02  2.89599718e-01  2.97718460e-02  8.38711914e-02
  -3.95635638e-01 -1.18262021e-02  2.60258965e-02  1.12987094e-04
  -2.44850618e-01  4.44293999e-01  1.35661497e-01 -2.42537307e-01
   4.10774557e-01 -3.36297136e-01  5.83836759e-01  1.80263808e-01
   2.23990866e-01 -1.49014497e-01 -2.72576962e-01 -2.15637162e-01
  -9.42038235e-02 -8.56224829e-03 -6.86485027e-02  3.48231150e-01
  -3.80388220e-01  2.01733978e-01 -2.88347598e-01  4.23370089e-01
   4.75298746e-01  1.34483765e-01  3.04110188e-01  1.22185551e-01
   3.56632771e-01  1.98271147e-01  1.91777088e-01  3.95844125e-01
   9.88971425e-02 -2.86936869e-01  6.66269674e-03 -9.61076003e-02]]"
1044,织梦DEDECMS简洁蓝色模板免费下载（资讯文章类）,模板信息：该模板是我为另一个网站程序员求职网设计的模板，主要分为首页、文章列表页和文章内容页三个模板主要基调：蓝色，简洁，朴素文章页需要安装两个插件：无觅相关文章插件和多说文章评论插件。可以用于：文章站、资讯站、门户站、图片站适用版本：织梦DEDECMS 5.7版本、编码是UTF-8使用方法：将压缩包解压后，另起一个名字，上传到templets目录下面，进织梦后台系统设置，在模板默认风格设置的地方写上模板名字，然后更新全站就可以了。需要安装无觅和多说两个插件。这两个插件我用的很好，极力推荐。下载地址：http://pan.baidu.com/share/link?shareid=122080&uk=1376935646模板使用效果站点首页模板:文章列表页模板：文章详细页模板：本文来自疯狂的蚂蚁的博客：www.crazyant.net,"['织梦', 'dedecms', '简洁', '蓝色', '模板', '免费', '下载', '资讯', '文章', '模板', '信息', '模板', '一个', '网站', '程序员', '求职网', '设计', '模板', '主要', '分为', '首页', '文章', '列表', '文章内容', '三个', '模板', '主要', '基调', '蓝色', '简洁', '朴素', '文章', '需要', '安装', '两个', '插件', '无觅', '相关', '文章', '插件', '文章', '评论', '插件', '可以', '用于', '文章', '资讯', '门户站', '图片站', '适用', '版本', '织梦', 'dedecms', '5.7', '版本', '编码', 'utf', '使用', '方法', '压缩包', '解压', '另起', '一个', '名字', '传到', 'templets', '目录', '下面', '进织', '后台', '系统', '设置', '模板', '默认', '风格', '设置', '地方', '模板', '名字', '然后', '更新', '全站', '可以', '需要', '安装', '无觅', '两个', '插件', '两个', '插件', '我用', '极力推荐', '下载', '地址', 'http', 'pan', 'baidu', 'com', 'share', 'link', 'shareid', '122080', 'uk', '1376935646', '模板', '使用', '效果', '站点', '首页', '模板', '文章', '列表', '模板', '文章', '详细', '模板', '本文', '来自', '疯狂', '蚂蚁', '博客', 'www', 'crazyant', 'net']","[[-2.65303154e-01 -1.44700823e-01  2.45738961e-01  2.63809120e-01
   2.30758676e-01 -3.88049694e-01 -1.60279292e-01  5.20701342e-01
  -2.01101132e-02 -3.40734509e-02 -9.72118480e-02 -3.87079939e-01
  -1.58026937e-01  6.07699219e-01  1.15000352e-01 -1.38866959e-01
  -1.50613315e-01  1.08741658e-02 -4.89261537e-02 -4.11568308e-01
   3.52520613e-02  2.70501532e-01 -5.16167734e-02 -1.33209029e-01
   7.03472329e-02 -5.27794236e-01 -3.23701695e-01  9.87840414e-02
  -1.93882060e-01 -7.04292486e-02  2.31786553e-01  1.08784259e-01
   1.87717907e-04 -1.32695933e-01 -1.63187945e-01  3.73188972e-01
  -1.38134236e-01 -2.29193384e-01  9.57663612e-02 -7.31898904e-01
  -1.20102291e-01 -5.64607555e-01 -2.26724409e-02 -7.47636265e-02
  -1.53756899e-01 -1.99826511e-01 -3.42625783e-01  4.91668745e-01
  -6.53394401e-02  3.64288049e-01  1.40524185e-01 -3.02616524e-01
  -2.40371253e-02 -2.75330778e-01  4.00204862e-02  4.34501625e-01
   2.36663789e-01 -7.26186071e-02  1.23403131e-01 -9.21930808e-02
   9.91948425e-02  2.68680751e-01  1.84751944e-02  8.26735328e-02
  -3.76971881e-01  1.15154502e-02 -1.47577368e-02  3.84698990e-02
  -2.10627290e-01  4.49267943e-01  1.04983238e-01 -2.29653978e-01
   4.40357391e-01 -3.40206499e-01  6.03575411e-01  2.32417888e-01
   2.92326035e-01 -1.96876441e-01 -2.20100611e-01 -2.55732096e-01
  -1.29429516e-01  2.09822788e-03 -9.03712437e-02  3.86638817e-01
  -4.15384642e-01  1.89974705e-01 -2.97208999e-01  4.92256755e-01
   5.32753835e-01  1.62144020e-01  2.61646847e-01  1.35532778e-01
   3.44921644e-01  1.78479458e-01  1.98704415e-01  4.65503301e-01
   7.74554228e-02 -2.56268887e-01  1.15520826e-01 -9.12516210e-02]]"
1055,WIN7使用VisualSVN建立SVN服务器,"使用SVN开发十分的方便，这样就不用每次都拷贝粘贴来备份了，网上看到一篇给自己的windows电脑安装SVN服务器的使用非常方便。1、下载安装文件（服务器端和客户端）服务器端采用VisualSVN，一个可用的下载地址是：http://idc218b.newhua.com/down/VisualSVN-Server-2.1.2.zip，如果链接失效，从百度谷歌搜索就可以了，很多下载地址。客户端采用大家熟悉的Tortoisesvn，没错，就是那个小乌龟，官方下载地址是：http://tortoisesvn.net/服务器端用来存放提交的文件，客户端用来连接服务器端，提交和下载服务器端的文件，（这个不用我多说了吧，下一话题^_^）2、安装服务器端解压缩下载的文件VisualSVN-Server-2.1.2.zip，双击VisualSVN-Server-2.1.2.msi进行安装安装过程中有一个界面是选择安装的组件，选择第一个“VisualSVN Server and Management Console”就可以了。如图下一个界面的设置如图：可以更改目录，也可以更改端口，注意，端口不要和已经使用的端口冲突，去掉“use secure connnection https://”的选项这里的C:/Repositories是服务器文档目录，也就是我们提交到SVN里的文档的存放目录，这个目录大家可以更改点击下一步，默认安装完成即可。3、安装客户端软件TortoiseSVN-1.5.3.13783-win32-svn-1.5.2.msi，双击默认安装就可以了，安装完成可能要重启，重启即可。4、配置服务器端点击开始-->程序->VisualSVN-->VisuaSVN Server Manager启动服务器管理器，右键选择VisualSVN Server(Local)，选择Properties，在弹出窗口中选择NetWork标签，在ServerName处输入本机的IP地址，我的地址为192.168.158.129，端口我选择8080.，确定保存，再点击VisualSVN Server可以看到右面的界面，我们的访问地址就是Sever URL http://192.168.158.129:8080/svn/现在我们新建两个目录，右键选择Repositories，选择Create new Repository，输入名字document，保存新建用户，右键选择 Users，选择Create User，输入用户密码test,test，这个口令将在客户端连接SVN服务器时使用为刚才创建的document  Repository添加用户，右键选择document，选择Properties，点击Add按钮，选择刚才添加的用户，保存，如图这样，服务器端就配置好了，回到客户端因为已经安装了客户端软件Tortoisesvn，在D盘下，新建文件夹testsvn，打开文件夹，右键选择check out(检出)，在弹出窗口的版本库URL处输入，http://192.168.158.129:8080/svn/document如图确定，保存。注意上面的检出至目录是D:/testsvn，在testsvn中新建一个文本文档，新建文本文档.txt，在testsvn空白处，点击右键，选择提交，（commit），则文件会被传到文档服务器，其他人就可以下载了。","['win7', '使用', 'visualsvn', '建立', 'svn', '服务器', '使用', 'svn', '开发', '十分', '方便', '这样', '不用', '每次', '拷贝', '粘贴', '备份', '网上', '看到', '一篇', '自己', 'windows', '电脑', '安装', 'svn', '服务器', '使用', '非常', '方便', '下载安装', '文件', '服务器端', '客户端', '服务器端', '采用', 'visualsvn', '一个', '可用', '下载', '地址', 'http', 'idc218b', 'newhua', 'com', 'down', 'visualsvn', 'server', '2.1', 'zip', '如果', '链接', '失效', '百度', '谷歌', '搜索', '可以', '很多', '下载', '地址', '客户端', '采用', '大家', '熟悉', 'tortoisesvn', '没错', '就是', '那个', '乌龟', '官方', '下载', '地址', 'http', 'tortoisesvn', 'net', '服务器端', '用来', '存放', '提交', '文件', '客户端', '用来', '连接', '服务器端', '提交', '下载', '服务器端', '文件', '这个', '不用', '话题', '安装', '服务器端', '解压缩', '下载', '文件', 'visualsvn', 'server', '2.1', 'zip', '双击', 'visualsvn', 'server', '2.1', 'msi', '进行', '安装', '安装', '过程', '中有', '一个', '界面', '选择', '安装', '组件', '选择', '第一个', 'visualsvn', 'server', 'and', 'management', 'console', '可以', '如图', '一个', '界面', '设置', '如图', '可以', '更改', '目录', '可以', '更改', '端口', '注意', '端口', '不要', '已经', '使用', '端口', '冲突', '去掉', 'use', 'secure', 'connnection', 'https', '选项', '这里', 'repositories', '服务器', '文档', '目录', '就是', '我们', '提交', 'svn', '文档', '存放', '目录', '这个', '目录', '大家', '可以', '更改', '点击', '一步', '默认', '安装', '完成', '即可', '安装', '客户端', '软件', 'tortoisesvn', '1.5', '3.13783', 'win32', 'svn', '1.5', 'msi', '双击', '默认', '安装', '可以', '安装', '完成', '可能', '重启', '重启', '即可', '配置', '服务器端', '点击', '开始', '--', '程序', 'visualsvn', '--', 'visuasvn', 'server', 'manager', '启动', '服务器', '管理器', '右键', '选择', 'visualsvn', 'server', 'local', '选择', 'properties', '弹出', '窗口', '选择', 'network', '标签', 'servername', '输入', '本机', 'ip地址', '地址', '192.168', '158.129', '端口', '选择', '8080', '确定', '保存', '点击', 'visualsvn', 'server', '可以', '看到', '右面', '界面', '我们', '访问', '地址', '就是', 'sever', 'url', 'http', '192.168', '158.129', '8080', 'svn', '现在', '我们', '新建', '两个', '目录', '右键', '选择', 'repositories', '选择', 'create', 'new', 'repository', '输入', '名字', 'document', '保存', '新建', '用户', '右键', '选择', 'users', '选择', 'create', 'user', '输入', '用户', '密码', 'test', 'test', '这个', '口令', '客户端', '连接', 'svn', '服务器时', '使用', '刚才', '创建', 'document', 'repository', '添加', '用户', '右键', '选择', 'document', '选择', 'properties', '点击', 'add', '按钮', '选择', '刚才', '添加', '用户', '保存', '如图', '这样', '服务器端', '配置', '回到', '客户端', '因为', '已经', '安装', '客户端', '软件', 'tortoisesvn', 'd盘', '新建', '文件夹', 'testsvn', '打开', '文件夹', '右键', '选择', 'check', 'out', '检出', '弹出', '窗口', '版本', 'url', '输入', 'http', '192.168', '158.129', '8080', 'svn', 'document', '如图', '确定', '保存', '注意', '上面', '检出', '目录', 'testsvn', 'testsvn', '新建', '一个', '文本文档', '新建', '文本文档', 'txt', 'testsvn', '空白处', '点击', '右键', '选择', '提交', 'commit', '文件', '传到', '文档', '服务器', '其他人', '可以', '下载']","[[-0.24161602 -0.13137619  0.21681079  0.21311083  0.22685142 -0.34236058
  -0.14672177  0.46373224 -0.022017   -0.0362737  -0.07551018 -0.33814184
  -0.14586933  0.54233707  0.11384199 -0.11688011 -0.1338432   0.00147772
  -0.05589781 -0.38980261  0.02712635  0.24459879 -0.03270664 -0.11580639
   0.07575968 -0.48153783 -0.28359895  0.08164361 -0.18427882 -0.06591977
   0.21055793  0.07712371 -0.00925823 -0.12297727 -0.13554573  0.33389835
  -0.13179608 -0.21301088  0.09012354 -0.67488922 -0.12095256 -0.51936136
  -0.02257018 -0.06550941 -0.14422516 -0.16613485 -0.28917385  0.43839096
  -0.09327122  0.34494846  0.14374835 -0.26876044 -0.04935144 -0.23569911
   0.03641308  0.38239866  0.20717144 -0.06596386  0.10961562 -0.08485962
   0.07964529  0.24741265  0.01895455  0.07250153 -0.34698919  0.00788857
   0.00267007  0.01792702 -0.20313003  0.40715264  0.10048224 -0.20861319
   0.39186435 -0.30740624  0.53783719  0.20184314  0.23933408 -0.16380141
  -0.2210631  -0.2138902  -0.09431953  0.00691807 -0.08058814  0.34029219
  -0.36029493  0.17714119 -0.26844408  0.42800755  0.46812678  0.14041901
   0.24844066  0.11884756  0.31691356  0.16918382  0.17683926  0.39648143
   0.07775097 -0.24723502  0.0707095  -0.08755153]]"
1057,Magento获取指定分类下的所有子分类信息,"二次开发中经常遇到一种情况，就是判断一个分类是否属于某一个大的分类，而大的分类包括很多子分类成树状结构，基本的方法都是先获取大分类下的所有子分类的信息，然后再挨个比较看是否有ID和待定ID相等。一种用递归方法获取大分类所有的ID；第二种用队列等非递归的方法获取所有子分类ID，第二种明显性能要好一些。本文在magento的模板文件里测试成功一个函数：输入一个分类的ID，将返回该分类下所有子分类（递归获取）的ID，组成一个数组返回。所用的方法为用队列实现的非递归方法：/*** 输入：某一个分类的ID数字* 返回： 该分类下所有子分类的ID组成的数组* 可用于： 模板文件中可以直接使用，也可以用于action等文件类内部* 实现思路：使用队列的方法实现非递归，对树从上往下遍历**/function getAllChildrenOfCategory($cateid){    $resArr = array();//结果数组    $queueArr = array();//队列数组    array_push($queueArr,$cateid);        while($currentcid = array_pop($queueArr)){        array_push($resArr,$currentcid);                                                    //处理当前节点的孩子节点        $_category = Mage::getModel('catalog/category')->load($currentcid);        $subcats = $_category->getChildren();                $idarrs = explode(',',$subcats);        foreach($idarrs as $subCatid){            if(!$subCatid) continue;            $_subcategory = Mage::getModel('catalog/category')->load($subCatid);            if($_subcategory->getIsActive()) {                array_push($queueArr,$subCatid);            }        }        reset($queueArr);    }    return $resArr;}//测试一下$allProducerIds = getAllChildrenOfCategory(19);$allDesignedIds = getAllChildrenOfCategory(18); PHP没有栈和队列的数据结构，可以用数组来模拟实现，数组的array_push和array_pop刚好就是这么两个方法，其中因为array_pop每次会改变数组的指针，所以可以在循环的末尾reset一下重置数组。最后的测试，输入的是两个分类的ID，函数执行结束以后，返回的数组里面就是所有子分类的ID。","['magento', '获取', '指定', '分类', '所有', '分类', '信息', '二次开发', '经常', '遇到', '一种', '情况', '就是', '判断', '一个', '分类', '是否', '属于', '一个', '分类', '分类', '包括', '很多', '分类', '树状', '结构', '基本', '方法', '获取', '分类', '所有', '分类', '信息', '然后', '挨个', '比较', '是否', 'id', '待定', 'id', '相等', '一种', '递归', '方法', '获取', '分类', '所有', 'id', '第二种', '队列', '递归', '方法', '获取', '所有', '分类', 'id', '第二种', '明显', '性能', '一些', '本文', 'magento', '模板', '文件', '测试', '成功', '一个', '函数', '输入', '一个', '分类', 'id', '返回', '分类', '所有', '分类', '递归', '获取', 'id', '组成', '一个', '数组', '返回', '所用', '方法', '为用', '队列', '实现', '递归', '方法', '输入', '一个', '分类', 'id', '数字', '返回', '分类', '所有', '分类', 'id', '组成', '数组', '用于', '模板', '文件', '可以', '直接', '使用', '可以', '用于', 'action', '文件', '内部', '实现', '思路', '使用', '队列', '方法', '实现', '递归', '对树', '遍历', 'function', 'getallchildrenofcategory', 'cateid', 'resarr', 'array', '结果', '数组', 'queuearr', 'array', '队列', '数组', 'array', 'push', 'queuearr', 'cateid', 'while', 'currentcid', 'array', 'pop', 'queuearr', 'array', 'push', 'resarr', 'currentcid', '处理', '当前', '节点', '孩子', '节点', 'category', 'mage', 'getmodel', 'catalog', 'category', 'load', 'currentcid', 'subcats', 'category', 'getchildren', 'idarrs', 'explode', 'subcats', 'foreach', 'idarrs', 'as', 'subcatid', 'if', 'subcatid', 'continue', 'subcategory', 'mage', 'getmodel', 'catalog', 'category', 'load', 'subcatid', 'if', 'subcategory', 'getisactive', 'array', 'push', 'queuearr', 'subcatid', 'reset', 'queuearr', 'return', 'resarr', '测试', '一下', 'allproducerids', 'getallchildrenofcategory', '19', 'alldesignedids', 'getallchildrenofcategory', '18', 'php', '没有', '队列', '数据结构', '可以', '数组', '模拟', '实现', '数组', 'array', 'push', 'array', 'pop', '刚好', '就是', '这么', '两个', '方法', '其中', '因为', 'array', 'pop', '每次', '改变', '数组', '指针', '所以', '可以', '循环', '末尾', 'reset', '一下', '重置', '数组', '最后', '测试', '输入', '两个', '分类', 'id', '函数', '执行', '结束', '以后', '返回', '数组', '里面', '就是', '所有', '分类', 'id']","[[-0.23441805 -0.14058984  0.22941334  0.12266954  0.35386891 -0.35043699
  -0.2258356   0.51819054  0.00593913 -0.02898942 -0.04835852 -0.32270681
  -0.22077318  0.65412034  0.18828755 -0.08848728 -0.17082819  0.00972296
  -0.14482423 -0.54994322  0.01161108  0.22886498  0.00873557 -0.10242063
   0.14222102 -0.59938716 -0.31133122  0.09962424 -0.2453282  -0.05198325
   0.25326765 -0.00732472 -0.02162548 -0.16896813 -0.11475665  0.33302784
  -0.15598676 -0.22580433  0.13226193 -0.8384913  -0.22431438 -0.65651747
  -0.06041257 -0.05896996 -0.18736985 -0.16933365 -0.22527072  0.47644969
  -0.23496289  0.46478409  0.24896639 -0.27505802 -0.16462895 -0.20244411
   0.08915531  0.40823296  0.26502989 -0.06887924  0.08808577 -0.1258149
   0.03459144  0.31341699  0.02702292  0.12307965 -0.40416737 -0.0162748
   0.07531036 -0.04825294 -0.29199063  0.4765067   0.1902185  -0.26838934
   0.40669255 -0.34129489  0.60141308  0.18178231  0.15983557 -0.12119558
  -0.33284082 -0.19267807 -0.0414331   0.00425844 -0.07180295  0.33441801
  -0.40497361  0.23558688 -0.31582008  0.41847981  0.49348901  0.13105931
   0.35789256  0.12391265  0.40390061  0.21194363  0.20603004  0.36358849
   0.10453862 -0.34423183 -0.12557592 -0.11636567]]"
1061,MySQL数据库存储过程教程,"使用存储过程先得了解怎样使用它们，存储过程被执行的次数远远的多于它被写的次数，因此本文先介绍怎样执行存储过程。之后再介绍怎样创建存储过程和其他一些操作。执行存储过程的方法MySQL通过类似函数调用的方法来执行存储过程，因此使用一个简单的关键字CALL就能实现调用。CALL命令需要存储过程的名字以及需要传递给它的参数来调用。例如如下的例子：CALL productpricing(@pricelow,                    @pricehigh,                    @priceaverage); 这里一个名字是productpricing的存储过程被调用，它计算并返回产品的最低、最高和平均价格。存储过程可能会也可能不会打印结果，很快你就会看到。创建存储过程已经解释过，写一个存储过程并非微不足道。先看一个简单的例子，该存储过程返回了产品的平均价格：CREATE PROCEDURE productpricing()BEGIN   SELECT Avg(prod_price) AS priceaverage   FROM products;END; 该存储过程名字是productpricing，使用一句CREATE PROCEDURE productpricing()就能定义它。如果该存储过程要带参数的话，放到括号中间就可以。虽然本存储过程不带参数，但是（）两个括号也必须写上。BEGIN和END关键词用于区分存储过程的body，该body自己只有一个select语句。当MySQL执行该段代码的时候，它会创建一个叫做productpricing的存储过程，因为并没有被调用所以不会有返回值，它只是被创建以待将来使用。如果你使用的是MySQL的命令行，还需要注意分隔符问题。默认的MySQL分隔符是分号“；”，然而我们执行MySQL命令的时候用的分隔符也是分号。如果命令工具试图解释一个存储过程的时候，因为里面有分号会被当做SQL命令执行，但是一个存储过程可能还没有定义完，这时候就会出错。解决方法是我们可以临时的改变MySQL命令段的分隔符：DELIMITER //CREATE PROCEDURE productpricing()BEGIN   SELECT Avg(prod_price) AS priceaverage   FROM products;END //DELIMITER ; 本代码中DELIMITER //告诉命令端使用//作为新的命令分隔符，所以本代码中原来的“END;”变成了现在的“END//”，这样的话，存储过程内部的分号将不被作为命令分隔符解释，整个存储过程被一起当做整体传递给解释引擎。最后DELIMITER ;将默认分隔符设置回去。除了\符号，任何符号可以作为命令分隔符。如果你使用MySQL命令行来做实验，一定要注意对命令分隔符的处理。使用该存储过程的方法：CALL productpricing(); +--------------+| priceaverage |+--------------+|    16.133571 |+--------------+  CALL productpricing();该命令执行了刚才创建的存储过程并输出了结果。因为存储过程被当做函数来调用，即使没有参数，也需要在名字后面带上括号。删除存储过程的方法存储过程一旦被创建，除非删除它，否则一直存在于服务器上等待调用。drop命令可以删除服务器上的指定存储过程。DROP PROCEDURE productpricing; 该句删除了刚刚创建的存储过程。注意名字后面没有带括号（），这里只用指定名字。如果服务器上并没有存在该存储过程，该语句会抛出一个错误。为了避免这种情况，我们可以使用另一种调用方法：“DROP PROCEDURE IF EXISTS”，这样只有在存在的时候才会执行删除。带参数的存储过程productpricing是一个只展示结果的简单的存储过程。但是一般来说存储过程并不展示结果，它们将结果存入你传入的参数里面。","['mysql', '数据库', '存储', '过程', '教程', '使用', '存储', '过程', '先得', '了解', '怎样', '使用', '它们', '存储', '过程', '执行', '次数', '远远', '多于', '次数', '因此', '本文', '介绍', '怎样', '执行', '存储', '过程', '之后', '介绍', '怎样', '创建', '存储', '过程', '其他', '一些', '操作', '执行', '存储', '过程', '方法', 'mysql', '通过', '类似', '函数调用', '方法', '执行', '存储', '过程', '因此', '使用', '一个', '简单', '关键字', 'call', '实现', '调用', 'call', '命令', '需要', '存储', '过程', '名字', '以及', '需要', '传递', '参数', '调用', '例如', '如下', '例子', 'call', 'productpricing', 'pricelow', 'pricehigh', 'priceaverage', '这里', '一个', '名字', 'productpricing', '存储', '过程', '调用', '计算', '返回', '产品', '最低', '最高', '平均价格', '存储', '过程', '可能', '可能', '不会', '打印', '结果', '很快', '看到', '创建', '存储', '过程', '已经', '解释', '一个', '存储', '过程', '并非', '微不足道', '先看', '一个', '简单', '例子', '存储', '过程', '返回', '产品', '平均价格', 'create', 'procedure', 'productpricing', 'begin', 'select', 'avg', 'prod', 'price', 'as', 'priceaverage', 'from', 'products', 'end', '存储', '过程', '名字', 'productpricing', '使用', '一句', 'create', 'procedure', 'productpricing', '定义', '如果', '存储', '过程', '参数', '的话', '放到', '括号', '中间', '可以', '虽然', '存储', '过程', '不带', '参数', '但是', '两个', '括号', '必须', 'begin', 'end', '关键词', '用于', '区分', '存储', '过程', 'body', 'body', '自己', '只有', '一个', 'select', '语句', 'mysql', '执行', '该段', '代码', '时候', '它会', '创建', '一个', '叫做', 'productpricing', '存储', '过程', '因为', '没有', '调用', '所以', '不会', '返回值', '只是', '创建', '以待', '将来', '使用', '如果', '使用', 'mysql', '命令行', '需要', '注意', '分隔符', '问题', '默认', 'mysql', '分隔符', '分号', '然而', '我们', '执行', 'mysql', '命令', '时候', '分隔符', '分号', '如果', '命令', '工具', '试图', '解释', '一个', '存储', '过程', '时候', '因为', '里面', '有分', '当做', 'sql', '命令', '执行', '但是', '一个', '存储', '过程', '可能', '没有', '定义', '这时候', '出错', '解决', '方法', '我们', '可以', '临时', '改变', 'mysql', '命令', '分隔符', 'delimiter', 'create', 'procedure', 'productpricing', 'begin', 'select', 'avg', 'prod', 'price', 'as', 'priceaverage', 'from', 'products', 'end', 'delimiter', '代码', 'delimiter', '告诉', '命令', '使用', '作为', '命令', '分隔符', '所以', '代码', '原来', 'end', '变成', '现在', 'end', '这样的话', '存储', '过程', '内部', '分号', '作为', '命令', '分隔符', '解释', '整个', '存储', '过程', '一起', '当做', '整体', '传递', '解释', '引擎', '最后', 'delimiter', '默认', '分隔符', '设置', '回去', '除了', '符号', '任何', '符号', '可以', '作为', '命令', '分隔符', '如果', '使用', 'mysql', '命令行', '实验', '一定', '注意', '命令', '分隔符', '处理', '使用', '存储', '过程', '方法', 'call', 'productpricing', '+--------------+', 'priceaverage', '+--------------+', '16.133571', '+--------------+', 'call', 'productpricing', '命令', '执行', '刚才', '创建', '存储', '过程', '输出', '结果', '因为', '存储', '过程', '当做', '函数', '调用', '即使', '没有', '参数', '需要', '名字', '后面', '带上', '括号', '删除', '存储', '过程', '方法', '存储', '过程', '一旦', '创建', '除非', '删除', '否则', '一直', '存在', '服务器', '等待', '调用', 'drop', '命令', '可以', '删除', '服务器', '指定', '存储', '过程', 'drop', 'procedure', 'productpricing', '该句', '删除', '刚刚', '创建', '存储', '过程', '注意', '名字', '后面', '没有', '括号', '这里', '只用', '指定', '名字', '如果', '服务器', '没有', '存在', '存储', '过程', '语句', '抛出', '一个', '错误', '为了', '避免', '这种', '情况', '我们', '可以', '使用', '一种', '调用', '方法', 'drop', 'procedure', 'if', 'exists', '这样', '只有', '存在', '时候', '执行', '删除', '参数', '存储', '过程', 'productpricing', '一个', '展示', '结果', '简单', '存储', '过程', '但是', '一般来说', '存储', '过程', '展示', '结果', '它们', '结果', '存入', '传入', '参数', '里面']","[[-0.26224821 -0.15700515  0.2084643   0.15955799  0.34243089 -0.34087922
  -0.22574728  0.52836196  0.01611691  0.00600711 -0.06433087 -0.32464488
  -0.21977619  0.6605294   0.1696929  -0.10058372 -0.17474396  0.00450685
  -0.13290343 -0.49068174  0.04615129  0.23941674  0.02838943 -0.05927373
   0.15846913 -0.61648901 -0.29184267  0.1042969  -0.22459505 -0.05837893
   0.28608908  0.02016769 -0.03026615 -0.17032383 -0.08730194  0.35593927
  -0.13499477 -0.21383317  0.14177153 -0.83893981 -0.21079382 -0.62575789
  -0.03492187 -0.08213804 -0.19478318 -0.12602631 -0.26448415  0.52541658
  -0.20822997  0.40786624  0.25535231 -0.28131205 -0.14371446 -0.24317151
   0.11232642  0.41741214  0.29632077 -0.05219501  0.09458887 -0.0925278
   0.02269784  0.33306422  0.03771764  0.10330852 -0.42501197 -0.03979053
   0.05019574 -0.02275515 -0.25994545  0.46899068  0.18495037 -0.28391507
   0.42268613 -0.34333208  0.62025251  0.13628948  0.21317696 -0.1184774
  -0.30454393 -0.23596505 -0.09415889 -0.02304191 -0.04641832  0.32990979
  -0.41212547  0.22515357 -0.30678503  0.40974596  0.47747198  0.12170394
   0.36960293  0.13024729  0.39154043  0.20945886  0.19841839  0.39017684
   0.10726856 -0.324773   -0.06745445 -0.09555176]]"
1064,给计算机专业求职的同学推荐几本书,计算机专业应届生，每年9月份到11月份是找工作的黄金时期，9月中旬开始互联网都开始到来，第一波是大型互联网公司，例如百度腾讯阿里巴巴，之后是很多国企研究所，最后是中小型公司还有银行等。因为第一波可以称之为最重要的一个时期，这时候开始复习就晚了，因此推荐从4月份开始复习，4月份很多公司来招实习生，这时候都要去试试。复习的时期最好系统的看几本书，本人找工作只针对互联网公司，因此推荐一些找这类工作的书目： 1、《编程珠玑》 这本书很薄，20多元钱就买到了，可是很多人买来都不看，因此错过了最经典实用的好书。刚开始复习推荐看这本书，它里面都是各种问题巧妙的解答和运用的思想，这些思想在面试的时候任何情况下说出来都显得很有水平，同时能借助你进行发散思维解决新的问题，书里面涉及了海量数据处理、算法优化、预计估算、深入的理解堆排序等各种内容，这些在面试中每次都会遇到，同时它给出的深度和对读者思维的影响是其他书无法给出的。 2、《大话数据结构》 刚说完了深度的书，这里却给出了一本较为浅显风格的，大话系列言语轻松，只是对知识有较为简单的陈述，但是可以让你从系统上整体的把握整个数据结构的知识，阅读这本书之后，读者会对所有的数据结构有所理解，之后觉得哪个部分还不是很深入理解，可以再参考其他的资料，因此本书推荐速读整体把握，不要死抠细节。 3、《数据结构与算法分析 C语言描述》 黑皮版的那本，因为是翻译版本，有些句子难以理解，很多知识都是理解了好多时间才能掌握。等理解了会发现它讲的特别深刻。在笔试面试中，有个考的超级频繁的知识点，那就是“堆”结构、堆排序、堆的应用，对于这个知识点，需要把前三本书该部分都理解透，甚至横向比较才能最终掌握，才能在面试中实现发散思维提出新思路。本书作为参考书，不建议全读，如果某个知识点不是很深入理解，可以读读那一部分就可以了。 4、《编程之美》数据结构部分和数字数组部分 微软一名同学所作，享誉多年，里面的一些题目广泛出现于大型名企的笔试面试中，《编程之美》中的很多题目都非常巧妙，有些问题你如果没看过答案自己根本想不到解决方法。因此这本书标题写的两部分是必读不可。往往你在笔试题面试题中会遇到很多原题，当看过的同学刷刷写出思路，你却一头雾水时，为时已晚。 5、《剑指offer》全本 这本书简直就是一个BUG，因为它相当于一个题库，你所有在面试中遇到的题目，都可以往这上面的一些问题解答思路上凑，总共给出的几十道题目，几乎涵盖了所有会考察的部分：数组、链表、树、海量数据等等。而本书另一个神奇的地方在于，它给出了一些面试官的心理看法，比如写代码要慢些工整写，遇到指针一定要检查是否为空指针等等，虽然有些取巧，但是你学会了这些检查，笔试面试通过的几率会大很多。 6、《C和指针》全本，建议细读指针部分，速读其他部分 因为很多同学都是计算机专业出身，最开始接触的都是C语言，这本书只是扫盲作用，把一些角落的知识点重温一遍即可。同时笔试面试大部分用的写的都是C程序，所以再次复习很有必要，有些语法细节忘记了就很不好，比如宏定义、函数指针等部分。而指针部分则是体现一个程序员内功的部分，这部分要细读，因为笔试中会高概率出现。 7、《C++ Primer 4th》，建议全本阅读 这本书里面的知识非常全面，同时又很琐碎，很细密。边边角角往往会给出一些很珍贵的只言片语，对本书全读后会整体上对C和C++有较多的把握，并且一些STL、模板、函数指针等等面试中问到了你都会一些，通过的概率就会更大些。还有指针部分、模板部分、STL部分也写得非常细致，会对笔试面试有较多的帮助。 这些书其实已经不少了，因此我自己整体上只看了这么基本，有几本只是阅读了部分章节。然而感觉覆盖面已经足够了，在笔试面试中即使不是很熟悉，也能答上一些，笔试面试中还会考到一些设计模式、Linux、操作系统的内容，这些部分需要自己鉴别，哪方面弱就去网上找些文章来看就行，毕竟考的不是很多。 本文地址：http://51projob.com/a/bishimianshi/qita/2012/1113/1242.html,"['计算机专业', '求职', '同学', '推荐', '几本书', '计算机专业', '应届生', '每年', '月份', '11', '月份', '工作', '黄金', '时期', '中旬', '开始', '互联网', '开始', '到来', '第一波', '大型', '互联网', '公司', '例如', '百度', '腾讯', '阿里巴巴', '之后', '很多', '国企', '研究所', '最后', '中小型', '公司', '还有', '银行', '因为', '第一波', '可以', '称之为', '重要', '一个', '时期', '这时候', '开始', '复习', '因此', '推荐', '月份', '开始', '复习', '月份', '很多', '公司', '来招', '实习生', '这时候', '试试', '复习', '时期', '最好', '系统', '几本书', '本人', '工作', '针对', '互联网', '公司', '因此', '推荐', '一些', '这类', '工作', '书目', '编程', '珠玑', '本书', '20', '多元', '可是', '很多', '买来', '因此', '错过', '经典', '实用', '好书', '开始', '复习', '推荐', '本书', '里面', '各种', '问题', '巧妙', '解答', '运用', '思想', '这些', '思想', '面试', '时候', '任何', '情况', '出来', '显得', '水平', '同时', '借助', '进行', '发散', '思维', '解决', '问题', '里面', '涉及', '海量', '数据处理', '算法', '优化', '预计', '估算', '深入', '理解', '堆排序', '各种', '内容', '这些', '面试', '每次', '遇到', '同时', '给出', '深度', '读者', '思维', '影响', '其他', '无法', '给出', '大话', '数据结构', '说完', '深度', '这里', '给出', '一本', '较为', '浅显', '风格', '大话', '系列', '言语', '轻松', '只是', '知识', '较为简单', '陈述', '但是', '可以', '系统', '整体', '把握', '整个', '数据结构', '知识', '阅读', '本书', '之后', '读者', '所有', '数据结构', '有所', '理解', '之后', '觉得', '哪个', '部分', '不是', '深入', '理解', '可以', '参考', '其他', '资料', '因此', '本书', '推荐', '速读', '整体', '把握', '不要', '死抠', '细节', '数据结构', '算法', '分析', 'c语言', '描述', '黑皮', '那本', '因为', '翻译', '版本', '有些', '句子', '难以', '理解', '很多', '知识', '理解', '好多', '时间', '才能', '掌握', '理解', '发现', '特别', '深刻', '笔试', '面试', '有个', '超级', '频繁', '知识点', '就是', '结构', '堆排序', '应用', '对于', '这个', '知识点', '需要', '本书', '部分', '理解', '甚至', '横向', '比较', '才能', '最终', '掌握', '才能', '面试', '实现', '发散', '思维', '提出', '新思路', '本书', '作为', '参考书', '建议', '全读', '如果', '某个', '知识点', '不是', '深入', '理解', '可以', '读读', '一部分', '可以', '编程', '之美', '数据结构', '部分', '数字', '数组', '部分', '微软', '一名', '同学', '享誉', '多年', '里面', '一些', '题目', '广泛', '出现', '大型', '名企', '笔试', '面试', '编程', '之美', '很多', '题目', '非常', '巧妙', '有些', '问题', '如果', '看过', '答案', '自己', '根本', '想不到', '解决', '方法', '因此', '本书', '标题', '部分', '必读', '不可', '往往', '笔试', '面试题', '遇到', '很多', '原题', '看过', '同学', '刷刷', '写出', '思路', '一头雾水', '为时已晚', 'offer', '全本', '本书', '简直', '就是', '一个', 'bug', '因为', '相当于', '一个', '题库', '所有', '面试', '遇到', '题目', '可以', '上面', '一些', '问题解答', '思路', '总共', '给出', '几十道', '题目', '几乎', '涵盖', '所有', '考察', '部分', '数组', '链表', '海量', '数据', '等等', '本书', '一个', '神奇', '地方', '在于', '给出', '一些', '面试官', '心理', '看法', '比如', '代码', '慢些', '工整', '遇到', '指针', '一定', '检查', '是否', '为空', '指针', '等等', '虽然', '有些', '取巧', '但是', '学会', '这些', '检查', '笔试', '面试', '通过', '几率', '会大', '很多', '指针', '全本', '建议', '细读', '指针', '部分', '速读', '其他', '部分', '因为', '很多', '同学', '计算机专业', '出身', '开始', '接触', 'c语言', '本书', '只是', '扫盲', '作用', '一些', '角落', '知识点', '重温', '一遍', '即可', '同时', '笔试', '面试', '大部分', '程序', '所以', '再次', '复习', '必要', '有些', '语法', '细节', '忘记', '不好', '比如', '定义', '函数指针', '部分', '指针', '部分', '体现', '一个', '程序员', '内功', '部分', '这部分', '细读', '因为', '笔试', '中会', '概率', '出现', 'c++', 'primer', '4th', '建议', '全本', '阅读', '本书', '里面', '知识', '非常', '全面', '同时', '琐碎', '细密', '边边角角', '往往', '给出', '一些', '珍贵', '只言片语', '本书', '读后', '整体', 'c++', '把握', '并且', '一些', 'stl', '模板', '函数指针', '等等', '面试', '中问', '一些', '通过', '概率', '大些', '还有', '指针', '部分', '模板', '部分', 'stl', '部分', '非常', '细致', '笔试', '面试', '帮助', '这些', '其实', '已经', '不少', '因此', '自己', '整体', '这么', '基本', '几本', '只是', '阅读', '部分', '章节', '然而', '感觉', '覆盖面', '已经', '足够', '笔试', '面试', '即使', '不是', '熟悉', '答上', '一些', '笔试', '面试', '会考', '一些', '设计模式', 'linux', '操作系统', '内容', '这些', '部分', '需要', '自己', '鉴别', '方面', '网上', '找些', '文章', '来看', '就行', '毕竟', '不是', '很多', '本文', '地址', 'http', '51projob', 'com', 'bishimianshi', 'qita', '2012', '1113', '1242', 'html']","[[-0.23435748 -0.11890411  0.20832841  0.16303385  0.25573795 -0.32251449
  -0.16005976  0.44045285 -0.01015612 -0.02015471 -0.0589606  -0.30920057
  -0.15741683  0.54222374  0.13183337 -0.09968637 -0.13538667 -0.00999799
  -0.08289829 -0.4059566   0.02300833  0.22593519 -0.00627088 -0.08863093
   0.09853882 -0.49017155 -0.26041419  0.07543304 -0.18299099 -0.05612012
   0.2244288   0.03454075 -0.01268429 -0.12408799 -0.09924254  0.30663384
  -0.11937809 -0.20060046  0.09841749 -0.68995275 -0.14780776 -0.52623
  -0.03682317 -0.06880873 -0.15061153 -0.13970037 -0.25616651  0.42623992
  -0.1487508   0.35429672  0.17170103 -0.24536725 -0.09386419 -0.21863447
   0.05559562  0.35517001  0.22233032 -0.0562968   0.08632752 -0.07962424
   0.04222257  0.26331862  0.01741768  0.07846391 -0.34954003 -0.00811959
   0.03341581 -0.01188765 -0.21178327  0.40266659  0.1187249  -0.22299115
   0.36857191 -0.30044285  0.52551698  0.15979032  0.20392179 -0.13740704
  -0.23376824 -0.20196954 -0.07941226 -0.00348984 -0.05935599  0.3115849
  -0.34398965  0.18470607 -0.2630509   0.3850443   0.42594818  0.1252014
   0.27041613  0.11298551  0.32578689  0.16613758  0.17198024  0.35089683
   0.08935394 -0.26757325  0.00794815 -0.07552922]]"
1066,读《疯狂的站长》- 回顾反思我的个人站长路,我个人一直怀揣着一个梦想，有一天我手上有好多个站，这些站都能给我带来收入，这样的话我就不用天天按时上班努力工作，最终实现自己的财富自由。 然而理想很美好，现实却很残酷，《疯狂的站长》里面也很多次提到，99年至06年这一段才是建站创业的黄金时段，而现在一个站长想要做好做起来，必须付出更多的努力才能有效果。 我自己的感觉，一个站能做到挣钱，已经好不容易了，书中其实提到很多次营销策略，就是写文章、写软文，当然这需要一定的文字功底和天赋在内，不然你写的文章没人想看，营销肯定是个失败的结局。 摘录几句我感受较深的段子： ----------------------------------------------------------------------------------------------------------------- 互联网创业，不需要踏实低调、默默无闻的人，需要的是“浮躁”、喜欢大吹特吹、张扬的人。需要适当的“骄傲”，这会让自己有成就感，同时也是在宣传推广自己。 站长要能忍受孤独寂寞、要有足够的时间、要脸皮厚敢推广得有主见。 做网站是个细水长流的活，如果想急躁的一蹴而就，往往得到的都是失意的结果。 个人站长，贵在做专做小，做那些大佬们不愿意光顾的领域，这样才有生存空间。不要想着什么都放点，比如论坛、视频、博客、新闻都搞一些，其实这只会让个人网站失去特色。关键的限制因素，也在于个人站长的精力有限，最好投入到有限的事情上去。 要摆脱copy的依赖，关键还得在内容上、盈利模式上有自己的创新，这个虽然做不到，但要努力试图做。 有一类网站不错，就是评价事物的网站，比如给域名打分、给起的名字打分。 网站的名字一定要起的好，朗朗上口易于后期发展，域名最好是拼音，长点没关系。 冷门网站成功率高！ 推广的方法：抓QQ、群发QQ邮件；抓手机号、群发短信；其实要定位到个人的营销，邮件是最首位，毕竟对个人来说，他用得最多也好推广的就是邮件。记住广告永远让人讨厌，个人站长因为资金有限，不要用挂广告条的方式进行。 推广最好的方法，就是多发帖，发帖要用炒作的语气、低调的风格、写实的原则进行，要炒帖子，要用马甲顶帖子，要它不沉，要它火起来。可以用论坛发帖机，进行群发，实现营销。 马甲顶贴，要记着挂代理；发求助帖、弱势贴、建议贴、公益贴、只带名字不带域名的帖子容易成功。 要在同类论坛上发帖，先用关键词搜索相关的论坛。 批量交换友情链接的方法，就是用邮件营销，先抓取批量的站长邮件账号，之后进行群发即可。 既然入了这一行，就要高调炒作，当也要踏实做事。炒作的目的，是为了告诉大家你还活着。炒作的方法有“无中生有：风投都是假的”、“自打嘴巴：发帖子批判自己”、“抛砖引玉：搞点绯闻所思的事情”、“哗众取宠：论坛喜欢看什么帖子，就发什么帖子”，要多用“好像”、“据说”、“估计”之类的词汇。 站长要保持对会员的朦胧感，不要与会员打成一片。 个人能力有限，做事情做到后来，要学会用人，要学会使用各方的资源。 如果做站长，要先当一个热心人，去论坛回帖，不会的自己上网搜一搜。 不管你是开网站还是小卖部，要想赚钱，都离不开一买一卖。 ----------------------------------------------------------------------------------------------------------------- 读完后对自己反思一下，我自己虽然捣鼓了好久，却一直没有门路，自己主要有以下一些缺失： 1、推广方面：不会推广也没有推广，自己脸皮不够厚，没有用QQ、邮件等方式进行营销，其实程序员求职网是个小圈子，在学校的圈子里邮件营销，效果应该不错。 2、我不是玉米（捣鼓域名的）：一直在捣鼓域名、空间，其实人家大型的网站，仅仅一个域名就可以了，那么多域名没什么用处，专心搞好一个就行了 3、定位方面：一会想做博客、一会想做论坛，不够专一不够精，也没有细分化的做一个特别的事情，认真、专注的做下去。 4、一直是门外汉，要多学习一些知识，多了解一些行内的情况 其实读完该书，我终于找到一些归属感，之前一些盲目的想法终于有了个验证，也听说了一些我不知道的方法和手段，一切事在人为，一切需要耐心、努力、拼搏、钻研、忍得住寂寞。我的理想是手头有站，不用管也赚钱，其实也不现实，因为站小了没钱，没钱就雇不起人来打理，但是一个站没有人搭理，感觉马上就完蛋，就像做的一个论坛，老有人发小广告，不用力删立马就结束游戏了。路途还很遥远，我的站长梦何时能到达彼岸，我要坚持，继续努力，我还没有放弃。,"['疯狂', '站长', '回顾', '反思', '个人', '站长', '个人', '一直', '怀揣', '一个', '梦想', '一天', '手上', '好多个', '这些', '带来', '收入', '这样的话', '不用', '天天', '按时', '上班', '努力', '工作', '最终', '实现', '自己', '财富', '自由', '然而', '理想', '美好', '现实', '残酷', '疯狂', '站长', '里面', '多次', '提到', '99', '06', '一段', '建站', '创业', '黄金', '时段', '现在', '一个', '站长', '想要', '做好', '起来', '必须', '付出', '努力', '才能', '效果', '自己', '感觉', '一个', '做到', '挣钱', '已经', '好不容易', '书中', '其实', '提到', '多次', '营销', '策略', '就是', '写文章', '软文', '当然', '需要', '一定', '文字', '功底', '天赋', '在内', '不然', '文章', '没人', '营销', '肯定', '失败', '结局', '摘录', '几句', '感受', '段子', '-----------------------------------------------------------------------------------------------------------------', '互联网', '创业', '需要', '踏实', '低调', '默默无闻', '需要', '浮躁', '喜欢', '大吹特', '张扬', '需要', '适当', '骄傲', '这会', '自己', '成就感', '同时', '宣传', '推广', '自己', '站长', '忍受', '孤独寂寞', '足够', '时间', '脸皮厚', '推广', '主见', '网站', '细水长流', '如果', '急躁', '一蹴而就', '往往', '得到', '失意', '结果', '个人', '站长', '贵在', '专做', '那些', '大佬', '愿意', '光顾', '领域', '这样', '生存空间', '不要', '想着', '什么', '放点', '比如', '论坛', '视频', '博客', '新闻', '一些', '其实', '只会', '个人', '网站', '失去', '特色', '关键', '限制', '因素', '在于', '个人', '站长', '精力有限', '最好', '投入', '有限', '事情', '上去', '摆脱', 'copy', '依赖', '关键', '内容', '盈利模式', '自己', '创新', '这个', '虽然', '不到', '努力', '试图', '一类', '网站', '不错', '就是', '评价', '事物', '网站', '比如', '域名', '打分', '名字', '打分', '网站', '名字', '一定', '朗朗上口', '易于', '后期', '发展', '域名', '最好', '拼音', '长点', '没关系', '冷门', '网站', '成功率高', '推广', '方法', 'qq', '群发', 'qq', '邮件', '手机号', '群发短信', '其实', '定位', '个人', '营销', '邮件', '首位', '毕竟', '个人', '来说', '他用', '也好', '推广', '就是', '邮件', '记住', '广告', '永远', '讨厌', '个人', '站长', '因为', '资金', '有限', '不要', '广告条', '方式', '进行', '推广', '最好', '方法', '就是', '发帖', '发帖', '炒作', '语气', '低调', '风格', '写实', '原则', '进行', '帖子', '马甲', '帖子', '不沉', '起来', '可以', '论坛', '发帖', '进行', '群发', '实现', '营销', '马甲', '要记', '代理', '求助', '弱势', '建议', '公益', '只带', '名字', '不带', '域名', '帖子', '容易', '成功', '同类', '论坛', '发帖', '关键词', '搜索', '相关', '论坛', '批量', '交换', '友情链接', '方法', '就是', '邮件', '营销', '抓取', '批量', '站长', '邮件', '账号', '之后', '进行', '群发', '即可', '既然', '一行', '就要', '高调', '炒作', '踏实', '做事', '炒作', '目的', '为了', '告诉', '大家', '活着', '炒作', '方法', '无中生有', '风投', '打嘴巴', '发帖子', '批判', '自己', '抛砖引玉', '搞点', '绯闻', '所思', '事情', '哗众取宠', '论坛', '喜欢', '什么', '帖子', '什么', '帖子', '多用', '好像', '据说', '估计', '之类', '词汇', '站长', '保持', '会员', '朦胧', '不要', '会员', '打成一片', '个人', '能力', '有限', '事情', '做到', '后来', '学会', '用人', '学会', '使用', '各方', '资源', '如果', '站长', '先当', '一个', '热心人', '论坛', '回帖', '不会', '自己', '上网', '搜一', '不管', '网站', '还是', '小卖部', '赚钱', '离不开', '一买一卖', '-----------------------------------------------------------------------------------------------------------------', '读完', '自己', '反思', '一下', '自己', '虽然', '捣鼓', '好久', '一直', '没有', '门路', '自己', '主要', '以下', '一些', '缺失', '推广', '方面', '不会', '推广', '没有', '推广', '自己', '脸皮', '不够', '没有', 'qq', '邮件', '方式', '进行', '营销', '其实', '程序员', '求职网', '小圈子', '学校', '圈子里', '邮件', '营销', '效果', '应该', '不错', '不是', '玉米', '捣鼓', '域名', '一直', '捣鼓', '域名', '空间', '其实', '人家', '大型', '网站', '仅仅', '一个', '域名', '可以', '那么', '域名', '没什么', '用处', '专心', '搞好', '一个', '就行了', '定位', '方面', '一会', '博客', '一会', '论坛', '不够', '专一', '不够', '没有', '细分化', '一个', '特别', '事情', '认真', '专注', '下去', '一直', '门外汉', '学习', '一些', '知识', '了解', '一些', '行内', '情况', '其实', '读完', '该书', '终于', '找到', '一些', '归属感', '之前', '一些', '盲目', '想法', '终于', '验证', '听说', '一些', '知道', '方法', '手段', '一切', '事在人为', '一切', '需要', '耐心', '努力', '拼搏', '钻研', '忍得', '寂寞', '理想', '手头', '不用', '赚钱', '其实', '现实', '因为', '没钱', '雇不起', '人来', '打理', '但是', '一个', '没有', '搭理', '感觉', '马上', '完蛋', '一个', '论坛', '有人', '发小', '广告', '用力', '立马', '结束', '游戏', '路途', '遥远', '站长', '何时能', '到达', '彼岸', '我要', '坚持', '继续', '努力', '没有', '放弃']","[[-2.06286326e-01 -1.16319880e-01  1.75600814e-01  1.36813924e-01
   2.43528462e-01 -2.74577419e-01 -1.62485321e-01  3.97534640e-01
   3.97198067e-03  5.65294297e-04 -5.17545612e-02 -2.62711277e-01
  -1.58488744e-01  4.99581639e-01  1.21581805e-01 -8.33276989e-02
  -1.27958300e-01 -7.34088176e-03 -8.85363076e-02 -3.63591588e-01
   3.45445553e-02  1.94205981e-01  1.30691711e-02 -5.61982426e-02
   1.07672529e-01 -4.60893236e-01 -2.24889521e-01  7.65303067e-02
  -1.64427557e-01 -4.57019851e-02  2.17098819e-01  2.47352301e-02
  -1.66524835e-02 -1.19783302e-01 -7.32688602e-02  2.70944273e-01
  -9.90358905e-02 -1.69217462e-01  9.61240140e-02 -6.31481768e-01
  -1.47519564e-01 -4.76534989e-01 -2.94316270e-02 -7.05120627e-02
  -1.43666971e-01 -1.05924923e-01 -2.20088222e-01  4.00319756e-01
  -1.46167168e-01  3.12162388e-01  1.78772274e-01 -2.14295686e-01
  -9.51449420e-02 -1.97194700e-01  7.16842618e-02  3.14595322e-01
   2.18948136e-01 -4.25534222e-02  7.22105495e-02 -6.73120289e-02
   2.37563981e-02  2.50335572e-01  1.94004764e-02  7.43555614e-02
  -3.19573559e-01 -2.27636033e-02  3.41454384e-02 -1.73984345e-02
  -1.88178759e-01  3.62938871e-01  1.24038941e-01 -2.16285789e-01
   3.27988910e-01 -2.67886824e-01  4.78595752e-01  1.15774459e-01
   1.82216397e-01 -1.08806727e-01 -2.13913807e-01 -1.89953315e-01
  -7.85101550e-02 -1.38312759e-02 -4.46636577e-02  2.62291796e-01
  -3.15832756e-01  1.69419713e-01 -2.37873891e-01  3.29723121e-01
   3.70964190e-01  1.00185912e-01  2.64653648e-01  1.01201262e-01
   2.95709727e-01  1.52010942e-01  1.50999298e-01  3.08091094e-01
   7.93857755e-02 -2.45441601e-01 -2.10911347e-02 -6.49062260e-02]]"
1072,JSP使用JNA调用DLL函数遇到的几个问题,"最近一个JSP项目需要用到分词模块，而分词模块实用C++写成的DLL库。于是上网搜各种方法，最后选择了JNA作为JSP调用DLL的工具。 JNA（Java Native Access ）提供一组Java工具类用于在运行期动态访问系统本地库（native library：如Window的dll）而不需要编写任何Native/JNI代码。开发人员只要在一个java接口中描述目标native library的函数与结构，JNA将自动实现Java接口到native function的映射。 JNA的使用方法有很多，这里只总结下我遇到的问题： DLL放置的路径问题 JSP本身分为bean的src目录和WebRoot的脚本目录，而我们的DLL需要在src下的类中调用，于是遇到了将DLL和资源文件放置到什么地方的问题。 最后解决方法：将调用的DLL和LIB文件拷贝到C:/Windows/System32目录下可以访问。 解决过程：我试过将这些文件放到Src目录下，然后用Class.class.getResource(""/"").getPath()这种方法得到类的class路径，再得到资源文件的路径，结果没有成功。 DLL调用资源的路径问题 DLL可能会调用其他资源文件，比如我这里需要用到词典，路径也是个问题，不过这个较为简单，很容易解决： 将资源文件目录，拷贝到Src目录下面。在程序中使用Class.class.getResource(""/"").getPath()获得编译后的类所在的根目录，再连接上资源文件即可。","['jsp', '使用', 'jna', '调用', 'dll', '函数', '遇到', '几个', '问题', '最近', '一个', 'jsp', '项目', '需要', '用到', '分词', '模块', '分词', '模块', '实用', 'c++', '写成', 'dll', '于是', '上网', '各种', '方法', '最后', '选择', 'jna', '作为', 'jsp', '调用', 'dll', '工具', 'jna', 'java', 'native', 'access', '提供', '一组', 'java', '工具', '用于', '运行', '动态', '访问', '系统', '本地', 'native', 'library', 'window', 'dll', '需要', '编写', '任何', 'native', 'jni', '代码', '开发人员', '只要', '一个', 'java', '接口', '描述', '目标', 'native', 'library', '函数', '结构', 'jna', '自动', '实现', 'java', '接口', 'native', 'function', '映射', 'jna', '使用', '方法', '很多', '这里', '总结', '遇到', '问题', 'dll', '放置', '路径', '问题', 'jsp', '本身', '分为', 'bean', 'src', '目录', 'webroot', '脚本', '目录', '我们', 'dll', '需要', 'src', '调用', '于是', '遇到', 'dll', '资源', '文件', '放置', '什么', '地方', '问题', '最后', '解决', '方法', '调用', 'dll', 'lib', '文件', '拷贝到', 'windows', 'system32', '目录', '可以', '访问', '解决', '过程', '我试', '这些', '文件', '放到', 'src', '目录', '然后', 'class', 'class', 'getresource', 'getpath', '这种', '方法', '得到', 'class', '路径', '得到', '资源', '文件', '路径', '结果', '没有', '成功', 'dll', '调用', '资源', '路径', '问题', 'dll', '可能', '调用', '其他', '资源', '文件', '比如', '这里', '需要', '用到', '词典', '路径', '问题', '不过', '这个', '较为简单', '容易', '解决', '资源', '文件目录', '拷贝到', 'src', '目录', '下面', '程序', '使用', 'class', 'class', 'getresource', 'getpath', '获得', '编译', '所在', '根目录', '连接', '资源', '文件', '即可']","[[-0.26629953 -0.13501177  0.21670793  0.19601207  0.28867388 -0.34083859
  -0.1787389   0.49373117 -0.02393159 -0.02638392 -0.06426782 -0.33662441
  -0.17145931  0.58981415  0.15408256 -0.1118162  -0.15453673 -0.0092171
  -0.10195974 -0.45716067  0.02078178  0.26650776  0.00212104 -0.09496663
   0.11190447 -0.53814202 -0.28580614  0.07982288 -0.20786556 -0.06512106
   0.25245618  0.03078067 -0.01509263 -0.15110205 -0.11407855  0.3580675
  -0.1473906  -0.23078714  0.12114633 -0.77300869 -0.16004686 -0.55574089
  -0.04053091 -0.06536309 -0.1704622  -0.14272121 -0.27177533  0.47283444
  -0.16340667  0.38219158  0.19650652 -0.29227664 -0.11520894 -0.23803992
   0.07932875  0.40830806  0.24125788 -0.05993236  0.11275834 -0.09845126
   0.05724439  0.28450516  0.0405169   0.08538701 -0.39896818 -0.0080256
   0.02661151 -0.00290541 -0.24728506  0.44266508  0.12174849 -0.23350567
   0.41218057 -0.3331205   0.56841448  0.17141208  0.21301032 -0.13750726
  -0.2808503  -0.21541957 -0.09047681 -0.02035012 -0.06572977  0.34337876
  -0.36678909  0.1991022  -0.28434215  0.4138632   0.4679705   0.13194748
   0.29660359  0.12222211  0.35608954  0.20544833  0.1907999   0.38736955
   0.10502341 -0.27895838  0.00186201 -0.09949362]]"
1088,MathType(数学公式编辑器) 汉化绿色版V6.7下载,"MathType 是一个强大的数学公式编辑器，与常见的文字处理软件和演示程序配合使用，能够在各种文档中加入复杂的数学公式和符号。MathType 与常见文字处理工具紧密结合，支持 OLE (对象的链接与嵌入)，可以在任何支持 OLE 的文字处理系统中调用(从主菜单中选择 ""插入->对象"" 在新对象中选择 ""MathType 5.0 Equation"" )，帮助用户快速建立专业化的数学技术文档。MathType 汉化版修正了部分对中文的支持，这个版本对 Word 或 WPS 文字处理系统支持相当好。实现所见即所得的工作模式，它可以将编辑好的公式保存成多种图片格式或透明图片模式，可以很方便的添加或移除符号、表达式等模板(只需要简单地用鼠标拖进拖出即可)，也可以很方便地修改模板。总之，功能多多，熟练使用了就知道它的强大了。MathType 可用在编辑数学试卷、书籍、报刊、论文、幻灯演示等方面，是您编辑数学资料的得力工具。下载地址：点击打开下载完成后：找到""Fonts""文件夹，点击打开后：双击""DSFonts.exe""安装字体，该公式编辑器就可以用了。运行界面：MathType最好用的地方在于它和Office的word和powerpoint是连接在一起的，在MatyType中选中一个公式以后，可以直接粘贴到word中去，在word中双击相应的公式也能够弹出MathType进行编辑修改。","['mathtype', '数学公式', '编辑器', '汉化', '绿色版', 'v6.7', '下载', 'mathtype', '一个', '强大', '数学公式', '编辑器', '常见', '文字', '处理软件', '演示', '程序', '配合', '使用', '能够', '各种', '文档', '加入', '复杂', '数学公式', '符号', 'mathtype', '常见', '文字处理', '工具', '紧密结合', '支持', 'ole', '对象', '链接', '嵌入', '可以', '任何', '支持', 'ole', '文字处理', '系统', '调用', '从主', '菜单中选择', '插入', '对象', '对象', '选择', 'mathtype', '5.0', 'equation', '帮助', '用户', '快速', '建立', '专业化', '数学', '技术', '文档', 'mathtype', '汉化版', '修正', '部分', '中文', '支持', '这个', '版本', 'word', 'wps', '文字处理', '系统', '支持', '相当', '实现', '所见即', '所得', '工作', '模式', '可以', '编辑', '公式', '保存', '多种', '图片格式', '透明', '图片', '模式', '可以', '方便', '添加', '移除', '符号', '表达式', '模板', '需要', '简单', '地用', '鼠标', '拖进', '即可', '可以', '方便', '修改', '模板', '总之', '功能', '多多', '熟练', '使用', '知道', '强大', 'mathtype', '可用', '编辑', '数学试卷', '书籍', '报刊', '论文', '幻灯', '演示', '方面', '编辑', '数学', '资料', '得力', '工具', '下载', '地址', '点击', '打开', '下载', '完成', '找到', 'fonts', '文件夹', '点击', '打开', '双击', 'dsfonts', 'exe', '安装', '字体', '公式', '编辑器', '可以', '运行', '界面', 'mathtype', '最好', '地方', '在于', 'office', 'word', 'powerpoint', '连接', '一起', 'matytype', '选中', '一个', '公式', '以后', '可以', '直接', '粘贴', 'word', '中去', 'word', '双击', '相应', '公式', '能够', '弹出', 'mathtype', '进行', '编辑', '修改']","[[-0.22794298 -0.12417866  0.19138846  0.16621535  0.24904763 -0.303282
  -0.16221587  0.43475483 -0.00353725 -0.01132723 -0.06324268 -0.29370724
  -0.15750432  0.53355792  0.12380001 -0.09958808 -0.13570978 -0.00123116
  -0.08516414 -0.38473238  0.03477756  0.21311079  0.00068206 -0.0737699
   0.1046662  -0.48791147 -0.25144973  0.08014036 -0.17738465 -0.05454749
   0.22121163  0.03818752 -0.01432322 -0.12719925 -0.09740249  0.29830296
  -0.11193704 -0.18884115  0.10272427 -0.66654023 -0.14656033 -0.50508328
  -0.02609359 -0.07358477 -0.15209685 -0.12562314 -0.24747382  0.43026073
  -0.13678405  0.33196529  0.17705794 -0.24441883 -0.08670367 -0.21453952
   0.06410985  0.35116543  0.2242601  -0.05262537  0.08776245 -0.07846452
   0.04037053  0.26139783  0.02367873  0.07320311 -0.3407314  -0.01652833
   0.02558192 -0.00296468 -0.20174651  0.38651353  0.12172418 -0.22154793
   0.36044219 -0.2911512   0.51071869  0.14425326  0.20074809 -0.12653053
  -0.22339498 -0.19899702 -0.08851266 -0.00806974 -0.05496924  0.29622105
  -0.3410298   0.17538444 -0.25266673  0.36849638  0.41481095  0.11329663
   0.27241536  0.1105987   0.31184756  0.16561076  0.16628713  0.347668
   0.08408647 -0.25329001  0.00140607 -0.07725611]]"
1094,Rational Rose根据Java代码自动生成类图（教程和错误解决）,"Rational Rose有个很方便的功能，将项目中的JAVA代码自动转换成UML类图。根据Java代码自动生成UML图1、新建一个ROSE工程，选择J2EE模板2、如图进行操作3、在出现的界面中，CLASSPATH中加入源代码的目录，加入支持的包，点'ADD RECURSIVE'点 ‘SELECT ALL‘，‘ 点REVERSE ‘，完成后没任何提示,点'DONE'结束。逆向工程完成。4、逆向工程以后不会自动生成类图，但在logical view 和component view 里面按照你的java包结构会自动生成相应的包和类，要按照自己的要求建立类图。下面我们将所选包下的所有类显示在新建类图中：5、ROSE里新建CLASS DIAGRAM，然后把类包一个个拖到右侧图中，点菜单上的'QUERY'下的'ADD CLASS'，确定。Rational Rose 逆向工程(java) 常见问题解决1、 rose逆向工程的时候，属性类型表现为：Logical View::java::lang::解决办法：菜单->Tools->Java/j2ee->Project选择Fundamental Type 页面Remoe Common JDK ClassesAdd Common JDK Classes确定即可，也许是Rose的Bug2. rose逆向工程的时候，报错，一般是类中没有引用了一些包在菜单view－》log 选中就能看到log window中出错信息，一般可能是找不到类，你在tools－java/j2ee-project specification里面设置好项目的相关项，比如classpath等等解决办法：菜单->Tools->Java/j2ee->project specification，选择Class Path页面，将相应的包加入即可来源：http://hi.baidu.com/suofang/item/254ef5f3298bf60fc6dc45ae","['rational', 'rose', '根据', 'java', '代码', '自动', '生成', '类图', '教程', '错误', '解决', 'rational', 'rose', '有个', '方便', '功能', '项目', 'java', '代码', '自动', '转换成', 'uml', '类图', '根据', 'java', '代码', '自动', '生成', 'uml', '新建', '一个', 'rose', '工程', '选择', 'j2ee', '模板', '如图', '进行', '操作', '出现', '界面', 'classpath', '加入', '源代码', '目录', '加入', '支持', 'add', 'recursive', 'select', 'all', 'reverse', '完成', '任何', '提示', 'done', '结束', '逆向', '工程', '完成', '逆向', '工程', '以后', '不会', '自动', '生成', '类图', 'logical', 'view', 'component', 'view', '里面', '按照', 'java', '结构', '自动', '生成', '相应', '包和类', '按照', '自己', '要求', '建立', '类图', '下面', '我们', '所选', '包下', '所有', '显示', '新建', '类图', 'rose', '新建', 'class', 'diagram', '然后', '一个个', '右侧', '图中', '菜单', 'query', 'add', 'class', '确定', 'rational', 'rose', '逆向', '工程', 'java', '常见问题', '解决', 'rose', '逆向', '工程', '时候', '属性', '类型', '表现', 'logical', 'view', 'java', 'lang', '解决办法', '菜单', 'tools', 'java', 'j2ee', 'project', '选择', 'fundamental', 'type', '页面', 'remoe', 'common', 'jdk', 'classesadd', 'common', 'jdk', 'classes', '确定', '即可', '也许', 'rose', 'bug2', 'rose', '逆向', '工程', '时候', '报错', '一般', '没有', '引用', '一些', '菜单', 'view', 'log', '选中', '看到', 'log', 'window', '出错', '信息', '一般', '可能', '不到', 'tools', 'java', 'j2ee', 'project', 'specification', '里面', '设置', '项目', '相关', '比如', 'classpath', '等等', '解决办法', '菜单', 'tools', 'java', 'j2ee', 'project', 'specification', '选择', 'class', 'path', '页面', '相应', '加入', '即可', '来源', 'http', 'hi', 'baidu', 'com', 'suofang', 'item', '254ef5f3298bf60fc6dc45ae']","[[-0.25446567 -0.07697588  0.22176731  0.21074022  0.2160174  -0.31383405
  -0.11087052  0.42233855 -0.05985818 -0.0605053  -0.05382794 -0.33302925
  -0.07796242  0.47835911  0.13987925 -0.10912931 -0.11312997 -0.02850363
  -0.05620846 -0.39978348 -0.00648952  0.2694239  -0.0469731  -0.13755976
   0.04220951 -0.41305205 -0.27376409  0.04825819 -0.16648398 -0.07361633
   0.18902779  0.04048244 -0.0110982  -0.10418628 -0.12544612  0.33601894
  -0.14250221 -0.22819376  0.08349004 -0.65370597 -0.09945644 -0.44742811
  -0.05045625 -0.03939985 -0.13223287 -0.16690087 -0.27670769  0.37139031
  -0.11613812  0.33562031  0.09675192 -0.27265352 -0.08364857 -0.22163718
   0.04017656  0.37075806  0.16372838 -0.0575742   0.11144534 -0.0811238
   0.07942779  0.20048658  0.02897563  0.06301937 -0.33767186  0.03019763
   0.01080882  0.01714551 -0.22067623  0.38295179  0.05099472 -0.15942333
   0.36289778 -0.30095442  0.45567809  0.21312187  0.19194654 -0.1593572
  -0.2345069  -0.17691444 -0.06958422 -0.00496789 -0.06867615  0.34699201
  -0.28797411  0.17443778 -0.24086138  0.39064369  0.43216417  0.15614289
   0.20087422  0.10508554  0.30550172  0.17634983  0.16771541  0.3559359
   0.08336036 -0.22099163  0.08754154 -0.09296211]]"
1112,Hadoop之使用python实现数据集合间join操作,"hadoop之steaming介绍hadoop有个工具叫做steaming，能够支持python、shell、C++、PHP等其他任何支持标准输入stdin及标准输出stdout的语言，其运行原理可以通过和标准java的map-reduce程序对比来说明：使用原生java语言实现Map-reduce程序hadoop准备好数据后，将数据传送给java的map程序java的map程序将数据处理后，输出O1hadoop将O1打散、排序，然后传给不同的reduce机器每个reduce机器将传来的数据传给reduce程序reduce程序将数据处理，输出最终数据O2借助hadoop streaming使用python语言实现Map-reduce程序hadoop准备好数据后，将数据传送给java的map程序java的map程序将数据处理成“键/值”对，并传送给python的map程序python的map程序将数据处理后，将结果传回给java的map程序java的map程序将数据输出为O1hadoop将O1打散、排序，然后传给不同的reduce机器每个reduce机器将传来的数据处理成“键/值”对，并传送给python的reduce程序python的reduce程序将数据处理后，将结果返回给java的reduce程序java的reduce程序将数据处理，输出最终数据O2上面红色表示map的对比，蓝色表示reduce的对比，可以看出streaming程序多了一步中间处理，这样说来steaming程序的效率和性能应该低于java版的程序，然而python的开发效率、运行性能有时候会大于java，这就是streaming的优势所在。hadoop之实现集合join的需求hadoop是用来做数据分析的，大都是对集合进行操作，因此该过程中将集合join起来使得一个集合能得到另一个集合对应的信息的需求非常常见。比如以下这个需求，有两份数据：学生信息（学号，姓名）和学生成绩（学号、课程、成绩），特点是有个共同的主键“学号”，现在需要将两者结合起来得到数据（学号，姓名，课程，成绩），计算公式：（学号，姓名） join （学号，课程，成绩）= （学号，姓名，课程，成绩）数据事例1-学生信息：学号sno姓名name01name102name203name304name4数据事例2:-学生成绩：学号sno课程号courseno成绩grade010180010290020182020295期待的最终输出：学号sno姓名name课程courseno成绩grade01name1018001name1029002name2018202name20295实现join的注意点和易踩坑总结如果你想写一个完善健壮的map reduce程序，我建议你首先弄清楚输入数据的格式、输出数据的格式，然后自己手动构建输入数据并手动计算出输出数据，这个过程中你会发现一些写程序中需要特别处理的地方：实现join的key是哪个，是1个字段还是2个字段，本例中key是sno，1个字段每个集合中key是否可以重复，本例中数据1不可重复，数据2的key可以重复每个集合中key的对应值是否可以不存在，本例中有学生会没成绩，所以数据2的key可以为空第1条会影响到hadoop启动脚本中key.fields和partition的配置，第2条会影响到map-reduce程序中具体的代码实现方式，第3条同样影响代码编写方式。hadoop实现join操作的思路具体思路是给每个数据源加上一个数字标记label，这样hadoop对其排序后同一个字段的数据排在一起并且按照label排好序了，于是直接将相邻相同key的数据合并在一起输出就得到了结果。1、 map阶段：给表1和表2加标记，其实就是多输出一个字段，比如表一加标记为0，表2加标记为2；2、 partion阶段：根据学号key为第一主键，标记label为第二主键进行排序和分区3、 reduce阶段：由于已经按照第一主键、第二主键排好了序，将相邻相同key数据合并输出hadoop使用python实现join的map和reduce代码mapper.py的代码：# -*- coding: utf-8 -*-#Mapper.py#来自疯狂的蚂蚁www.crazyant.netimport osimport sys#mapper脚本def mapper():#获取当前正在处理的文件的名字，这里我们有两个输入文件#所以要加以区分filepath = os.environ[""map_input_file""]filename = os.path.split(filepath)[-1]for line in sys.stdin:if line.strip()=="""":continuefields = line[:-1].split(""\t"")sno = fields[0]#以下判断filename的目的是不同的文件有不同的字段，并且需加上不同的标记if filename == 'data_info':name = fields[1]#下面的数字'0'就是为数据源1加上的统一标记print '\t'.join((sno,'0',name))elif filename == 'data_grade':courseno = fields[1]grade = fields[2]#下面的数字'1'就是为数据源1加上的统一标记print '\t'.join((sno,'1',courseno,grade))if __name__=='__main__':mapper()reducer的代码：# -*- coding: utf-8 -*-#reducer.py#来自疯狂的蚂蚁www.crazyant.netimport sysdef reducer():#为了记录和上一个记录的区别，用lastsno记录上个snolastsno = """"for line in sys.stdin:if line.strip()=="""":continuefields = line[:-1].split(""\t"")sno = fields[0]'''处理思路：遇见当前key与上一条key不同并且label=0，就记录下来name值，当前key与上一条key相同并且label==1，则将本条数据的courseno、grade联通上一条记录的name一起输出成最终结果'''if sno != lastsno:name=""""#这里没有判断label==1的情况，#因为sno!=lastno,并且label=1表示该条key没有数据源1的数据if fields[1]==""0"":name=fields[2]elif sno==lastno:#这里没有判断label==0的情况，#因为sno==lastno并且label==0表示该条key没有数据源2的数据if fields[2]==""1"":courseno=fields[2]grade=fields[3]if name:print '\t'.join((lastsno,name,courseno,grade))lastsno = snoif __name__=='__main__':reducer()使用shell脚本启动hadoop程序的方法：#先删除输出目录~/hadoop-client/hadoop/bin/hadoop fs -rmr /hdfs/jointest/output#来自疯狂的蚂蚁www.crazyant.net#注意，下面配置中的环境值每个人机器不一样~/hadoop-client/hadoop/bin/hadoop streaming \-D mapred.map.tasks=10 \-D mapred.reduce.tasks=5 \-D mapred.job.map.capacity=10 \-D mapred.job.reduce.capacity=5 \-D mapred.job.name=""join--sno_name-sno_courseno_grade"" \-D num.key.fields.for.partition=1 \-D stream.num.map.output.key.fields=2 \-partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner \-input ""/hdfs/jointest/input/*"" \-output ""/hdfs/jointest/output"" \-mapper ""python26/bin/python26.sh mapper.py"" \-reducer ""python26/bin/python26.sh reducer.py"" \-file ""mapper.py"" \-file ""reducer.py"" \-cacheArchive ""/share/python26.tar.gz#python26""#看看运行成功没，若输出0则表示成功了echo $?可以自己手工构造输入输出数据进行测试，本程序是验证过的。更多需要注意的地方hadoop的join操作可以分为很多类型，各种类型脚本的编写有所不同，其分类是按照key字段数目、value字段数目、key是否可重复来划分的，以下是一个个人总结的对照表，表示会影响的地方：影响类型影响的范围key字段数目1、启动脚本中num.key.fields.for.partition的配置2、启动脚本中stream.num.map.output.key.fields的配置3、map和reduce脚本中key的获取4、map和reduce脚本中每一条数据和上一条数据比较的方法key是否可重复如果数据源1可重复，标记为M；数据源2可重复标记为N，那么join可以分为：1*1、M*1、M*N类型1*1类型：reduce中先记录第一个value，然后在下一条直接合并输出；M*1类型：将类型1作为标记小的输出，然后每次遇见label=1就记录value，每遇见一次label=2就输出一次最终结果；M*N类型：遇见类型1，就用数组记录value值，遇见label=2就将将记录的数组值全部连同该行value输出。value字段数目影响每次label=1时记录的数据个数，需要将value都记录下来原文链接 转载须注明！","['hadoop', '使用', 'python', '实现', '数据', '集合', 'join', '操作', 'hadoop', 'steaming', '介绍', 'hadoop', '有个', '工具', '叫做', 'steaming', '能够', '支持', 'python', 'shell', 'c++', 'php', '其他', '任何', '支持', '标准', '输入', 'stdin', '标准', '输出', 'stdout', '语言', '运行', '原理', '可以', '通过', '标准', 'java', 'map', 'reduce', '程序', '对比', '说明', '使用', '原生', 'java', '语言', '实现', 'map', 'reduce', '程序', 'hadoop', '准备', '数据', '数据', '传送', 'java', 'map', '程序', 'java', 'map', '程序', '数据处理', '输出', 'o1hadoop', 'o1', '打散', '排序', '然后', '传给', '不同', 'reduce', '机器', '每个', 'reduce', '机器', '传来', '数据', '传给', 'reduce', '程序', 'reduce', '程序', '数据处理', '输出', '最终', '数据', 'o2', '借助', 'hadoop', 'streaming', '使用', 'python', '语言', '实现', 'map', 'reduce', '程序', 'hadoop', '准备', '数据', '数据', '传送', 'java', 'map', '程序', 'java', 'map', '程序', '数据处理', '传送', 'python', 'map', '程序', 'python', 'map', '程序', '数据处理', '结果', '传回', 'java', 'map', '程序', 'java', 'map', '程序', '数据', '输出', 'o1hadoop', 'o1', '打散', '排序', '然后', '传给', '不同', 'reduce', '机器', '每个', 'reduce', '机器', '传来', '数据处理', '传送', 'python', 'reduce', '程序', 'python', 'reduce', '程序', '数据处理', '结果', '返回', 'java', 'reduce', '程序', 'java', 'reduce', '程序', '数据处理', '输出', '最终', '数据', 'o2', '上面', '红色', '表示', 'map', '对比', '蓝色', '表示', 'reduce', '对比', '可以', '看出', 'streaming', '程序', '一步', '中间', '处理', '这样', '说来', 'steaming', '程序', '效率', '性能', '应该', '低于', 'java', '程序', '然而', 'python', '开发', '效率', '运行', '性能', '有时候', '大于', 'java', '就是', 'streaming', '优势', '所在', 'hadoop', '实现', '集合', 'join', '需求', 'hadoop', '用来', '数据分析', '大都', '集合', '进行', '操作', '因此', '过程中将', '集合', 'join', '起来', '使得', '一个', '集合', '得到', '一个', '集合', '对应', '信息', '需求', '非常', '常见', '比如', '以下', '这个', '需求', '两份', '数据', '学生', '信息', '姓名', '学生', '成绩', '课程', '成绩', '特点', '共同', '主键', '现在', '需要', '两者', '结合', '起来', '得到', '数据', '姓名', '课程', '成绩', '计算公式', '姓名', 'join', '课程', '成绩', '姓名', '课程', '成绩', '数据', '事例', '学生', '信息', '学号', 'sno', '姓名', 'name01name102name203name304name4', '数据', '事例', '学生', '成绩', '学号', 'sno', '课程', 'courseno', '成绩', 'grade010180010290020182020295', '期待', '最终', '输出', '学号', 'sno', '姓名', 'name', '课程', 'courseno', '成绩', 'grade01name1018001name1029002name2018202name20295', '实现', 'join', '注意', '点和易', '总结', '如果', '一个', '完善', '健壮', 'map', 'reduce', '程序', '建议', '首先', '弄清楚', '输入', '数据', '格式', '输出', '数据', '格式', '然后', '自己', '手动', '构建', '输入', '数据', '手动', '计算', '输出', '数据', '这个', '过程', '发现', '一些', '程序', '需要', '特别', '处理', '地方', '实现', 'join', 'key', '哪个', '还是', '本例', 'key', 'sno', '每个', '集合', 'key', '是否', '可以', '重复', '本例', '数据', '不可', '重复', '数据', 'key', '可以', '重复', '每个', '集合', 'key', '对应', '是否', '可以', '存在', '本例', '中有', '学生会', '成绩', '所以', '数据', 'key', '可以', '为空', '条会', '影响', 'hadoop', '启动', '脚本', 'key', 'fields', 'partition', '配置', '条会', '影响', 'map', 'reduce', '程序', '具体', '代码', '实现', '方式', '同样', '影响', '代码', '编写', '方式', 'hadoop', '实现', 'join', '操作', '思路', '具体', '思路', '每个', '数据源', '加上', '一个', '数字', '标记', 'label', '这样', 'hadoop', '排序', '同一个', '字段', '数据', '一起', '并且', '按照', 'label', '排好序', '于是', '直接', '相邻', '相同', 'key', '数据', '合并', '一起', '输出', '得到', '结果', 'map', '阶段', '给表', '和表', '标记', '其实', '就是', '输出', '一个', '比如', '表一加', '标记', '标记', 'partion', '阶段', '根据', '学号', 'key', '第一', '主键', '标记', 'label', '第二', '主键', '进行', '排序', '分区', 'reduce', '阶段', '由于', '已经', '按照', '第一', '主键', '第二', '主键', '排好', '相邻', '相同', 'key', '数据', '合并', '输出', 'hadoop', '使用', 'python', '实现', 'join', 'map', 'reduce', '代码', 'mapper', 'py', '代码', 'coding', 'utf', '-#', 'mapper', 'py', '来自', '疯狂', '蚂蚁', 'www', 'crazyant', 'netimport', 'osimport', 'sys', 'mapper', '脚本', 'def', 'mapper', '获取', '当前', '正在', '处理', '文件', '名字', '这里', '我们', '两个', '输入', '文件', '所以', '加以', '区分', 'filepath', 'os', 'environ', 'map', 'input', 'file', 'filename', 'os', 'path', 'split', 'filepath', 'for', 'line', 'in', 'sys', 'stdin', 'if', 'line', 'strip', 'continuefields', 'line', 'split', 'sno', 'fields', '以下', '判断', 'filename', '目的', '不同', '文件', '不同', '并且', '加上', '不同', '标记', 'if', 'filename', 'data', 'info', 'name', 'fields', '下面', '数字', '就是', '数据源', '加上', '统一', '标记', 'print', 'join', 'sno', 'name', 'elif', 'filename', 'data', 'grade', 'courseno', 'fields', 'grade', 'fields', '下面', '数字', '就是', '数据源', '加上', '统一', '标记', 'print', 'join', 'sno', 'courseno', 'grade', 'if', '__', 'name', '__', '__', 'main', '__', 'mapper', 'reducer', '代码', 'coding', 'utf', '-#', 'reducer', 'py', '来自', '疯狂', '蚂蚁', 'www', 'crazyant', 'netimport', 'sysdef', 'reducer', '为了', '记录', '一个', '记录', '区别', 'lastsno', '记录', '上个', 'snolastsno', 'for', 'line', 'in', 'sys', 'stdin', 'if', 'line', 'strip', 'continuefields', 'line', 'split', 'sno', 'fields', '处理', '思路', '遇见', '当前', 'key', '一条', 'key', '不同', '并且', 'label', '记录下来', 'name', '当前', 'key', '一条', 'key', '相同', '并且', 'label', '本条', '数据', 'courseno', 'grade', '联通', '一条', '记录', 'name', '一起', '输出', '最终', '结果', 'if', 'sno', 'lastsno', 'name', '这里', '没有', '判断', 'label', '情况', '因为', 'sno', 'lastno', '并且', 'label', '表示', '该条', 'key', '没有', '数据源', '数据', 'if', 'fields', 'name', 'fields', 'elif', 'sno', 'lastno', '这里', '没有', '判断', 'label', '情况', '因为', 'sno', 'lastno', '并且', 'label', '表示', '该条', 'key', '没有', '数据源', '数据', 'if', 'fields', 'courseno', 'fields', 'grade', 'fields', 'if', 'name', 'print', 'join', 'lastsno', 'name', 'courseno', 'grade', 'lastsno', 'snoif', '__', 'name', '__', '__', 'main', '__', 'reducer', '使用', 'shell', '脚本', '启动', 'hadoop', '程序', '方法', '删除', '输出', '目录', 'hadoop', 'client', 'hadoop', 'bin', 'hadoop', 'fs', 'rmr', 'hdfs', 'jointest', 'output', '来自', '疯狂', '蚂蚁', 'www', 'crazyant', 'net', '注意', '下面', '配置', '环境', '每个', '机器', '一样', 'hadoop', 'client', 'hadoop', 'bin', 'hadoop', 'streaming', 'mapred', 'map', 'tasks', '10', 'mapred', 'reduce', 'tasks', 'mapred', 'job', 'map', 'capacity', '10', 'mapred', 'job', 'reduce', 'capacity', 'mapred', 'job', 'name', 'join', '--', 'sno', 'name', 'sno', 'courseno', 'grade', 'num', 'key', 'fields', 'for', 'partition', 'stream', 'num', 'map', 'output', 'key', 'fields', 'partitioner', 'org', 'apache', 'hadoop', 'mapred', 'lib', 'keyfieldbasedpartitioner', 'input', 'hdfs', 'jointest', 'input', 'output', 'hdfs', 'jointest', 'output', 'mapper', 'python26', 'bin', 'python26', 'sh', 'mapper', 'py', 'reducer', 'python26', 'bin', 'python26', 'sh', 'reducer', 'py', 'file', 'mapper', 'py', 'file', 'reducer', 'py', 'cachearchive', 'share', 'python26', 'tar', 'gz', 'python26', '看看', '运行', '成功', '输出', '表示', '成功', 'echo', '可以', '自己', '手工', '构造', '输入输出', '数据', '进行', '测试', '程序', '验证', '需要', '注意', '地方', 'hadoop', 'join', '操作', '可以', '分为', '很多', '类型', '各种类型', '脚本', '编写', '有所不同', '分类', '按照', 'key', '字段', '数目', 'value', '字段', '数目', 'key', '是否', '重复', '划分', '以下', '一个', '个人', '总结', '对照表', '表示', '影响', '地方', '影响', '类型', '影响', '范围', 'key', '字段', '数目', '启动', '脚本', 'num', 'key', 'fields', 'for', 'partition', '配置', '启动', '脚本', 'stream', 'num', 'map', 'output', 'key', 'fields', '配置', 'map', 'reduce', '脚本', 'key', '获取', 'map', 'reduce', '脚本', '一条', '数据', '一条', '数据', '比较', '方法', 'key', '是否', '重复', '如果', '数据源', '重复', '标记', '数据源', '重复', '标记', '那么', 'join', '可以', '分为', '类型', '类型', 'reduce', '中先', '记录', '第一个', 'value', '然后', '一条', '直接', '合并', '输出', '类型', '类型', '作为', '标记', '输出', '然后', '每次', '遇见', 'label', '记录', 'value', '遇见', '一次', 'label', '输出', '一次', '最终', '结果', '类型', '遇见', '类型', '数组', '记录', 'value', '遇见', 'label', '记录', '数组', '全部', '连同', '该行', 'value', '输出', 'value', '字段', '数目', '影响', '每次', 'label', '记录', '数据', '个数', '需要', 'value', '记录下来', '原文', '链接', '转载', '注明']","[[-0.2523091  -0.11244291  0.242365    0.15138109  0.29157506 -0.3646144
  -0.15087607  0.48809706 -0.0485141  -0.08414262 -0.04438615 -0.36161357
  -0.15689067  0.56837713  0.1708591  -0.11276036 -0.1361525  -0.01117406
  -0.08889836 -0.51379656 -0.02362271  0.2673383  -0.02694947 -0.16514122
   0.08728636 -0.50418566 -0.30084491  0.05536628 -0.22617763 -0.06897327
   0.21026314  0.00263505  0.00149372 -0.13935282 -0.14179461  0.34231113
  -0.18214711 -0.27091142  0.10718182 -0.76328718 -0.15765818 -0.58158483
  -0.06094674 -0.03308729 -0.14845444 -0.19349647 -0.24088141  0.40656531
  -0.18869487  0.44571844  0.1698205  -0.28617125 -0.14149329 -0.20270298
   0.02606472  0.3982308   0.19209478 -0.08683268  0.11742064 -0.13433597
   0.07691373  0.26502972  0.02276261  0.08809264 -0.39856794  0.03233959
   0.05059079 -0.02774996 -0.29742582  0.44463034  0.09687171 -0.19719835
   0.39577154 -0.3365913   0.56059899  0.23126766  0.15956418 -0.15220729
  -0.31267939 -0.14271059 -0.03013463  0.02204919 -0.10148452  0.37471023
  -0.32830658  0.20453255 -0.28921577  0.42803191  0.47836407  0.14574123
   0.26478108  0.1122834   0.35597683  0.19278838  0.19685315  0.35910913
   0.12428907 -0.30378035 -0.02663363 -0.11656486]]"
1122,Hadoop-Streaming实战经验及问题解决方法总结,"目录1.   Join操作分清join的类型很重要...2.  启动程序中key字段和partition字段的设定...3.  控制hadoop程序内存的方法...4.   对于数字key的排序问题...5.   在mapper中获取map_input_file环境变量的方法...6.   运行过程中记录数据的方法...7.  多次运行Hadoop之是否成功的判断...8.  对stdin读取的 line的预处理...9.  Python字符串的连接方法...10.  怎样查看mapper程序的输出...11.  SHELL脚本中变量名的命名方法...12.  提前设计好流程能简化很多重复工作...13.  其他一些实用经验...1. Join操作分清join的类型很重要Join操作是hadoop计算中非常常见的需求，它要求将两个不同数据源的数据根据一个或多个key字段连接成一个合并数据输出，由于key字段数据的特殊性，导致join分成三种类型，处理方法各有不同，如果一个key在数据中可以重复，则记该数据源为N类型，如果只能出现一次，则记为1类型。1)  类型1-1的join比如（学号，姓名）和（学号，班级）两个数据集根据学号字段进行join，因为同一个学号只能指向单个名字和单个班级，所以为1-1类型，处理方法是map阶段加上标记后，reduce阶段接收到的数据是每两个一个分组，这样的话只需要读取第一行，将非key字段连到第二行后面即可。每个学号输出数据：1*1=1个2)  类型1-N或者N-1的join比如（学号，姓名）和（学号，选修的课程）两个数据集根据学号字段的join，由于第二个数据源的数据中每个学号会对应很多的课程，所以为1-N类型join，处理方法是map阶段给第一个数据源（类型1）加上标记为1，第二个数据源加上标记为2。这样的话reduce阶段收到的数据以标记为1的行分组，同时每组行数会大于2，join方法是先读取标记1的行，记录其非key字段Field Value 1，然后往下遍历，每次遇到标记2的行都将Field Value 1添加到该行的末尾并输出。每个学号输出数据：1*N=N*1=N个3)  类型M-N的join比如（学号，选修的课程）和（学号，喜欢的水果）根据学号字段做join，由于每个数据源的单个学号都会对应多个相应数据，所以为M*N类型。处理方法是map阶段给数据源小的加上标记1（目的是reduce阶段的节省内存），给数据源大的加上标记2，reduce阶段每个分组会有M*N行，并且标记1的全部在标记2的前面。Join方法是先初始化一个空数组，遇到标记1的行时，将非key数据都记录在数组中，然后遇到标记2的行时，将数组中的数据添加在该行之后输出。每个学号输出数据：M*N个2. 启动程序中key字段和partition字段的设定在join计算过程中，有两个字段非常的重要并需要对其理解，就是排序字段key和分区字段partition的指定。字段字段说明num.key.fields.for.partition用于分区，只影响数据被分发到哪个reduce机器，但不影响排序stream.num.map.output.key.fieldsKey的意思就是主键，这个主键会影响到数据根据前几列的排序org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner如果需要对字段排序、分区，默认都得加上此设置上面三个配置尤其会影响到join计算时的配置：1)  如果是单key的join，因为要加上标记字段排序，所以设定key=2，同时设定partition=1对第一个字段分区来保证同Key的数据都在同一台机器上；2)  如果是N个联合key的join，首先需要加上标记字段，所以设定key=N+1，用来对其进行排序，然后需要partition为N来对其按key分区。3. 控制hadoop程序内存的方法Hadoop程序是针对海量数据的，因此任何一个保存变量的操作都会在内存中造成N倍的存储，如果尝试用一个数组记录每一行或某些行的单个字段，用不到程序运行结束，hadoop平台就会爆出137内存超出的错误而被kill掉。控制内存的方法就是少用变量、尤其数组来记录数据，最终实现当前行的处理与数据总规模的无关，汇总、M*N的join等处理不得不记录历史数据，对这种处理要做到用后及时释放，同时尽量记录在单变量而不是数组中，比如汇总计算可以每次记录累加值，而不是先记录所有的元素最后才汇总。4. 对于数字key的排序问题如果不加以处理，排序处理过程中数字1会排在10之后，处理方法是需要在数字前面补0，比如如果全部有2位，就将个位数补1个零，让01和10比较，最终reduce输出的时候，再转回来，需要先预测数字的位数。在mapper.py中：Print ‘%010d\t%s’%(int(key),value)其中key既然是数字，就需要用数字的格式化输出%010d表示将输出10位的字符串，如果不够10位，前面补0。在reducer.py中，最终输出时，使用转int的方法去掉前面的0：Print ‘%d\t%s’%(int(key),value)5. 在mapper中获取map_input_file环境变量的方法在mapper中，有时候为了区分不同的数据文件来源，这时候可以用map_input_file变量来记录当前正在处理的脚本的文件路径。以下是两种判别方法：a)        用文件名判断Import osfilepath = os.environ[""map_input_file""]filename = os.path.split(filepath)[-1]if filename==”filename1”:#process 1elif filename==”filename2”:#process2b)        用文件路径是否包含确定字符串判断filepath = os.environ[""map_input_file""]if filepath.find(sys.argv[2])!=-1:#process6. 运行过程中记录数据的方法Hadoop程序不同于本地程序的调试方法，可以使用错误日志来查看错误信息，提交任务前也可以在本地用cat input | mapper.py | sort | reducer.py > output这种方法来先过滤基本的错误，在运行过程中也可以通过以下方法记录信息：1)  可以直接将信息输出到std output，程序运行结束后，需要手工筛选记录的数据，或者用awk直接查看，但是会污染结果数据2)  大多采用的是用错误输出的方法，这样运行后可以在stderr日志里面查看自己输出的数据：sys.stderr.write('filename:%s\t'%(filename))7.  多次运行Hadoop之是否成功的判断如果要运行多次的hadoop计算，并且前一次的计算结果是下一次计算的输入，那么如果上一次计算失败了，下一次很明显不需要启动计算。因此在shell文件中可以通过$?来判断上一次是否运行成功，示例代码：if [ $? -ne 0 ];then   exit 1fi8. 对stdin读取的 line的预处理Mapper和reducer程序都是从标准输入读取数据的，然而如果直接进行split会发现最后一个字段后面跟了个’\n’，解决方法有两种：1)  datas = line[:-1].split(‘\t’)2)  datas=line.strip().split(‘\t’)第一种方法直接去除最后一个字符\n，然后split，第二种方法是去除行两边的空格 （包括换行），然后split。个人喜欢用第二种，因为我不确定是否所有行都是\n结尾的，但是有些数据两边会有空格，如果strip掉的话就会伤害数据，所以可以根据情景选用。9. Python字符串的连接方法Mapper和reducer的输出或者中间的处理经常需要将不同类型的字符串结合在一起，python中实现字符串连接的方法有格式化输出、字符串连接（加号）和join操作（需要将每个字段转化成字符类型）。使用格式化输出：’%d\t%s’%(inti,str)使用字符串的+号进行连接：’%d\t’%i+’\t’.join(list)写成元祖的\t的Join：’\t’.join((‘%d’%i, ‘\t’.join(list)))10. 怎样查看mapper程序的输出一般来说，mapper程序经过处理后，会经过排序然后partition给不同的reducer来做下一步的处理，然而在开发过程中常常需要查看当前的mapper输出是否是预期的结果，对其输出的查看有两种需求。需求一，查看mapper的直接输出：在运行脚本中，不设定-reducer参数，也就是没有reducer程序，然后把-D mapred.reduce.tasks=0，即不需要任何reduce的处理，但是同时要设定-output选项，这样的话，在output的目录中会看到每个mapper机器输出的一个文件，就是mapper程序的直接输出。需求二，查看mapper的输出被partition并排序后的内容，即reducer的输入是什么样子：在运行脚本中，不设定-reducer参数，也就是没有自己的reducer程序，然后把-D mapred.reduce.tasks=1或者更大的值，即有reduce机器，但是没有reducer程序，hadoop会认为有reducer是存在的，因此会继续对mapper的输出调用shuffle打乱和sort操作，这样的话就在output目录下面看到了reducer的输入文件，并且数目等于reducer设定的tasks个数。11. SHELL脚本中变量名的命名方法如果遇到很多的输入数据源和很多输出的中间结果，每个hadoop的输出都会用到下一步的输入，并且该人物也用到了其他的输出，这样的话最好在一个统一的shell配置文件中配置所有的文件路径名字，同时一定避免InputDir1、InputDir2这样的命名方法，变量命名是一种功力，一定要多练直观并且显而易见，这样随着程序规模的增加不会变的越来越乱。12. 提前设计好流程能简化很多重复工作近期自己接到一个较为复杂的hadoop数据处理流程，大大小小的处理估算的话得十几个hadoop任务才能完成，不过幸好没有直接开始写代码，而是把这些任务统一整理了一下，最后竟然发现很多个问题可以直接合并成一类代码处理，过程中同时将整个任务拆分成了很多小任务并列了个顺序，然后挨个解决小任务非常的快。Hadoop处理流程中如果任务之间错综复杂并相互依赖对方的处理结果，都需要事先设计好处理流程再开始事先。13. 其他一些实用经验1)  Mapper和reducer脚本写在同一个Python程序，便于对比和查看；2)  独立编写数据源的字段信息和位置映射字典，不容易混淆；3)  抽取常用的如输出数据、读入数据模块为独立函数；4)  测试脚本及数据、run脚本、map-reduce程序分目录放置；  ","['hadoop', 'streaming', '实战经验', '问题', '解决', '方法', '总结', '目录', 'join', '操作', '分清', 'join', '类型', '重要', '...', '启动', '程序', 'key', '字段', 'partition', '字段', '设定', '...', '控制', 'hadoop', '程序', '内存', '方法', '...', '对于', '数字', 'key', '排序', '问题', '...', 'mapper', '获取', 'map', 'input', 'file', '环境变量', '方法', '...', '运行', '过程', '记录', '数据', '方法', '...', '多次', '运行', 'hadoop', '是否', '成功', '判断', '...', 'stdin', '读取', 'line', '预处理', '...', 'python', '字符串', '连接', '方法', '...', '10', '怎样', '查看', 'mapper', '程序', '输出', '...', '11', 'shell', '脚本', '变量名', '命名', '方法', '...', '12', '提前', '设计', '流程', '简化', '很多', '重复', '工作', '...', '13', '其他', '一些', '实用', '经验', '...', 'join', '操作', '分清', 'join', '类型', '重要', 'join', '操作', 'hadoop', '计算', '非常', '常见', '需求', '要求', '两个', '不同', '数据源', '数据', '根据', '一个', '多个', 'key', '字段', '连接成', '一个', '合并', '数据', '输出', '由于', 'key', '字段', '数据', '特殊性', '导致', 'join', '分成', '三种', '类型', '处理', '方法', '各有不同', '如果', '一个', 'key', '数据', '可以', '重复', '记该', '数据源', '类型', '如果', '只能', '出现', '一次', '记为', '类型', '类型', 'join', '比如', '姓名', '班级', '两个', '数据', '根据', '学号', '进行', 'join', '因为', '同一个', '只能', '指向', '单个', '名字', '单个', '班级', '所以', '类型', '处理', '方法', 'map', '阶段', '加上', '标记', 'reduce', '阶段', '接收', '数据', '两个', '一个', '分组', '这样的话', '需要', '读取', '第一行', 'key', '字段', '连到', '第二行', '后面', '即可', '每个', '输出', '数据', '类型', '或者', 'join', '比如', '姓名', '选修', '课程', '两个', '数据', '根据', '学号', 'join', '由于', '第二个', '数据源', '数据', '每个', '学号', '对应', '很多', '课程', '所以', '类型', 'join', '处理', '方法', 'map', '阶段', '第一个', '数据源', '类型', '加上', '标记', '第二个', '数据源', '加上', '标记', '这样的话', 'reduce', '阶段', '收到', '数据', '标记', '分组', '同时', '每组', '行数会', '大于', 'join', '方法', '读取', '标记', '记录', '其非', 'key', '字段', 'field', 'value', '然后', '遍历', '每次', '遇到', '标记', 'field', 'value', '添加', '该行', '末尾', '输出', '每个', '输出', '数据', '类型', 'join', '比如', '选修', '课程', '喜欢', '水果', '根据', '学号', 'join', '由于', '每个', '数据源', '单个', '学号', '对应', '多个', '相应', '数据', '所以', '类型', '处理', '方法', 'map', '阶段', '数据源', '加上', '标记', '目的', 'reduce', '阶段', '节省', '内存', '数据源', '加上', '标记', 'reduce', '阶段', '每个', '分组会', '并且', '标记', '全部', '标记', '前面', 'join', '方法', '初始化', '一个', '数组', '遇到', '标记', '行时', 'key', '数据', '记录', '数组', '然后', '遇到', '标记', '行时', '数组', '数据', '添加', '该行', '之后', '输出', '每个', '输出', '数据', '启动', '程序', 'key', '字段', 'partition', '字段', '设定', 'join', '计算', '过程', '两个', '非常', '重要', '需要', '理解', '就是', '排序', '字段', 'key', '分区', '字段', 'partition', '指定', '字段', '说明', 'num', 'key', 'fields', 'for', 'partition', '用于', '分区', '影响', '数据', '分发', '哪个', 'reduce', '机器', '影响', '排序', 'stream', 'num', 'map', 'output', 'key', 'fieldskey', '意思', '就是', '主键', '这个', '主键', '影响', '数据', '根据', '几列', '排序', 'org', 'apache', 'hadoop', 'mapred', 'lib', 'keyfieldbasedpartitioner', '如果', '需要', '对字段', '排序', '分区', '默认', '加上', '设置', '上面', '三个', '配置', '尤其', '影响', 'join', '计算', '配置', '如果', 'key', 'join', '因为', '加上', '标记', '排序', '所以', '设定', 'key', '同时', '设定', 'partition', '第一个', '分区', '保证', 'key', '数据', '同一', '机器', '如果', '联合', 'key', 'join', '首先', '需要', '加上', '标记', '所以', '设定', 'key', '用来', '进行', '排序', '然后', '需要', 'partition', 'key', '分区', '控制', 'hadoop', '程序', '内存', '方法', 'hadoop', '程序', '针对', '海量', '数据', '因此', '任何', '一个', '保存', '变量', '操作', '内存', '造成', '存储', '如果', '尝试', '一个', '数组', '记录', '一行', '某些', '单个', '不到', '程序运行', '结束', 'hadoop', '平台', '爆出', '137', '内存', '超出', '错误', 'kill', '控制', '内存', '方法', '就是', '变量', '尤其', '数组', '记录', '数据', '最终', '实现', '当前', '处理', '数据', '规模', '无关', '汇总', 'join', '处理', '不得不', '记录', '历史数据', '这种', '处理', '做到', '用后', '及时', '释放', '同时', '尽量', '记录', '变量', '不是', '数组', '比如', '汇总', '计算', '可以', '每次', '记录', '累加', '不是', '记录', '所有', '元素', '最后', '汇总', '对于', '数字', 'key', '排序', '问题', '如果', '加以', '处理', '排序', '处理过程', '数字', '会排', '10', '之后', '处理', '方法', '需要', '数字', '前面', '比如', '如果', '全部', '个位数', '01', '10', '比较', '最终', 'reduce', '输出', '时候', '回来', '需要', '预测', '数字', '位数', 'mapper', 'py', 'print', '010d', 't%', 'int', 'key', 'value', '其中', 'key', '既然', '数字', '需要', '数字', '格式化', '输出', '010d', '表示', '输出', '10', '字符串', '如果', '不够', '10', '前面', 'reducer', 'py', '最终', '输出', '使用', 'int', '方法', '去掉', '前面', 'print', 't%', 'int', 'key', 'value', 'mapper', '获取', 'map', 'input', 'file', '环境变量', '方法', 'mapper', '有时候', '为了', '区分', '不同', '数据文件', '来源', '这时候', '可以', 'map', 'input', 'file', '变量', '记录', '当前', '正在', '处理', '脚本', '文件', '路径', '以下', '两种', '判别', '方法', '文件名', '判断', 'import', 'osfilepath', 'os', 'environ', 'map', 'input', 'file', 'filename', 'os', 'path', 'split', 'filepath', 'if', 'filename', 'filename1', 'process', '1elif', 'filename', 'filename2', 'process2b', '文件', '路径', '是否', '包含', '确定', '字符串', '判断', 'filepath', 'os', 'environ', 'map', 'input', 'file', 'if', 'filepath', 'find', 'sys', 'argv', 'process6', '运行', '过程', '记录', '数据', '方法', 'hadoop', '程序', '不同于', '本地', '程序', '调试', '方法', '可以', '使用', '错误', '日志', '查看', '错误信息', '提交', '任务', '可以', '本地', 'cat', 'input', 'mapper', 'py', 'sort', 'reducer', 'py', 'output', '这种', '方法', '过滤', '基本', '错误', '运行', '过程', '可以', '通过', '以下', '方法', '记录', '信息', '可以', '直接', '信息', '输出', 'std', 'output', '程序运行', '结束', '需要', '手工', '筛选', '记录', '数据', '或者', 'awk', '直接', '查看', '但是', '污染', '结果', '数据', '大多', '采用', '错误', '输出', '方法', '这样', '运行', '可以', 'stderr', '日志', '里面', '查看', '自己', '输出', '数据', 'sys', 'stderr', 'write', 'filename', 'filename', '多次', '运行', 'hadoop', '是否', '成功', '判断', '如果', '运行', '多次', 'hadoop', '计算', '并且', '一次', '计算结果', '一次', '计算', '输入', '那么', '如果', '一次', '计算', '失败', '一次', '明显', '需要', '启动', '计算', '因此', 'shell', '文件', '可以', '通过', '判断', '一次', '是否', '运行', '成功', '示例', '代码', 'if', 'ne', 'then', 'exit', '1fi8', 'stdin', '读取', 'line', '预处理', 'mapper', 'reducer', '程序', '是从', '标准', '输入', '读取数据', '然而', '如果', '直接', '进行', 'split', '发现', '最后', '一个', '后面', '解决', '方法', '两种', 'datas', 'line', 'split', 'datas', 'line', 'strip', 'split', '第一种', '方法', '直接', '去除', '最后', '一个', '字符', '然后', 'split', '第二种', '方法', '去除', '两边', '空格', '包括', '换行', '然后', 'split', '个人', '喜欢', '第二种', '因为', '确定', '是否', '所有', '行都', '结尾', '但是', '有些', '数据', '两边', '空格', '如果', 'strip', '的话', '伤害', '数据', '所以', '可以', '根据', '情景', '选用', 'python', '字符串', '连接', '方法', 'mapper', 'reducer', '输出', '或者', '中间', '处理', '经常', '需要', '不同', '类型', '字符串', '结合', '一起', 'python', '实现', '字符串', '连接', '方法', '格式化', '输出', '字符串', '连接', '加号', 'join', '操作', '需要', '每个', '转化成', '字符', '类型', '使用', '格式化', '输出', 't%', 'inti', 'str', '使用', '字符串', '进行', '连接', 'join', 'list', '写成', '元祖', 'join', 'join', 'join', 'list', '10', '怎样', '查看', 'mapper', '程序', '输出', '一般来说', 'mapper', '程序', '经过', '处理', '经过', '排序', '然后', 'partition', '不同', 'reducer', '一步', '处理', '然而', '开发', '过程', '常常', '需要', '查看', '当前', 'mapper', '输出', '是否是', '预期', '结果', '输出', '查看', '两种', '需求', '需求', '查看', 'mapper', '直接', '输出', '运行', '脚本', '设定', 'reducer', '参数', '就是', '没有', 'reducer', '程序', '然后', 'mapred', 'reduce', 'tasks', '需要', '任何', 'reduce', '处理', '但是', '同时', '设定', 'output', '选项', '这样的话', 'output', '目录', '看到', '每个', 'mapper', '机器', '输出', '一个', '文件', '就是', 'mapper', '程序', '直接', '输出', '需求', '查看', 'mapper', '输出', 'partition', '排序', '内容', 'reducer', '输入', '什么', '样子', '运行', '脚本', '设定', 'reducer', '参数', '就是', '没有', '自己', 'reducer', '程序', '然后', 'mapred', 'reduce', 'tasks', '或者', '更大', 'reduce', '机器', '但是', '没有', 'reducer', '程序', 'hadoop', '认为', 'reducer', '存在', '因此', '继续', 'mapper', '输出', '调用', 'shuffle', '打乱', 'sort', '操作', '这样的话', 'output', '目录', '下面', '看到', 'reducer', '输入', '文件', '并且', '数目', '等于', 'reducer', '设定', 'tasks', '个数', '11', 'shell', '脚本', '变量名', '命名', '方法', '如果', '遇到', '很多', '输入', '数据源', '很多', '输出', '中间', '结果', '每个', 'hadoop', '输出', '用到', '一步', '输入', '并且', '人物', '用到', '其他', '输出', '这样的话', '最好', '一个', '统一', 'shell', '配置文件', '配置', '所有', '文件', '路径', '名字', '同时', '一定', '避免', 'inputdir1', 'inputdir2', '这样', '命名', '方法', '变量', '命名', '一种', '功力', '一定', '多练', '直观', '并且', '显而易见', '这样', '随着', '程序', '规模', '增加', '不会', '越来越', '12', '提前', '设计', '流程', '简化', '很多', '重复', '工作', '近期', '自己', '接到', '一个', '较为', '复杂', 'hadoop', '数据处理', '流程', '大大小小', '处理', '估算', '的话', '十几个', 'hadoop', '任务', '才能', '完成', '不过', '幸好', '没有', '直接', '开始', '代码', '而是', '这些', '任务', '统一', '整理', '一下', '最后', '竟然', '发现', '很多', '问题', '可以', '直接', '合并', '一类', '代码', '处理', '过程', '同时', '整个', '任务', '分成', '很多', '任务', '并列', '顺序', '然后', '挨个', '解决', '任务', '非常', 'hadoop', '处理', '流程', '如果', '任务', '之间', '错综复杂', '相互依赖', '对方', '处理结果', '需要', '事先', '设计', '处理', '流程', '开始', '事先', '13', '其他', '一些', '实用', '经验', 'mapper', 'reducer', '脚本', '同一个', 'python', '程序', '便于', '对比', '查看', '独立', '编写', '数据源', '信息', '位置', '映射', '字典', '容易', '混淆', '抽取', '常用', '输出', '数据', '读入', '数据', '模块', '独立', '函数', '测试', '脚本', '数据', 'run', '脚本', 'map', 'reduce', '程序', '目录', '放置']","[[-0.26990607 -0.14092608  0.23362393  0.15305794  0.33018672 -0.36058367
  -0.206474    0.51593243 -0.00426035 -0.02493603 -0.0570789  -0.34455265
  -0.19877755  0.63961072  0.17531787 -0.10826075 -0.16652446 -0.00849319
  -0.1237517  -0.51249848  0.02295789  0.25267931  0.01025345 -0.09426812
   0.13652907 -0.58961873 -0.30046989  0.08973034 -0.22647832 -0.06034577
   0.26123027  0.00738307 -0.02033363 -0.1582116  -0.10395481  0.34972766
  -0.14757389 -0.23860154  0.13348522 -0.82932679 -0.20105391 -0.62904888
  -0.04773532 -0.07572879 -0.18262629 -0.15165611 -0.26034671  0.49484355
  -0.21390914  0.43513761  0.23153253 -0.28296914 -0.14885563 -0.23554517
   0.07952793  0.40977424  0.26428209 -0.06993277  0.10044158 -0.11049004
   0.03600804  0.3197672   0.02740829  0.09534944 -0.42079022 -0.01343714
   0.0597379  -0.03119995 -0.27725568  0.47291811  0.15772152 -0.2620513
   0.41911185 -0.34624537  0.60707806  0.17541916  0.19677331 -0.13636298
  -0.30651452 -0.20640081 -0.06754978 -0.00996556 -0.06697534  0.35111811
  -0.38677474  0.2219319  -0.3094615   0.42467987  0.48205019  0.13059498
   0.33958993  0.12797294  0.38760537  0.2050497   0.20117617  0.38120052
   0.11323248 -0.33113435 -0.06075144 -0.10378228]]"
1129,MYSQL向数据表插入默认字段值的方法,"数据表设计过程中很多时候会设定字段的默认值，那么向该表插入数据时会出现以下情况：情况1：如果该字段为NULL类型，那么直接将NULL插入到该字段，字段值就自动变成了设定的默认值；情况2：如果该字段为NOT NULL类型，那么直接将NULL插入到该字段的话，在普通模式下该字段的值会变成默认值并发出警告，但是strict模式下会直接报错；对于情况2的解决方法是：使用DEFAULT关键词。官方文档（地址）中对此有了说明：说明1：insert的语法说明（注意加红色的关键字）INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE][INTO] tbl_name[PARTITION (partition_name,...)][(col_name,...)]{VALUES | VALUE} ({expr | DEFAULT},...),(...),...[ ON DUPLICATE KEY UPDATEcol_name=expr[, col_name=expr] ... ]说明2：使用DEFAULT关键字的说明Use the keyword DEFAULT to set a column explicitly to its default value. This makes it easier to write INSERTstatements that assign values to all but a few columns, because it enables you to avoid writing an incompleteVALUES list that does not include a value for each column in the table. Otherwise, you would have to write out the list of column names corresponding to each value in the VALUES list.翻译过来大致就是说，用关键字“DEFAULT”可以显式的在insert的过程中将一个字段设定为它的默认值。比如一条SQL可以是这样的：insert into student(sno,sname,sage,class) values(1, 'crazyant', '25', DEFAULT)，这时候就直接将班级class的默认值插入进去了。然而使用load data infile to db，即直接将文件导入到数据表时，却无法使用默认的DEFAULT值，因为将该字段设定为""DEFAULT""会被认为是个字符串，改成NULL（用\N）表示则又会出现将NULL插入到NOT NULL的错误。 还有一种方法是程序自动取出数据表的默认值，然后在插入数据之前，自动将数据中的NULL值替换成数据表该字段的默认值，如下步骤所示：插入数据前替换NULL为数据表默认值的方法步骤1： 使用SHOW COLUMNS取出数据表字段的默认值mysql> SHOW COLUMNS FROM City;+------------+----------+------+-----+---------+----------------+| Field      | Type     | Null | Key | Default | Extra          |+------------+----------+------+-----+---------+----------------+| Id         | int(11)  | NO   | PRI | NULL    | auto_increment || Name       | char(35) | NO   |     |        |                || Country    | char(3)  | NO   | UNI | -1      |                || District   | char(20) | YES  | MUL |         |                || Population | int(11)  | NO   |     | 0       |                |+------------+----------+------+-----+---------+----------------+5 rows in set (0.00 sec) 如上所示，第5列""Default""下的这一列就是数据表字段的默认值，我们可以取出第一列和第五列，放在一个数组或字典里面：array[id]=NULLarray[Name]=""""array[Country]=-1array[District]=""""array[Population]=0步骤2，插入数据前替换其中的NULL为字典存放的默认值在插入数据表之前，如果某个字段的值为NULL，就根据字段名从上述字典取出默认值，替换掉NULL，然后再插入数据。这种方法在load data from file中可用，因为load data的效率比insert的效率高太多，所以值得这么做。","['mysql', '数据表', '插入', '默认', '段值', '方法', '数据表', '设计', '过程', '很多', '时候', '设定', '字段', '默认值', '那么', '该表', '插入', '数据', '时会', '出现', '以下', '情况', '情况', '如果', '该字', 'null', '类型', '那么', '直接', 'null', '插入', '段值', '自动', '变成', '设定', '默认值', '情况', '如果', '该字', 'not', 'null', '类型', '那么', '直接', 'null', '插入', '的话', '普通', '模式', '下该', '值会', '变成', '默认值', '发出', '警告', '但是', 'strict', '模式', '下会', '直接', '报错', '对于', '情况', '解决', '方法', '使用', 'default', '关键词', '官方', '文档', '地址', '对此', '说明', '说明', 'insert', '语法', '说明', '注意', '红色', '关键字', 'insert', 'low', 'priority', 'delayed', 'high', 'priority', 'ignore', 'into', 'tbl', 'name', 'partition', 'partition', 'name', '...', 'col', 'name', '...', 'values', 'value', 'expr', 'default', '...', '...', '...', 'on', 'duplicate', 'key', 'updatecol', 'name', 'expr', 'col', 'name', 'expr', '...', '说明', '使用', 'default', '关键字', '说明', 'use', 'the', 'keyword', 'default', 'to', 'set', 'column', 'explicitly', 'to', 'its', 'default', 'value', 'this', 'makes', 'it', 'easier', 'to', 'write', 'insertstatements', 'that', 'assign', 'values', 'to', 'all', 'but', 'few', 'columns', 'because', 'it', 'enables', 'you', 'to', 'avoid', 'writing', 'an', 'incompletevalues', 'list', 'that', 'does', 'not', 'include', 'value', 'for', 'each', 'column', 'in', 'the', 'table', 'otherwise', 'you', 'would', 'have', 'to', 'write', 'out', 'the', 'list', 'of', 'column', 'names', 'corresponding', 'to', 'each', 'value', 'in', 'the', 'values', 'list', '翻译', '过来', '大致', '就是说', '关键字', 'default', '可以', '显式', 'insert', '过程中将', '一个', '设定', '默认值', '比如', '一条', 'sql', '可以', '这样', 'insert', 'into', 'student', 'sno', 'sname', 'sage', 'class', 'values', 'crazyant', '25', 'default', '这时候', '直接', '班级', 'class', '默认值', '插入', '进去', '然而', '使用', 'load', 'data', 'infile', 'to', 'db', '直接', '文件', '导入到', '数据表', '无法', '使用', '默认', 'default', '因为', '设定', 'default', '认为', '字符串', '改成', 'null', '表示', '出现', 'null', '插入', 'not', 'null', '错误', '还有', '一种', '方法', '程序', '自动', '取出', '数据表', '默认值', '然后', '插入', '数据', '之前', '自动', '数据', 'null', '替换成', '数据表', '该字', '默认值', '如下', '步骤', '所示', '插入', '数据', '替换', 'null', '数据表', '默认值', '方法', '步骤', '使用', 'show', 'columns', '取出', '数据', '表字', '默认值', 'mysql', 'show', 'columns', 'from', 'city', '+------------+----------+------+-----+---------+----------------+', 'field', 'type', 'null', 'key', 'default', 'extra', '+------------+----------+------+-----+---------+----------------+', 'id', 'int', '11', 'no', 'pri', 'null', 'auto', 'increment', 'name', 'char', '35', 'no', 'country', 'char', 'no', 'uni', 'district', 'char', '20', 'yes', 'mul', 'population', 'int', '11', 'no', '+------------+----------+------+-----+---------+----------------+', 'rows', 'in', 'set', '0.00', 'sec', '所示', 'default', '一列', '就是', '数据', '表字', '默认值', '我们', '可以', '取出', '第一列', '第五', '放在', '一个', '数组', '字典', '里面', 'array', 'id', 'nullarray', 'name', 'array', 'country', '1array', 'district', 'array', 'population', '步骤', '插入', '数据', '替换', '其中', 'null', '字典', '存放', '默认值', '插入', '数据表', '之前', '如果', '某个', '字段', 'null', '根据', '字段名', '上述', '字典', '取出', '默认值', '替换', 'null', '然后', '插入', '数据', '这种', '方法', 'load', 'data', 'from', 'file', '可用', '因为', 'load', 'data', '效率', 'insert', '效率高', '所以', '值得', '这么']","[[-0.22240541 -0.11206399  0.25695347  0.10042657  0.31603711 -0.3705714
  -0.13975376  0.4822931  -0.05880992 -0.1230527  -0.02821506 -0.37138652
  -0.16882835  0.55737058  0.18057935 -0.09621429 -0.13128843 -0.00750666
  -0.09072936 -0.5686278  -0.05207855  0.25195809 -0.03752056 -0.20701478
   0.07634619 -0.50062305 -0.31315652  0.04048426 -0.25589941 -0.07715826
   0.17128129 -0.01547357  0.00186468 -0.13728421 -0.1656349   0.32472113
  -0.21046018 -0.28343513  0.08984387 -0.76526121 -0.16165735 -0.63417508
  -0.08200809 -0.00231957 -0.13688947 -0.22758947 -0.20829268  0.35989922
  -0.22333058  0.50188558  0.17498057 -0.26926388 -0.15674733 -0.1638208
  -0.01038239  0.38659644  0.15984009 -0.09424047  0.10915257 -0.15126179
   0.08455962  0.24948622  0.01687216  0.09828869 -0.38744837  0.04014723
   0.07714921 -0.05019884 -0.32571101  0.44637615  0.12209224 -0.18165218
   0.38286116 -0.33041714  0.57132249  0.26542379  0.1162314  -0.15025889
  -0.35188651 -0.11057198  0.02143024  0.05862669 -0.12190201  0.375654
  -0.33394491  0.2233807  -0.29314055  0.44157108  0.4948244   0.15653678
   0.25966863  0.10801569  0.38176091  0.1930505   0.20151985  0.332563
   0.13301383 -0.34585371 -0.07720549 -0.13421264]]"
1144,hadoop第一个程序WordCount.java的编译运行过程,"java是hadoop开发的标准官方语言，本文下载了官方的WordCount.java并对其进行了编译和打包，然后使用测试数据运行了该hadoop程序。 这里假定已经装好了hadoop的环境，在Linux下运行hadoop命令能够正常执行；下载java版本的WordCount.java程序。 将WordCount.java复制到linux下的一个目录，这里我复制到/home/crazyant/hadoop_wordcount[crazyant@dev.mechine hadoop_wordcount]$ lltotal 4-rwxr--r--  1 crazyant crazyant 1921 Aug 16 20:03 WordCount.java在该目录（/home/crazyant/hadoop_wordcount）下创建wordcount_classes目录，用于存放编译WordCount.java生成的class文件。[crazyant@dev.mechine hadoop_wordcount]$ mkdir wordcount_classes[crazyant@dev.mechine hadoop_wordcount]$ lltotal 8drwxrwxr-x  2 crazyant crazyant 4096 Aug 16 20:07 wordcount_classes-rwxr--r--  1 crazyant crazyant 1921 Aug 16 20:03 WordCount.java编译WordCount.java文件，其中-classpath选项表示要引用hadoop官方的包，-d选项表示要将编译后的class文件生成的目标目录。[crazyant@dev.mechine hadoop_wordcount]$ javac -classpath /home/crazyant/app/hadoop/hadoop-2-core.jar -d wordcount_classes WordCount.java[crazyant@dev.mechine hadoop_wordcount]$ ll -R.:total 8drwxrwxr-x  3 crazyant crazyant 4096 Aug 16 20:09 wordcount_classes-rwxr--r--  1 crazyant crazyant 1921 Aug 16 20:03 WordCount.java ./wordcount_classes:total 4drwxrwxr-x  3 crazyant crazyant 4096 Aug 16 20:09 org ./wordcount_classes/org:total 4drwxrwxr-x  2 crazyant crazyant 4096 Aug 16 20:09 myorg ./wordcount_classes/org/myorg:total 12-rw-rw-r--  1 crazyant crazyant 1546 Aug 16 20:09 WordCount.class-rw-rw-r--  1 crazyant crazyant 1938 Aug 16 20:09 WordCount$Map.class-rw-rw-r--  1 crazyant crazyant 1611 Aug 16 20:09 WordCount$Reduce.class然后将编译后的class文件打包：[crazyant@dev.mechine hadoop_wordcount]$ jar -cvf wordcount.jar -C wordcount_classes/ .added manifestadding: org/(in = 0) (out= 0)(stored 0%)adding: org/myorg/(in = 0) (out= 0)(stored 0%)adding: org/myorg/WordCount$Map.class(in = 1938) (out= 798)(deflated 58%)adding: org/myorg/WordCount$Reduce.class(in = 1611) (out= 649)(deflated 59%)adding: org/myorg/WordCount.class(in = 1546) (out= 749)(deflated 51%)[crazyant@dev.mechine hadoop_wordcount]$ lltotal 12drwxrwxr-x  3 crazyant crazyant 4096 Aug 16 20:09 wordcount_classes-rw-rw-r--  1 crazyant crazyant 3169 Aug 16 20:11 wordcount.jar-rwxr--r--  1 crazyant crazyant 1921 Aug 16 20:03 WordCount.java 在本地用echo生成一个文件，用于输入数据：[crazyant@dev.mechine hadoop_wordcount]$ echo ""hello world, hello crazyant, i am the ant, i am your brother"" > inputfile[crazyant@dev.mechine hadoop_wordcount]$ more inputfilehello world, hello crazyant, i am the ant, i am your brother在hadoop上建立一个目录，里面建立输入文件的目录[crazyant@dev.mechine hadoop_wordcount]$ hadoop fs -mkdir /app/word_count/input[crazyant@dev.mechine hadoop_wordcount]$ hadoop fs -ls /app/word_countFound 1 itemsdrwxr-xr-x   3 czt czt          0 2013-08-16 20:16 /app/word_count/input 将本地刚刚写的的inputfile上传到hadoop上的input目录[crazyant@dev.mechine hadoop_wordcount]$ hadoop fs -put inputfile /app/word_count/input[crazyant@dev.mechine hadoop_wordcount]$ hadoop fs -ls /app/word_count/inputFound 1 items-rw-r--r--   3 czt czt         61 2013-08-16 20:18 /app/word_count/input/inputfile 运行jar，以建立的Input目录作为输入参数[crazyant@dev.mechine hadoop_wordcount]$ hadoop jar wordcount.jar org.myorg.WordCount /app/word_count/input /app/word_count/output13/08/16 20:19:38 WARN mapred.JobClient: Use GenericOptionsParser for parsing the arguments. Applications should implement Tool for the same.13/08/16 20:19:40 INFO util.NativeCodeLoader: Loaded the native-hadoop library13/08/16 20:19:40 INFO compress.LzoCodec: Successfully loaded & initialized native-lzo library13/08/16 20:19:40 INFO compress.LzmaCodec: Successfully loaded & initialized native-lzma library13/08/16 20:19:40 INFO compress.QuickLzCodec: Successfully loaded & initialized native-quicklz library13/08/16 20:19:40 INFO mapred.FileInputFormat: Total input paths to process : 113/08/16 20:19:41 INFO mapred.JobClient: splits size : 6113/08/16 20:19:41 INFO mapred.JobClient: Running job: job_20130813122541_10584413/08/16 20:19:43 INFO mapred.JobClient:  map 0% reduce 0%13/08/16 20:19:57 INFO mapred.JobClient:  map 24% reduce 0%13/08/16 20:20:07 INFO mapred.JobClient:  map 93% reduce 0%13/08/16 20:20:16 INFO mapred.JobClient:  map 100% reduce 1%13/08/16 20:20:26 INFO mapred.JobClient:  map 100% reduce 61%13/08/16 20:20:36 INFO mapred.JobClient:  map 100% reduce 89%13/08/16 20:20:47 INFO mapred.JobClient:  map 100% reduce 96%13/08/16 20:20:57 INFO mapred.JobClient:  map 100% reduce 98%13/08/16 20:21:00 INFO mapred.JobClient: Updating completed job! Ignoring ...13/08/16 20:21:00 INFO mapred.JobClient: Updating completed job! Ignoring ...13/08/16 20:21:00 INFO mapred.JobClient: Job complete: job_20130813122541_10584413/08/16 20:21:00 INFO mapred.JobClient: Counters: 1913/08/16 20:21:00 INFO mapred.JobClient:   File Systems13/08/16 20:21:00 INFO mapred.JobClient:     HDFS bytes read=195113/08/16 20:21:00 INFO mapred.JobClient:     HDFS bytes written=6813/08/16 20:21:00 INFO mapred.JobClient:     Local bytes read=517471513/08/16 20:21:00 INFO mapred.JobClient:     Local bytes written=25681413/08/16 20:21:00 INFO mapred.JobClient:   Job Counters13/08/16 20:21:00 INFO mapred.JobClient:     Launched reduce tasks=10013/08/16 20:21:00 INFO mapred.JobClient:     Rack-local map tasks=6113/08/16 20:21:00 INFO mapred.JobClient:     ORIGINAL_REDUCES=10013/08/16 20:21:00 INFO mapred.JobClient:     Launched map tasks=6113/08/16 20:21:00 INFO mapred.JobClient:     MISS_SCHEDULED_REDUCES=1513/08/16 20:21:00 INFO mapred.JobClient:   TASK_STATISTICS13/08/16 20:21:00 INFO mapred.JobClient:     Total Map Slot Time=3413/08/16 20:21:00 INFO mapred.JobClient:     Attempt_0 Map Task Count=6113/08/16 20:21:00 INFO mapred.JobClient:     Total Reduce Slot Time=89213/08/16 20:21:00 INFO mapred.JobClient:   Map-Reduce Framework13/08/16 20:21:00 INFO mapred.JobClient:     Reduce input groups=913/08/16 20:21:00 INFO mapred.JobClient:     Combine output records=013/08/16 20:21:00 INFO mapred.JobClient:     Map input records=113/08/16 20:21:00 INFO mapred.JobClient:     Reduce output records=913/08/16 20:21:00 INFO mapred.JobClient:     Map input bytes=6113/08/16 20:21:00 INFO mapred.JobClient:     Combine input records=013/08/16 20:21:00 INFO mapred.JobClient:     Reduce input records=9查看output目录是否有结果[crazyant@dev.mechine hadoop_wordcount]$ hadoop fs -ls /app/word_count/output                                                    Found 100 items-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00000-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00001-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00002-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00003-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00004-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00005-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00006-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00007-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00008-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00009-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00010-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00011-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00012-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00013-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00014-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00015-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00016-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00017-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00018-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00019-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00020-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00021-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00022-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00023-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00024-rw-r--r--   3 czt czt          0 2013-08-16 20:20 /app/word_count/output/part-00025 将该目录下所有文本文件合并后下载到本地[crazyant@dev.mechine hadoop_wordcount]$ hadoop fs -getmerge /app/word_count/output wordcount_result[crazyant@dev.mechine hadoop_wordcount]$ lsinputfile  wordcount_classes  wordcount.jar  WordCount.java  wordcount_result查看一下下载下来的计算结果[crazyant@dev.mechine hadoop_wordcount]$ more wordcount_resulti       2your    1crazyant,       1brother 1hello   2am      2world,  1the     1ant,    1 统计结果正确； 参考文章：http://hadoop.apache.org/docs/r0.18.3/mapred_tutorial.html#Example%3A+WordCount+v1.0","['hadoop', '第一个', '程序', 'wordcount', 'java', '编译', '运行', '过程', 'java', 'hadoop', '开发', '标准', '官方语言', '本文', '下载', '官方', 'wordcount', 'java', '进行', '编译', '打包', '然后', '使用', '测试数据', '运行', 'hadoop', '程序', '这里', '假定', '已经', '装好', 'hadoop', '环境', 'linux', '运行', 'hadoop', '命令', '能够', '正常', '执行', '下载', 'java', '版本', 'wordcount', 'java', '程序', 'wordcount', 'java', '复制到', 'linux', '一个', '目录', '这里', '复制到', 'home', 'crazyant', 'hadoop', 'wordcount', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'lltotal', 'rwxr', '--', '--', 'crazyant', 'crazyant', '1921', 'aug', '16', '20', '03', 'wordcount', 'java', '目录', 'home', 'crazyant', 'hadoop', 'wordcount', '创建', 'wordcount', 'classes', '目录', '用于', '存放', '编译', 'wordcount', 'java', '生成', 'class', '文件', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'mkdir', 'wordcount', 'classes', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'lltotal', '8drwxrwxr', 'crazyant', 'crazyant', '4096', 'aug', '16', '20', '07', 'wordcount', 'classes', 'rwxr', '--', '--', 'crazyant', 'crazyant', '1921', 'aug', '16', '20', '03', 'wordcount', 'java', '编译', 'wordcount', 'java', '文件', '其中', 'classpath', '选项', '表示', '引用', 'hadoop', '官方', '选项', '表示', '编译', 'class', '文件', '生成', '目标目录', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'javac', 'classpath', 'home', 'crazyant', 'app', 'hadoop', 'hadoop', 'core', 'jar', 'wordcount', 'classes', 'wordcount', 'java', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'll', 'total', '8drwxrwxr', 'crazyant', 'crazyant', '4096', 'aug', '16', '20', '09', 'wordcount', 'classes', 'rwxr', '--', '--', 'crazyant', 'crazyant', '1921', 'aug', '16', '20', '03', 'wordcount', 'java', 'wordcount', 'classes', 'total', '4drwxrwxr', 'crazyant', 'crazyant', '4096', 'aug', '16', '20', '09', 'org', 'wordcount', 'classes', 'org', 'total', '4drwxrwxr', 'crazyant', 'crazyant', '4096', 'aug', '16', '20', '09', 'myorg', 'wordcount', 'classes', 'org', 'myorg', 'total', '12', 'rw', 'rw', '--', 'crazyant', 'crazyant', '1546', 'aug', '16', '20', '09', 'wordcount', 'class', 'rw', 'rw', '--', 'crazyant', 'crazyant', '1938', 'aug', '16', '20', '09', 'wordcount', 'map', 'class', 'rw', 'rw', '--', 'crazyant', 'crazyant', '1611', 'aug', '16', '20', '09', 'wordcount', 'reduce', 'class', '然后', '编译', 'class', '文件', '打包', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'jar', 'cvf', 'wordcount', 'jar', 'wordcount', 'classes', 'added', 'manifestadding', 'org', 'in', 'out', 'stored', '0%', 'adding', 'org', 'myorg', 'in', 'out', 'stored', '0%', 'adding', 'org', 'myorg', 'wordcount', 'map', 'class', 'in', '1938', 'out', '798', 'deflated', '58%', 'adding', 'org', 'myorg', 'wordcount', 'reduce', 'class', 'in', '1611', 'out', '649', 'deflated', '59%', 'adding', 'org', 'myorg', 'wordcount', 'class', 'in', '1546', 'out', '749', 'deflated', '51%', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'lltotal', '12drwxrwxr', 'crazyant', 'crazyant', '4096', 'aug', '16', '20', '09', 'wordcount', 'classes', 'rw', 'rw', '--', 'crazyant', 'crazyant', '3169', 'aug', '16', '20', '11', 'wordcount', 'jar', 'rwxr', '--', '--', 'crazyant', 'crazyant', '1921', 'aug', '16', '20', '03', 'wordcount', 'java', '本地', 'echo', '生成', '一个', '文件', '用于', '输入', '数据', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'echo', 'hello', 'world', 'hello', 'crazyant', 'am', 'the', 'ant', 'am', 'your', 'brother', 'inputfile', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'more', 'inputfilehello', 'world', 'hello', 'crazyant', 'am', 'the', 'ant', 'am', 'your', 'brother', 'hadoop', '建立', '一个', '目录', '里面', '建立', '输入', '文件', '目录', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'hadoop', 'fs', 'mkdir', 'app', 'word', 'count', 'input', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'hadoop', 'fs', 'ls', 'app', 'word', 'countfound', 'itemsdrwxr', 'xr', 'czt', 'czt', '2013', '08', '16', '20', '16', 'app', 'word', 'count', 'input', '本地', '刚刚', 'inputfile', '传到', 'hadoop', 'input', '目录', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'hadoop', 'fs', 'put', 'inputfile', 'app', 'word', 'count', 'input', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'hadoop', 'fs', 'ls', 'app', 'word', 'count', 'inputfound', 'items', 'rw', '--', '--', 'czt', 'czt', '61', '2013', '08', '16', '20', '18', 'app', 'word', 'count', 'input', 'inputfile', '运行', 'jar', '建立', 'input', '目录', '作为', '输入', '参数', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'hadoop', 'jar', 'wordcount', 'jar', 'org', 'myorg', 'wordcount', 'app', 'word', 'count', 'input', 'app', 'word', 'count', 'output13', '08', '16', '20', '19', '38', 'warn', 'mapred', 'jobclient', 'use', 'genericoptionsparser', 'for', 'parsing', 'the', 'arguments', 'applications', 'should', 'implement', 'tool', 'for', 'the', 'same.13', '08', '16', '20', '19', '40', 'info', 'util', 'nativecodeloader', 'loaded', 'the', 'native', 'hadoop', 'library13', '08', '16', '20', '19', '40', 'info', 'compress', 'lzocodec', 'successfully', 'loaded', 'initialized', 'native', 'lzo', 'library13', '08', '16', '20', '19', '40', 'info', 'compress', 'lzmacodec', 'successfully', 'loaded', 'initialized', 'native', 'lzma', 'library13', '08', '16', '20', '19', '40', 'info', 'compress', 'quicklzcodec', 'successfully', 'loaded', 'initialized', 'native', 'quicklz', 'library13', '08', '16', '20', '19', '40', 'info', 'mapred', 'fileinputformat', 'total', 'input', 'paths', 'to', 'process', '113', '08', '16', '20', '19', '41', 'info', 'mapred', 'jobclient', 'splits', 'size', '6113', '08', '16', '20', '19', '41', 'info', 'mapred', 'jobclient', 'running', 'job', 'job', '20130813122541', '10584413', '08', '16', '20', '19', '43', 'info', 'mapred', 'jobclient', 'map', '0%', 'reduce', '0%', '13', '08', '16', '20', '19', '57', 'info', 'mapred', 'jobclient', 'map', '24%', 'reduce', '0%', '13', '08', '16', '20', '20', '07', 'info', 'mapred', 'jobclient', 'map', '93%', 'reduce', '0%', '13', '08', '16', '20', '20', '16', 'info', 'mapred', 'jobclient', 'map', '100%', 'reduce', '1%', '13', '08', '16', '20', '20', '26', 'info', 'mapred', 'jobclient', 'map', '100%', 'reduce', '61%', '13', '08', '16', '20', '20', '36', 'info', 'mapred', 'jobclient', 'map', '100%', 'reduce', '89%', '13', '08', '16', '20', '20', '47', 'info', 'mapred', 'jobclient', 'map', '100%', 'reduce', '96%', '13', '08', '16', '20', '20', '57', 'info', 'mapred', 'jobclient', 'map', '100%', 'reduce', '98%', '13', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'updating', 'completed', 'job', 'ignoring', '...', '13', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'updating', 'completed', 'job', 'ignoring', '...', '13', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'job', 'complete', 'job', '20130813122541', '10584413', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'counters', '1913', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'file', 'systems13', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'hdfs', 'bytes', 'read', '195113', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'hdfs', 'bytes', 'written', '6813', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'local', 'bytes', 'read', '517471513', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'local', 'bytes', 'written', '25681413', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'job', 'counters13', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'launched', 'reduce', 'tasks', '10013', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'rack', 'local', 'map', 'tasks', '6113', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'original', 'reduces', '10013', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'launched', 'map', 'tasks', '6113', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'miss', 'scheduled', 'reduces', '1513', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'task', 'statistics13', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'total', 'map', 'slot', 'time', '3413', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'attempt', 'map', 'task', 'count', '6113', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'total', 'reduce', 'slot', 'time', '89213', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'map', 'reduce', 'framework13', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'reduce', 'input', 'groups', '913', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'combine', 'output', 'records', '013', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'map', 'input', 'records', '113', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'reduce', 'output', 'records', '913', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'map', 'input', 'bytes', '6113', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'combine', 'input', 'records', '013', '08', '16', '20', '21', '00', 'info', 'mapred', 'jobclient', 'reduce', 'input', 'records', '查看', 'output', '目录', '是否', '结果', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'hadoop', 'fs', 'ls', 'app', 'word', 'count', 'output', 'found', '100', 'items', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00000', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00001', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00002', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00003', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00004', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00005', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00006', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00007', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00008', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00009', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00010', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00011', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00012', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00013', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00014', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00015', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00016', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00017', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00018', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00019', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00020', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00021', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00022', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00023', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00024', 'rw', '--', '--', 'czt', 'czt', '2013', '08', '16', '20', '20', 'app', 'word', 'count', 'output', 'part', '00025', '目录', '所有', '文本文件', '合并', '下载', '本地', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'hadoop', 'fs', 'getmerge', 'app', 'word', 'count', 'output', 'wordcount', 'result', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'lsinputfile', 'wordcount', 'classes', 'wordcount', 'jar', 'wordcount', 'java', 'wordcount', 'result', '查看', '一下', '下载', '下来', '计算结果', 'crazyant', 'dev', 'mechine', 'hadoop', 'wordcount', 'more', 'wordcount', 'resulti', '2your', '1crazyant', '1brother', '1hello', '2am', '2world', '1the', '1ant', '统计', '结果', '正确', '参考', '文章', 'http', 'hadoop', 'apache', 'org', 'docs', 'r0.18', 'mapred', 'tutorial', 'html', 'example%', '3a', 'wordcount', 'v1.0']","[[-0.4201681  -0.03593406  0.40418767  0.21007225  0.16331422 -0.592277
   0.06050128  0.51895413 -0.1534534  -0.30270483 -0.02240633 -0.56518284
   0.00077358  0.54825704  0.11557731 -0.27702996 -0.04297406 -0.03295037
   0.04516747 -0.475498   -0.06977569  0.37080876 -0.23134121 -0.3610392
  -0.05522884 -0.48388903 -0.33852141 -0.09381936 -0.22130508 -0.13530532
   0.1476376   0.00893897  0.08472644 -0.06421677 -0.27736282  0.37333511
  -0.21581727 -0.44777112  0.04919298 -0.71786641 -0.07285213 -0.59762537
  -0.07649804 -0.13418673 -0.09228185 -0.34505473 -0.37678827  0.38451555
  -0.1159685   0.55112707  0.02410987 -0.31948695 -0.06128109 -0.26876266
  -0.22448534  0.43610963  0.02474358 -0.23850575  0.18535743 -0.28185059
   0.18834517  0.23793334 -0.06187199 -0.03182275 -0.41988184  0.18810521
   0.04004577 -0.06124952 -0.30435473  0.49507119 -0.09465656 -0.13201882
   0.44028382 -0.42484562  0.64567487  0.53083892  0.23221356 -0.35502506
  -0.15112901 -0.03654717 -0.00093765  0.20452368 -0.22977673  0.60414849
  -0.29949807  0.1485912  -0.31922381  0.64108035  0.60583168  0.2531114
   0.10778287  0.1513146   0.2955761   0.11582785  0.21265893  0.49943363
   0.17236683 -0.31591962  0.2469731  -0.10915313]]"
1185,为eclipse安装python、shell开发环境和SVN插件,"eclipse是一个非常好用的IDE，通常来说我们都用eclipse来开发JAVA程序，为了让开发python、shell等脚本也能在eclipse上运行，出现了很多相关的插件：python：pydevshell：shelledsvn：SubclipsePHP：PDT使用eclipse过程中可以多搜一搜网上的插件，有些能大幅提高开发效率，本文以开发linux环境下的python、shell脚本为背景，安装了eclipse并在其上装上了开发python、shell、svn插件，其中shell插件可以指定shell解释器，这样就能在windows下的eclispe中直接运行shell程序。一、下载并安装jdk地址：http://www.oracle.com/technetwork/java/javase/downloads/index.html由于我是64位机器，所以下载了X64的JDK二、安装JAVA、python、shell开发利器eclipse使用Eclipse Standard 4.3即可地址：http://www.eclipse.org/downloads/打开eclipse，设定JDK地址：三、安装开发python的eclipse插件pydev地址：http://pydev.org/输入pydev的可用更新站地址：优先: http://pydev.org/updates可选: http://pydev.org/nightly安装完可以打开pydev视图，发现python文件已经语法高亮。四、安装开发shell的eclipse插件shelled地址：http://sourceforge.net/projects/shelled/1、安装“man-page viewer”插件（ShellEd需要，有的机器不需要，先装上）安装地址：http://download.eclipse.org/technology/linuxtools/updates-nightly/2、安装“shelled”插件在http://sourceforge.net/projects/shelled/files/latest/download下载ShellEd的zip包以archive，即zip包的方式设置数据源：在shell文件上点右键->open with->选择shell script Editor，发现打开的SHELL的文件已经语法高亮：有的eclipse默认是用eclipse自带的text editor打开shell文件的，安装了shelled之后，可以修改使用shelled默认打开*.sh文件，如果没有*.sh这个选项，可以在右边add按钮手工添加一个：3、安装可以直接在windows的eclipse运行shell的解释器interpreter在windows下运行shell有很多方法，CygWin感觉太笨重了，这里推荐两个工具：http://win-bash.sourceforge.net/http://unxutils.sourceforge.net/下载第一个，解压到指定目录，然后打开eclipse：通过添加的方式设置shell解释器，直接选定解压后目录中的sh.exe即可。然后写一个shell测试一下是否能运行：shell文件最终是要在linux运行的，在windows的eclipse中运行shell最多只能用来调试，解除一些基本的BUG，大家在这里开发完一定要在Linux下再测试一下。五、安装管理svn的eclipse插件Subclipse地址：http://subclipse.tigris.org/，在该页面选择界面中给出了多种安装方式，本文采用Eclipse update site URL: http://subclipse.tigris.org/update_1.10.x的方式安装。安装成功后可以使用右键->import从SVN导入项目如果对文件做了更改，或者增、删操作，在文件或者目录上右键->Team，可以看到SVN的一些选项：文章来自：疯狂的蚂蚁, 转载请注明来源.","['eclipse', '安装', 'python', 'shell', '开发', '环境', 'svn', '插件', 'eclipse', '一个', '非常', '好用', 'ide', '通常', '来说', '我们', 'eclipse', '开发', 'java', '程序', '为了', '开发', 'python', 'shell', '脚本', 'eclipse', '运行', '出现', '很多', '相关', '插件', 'python', 'pydevshell', 'shelledsvn', 'subclipsephp', 'pdt', '使用', 'eclipse', '过程', '可以', '搜一', '网上', '插件', '有些', '大幅提高', '开发', '效率', '本文', '开发', 'linux', '环境', 'python', 'shell', '脚本', '背景', '安装', 'eclipse', '上装', '开发', 'python', 'shell', 'svn', '插件', '其中', 'shell', '插件', '可以', '指定', 'shell', '解释器', '这样', 'windows', 'eclispe', '直接', '运行', 'shell', '程序', '下载', '安装', 'jdk', '地址', 'http', 'www', 'oracle', 'com', 'technetwork', 'java', 'javase', 'downloads', 'index', 'html', '由于', '64', '机器', '所以', '下载', 'x64', 'jdk', '安装', 'java', 'python', 'shell', '开发', '利器', 'eclipse', '使用', 'eclipse', 'standard', '4.3', '即可', '地址', 'http', 'www', 'eclipse', 'org', 'downloads', '打开', 'eclipse', '设定', 'jdk', '地址', '安装', '开发', 'python', 'eclipse', '插件', 'pydev', '地址', 'http', 'pydev', 'org', '输入', 'pydev', '可用', '更新', '地址', '优先', 'http', 'pydev', 'org', 'updates', '可选', 'http', 'pydev', 'org', 'nightly', '安装', '可以', '打开', 'pydev', '视图', '发现', 'python', '文件', '已经', '语法', '高亮', '安装', '开发', 'shell', 'eclipse', '插件', 'shelled', '地址', 'http', 'sourceforge', 'net', 'projects', 'shelled', '安装', 'man', 'page', 'viewer', '插件', 'shelled', '需要', '机器', '需要', '先装', '安装', '地址', 'http', 'download', 'eclipse', 'org', 'technology', 'linuxtools', 'updates', 'nightly', '安装', 'shelled', '插件', 'http', 'sourceforge', 'net', 'projects', 'shelled', 'files', 'latest', 'download', '下载', 'shelled', 'zip', '包以', 'archive', 'zip', '方式', '设置', '数据源', 'shell', '文件', '右键', 'open', 'with', '选择', 'shell', 'script', 'editor', '发现', '打开', 'shell', '文件', '已经', '语法', '高亮', 'eclipse', '默认', 'eclipse', '自带', 'text', 'editor', '打开', 'shell', '文件', '安装', 'shelled', '之后', '可以', '修改', '使用', 'shelled', '默认', '打开', 'sh', '文件', '如果', '没有', 'sh', '这个', '选项', '可以', '右边', 'add', '按钮', '手工', '添加', '一个', '安装', '可以', '直接', 'windows', 'eclipse', '运行', 'shell', '解释器', 'interpreter', 'windows', '运行', 'shell', '很多', '方法', 'cygwin', '感觉', '笨重', '这里', '推荐', '两个', '工具', 'http', 'win', 'bash', 'sourceforge', 'net', 'http', 'unxutils', 'sourceforge', 'net', '下载', '第一个', '解压', '指定', '目录', '然后', '打开', 'eclipse', '通过', '添加', '方式', '设置', 'shell', '解释器', '直接', '选定', '解压', '目录', 'sh', 'exe', '即可', '然后', '一个', 'shell', '测试', '一下', '是否', '运行', 'shell', '文件', '最终', 'linux', '运行', 'windows', 'eclipse', '运行', 'shell', '最多', '只能', '用来', '调试', '解除', '一些', '基本', 'bug', '大家', '这里', '开发', '一定', 'linux', '测试', '一下', '安装', '管理', 'svn', 'eclipse', '插件', 'subclipse', '地址', 'http', 'subclipse', 'tigris', 'org', '页面', '选择', '界面', '给出', '多种', '安装', '方式', '本文', '采用', 'eclipse', 'update', 'site', 'url', 'http', 'subclipse', 'tigris', 'org', 'update', '1.10', '方式', '安装', '安装', '成功', '可以', '使用', '右键', 'import', 'svn', '导入', '项目', '如果', '文件', '更改', '或者', '操作', '文件', '或者', '目录', '右键', 'team', '可以', '看到', 'svn', '一些', '选项', '文章', '来自', '疯狂', '蚂蚁', '转载', '注明', '来源']","[[-0.29811807 -0.13312097  0.25830971  0.31867873  0.2090127  -0.4044692
  -0.14045981  0.53919434 -0.04402714 -0.04968854 -0.10693112 -0.41577873
  -0.11957094  0.6063497   0.1190766  -0.15531276 -0.14152469 -0.00158052
  -0.0264834  -0.41043456  0.03064524  0.31542802 -0.07470302 -0.15439781
   0.04507227 -0.50863016 -0.34455507  0.09275069 -0.18691201 -0.08102333
   0.23285827  0.12896167 -0.00852775 -0.12608087 -0.17855678  0.42072303
  -0.15340218 -0.25265094  0.09496591 -0.74812393 -0.09289998 -0.54079479
  -0.01817049 -0.06878608 -0.15702804 -0.21272303 -0.38637276  0.49996018
  -0.03518512  0.3563304   0.10149948 -0.33744605 -0.01237882 -0.30029345
   0.03624416  0.46878113  0.22083869 -0.07544664  0.14555439 -0.08754098
   0.12584169  0.24889123  0.02548268  0.07448638 -0.38915687  0.0321508
  -0.03379093  0.06317154 -0.21489933  0.46385174  0.06892272 -0.20784919
   0.46416479 -0.35864495  0.59736131  0.27024659  0.32211405 -0.22111457
  -0.22150951 -0.26377125 -0.14416837 -0.00677506 -0.09525072  0.42810632
  -0.40361994  0.18860815 -0.30273611  0.52258667  0.55724421  0.18476084
   0.23705764  0.13969716  0.34220582  0.193712    0.20639416  0.49550019
   0.07284138 -0.23441842  0.18690587 -0.10089592]]"
1193,Hive元数据存于mysql中文乱码解决,"最近在搭一套Hive测试环境，使用mysql存储hive的元数据，然而当执行一个带有中文注释的建表文件时，出现了中文乱码的问题。实验过程中发现把整个数据库编码改成latin1或者Utf8都不行，只有把整个数据库设定为latin1而把要存储中文的数据表的编码设定为UTF8才能够解决。 出现问题：执行hive -f ""createtable.sql""时说中文乱码不认识。 尝试1失败：将meta database（mysql）的编码全部设定为utf8  则报以下错误    -------------------     FAILED: Error in metadata: javax.jdo.JDODataStoreException: An exception was thrown while adding/validating class(es) : Specified key was too long; max key length is 767 bytes     com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Specified key was too long; max key length is 767 bytes     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)     at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)     at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)     at java.lang.reflect.Constructor.newInstance(Constructor.java:513)     at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)     at com.mysql.jdbc.Util.getInstance(Util.java:386)     at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1052)     at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3609)     at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3541)     at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2002)     at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2163)     at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2618)     at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2568)     at com.mysql.jdbc.StatementImpl.execute(StatementImpl.java:842)     at com.mysql.jdbc.StatementImpl.execute(StatementImpl.java:681)     at org.apache.commons.dbcp.DelegatingStatement.execute(DelegatingStatement.java:264)     at org.apache.commons.dbcp.DelegatingStatement.execute(DelegatingStatement.java:264)     at org.datanucleus.store.rdbms.table.AbstractTable.executeDdlStatement(AbstractTable.java:730)     at org.datanucleus.store.rdbms.table.AbstractTable.executeDdlStatementList(AbstractTable.java:681)     at org.datanucleus.store.rdbms.table.AbstractTable.create(AbstractTable.java:402)     at org.datanucleus.store.rdbms.table.AbstractTable.exists(AbstractTable.java:458)     at org.datanucleus.store.rdbms.RDBMSStoreManager$ClassAdder.performTablesValidation(RDBMSStoreManager.java:2689)     at org.datanucleus.store.rdbms.RDBMSStoreManager$ClassAdder.addClassTablesAndValidate(RDBMSStoreManager.java:2503)     at org.datanucleus.store.rdbms.RDBMSStoreManager$ClassAdder.run(RDBMSStoreManager.java:2148)     at org.datanucleus.store.rdbms.AbstractSchemaTransaction.execute(AbstractSchemaTransaction.java:113)     at org.datanucleus.store.rdbms.RDBMSStoreManager.addClasses(RDBMSStoreManager.java:986)     at org.datanucleus.store.rdbms.RDBMSStoreManager.addClasses(RDBMSStoreManager.java:952)     at org.datanucleus.store.AbstractStoreManager.addClass(AbstractStoreManager.java:919)     at org.datanucleus.store.mapped.MappedStoreManager.getDatastoreClass(MappedStoreManager.java:356)     at org.datanucleus.store.rdbms.query.legacy.ExtentHelper.getExtent(ExtentHelper.java:48)     at org.datanucleus.store.rdbms.RDBMSStoreManager.getExtent(RDBMSStoreManager.java:1332)     at org.datanucleus.ObjectManagerImpl.getExtent(ObjectManagerImpl.java:4149)     at org.datanucleus.store.rdbms.query.legacy.JDOQLQueryCompiler.compileCandidates(JDOQLQueryCompiler.java:411)     at org.datanucleus.store.rdbms.query.legacy.QueryCompiler.executionCompile(QueryCompiler.java:312)     at org.datanucleus.store.rdbms.query.legacy.JDOQLQueryCompiler.compile(JDOQLQueryCompiler.java:225)     at org.datanucleus.store.rdbms.query.legacy.JDOQLQuery.compileInternal(JDOQLQuery.java:175)     at org.datanucleus.store.query.Query.executeQuery(Query.java:1628)     at org.datanucleus.store.rdbms.query.legacy.JDOQLQuery.executeQuery(JDOQLQuery.java:245)     at org.datanucleus.store.query.Query.executeWithArray(Query.java:1499)     at org.datanucleus.jdo.JDOQuery.execute(JDOQuery.java:266)     at org.apache.hadoop.hive.metastore.ObjectStore.getMTable(ObjectStore.java:775)     at org.apache.hadoop.hive.metastore.ObjectStore.getTable(ObjectStore.java:709)     at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.is_table_exists(HiveMetaStore.java:965)     at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.create_table_core(HiveMetaStore.java:887)     at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.access$600(HiveMetaStore.java:109)     at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler$15.run(HiveMetaStore.java:945)     at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler$15.run(HiveMetaStore.java:942)     at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.executeWithRetry(HiveMetaStore.java:307)     at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.create_table(HiveMetaStore.java:942)     at org.apache.hadoop.hive.metastore.HiveMetaStoreClient.createTable(HiveMetaStoreClient.java:348)     at org.apache.hadoop.hive.ql.metadata.Hive.createTable(Hive.java:469)     at org.apache.hadoop.hive.ql.exec.DDLTask.createTable(DDLTask.java:3149)     at org.apache.hadoop.hive.ql.exec.DDLTask.execute(DDLTask.java:213)     at org.apache.hadoop.hive.ql.exec.Task.executeTask(Task.java:130)     at org.apache.hadoop.hive.ql.exec.TaskRunner.runSequential(TaskRunner.java:57)     at org.apache.hadoop.hive.ql.Driver.launchTask(Driver.java:1063)     at org.apache.hadoop.hive.ql.Driver.execute(Driver.java:900)     at org.apache.hadoop.hive.ql.Driver.run(Driver.java:748)     at org.apache.hadoop.hive.cli.CliDriver.processCmd(CliDriver.java:165)     at org.apache.hadoop.hive.cli.CliDriver.processLine(CliDriver.java:246)     at org.apache.hadoop.hive.cli.CliDriver.processReader(CliDriver.java:267)     at org.apache.hadoop.hive.cli.CliDriver.processFile(CliDriver.java:274)     at org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:435)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     at java.lang.reflect.Method.invoke(Method.java:597)     at org.apache.hadoop.mapred.util.RunJar.main(RunJar.java:210)     at org.apache.hadoop.mapred.JobShell.run(JobShell.java:54)     at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:65)     at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:79)     at org.apache.hadoop.mapred.JobShell.main(JobShell.java:68) NestedThrowables:    com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Specified key was too long; max key length is 767 bytes     FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask     ------------------- 尝试2失败：将meta server（mysql）的编码全部设定为latin1 则报以下错误：    ---------     [peishuaishuai@www.crazyant.net sql]$ hive -f crazyant.sql     Hive history file=/tmp/crazyant/hive_job_log_crazyant_20130904.txt     OK     Time taken: 2.064 seconds     FAILED: Error in metadata: javax.jdo.JDODataStoreException: Add request failed : INSERT INTO `COLUMNS` (`SD_ID`,`COMMENT`,`COLUMN_NAME`,`TYPE_NAME`,`INTEGER_IDX`) VALUES (?,?,?,?,?)     NestedThrowables:     java.sql.BatchUpdateException: Incorrect string value: '\xC2\x8A\xC2\xA8\xC3\xA7...' for column 'COMMENT' at row 1     FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask     --------- 解决方案：数据库编码为latin1，COLUMNS表和TABLE_PARAMS表编码设定为UTF8 1、首先按照latin1编码建立hive的meta数据库； 2、修改hive-default.xml的连接编码为UTF8； <property>      <name>javax.jdo.option.ConnectionURL</name>       <value>jdbc:mysql://IP:3306/hive?createDatabaseIfNotExist=true&amp;characterEncoding=UTF-8</value>       <description>JDBC connect string for a JDBC metastore</description>     </property> 3、然后进入数据库执行以下两条SQL语句：   该语句将HIVE的COLUMNS 表的column 列改成UTF8编码   alter table COLUMNS modify column COMMENT varchar(256) character set utf8   该语句将HIVE的TABLE_PARAMS 表的PARAM_VALUE 列改成UTF8编码   alter table TABLE_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8   执行完后用hive -f create_table.sql 中文乱码没有出现，进入数据库执行desc table；语句也没有出现乱码。 问题解决。","['hive', '数据', '存于', 'mysql', '中文', '乱码', '解决', '最近', '一套', 'hive', '测试环境', '使用', 'mysql', '存储', 'hive', '数据', '然而', '执行', '一个', '带有', '中文', '注释', '建表', '文件', '出现', '中文', '乱码', '问题', '实验', '过程', '发现', '整个', '数据库', '编码', '改成', 'latin1', '或者', 'utf8', '不行', '只有', '整个', '数据库', '设定', 'latin1', '存储', '中文', '数据表', '编码', '设定', 'utf8', '能够', '解决', '出现', '问题', '执行', 'hive', 'createtable', 'sql', '时说', '中文', '乱码', '认识', '尝试', '失败', 'meta', 'database', 'mysql', '编码', '全部', '设定', 'utf8', '以下', '错误', '-------------------', 'failed', 'error', 'in', 'metadata', 'javax', 'jdo', 'jdodatastoreexception', 'an', 'exception', 'was', 'thrown', 'while', 'adding', 'validating', 'class', 'es', 'specified', 'key', 'was', 'too', 'long', 'max', 'key', 'length', 'is', '767', 'bytes', 'com', 'mysql', 'jdbc', 'exceptions', 'jdbc4', 'mysqlsyntaxerrorexception', 'specified', 'key', 'was', 'too', 'long', 'max', 'key', 'length', 'is', '767', 'bytes', 'at', 'sun', 'reflect', 'nativeconstructoraccessorimpl', 'newinstance0', 'native', 'method', 'at', 'sun', 'reflect', 'nativeconstructoraccessorimpl', 'newinstance', 'nativeconstructoraccessorimpl', 'java', '39', 'at', 'sun', 'reflect', 'delegatingconstructoraccessorimpl', 'newinstance', 'delegatingconstructoraccessorimpl', 'java', '27', 'at', 'java', 'lang', 'reflect', 'constructor', 'newinstance', 'constructor', 'java', '513', 'at', 'com', 'mysql', 'jdbc', 'util', 'handlenewinstance', 'util', 'java', '411', 'at', 'com', 'mysql', 'jdbc', 'util', 'getinstance', 'util', 'java', '386', 'at', 'com', 'mysql', 'jdbc', 'sqlerror', 'createsqlexception', 'sqlerror', 'java', '1052', 'at', 'com', 'mysql', 'jdbc', 'mysqlio', 'checkerrorpacket', 'mysqlio', 'java', '3609', 'at', 'com', 'mysql', 'jdbc', 'mysqlio', 'checkerrorpacket', 'mysqlio', 'java', '3541', 'at', 'com', 'mysql', 'jdbc', 'mysqlio', 'sendcommand', 'mysqlio', 'java', '2002', 'at', 'com', 'mysql', 'jdbc', 'mysqlio', 'sqlquerydirect', 'mysqlio', 'java', '2163', 'at', 'com', 'mysql', 'jdbc', 'connectionimpl', 'execsql', 'connectionimpl', 'java', '2618', 'at', 'com', 'mysql', 'jdbc', 'connectionimpl', 'execsql', 'connectionimpl', 'java', '2568', 'at', 'com', 'mysql', 'jdbc', 'statementimpl', 'execute', 'statementimpl', 'java', '842', 'at', 'com', 'mysql', 'jdbc', 'statementimpl', 'execute', 'statementimpl', 'java', '681', 'at', 'org', 'apache', 'commons', 'dbcp', 'delegatingstatement', 'execute', 'delegatingstatement', 'java', '264', 'at', 'org', 'apache', 'commons', 'dbcp', 'delegatingstatement', 'execute', 'delegatingstatement', 'java', '264', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'table', 'abstracttable', 'executeddlstatement', 'abstracttable', 'java', '730', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'table', 'abstracttable', 'executeddlstatementlist', 'abstracttable', 'java', '681', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'table', 'abstracttable', 'create', 'abstracttable', 'java', '402', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'table', 'abstracttable', 'exists', 'abstracttable', 'java', '458', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'rdbmsstoremanager', 'classadder', 'performtablesvalidation', 'rdbmsstoremanager', 'java', '2689', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'rdbmsstoremanager', 'classadder', 'addclasstablesandvalidate', 'rdbmsstoremanager', 'java', '2503', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'rdbmsstoremanager', 'classadder', 'run', 'rdbmsstoremanager', 'java', '2148', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'abstractschematransaction', 'execute', 'abstractschematransaction', 'java', '113', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'rdbmsstoremanager', 'addclasses', 'rdbmsstoremanager', 'java', '986', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'rdbmsstoremanager', 'addclasses', 'rdbmsstoremanager', 'java', '952', 'at', 'org', 'datanucleus', 'store', 'abstractstoremanager', 'addclass', 'abstractstoremanager', 'java', '919', 'at', 'org', 'datanucleus', 'store', 'mapped', 'mappedstoremanager', 'getdatastoreclass', 'mappedstoremanager', 'java', '356', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'query', 'legacy', 'extenthelper', 'getextent', 'extenthelper', 'java', '48', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'rdbmsstoremanager', 'getextent', 'rdbmsstoremanager', 'java', '1332', 'at', 'org', 'datanucleus', 'objectmanagerimpl', 'getextent', 'objectmanagerimpl', 'java', '4149', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'query', 'legacy', 'jdoqlquerycompiler', 'compilecandidates', 'jdoqlquerycompiler', 'java', '411', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'query', 'legacy', 'querycompiler', 'executioncompile', 'querycompiler', 'java', '312', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'query', 'legacy', 'jdoqlquerycompiler', 'compile', 'jdoqlquerycompiler', 'java', '225', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'query', 'legacy', 'jdoqlquery', 'compileinternal', 'jdoqlquery', 'java', '175', 'at', 'org', 'datanucleus', 'store', 'query', 'query', 'executequery', 'query', 'java', '1628', 'at', 'org', 'datanucleus', 'store', 'rdbms', 'query', 'legacy', 'jdoqlquery', 'executequery', 'jdoqlquery', 'java', '245', 'at', 'org', 'datanucleus', 'store', 'query', 'query', 'executewitharray', 'query', 'java', '1499', 'at', 'org', 'datanucleus', 'jdo', 'jdoquery', 'execute', 'jdoquery', 'java', '266', 'at', 'org', 'apache', 'hadoop', 'hive', 'metastore', 'objectstore', 'getmtable', 'objectstore', 'java', '775', 'at', 'org', 'apache', 'hadoop', 'hive', 'metastore', 'objectstore', 'gettable', 'objectstore', 'java', '709', 'at', 'org', 'apache', 'hadoop', 'hive', 'metastore', 'hivemetastore', 'hmshandler', 'is', 'table', 'exists', 'hivemetastore', 'java', '965', 'at', 'org', 'apache', 'hadoop', 'hive', 'metastore', 'hivemetastore', 'hmshandler', 'create', 'table', 'core', 'hivemetastore', 'java', '887', 'at', 'org', 'apache', 'hadoop', 'hive', 'metastore', 'hivemetastore', 'hmshandler', 'access', '600', 'hivemetastore', 'java', '109', 'at', 'org', 'apache', 'hadoop', 'hive', 'metastore', 'hivemetastore', 'hmshandler', '15', 'run', 'hivemetastore', 'java', '945', 'at', 'org', 'apache', 'hadoop', 'hive', 'metastore', 'hivemetastore', 'hmshandler', '15', 'run', 'hivemetastore', 'java', '942', 'at', 'org', 'apache', 'hadoop', 'hive', 'metastore', 'hivemetastore', 'hmshandler', 'executewithretry', 'hivemetastore', 'java', '307', 'at', 'org', 'apache', 'hadoop', 'hive', 'metastore', 'hivemetastore', 'hmshandler', 'create', 'table', 'hivemetastore', 'java', '942', 'at', 'org', 'apache', 'hadoop', 'hive', 'metastore', 'hivemetastoreclient', 'createtable', 'hivemetastoreclient', 'java', '348', 'at', 'org', 'apache', 'hadoop', 'hive', 'ql', 'metadata', 'hive', 'createtable', 'hive', 'java', '469', 'at', 'org', 'apache', 'hadoop', 'hive', 'ql', 'exec', 'ddltask', 'createtable', 'ddltask', 'java', '3149', 'at', 'org', 'apache', 'hadoop', 'hive', 'ql', 'exec', 'ddltask', 'execute', 'ddltask', 'java', '213', 'at', 'org', 'apache', 'hadoop', 'hive', 'ql', 'exec', 'task', 'executetask', 'task', 'java', '130', 'at', 'org', 'apache', 'hadoop', 'hive', 'ql', 'exec', 'taskrunner', 'runsequential', 'taskrunner', 'java', '57', 'at', 'org', 'apache', 'hadoop', 'hive', 'ql', 'driver', 'launchtask', 'driver', 'java', '1063', 'at', 'org', 'apache', 'hadoop', 'hive', 'ql', 'driver', 'execute', 'driver', 'java', '900', 'at', 'org', 'apache', 'hadoop', 'hive', 'ql', 'driver', 'run', 'driver', 'java', '748', 'at', 'org', 'apache', 'hadoop', 'hive', 'cli', 'clidriver', 'processcmd', 'clidriver', 'java', '165', 'at', 'org', 'apache', 'hadoop', 'hive', 'cli', 'clidriver', 'processline', 'clidriver', 'java', '246', 'at', 'org', 'apache', 'hadoop', 'hive', 'cli', 'clidriver', 'processreader', 'clidriver', 'java', '267', 'at', 'org', 'apache', 'hadoop', 'hive', 'cli', 'clidriver', 'processfile', 'clidriver', 'java', '274', 'at', 'org', 'apache', 'hadoop', 'hive', 'cli', 'clidriver', 'main', 'clidriver', 'java', '435', 'at', 'sun', 'reflect', 'nativemethodaccessorimpl', 'invoke0', 'native', 'method', 'at', 'sun', 'reflect', 'nativemethodaccessorimpl', 'invoke', 'nativemethodaccessorimpl', 'java', '39', 'at', 'sun', 'reflect', 'delegatingmethodaccessorimpl', 'invoke', 'delegatingmethodaccessorimpl', 'java', '25', 'at', 'java', 'lang', 'reflect', 'method', 'invoke', 'method', 'java', '597', 'at', 'org', 'apache', 'hadoop', 'mapred', 'util', 'runjar', 'main', 'runjar', 'java', '210', 'at', 'org', 'apache', 'hadoop', 'mapred', 'jobshell', 'run', 'jobshell', 'java', '54', 'at', 'org', 'apache', 'hadoop', 'util', 'toolrunner', 'run', 'toolrunner', 'java', '65', 'at', 'org', 'apache', 'hadoop', 'util', 'toolrunner', 'run', 'toolrunner', 'java', '79', 'at', 'org', 'apache', 'hadoop', 'mapred', 'jobshell', 'main', 'jobshell', 'java', '68', 'nestedthrowables', 'com', 'mysql', 'jdbc', 'exceptions', 'jdbc4', 'mysqlsyntaxerrorexception', 'specified', 'key', 'was', 'too', 'long', 'max', 'key', 'length', 'is', '767', 'bytes', 'failed', 'execution', 'error', 'return', 'code', 'from', 'org', 'apache', 'hadoop', 'hive', 'ql', 'exec', 'ddltask', '-------------------', '尝试', '失败', 'meta', 'server', 'mysql', '编码', '全部', '设定', 'latin1', '以下', '错误', '---------', 'peishuaishuai', 'www', 'crazyant', 'net', 'sql', 'hive', 'crazyant', 'sql', 'hive', 'history', 'file', 'tmp', 'crazyant', 'hive', 'job', 'log', 'crazyant', '20130904', 'txt', 'ok', 'time', 'taken', '2.064', 'seconds', 'failed', 'error', 'in', 'metadata', 'javax', 'jdo', 'jdodatastoreexception', 'add', 'request', 'failed', 'insert', 'into', 'columns', 'sd', 'id', 'comment', 'column', 'name', 'type', 'name', 'integer', 'idx', 'values', 'nestedthrowables', 'java', 'sql', 'batchupdateexception', 'incorrect', 'string', 'value', 'xc2', 'x8a', 'xc2', 'xa8', 'xc3', 'xa7', '...', 'for', 'column', 'comment', 'at', 'row', 'failed', 'execution', 'error', 'return', 'code', 'from', 'org', 'apache', 'hadoop', 'hive', 'ql', 'exec', 'ddltask', '---------', '解决方案', '数据库', '编码', 'latin1', 'columns', 'table', 'params', '编码', '设定', 'utf8', '首先', '按照', 'latin1', '编码', '建立', 'hive', 'meta', '数据库', '修改', 'hive', 'default', 'xml', '连接', '编码', 'utf8', 'property', 'name', 'javax', 'jdo', 'option', 'connectionurl', 'name', 'value', 'jdbc', 'mysql', 'ip', '3306', 'hive', 'createdatabaseifnotexist', 'true', 'amp', 'characterencoding', 'utf', 'value', 'description', 'jdbc', 'connect', 'string', 'for', 'jdbc', 'metastore', 'description', 'property', '然后', '进入', '数据库', '执行', '以下', '两条', 'sql', '语句', '语句', 'hive', 'columns', 'column', '改成', 'utf8', '编码', 'alter', 'table', 'columns', 'modify', 'column', 'comment', 'varchar', '256', 'character', 'set', 'utf8', '语句', 'hive', 'table', 'params', 'param', 'value', '改成', 'utf8', '编码', 'alter', 'table', 'table', 'params', 'modify', 'column', 'param', 'value', 'varchar', '4000', 'character', 'set', 'utf8', '执行', '完后', 'hive', 'create', 'table', 'sql', '中文', '乱码', '没有', '出现', '进入', '数据库', '执行', 'desc', 'table', '语句', '没有', '出现', '乱码', '问题', '解决']","[[-0.43823261  0.07354191  0.34132368  0.4655605   0.1349786  -0.39217386
   0.0230689   0.51538861 -0.23884244 -0.19231908 -0.06426506 -0.51467703
   0.19017586  0.43907229  0.22217431 -0.18592397 -0.03972648 -0.12684076
   0.02917866 -0.48678605 -0.08996239  0.51366945 -0.21881325 -0.32848598
  -0.14003339 -0.29431536 -0.40533568 -0.02161936 -0.13257076 -0.15107555
   0.16574553  0.08677481 -0.03245214 -0.04955669 -0.22534965  0.57346955
  -0.2462411  -0.40773302  0.05067067 -0.76517311  0.03428075 -0.31081287
  -0.10297637  0.02068861 -0.12363595 -0.29594084 -0.48502075  0.33949383
  -0.04372443  0.36975594 -0.14413097 -0.45375478 -0.0896255  -0.32974236
   0.01156186  0.53437181  0.05261455 -0.06087908  0.20138964 -0.0812856
   0.22194669  0.05837858  0.06025592  0.01183192 -0.42013707  0.17071115
  -0.04206239  0.12166243 -0.30058042  0.45798423 -0.18461555 -0.01269248
   0.46357112 -0.41638905  0.38325048  0.44885818  0.27254443 -0.28980632
  -0.28383559 -0.17410058 -0.08574898 -0.01685092 -0.09541799  0.60098501
  -0.1803901   0.21023957 -0.25150129  0.53699368  0.5890673   0.31193298
   0.04748347  0.10751369  0.34012687  0.26961273  0.20509022  0.49410244
   0.08136123 -0.12962835  0.43942782 -0.14233634]]"
1197,hive从查询中获取数据插入到表或动态分区,"Hive的insert语句能够从查询语句中获取数据，并同时将数据Load到目标表中。现在假定有一个已有数据的表staged_employees（雇员信息全量表），所属国家cnty和所属州st是该表的两个属性，我们做个试验将该表中的数据查询出来插入到另一个表employees中。INSERT OVERWRITE TABLE employeesPARTITION (country = '中国', state = '北京')SELECT * FROM staged_employees seWHERE se.cnty = '中国' AND se.st = '北京'; 由于使用了OVERWRITE关键字，目标表中原来相同partition中的所有数据被覆盖，如果目标表中没有partition，则整个表会被覆盖。如果把OVERWRITE关键字删掉，或者替换成INTO，则hive会追加而不是替代原分区或原表中的数据，这个特性在Hive v0.8.0之后才支持。当数据已经存在于hdfs上但不是我们想要的格式的时候，当进行的计算需要分好多步骤有必要存储中间数据的时候，或者原数据没有分区、有很多无效列需要过滤的时候，可以使用insert..select句型来完成这一转换过程。由于一个国家有很多个省份，如果想根据（国家country，地区partition）两个维度对数据进行分区的话，这条SQL语句的执行个数应该等于地区的数目，比如中国有23个省就要对该SQL语句执行23次。因此hive对这个SQL语句进行了改造，只需要扫描一次原表就可以生成不同的输出（多路输出）。比如下面的SQL语句扫描了一次原始数据表，但是同时生成了3个省份的结果数据：FROM staged_employees seINSERT OVERWRITE TABLE employeesPARTITION (country = '中国', state = '河北省')SELECT * WHERE se.cnty = '中国' AND se.st = '河北省'INSERT OVERWRITE TABLE employeesPARTITION (country = '中国', state = '陕西省')SELECT * WHERE se.cnty = '中国' AND se.st = '陕西省'INSERT OVERWRITE TABLE employeesPARTITION (country = '中国', state = '河南省')SELECT * WHERE se.cnty = 'US' AND se.st = '河南省'; 通过缩进可以很清楚的看到，我们扫描了一次staged_employees表但是执行了3次不同的insert语句，这条大SQL语句是这么执行的：先通过from staged_employees表获取一条记录，然后执行每一个select子句，如果select子句验证通过则执行相应的insert语句。注意这里的三条select子句是完全独立执行的，并不是if .. then .. else的关系，这就意味着这3条select子句在某种情况下可能同时通过where检测。通过这种结构，原始表的数据能被拆分到目标表的不同partition中去。如果原表的一条记录满足于其中一个给定的select .. where .. 子句，则该记录将被写到目标表的固定分区中。其实更进一步，每条Insert语句能将数据写到不同的数据表中，不管这个表是否分区都一样。于是，就像一个过滤器一样，原表的一些数据被写到了很多输出地址，而剩下的数据会被丢弃。当然，你也可以混用Insert overwrite和insert into两种不同的方法写出数据。向动态分区插入数据但是问题还是没有解决，中国有23个省，那么我们就需要写23个insert into .. select ..where子句，这非常不现实。于是hive的一种叫做动态分区的特性就出现了，它能够根据select出来的参数自动推断将数据插入到那个分区中去。本文上面的两种SQL语句设定分区的方式都叫做静态分区插入。将上一个SQL语句进行改动，会得到以下简洁的新SQL语句：INSERT OVERWRITE TABLE employeesPARTITION (country, state)SELECT ..., se.cnty, se.stFROM staged_employees se; hive先获取select的最后两个位置的se.cnty和se.st参数值，然后将这两个值填写到Insert语句partition中的两个country和state变量中，即动态分区是通过位置来对应分区值的。原始表select出来的值和输出partition的值的关系仅仅是通过位置来确定的，和名字并没有关系，比如这里se.cnty和county的名称完全没有关系。上面的这条SQL语句是对两个分区同时进行了动态设定，如果staged_employees表中有100个国家，每个国家有100个地区，那么该SQL语句自动对每个国家和地区建立相应的partition并插入数据，如果用手写的话不现实。只要位置正确，你可以混用动态分区和静态分区值设定，比如下面这个例子，你可以静态指定一个country值，但是state值采用动态的方法设定：INSERT OVERWRITE TABLE employeesPARTITION (country = 'US', state)SELECT ..., se.cnty, se.stFROM staged_employees seWHERE se.cnty = 'US'; 注意：静态分区值必须在动态分区值的前面！使用hive动态分区的参数设定动态分区功能默认是关闭的，而当它是打开状态时，默认会工作在“strict”模式下，这种模式下要求至少指定一个静态分区的值。这样做是为了防止设计了大量partition的糟糕情况，举个例子你使用时间戳来进行分区，竟然每一秒钟都产生一个分区！还有其他的一些属性设定用来限制类似的情况出现，如下表所示：名称默认值描述hive.exec.dynamic.partitionfalse设置为true用于打开动态分区功能hive.exec.dynamic.partition.modestrict设置为nonstrict能够让所有的分区都动态被设定，否则的话至少需要指定一个分区值hive.exec.max.dynamic.partitions.pernode100能被每个mapper或者reducer创建的最大动态分区的数目，如果一个mappre或者reducer试图创建多余这个值的动态分区数目，会引发错误hive.exec.max.dynamic.partitions+1000被一条带有动态分区的SQL语句所能创建的动态分区总量，如果超出限制会报出错误hive.exec.max.created.files100000全局能被创建文件数目的最大值，专门有一个hadoop计数器来跟踪该值，如果超出会报错举个例子，使用全动态分区的SQL语句序列如下所示，需要先设定一些必要的参数才可以：set hive.exec.dynamic.partition=true;set hive.exec.dynamic.partition.mode=nonstrict;set hive.exec.max.dynamic.partitions.pernode=1000;---文章来自疯狂的蚂蚁www.crazyant.netINSERT OVERWRITE TABLE employeesPARTITION (country, state)SELECT ..., se.cty, se.stFROM staged_employees se; 总结使用from .. insert.. select ..where结构能够从一个数据表中抽取数据，将结果插入到不同的表和分区中，而使用动态分区能够让hive根据select最末几个位置的值自动设定目标分区的值，使用动态分区需要设定一些hive运行参数。","['hive', '查询', '获取数据', '插入', '到表', '动态', '分区', 'hive', 'insert', '语句', '能够', '查询', '语句', '获取数据', '同时', '数据', 'load', '目标', '表中', '现在', '假定', '一个', '已有', '数据', 'staged', 'employees', '雇员', '信息', '全量表', '所属', '国家', 'cnty', '所属', 'st', '该表', '两个', '属性', '我们', '做个', '试验', '该表中', '数据', '查询', '出来', '插入', '一个', 'employees', 'insert', 'overwrite', 'table', 'employeespartition', 'country', '中国', 'state', '北京', 'select', 'from', 'staged', 'employees', 'sewhere', 'se', 'cnty', '中国', 'and', 'se', 'st', '北京', '由于', '使用', 'overwrite', '关键字', '目标', '表中', '原来', '相同', 'partition', '所有', '数据', '覆盖', '如果', '目标', '表中', '没有', 'partition', '整个', '表会', '覆盖', '如果', 'overwrite', '关键字', '删掉', '或者', '替换成', 'into', 'hive', '追加', '不是', '替代', '分区', '原表中', '数据', '这个', '特性', 'hive', 'v0.8', '之后', '支持', '数据', '已经', '存在', 'hdfs', '不是', '我们', '想要', '格式', '时候', '进行', '计算', '需要', '好多', '步骤', '必要', '存储', '中间', '数据', '时候', '或者', '数据', '没有', '分区', '很多', '无效', '需要', '过滤', '时候', '可以', '使用', 'insert', '..', 'select', '句型', '完成', '这一', '转换', '过程', '由于', '一个', '国家', '很多', '省份', '如果', '根据', '国家', 'country', '地区', 'partition', '两个', '维度', '数据', '进行', '分区', '的话', '这条', 'sql', '语句', '执行', '个数', '应该', '等于', '地区', '数目', '比如', '中国', '23', '个省', '就要', 'sql', '语句', '执行', '23', '因此', 'hive', '这个', 'sql', '语句', '进行', '改造', '需要', '扫描', '一次', '原表', '可以', '生成', '不同', '输出', '多路', '输出', '比如', '下面', 'sql', '语句', '扫描', '一次', '原始数据', '但是', '同时', '生成', '省份', '结果', '数据', 'from', 'staged', 'employees', 'seinsert', 'overwrite', 'table', 'employeespartition', 'country', '中国', 'state', '河北省', 'select', 'where', 'se', 'cnty', '中国', 'and', 'se', 'st', '河北省', 'insert', 'overwrite', 'table', 'employeespartition', 'country', '中国', 'state', '陕西省', 'select', 'where', 'se', 'cnty', '中国', 'and', 'se', 'st', '陕西省', 'insert', 'overwrite', 'table', 'employeespartition', 'country', '中国', 'state', '河南省', 'select', 'where', 'se', 'cnty', 'us', 'and', 'se', 'st', '河南省', '通过', '缩进', '可以', '清楚', '看到', '我们', '扫描', '一次', 'staged', 'employees', '但是', '执行', '不同', 'insert', '语句', '大s', 'ql', '语句', '这么', '执行', '通过', 'from', 'staged', 'employees', '获取', '一条', '记录', '然后', '执行', '一个', 'select', '子句', '如果', 'select', '子句', '验证', '通过', '执行', '相应', 'insert', '语句', '注意', '这里', '三条', 'select', '子句', '完全', '独立', '执行', '不是', 'if', '..', 'then', '..', 'else', '关系', '意味着', 'select', '子句', '某种', '情况', '可能', '同时', '通过', 'where', '检测', '通过', '这种', '结构', '原始', '数据', '拆分', '目标', '不同', 'partition', '中去', '如果', '原表', '一条', '记录', '满足', '其中', '一个', '给定', 'select', '..', 'where', '..', '子句', '记录', '目标', '固定', '分区', '其实', '更进一步', '每条', 'insert', '语句', '数据', '不同', '数据表', '不管', '这个', '是否', '分区', '一样', '于是', '一个', '过滤器', '一样', '原表', '一些', '数据', '很多', '输出', '地址', '剩下', '数据', '丢弃', '当然', '可以', '混用', 'insert', 'overwrite', 'insert', 'into', '两种', '不同', '方法', '写出', '数据', '动态', '分区', '插入', '数据', '但是', '问题', '还是', '没有', '解决', '中国', '23', '个省', '那么', '我们', '需要', '23', 'insert', 'into', '..', 'select', '..', 'where', '子句', '非常', '现实', '于是', 'hive', '一种', '叫做', '动态', '分区', '特性', '出现', '能够', '根据', 'select', '出来', '参数', '自动', '推断', '数据', '插入', '那个', '分区', '本文', '上面', '两种', 'sql', '语句', '设定', '分区', '方式', '叫做', '静态', '分区', '插入', '一个', 'sql', '语句', '进行', '改动', '得到', '以下', '简洁', 'sql', '语句', 'insert', 'overwrite', 'table', 'employeespartition', 'country', 'state', 'select', '...', 'se', 'cnty', 'se', 'stfrom', 'staged', 'employees', 'se', 'hive', '获取', 'select', '最后', '两个', '位置', 'se', 'cnty', 'se', 'st', '参数值', '然后', '两个', '填写', 'insert', '语句', 'partition', '两个', 'country', 'state', '变量', '动态', '分区', '通过', '位置', '对应', '分区', '原始', 'select', '出来', '输出', 'partition', '关系', '仅仅', '通过', '位置', '确定', '名字', '没有', '关系', '比如', '这里', 'se', 'cnty', 'county', '名称', '完全', '没有', '关系', '上面', '这条', 'sql', '语句', '两个', '分区', '同时', '进行', '动态', '设定', '如果', 'staged', 'employees', '表中', '100', '国家', '每个', '国家', '100', '地区', '那么', 'sql', '语句', '自动', '每个', '国家', '地区', '建立', '相应', 'partition', '插入', '数据', '如果', '手写', '的话', '现实', '只要', '位置', '正确', '可以', '混用', '动态', '分区', '静态', '分区', '设定', '比如', '下面', '这个', '例子', '可以', '静态', '指定', '一个', 'country', '但是', 'state', '采用', '动态', '方法', '设定', 'insert', 'overwrite', 'table', 'employeespartition', 'country', 'us', 'state', 'select', '...', 'se', 'cnty', 'se', 'stfrom', 'staged', 'employees', 'sewhere', 'se', 'cnty', 'us', '注意', '静态', '分区', '必须', '动态', '分区', '前面', '使用', 'hive', '动态', '分区', '参数', '设定', '动态', '分区', '功能', '默认', '关闭', '打开', '状态', '默认', '工作', 'strict', '模式', '这种', '模式', '要求', '至少', '指定', '一个', '静态', '分区', '这样', '为了', '防止', '设计', '大量', 'partition', '糟糕', '情况', '举个', '例子', '使用', '时间', '进行', '分区', '竟然', '一秒钟', '产生', '一个', '分区', '还有', '其他', '一些', '属性', '设定', '用来', '限制', '类似', '情况', '出现', '如下', '所示', '名称', '默认值', '描述', 'hive', 'exec', 'dynamic', 'partitionfalse', '设置', 'true', '用于', '打开', '动态', '分区', '功能', 'hive', 'exec', 'dynamic', 'partition', 'modestrict', '设置', 'nonstrict', '能够', '所有', '分区', '动态', '设定', '否则', '的话', '至少', '需要', '指定', '一个', '分区', 'hive', 'exec', 'max', 'dynamic', 'partitions', 'pernode100', '每个', 'mapper', '或者', 'reducer', '创建', '最大', '动态', '分区', '数目', '如果', '一个', 'mappre', '或者', 'reducer', '试图', '创建', '多余', '这个', '动态', '分区', '数目', '引发', '错误', 'hive', 'exec', 'max', 'dynamic', 'partitions', '1000', '一条', '带有', '动态', '分区', 'sql', '语句', '创建', '动态', '分区', '总量', '如果', '超出', '限制', '报出', '错误', 'hive', 'exec', 'max', 'created', 'files100000', '全局', '创建', '文件', '数目', '最大值', '专门', '一个', 'hadoop', '计数器', '跟踪', '该值', '如果', '超出', '报错', '举个', '例子', '使用', '动态', '分区', 'sql', '语句', '序列', '如下', '所示', '需要', '设定', '一些', '必要', '参数', '可以', 'set', 'hive', 'exec', 'dynamic', 'partition', 'true', 'set', 'hive', 'exec', 'dynamic', 'partition', 'mode', 'nonstrict', 'set', 'hive', 'exec', 'max', 'dynamic', 'partitions', 'pernode', '1000', '---', '文章', '来自', '疯狂', '蚂蚁', 'www', 'crazyant', 'netinsert', 'overwrite', 'table', 'employeespartition', 'country', 'state', 'select', '...', 'se', 'cty', 'se', 'stfrom', 'staged', 'employees', 'se', '总结', '使用', 'from', '..', 'insert', '..', 'select', '..', 'where', '结构', '能够', '一个', '数据表', '抽取', '数据', '结果', '插入', '不同', '分区', '使用', '动态', '分区', '能够', 'hive', '根据', 'select', '最末', '几个', '位置', '自动', '设定', '目标', '分区', '使用', '动态', '分区', '需要', '设定', '一些', 'hive', '运行', '参数']","[[-2.42890546e-01 -1.23913023e-01  2.03799908e-01  1.41583086e-01
   2.99431353e-01 -3.20377989e-01 -1.81643173e-01  4.74898724e-01
  -4.32586596e-03 -2.36301338e-02 -5.72707808e-02 -3.10054699e-01
  -1.71848547e-01  5.74288617e-01  1.52030457e-01 -9.16345932e-02
  -1.43747981e-01 -7.22076956e-03 -1.04686160e-01 -4.56141875e-01
   2.67904047e-02  2.28827873e-01  2.03853109e-03 -9.37925161e-02
   1.15419177e-01 -5.31936537e-01 -2.81252353e-01  8.44211118e-02
  -2.05223753e-01 -5.79537815e-02  2.31539614e-01  2.30289650e-02
  -3.15044488e-02 -1.33213040e-01 -9.39875588e-02  3.24944204e-01
  -1.35204806e-01 -2.08414619e-01  1.13751191e-01 -7.42817299e-01
  -1.70416060e-01 -5.61011780e-01 -3.94237447e-02 -6.41757352e-02
  -1.61009962e-01 -1.37850235e-01 -2.44890553e-01  4.47579858e-01
  -1.84130036e-01  3.88295100e-01  2.02355316e-01 -2.54124040e-01
  -1.25046429e-01 -2.12326214e-01  6.90020696e-02  3.71871507e-01
   2.41894238e-01 -5.12817920e-02  8.60707061e-02 -9.24718157e-02
   3.58022247e-02  2.73184073e-01  2.20474874e-02  8.37707391e-02
  -3.71141042e-01 -1.65143607e-02  5.33686253e-02 -2.31092383e-02
  -2.42855482e-01  4.21344642e-01  1.48504402e-01 -2.31550695e-01
   3.74319349e-01 -3.12666008e-01  5.45201946e-01  1.62542639e-01
   1.86057876e-01 -1.26357984e-01 -2.77894037e-01 -1.90870985e-01
  -6.21392422e-02  6.61660249e-05 -5.31612198e-02  3.20757481e-01
  -3.58223685e-01  2.06960828e-01 -2.74758642e-01  3.87341148e-01
   4.44485828e-01  1.23791056e-01  3.08986150e-01  1.10582572e-01
   3.54406524e-01  1.84246948e-01  1.79027223e-01  3.49481205e-01
   9.36025137e-02 -2.97802361e-01 -3.90464510e-02 -9.05851373e-02]]"
1203,Hive开发中使用变量的两种方法,"在使用hive开发数据分析代码时，经常会遇到需要改变运行参数的情况，比如select语句中对日期字段值的设定，可能不同时间想要看不同日期的数据，这就需要能动态改变日期的值。如果开发量较大、参数多的话，使用变量来替代原来的字面值非常有必要，本文总结了几种可以向hive的SQL中传入参数的方法，以满足类似的需要。准备测试表和测试数据第一步先准备测试表和测试数据用于后续测试：hive> create database test;OKTime taken: 2.606 seconds 然后执行建表和导入数据的sql文件：[czt@www.crazyant.net testHivePara]$ hive -f student.sql Hive history file=/tmp/crazyant.net/hive_job_log_czt_201309131615_1720869864.txtOKTime taken: 2.131 secondsOKTime taken: 0.878 secondsCopying data from file:/home/users/czt/testdata_studentCopying file: file:/home/users/czt/testdata_studentLoading data to table test.studentOKTime taken: 1.76 seconds 其中student.sql内容如下：use test; ---学生信息表create table IF NOT EXISTS student(snobigintcomment '学号' , snamestringcomment '姓名' , sagebigintcomment '年龄' ,pdatestringcomment '入学日期')COMMENT '学生信息表'ROW FORMAT DELIMITEDFIELDS TERMINATED BY '\t'LINES TERMINATED BY '\n'STORED AS TEXTFILE;LOAD DATA LOCAL INPATH '/home/users/czt/testdata_student'INTO TABLE student; testdata_student测试数据文件内容如下：1name121201309012name222201309013name323201309014name424201309015name525201309026name626201309027name727201309028name828201309029name9292013090310name10302013090311name11312013090312name12322013090413name133320130904 方法1：shell中设置变量，hive -e中直接使用测试的shell文件名：#!/bin/bashtablename=""student""limitcount=""8""hive -S -e ""use test; select * from ${tablename} limit ${limitcount};"" 运行结果：[czt@www.crazyant.net testHivePara]$ sh -x shellhive.sh + tablename=student+ limitcount=8+ hive -S -e 'use test; select * from student limit 8;'1       name1    21      201309012       name2    22      201309013       name3    23      201309014       name4    24      201309015       name5    25      201309026       name6    26      201309027       name7    27      201309028       name8    28      20130902 由于hive自身是类SQL语言，缺乏shell的灵活性和对过程的控制能力，所以采用shell+hive的开发模式非常常见，在shell中直接定义变量，在hive -e语句中就可以直接引用；注意：使用-hiveconf定义，在hive -e中是不能使用的修改一下刚才的shell文件，采用-hiveconf的方法定义日期参数：#!/bin/bashtablename=""student""limitcount=""8""hive -S \    -hiveconf enter_school_date=""20130902"" \    -hiveconf min_age=""26"" \    -e \    ""    use test; \        select * from ${tablename} \        where \             pdate='${hiveconf:enter_school_date}' \             and \             sage>'${hiveconf:min_age}' \         limit ${limitcount};"" 运行会失败，因为该脚本在shell环境中运行的，于是shell试图去解析${hiveconf:enter_school_date}和${hiveconf:min_age}变量，但是这两个SHELL变量并没有定义，所以会以空字符串放在这个位置。运行时该SQL语句会被解析成下面这个样子：+ hive -S -hiveconf enter_school_date=20130902 -hiveconf min_age=26 -e 'use test; explain select * from student where pdate='\'''\'' and sage>'\'''\'' limit 8;' 方法2：使用-hiveconf定义，在SQL文件中使用因为换行什么的很不方便，hive -e只适合写少量的SQL代码，所以一般都会写很多hql文件，然后使用hive –f的方法来调用，这时候可以通过-hiveconf定义一些变量，然后在SQL中直接使用。先编写调用的SHELL文件：#!/bin/bashhive -hiveconf enter_school_date=""20130902"" -hiveconf min_ag=""26"" -f testvar.sql 被调用的testvar.sql文件内容：use test; select * from studentwhere pdate='${hiveconf:enter_school_date}' andsage > '${hiveconf:min_ag}'limit 8; 执行过程：[czt@www.crazyant.net testHivePara]$ sh -x shellhive.sh + hive -hiveconf enter_school_date=20130902 -hiveconf min_ag=26 -f testvar.sqlHive history file=/tmp/czt/hive_job_log_czt_201309131651_2035045625.txtOKTime taken: 2.143 secondsTotal MapReduce jobs = 1Launching Job 1 out of 1Number of reduce tasks is set to 0 since there's no reduce operatorKill Command = hadoop job -kill job_20130911213659_423032013-09-13 16:52:00,300 Stage-1 map = 0%,  reduce = 0%2013-09-13 16:52:14,609 Stage-1 map = 28%,  reduce = 0%2013-09-13 16:52:24,642 Stage-1 map = 71%,  reduce = 0%2013-09-13 16:52:34,639 Stage-1 map = 98%,  reduce = 0%Ended Job = job_20130911213659_42303OK7       name7   27      201309028       name8   28      20130902Time taken: 54.268 seconds 总结本文主要阐述了两种在hive中使用变量的方法，第一种是在shell中定义变量然后在hive -e的SQL语句中直接用${var_name}的方法调用；第二种是使用hive –hiveconf key=value –f run.sql模式使用-hiveconf来设置变量，然后在SQL文件中使用${hiveconf:varname}的方法调用。用这两种方法可以满足开发的时候向hive传递参数的需求，会很好的提升开发效率和代码质量。","['hive', '开发', '使用', '变量', '两种', '方法', '使用', 'hive', '开发', '数据分析', '代码', '经常', '遇到', '需要', '改变', '运行', '参数', '情况', '比如', 'select', '语句', '日期', '段值', '设定', '可能', '不同', '时间', '想要', '不同', '日期', '数据', '需要', '动态', '改变', '日期', '如果', '开发量', '较大', '参数', '的话', '使用', '变量', '替代', '原来', '面值', '非常', '必要', '本文', '总结', '几种', '可以', 'hive', 'sql', '传入', '参数', '方法', '满足', '类似', '需要', '准备', '测试', '测试数据', '第一步', '准备', '测试', '测试数据', '用于', '后续', '测试', 'hive', 'create', 'database', 'test', 'oktime', 'taken', '2.606', 'seconds', '然后', '执行', '建表', '导入', '数据', 'sql', '文件', 'czt', 'www', 'crazyant', 'net', 'testhivepara', 'hive', 'student', 'sql', 'hive', 'history', 'file', 'tmp', 'crazyant', 'net', 'hive', 'job', 'log', 'czt', '201309131615', '1720869864', 'txtoktime', 'taken', '2.131', 'secondsoktime', 'taken', '0.878', 'secondscopying', 'data', 'from', 'file', 'home', 'users', 'czt', 'testdata', 'studentcopying', 'file', 'file', 'home', 'users', 'czt', 'testdata', 'studentloading', 'data', 'to', 'table', 'test', 'studentoktime', 'taken', '1.76', 'seconds', '其中', 'student', 'sql', '内容', '如下', 'use', 'test', '---', '学生', '信息', 'create', 'table', 'if', 'not', 'exists', 'student', 'snobigintcomment', 'snamestringcomment', '姓名', 'sagebigintcomment', '年龄', 'pdatestringcomment', '入学', '日期', 'comment', '学生', '信息', 'row', 'format', 'delimitedfields', 'terminated', 'by', 'lines', 'terminated', 'by', 'stored', 'as', 'textfile', 'load', 'data', 'local', 'inpath', 'home', 'users', 'czt', 'testdata', 'student', 'into', 'table', 'student', 'testdata', 'student', '测试数据', '文件', '内容', '如下', '1name121201309012name222201309013name323201309014name424201309015name525201309026name626201309027name727201309028name828201309029name9292013090310name10302013090311name11312013090312name12322013090413name133320130904', '方法', 'shell', '设置', '变量', 'hive', '直接', '使用', '测试', 'shell', '文件名', 'bin', 'bashtablename', 'student', 'limitcount', 'hive', 'use', 'test', 'select', 'from', 'tablename', 'limit', 'limitcount', '运行', '结果', 'czt', 'www', 'crazyant', 'net', 'testhivepara', 'sh', 'shellhive', 'sh', 'tablename', 'student', 'limitcount', 'hive', 'use', 'test', 'select', 'from', 'student', 'limit', 'name1', '21', '201309012', 'name2', '22', '201309013', 'name3', '23', '201309014', 'name4', '24', '201309015', 'name5', '25', '201309026', 'name6', '26', '201309027', 'name7', '27', '201309028', 'name8', '28', '20130902', '由于', 'hive', '自身', 'sql', '语言', '缺乏', 'shell', '灵活性', '过程', '控制能力', '所以', '采用', 'shell', 'hive', '开发', '模式', '非常', '常见', 'shell', '直接', '定义', '变量', 'hive', '语句', '可以', '直接', '引用', '注意', '使用', 'hiveconf', '定义', 'hive', '中是', '不能', '使用', '修改', '一下', '刚才', 'shell', '文件', '采用', 'hiveconf', '方法', '定义', '日期', '参数', 'bin', 'bashtablename', 'student', 'limitcount', 'hive', 'hiveconf', 'enter', 'school', 'date', '20130902', 'hiveconf', 'min', 'age', '26', 'use', 'test', 'select', 'from', 'tablename', 'where', 'pdate', 'hiveconf', 'enter', 'school', 'date', 'and', 'sage', 'hiveconf', 'min', 'age', 'limit', 'limitcount', '运行', '失败', '因为', '脚本', 'shell', '环境中运行', '于是', 'shell', '试图', '解析', 'hiveconf', 'enter', 'school', 'date', 'hiveconf', 'min', 'age', '变量', '但是', '两个', 'shell', '变量', '没有', '定义', '所以', '以空', '字符串', '放在', '这个', '位置', '运行', '时该', 'sql', '语句', '解析', '下面', '这个', '样子', 'hive', 'hiveconf', 'enter', 'school', 'date', '20130902', 'hiveconf', 'min', 'age', '26', 'use', 'test', 'explain', 'select', 'from', 'student', 'where', 'pdate', 'and', 'sage', 'limit', '方法', '使用', 'hiveconf', '定义', 'sql', '文件', '使用', '因为', '换行', '什么', '方便', 'hive', '适合', '少量', 'sql', '代码', '所以', '一般', '很多', 'hql', '文件', '然后', '使用', 'hive', '方法', '调用', '这时候', '可以', '通过', 'hiveconf', '定义', '一些', '变量', '然后', 'sql', '直接', '使用', '编写', '调用', 'shell', '文件', 'bin', 'bashhive', 'hiveconf', 'enter', 'school', 'date', '20130902', 'hiveconf', 'min', 'ag', '26', 'testvar', 'sql', '调用', 'testvar', 'sql', '文件', '内容', 'use', 'test', 'select', 'from', 'studentwhere', 'pdate', 'hiveconf', 'enter', 'school', 'date', 'andsage', 'hiveconf', 'min', 'ag', 'limit', '执行', '过程', 'czt', 'www', 'crazyant', 'net', 'testhivepara', 'sh', 'shellhive', 'sh', 'hive', 'hiveconf', 'enter', 'school', 'date', '20130902', 'hiveconf', 'min', 'ag', '26', 'testvar', 'sqlhive', 'history', 'file', 'tmp', 'czt', 'hive', 'job', 'log', 'czt', '201309131651', '2035045625', 'txtoktime', 'taken', '2.143', 'secondstotal', 'mapreduce', 'jobs', '1launching', 'job', 'out', 'of', '1number', 'of', 'reduce', 'tasks', 'is', 'set', 'to', 'since', 'there', 'no', 'reduce', 'operatorkill', 'command', 'hadoop', 'job', 'kill', 'job', '20130911213659', '423032013', '09', '13', '16', '52', '00', '300', 'stage', 'map', '0%', 'reduce', '0%', '2013', '09', '13', '16', '52', '14', '609', 'stage', 'map', '28%', 'reduce', '0%', '2013', '09', '13', '16', '52', '24', '642', 'stage', 'map', '71%', 'reduce', '0%', '2013', '09', '13', '16', '52', '34', '639', 'stage', 'map', '98%', 'reduce', '0%', 'ended', 'job', 'job', '20130911213659', '42303ok7', 'name7', '27', '201309028', 'name8', '28', '20130902time', 'taken', '54.268', 'seconds', '总结', '本文', '主要', '阐述', '两种', 'hive', '使用', '变量', '方法', '第一种', 'shell', '定义', '变量', '然后', 'hive', 'sql', '语句', '直接', 'var', 'name', '方法', '调用', '第二种', '使用', 'hive', 'hiveconf', 'key', 'value', 'run', 'sql', '模式', '使用', 'hiveconf', '设置', '变量', '然后', 'sql', '文件', '使用', 'hiveconf', 'varname', '方法', '调用', '两种', '方法', '可以', '满足', '开发', '时候', 'hive', '传递', '参数', '需求', '提升', '开发', '效率', '代码', '质量']","[[-0.27055155 -0.1130899   0.24564165  0.16090152  0.28507255 -0.37646336
  -0.13616446  0.50538041 -0.04274562 -0.08899155 -0.05375032 -0.37364392
  -0.14634237  0.57637575  0.15238854 -0.12585842 -0.12596863 -0.00594805
  -0.06998428 -0.49508303 -0.00956728  0.2670794  -0.04909263 -0.16928911
   0.0772416  -0.52159501 -0.30867823  0.05459891 -0.22767707 -0.07912243
   0.20386246  0.02545818 -0.00988197 -0.12489775 -0.15134495  0.35243597
  -0.17562725 -0.26764773  0.10175219 -0.75814485 -0.14691427 -0.58692025
  -0.05328598 -0.04687755 -0.14289226 -0.20107711 -0.26069915  0.42508067
  -0.16369395  0.44314133  0.16264387 -0.28050518 -0.11644172 -0.21373545
   0.00733309  0.40368656  0.19215391 -0.09064904  0.11527269 -0.14342004
   0.08683396  0.26050847  0.01536832  0.07338431 -0.39285442  0.02843438
   0.04965911 -0.02136591 -0.28108198  0.44508258  0.10888702 -0.19693922
   0.4001516  -0.33655794  0.57952335  0.25901245  0.18775866 -0.17208865
  -0.29459485 -0.15184298 -0.03694997  0.03764141 -0.09874708  0.3944543
  -0.35240922  0.20258971 -0.29229299  0.45619113  0.49626769  0.1563509
   0.26752778  0.12080755  0.36042438  0.18675738  0.20035111  0.38279399
   0.11508686 -0.30999955  0.00687698 -0.11355213]]"
1209,shell/hadoop/hive一些有用命令收集,"有些命令工作中经常用到，记录在一个文章里用于查阅，本文经常更新。shell命令linux统计某个目录下所有文件的行数的命令find /home/crazyant -type f -name ""*"" | xargs cat | wc -l用find查找crazyant目录下所有文本文件的行数之和。不过该命令执行挺慢的。linux统计某个目录下所有目录和总目录的大小命令du -h --max-depth=1 /home/crazyant/统计crazyant目录下的所有文件的大小，这里我只想看到一层目录的大小，因此加上了—max-depth=1如果不加这个参数，该命令会以递归的方式列出所有子目录的文件大小scp命令的使用：从本地复制到远程：scp -r  logs_jx pss@crazyant.net/home/pss/logshive命令hive建立和执行索引create index table02_index on table table02(id) as 'org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler' with deferred rebuild; alter index table02_index on table02 rebuild;第一句hive在表上建立了索引但没有生效，第二句真正的执行建立索引的过程，其本身也是一个map –reduce过程。hive的Load data命令hive -e ""use crazyant_net; LOAD DATA INPATH '/app/crazyant/student/*' INTO TABLE student;""其中inpath的意思是input path的意思，所以不管是从本地local还是hdfs上load data，都要带上。 hadoop命令hadoop的distcp命令带用户名密码的方法hadoop distcp -su user1,pass1 -du user1,pass1 hdfs://src1 hdfs://dest1有时候两个集群之间是没有distcp权限的，这时候需要带上两个集群的账号密码，在-su后面带上第一个集群的账号密码，在-du后面带上目标集群的账号密码。Mysql命令 查看数据表的最详细的字段描述信息SHOW FULL FIELDS FROM student该命令把注释、权限、默认值、类型等表字段信息都列出来了。查看正在执行的mysql线程mysql> show processlist;+---------+-----------+--------------------+-------------+---------+------+-------+------------------+| Id      |    User   | Host               | db          | Command | Time | State | Info             |+---------+-----------+--------------------+-------------+---------+------+-------+------------------+| 2153201 | crazyant  | 127.0.0.1:25357    | pulse       | Sleep   |  914 |       | NULL             || 2153733 | crazyant  | 127.0.0.1:48814    | hive        | Query   |    0 | NULL  | show processlist || 2153735 | crazyant  | 127.0.0.1:39639    | pulse       | Sleep   |   13 |       | NULL             || 2153736 | crazyant  | 127.0.0.1:39640    | pulse       | Sleep   |   13 |       | NULL             |+---------+-----------+--------------------+-------------+---------+------+-------+------------------+4 rows in set (0.01 sec)mysql>使用kill命令可以把其中的一个进程给删了mysql> kill 2153474;Query OK, 0 rows affected (0.00 sec)将数据LOAD到MYSQL的方法：LOAD DATA LOCAL INFILE 'D:/workbench/python/result.txt' REPLACE INTO TABLE my_urlvisit FIELDS TERMINATED BY'\t' LINES TERMINATED BY'\n' IGNORE 0 LINES (url,pdate,COUNT);vim命令如果编辑错误，按ESC回到命令模式，按u可以撤销刚才的编辑；vim编辑中文文本出现乱码VIM的文本经常会出现中文乱码，这是因为fileencoding和termencoding编码不一致造成的，设置一直就可以了；:set termencodingtermencoding=cp936:set fileencodingfileencoding=utf-8:set termencoding=utf8这样设置一下vim就能正常显示中文了；转载请注明来源：http://crazyant.net/1209.html","['shell', 'hadoop', 'hive', '一些', '有用', '命令', '收集', '有些', '命令', '工作', '经常', '用到', '记录', '一个', '文章', '用于', '查阅', '本文', '经常', '更新', 'shell', '命令', 'linux', '统计', '某个', '目录', '所有', '文件', '行数', '命令', 'find', 'home', 'crazyant', 'type', 'name', 'xargs', 'cat', 'wc', 'find', '查找', 'crazyant', '目录', '所有', '文本文件', '行数', '不过', '命令', '执行', '挺慢', 'linux', '统计', '某个', '目录', '所有', '目录', '总目录', '大小', '命令', 'du', '--', 'max', 'depth', 'home', 'crazyant', '统计', 'crazyant', '目录', '所有', '文件', '大小', '这里', '看到', '一层', '目录', '大小', '因此', '加上', 'max', 'depth', '如果', '这个', '参数', '命令', '会以', '递归', '方式', '列出', '所有', '子目录', '文件大小', 'scp', '命令', '使用', '本地', '复制到', '远程', 'scp', 'logs', 'jx', 'pss', 'crazyant', 'net', 'home', 'pss', 'logshive', '命令', 'hive', '建立', '执行', '索引', 'create', 'index', 'table02', 'index', 'on', 'table', 'table02', 'id', 'as', 'org', 'apache', 'hadoop', 'hive', 'ql', 'index', 'compact', 'compactindexhandler', 'with', 'deferred', 'rebuild', 'alter', 'index', 'table02', 'index', 'on', 'table02', 'rebuild', '第一句', 'hive', '表上', '建立', '索引', '没有', '生效', '第二句', '真正', '执行', '建立', '索引', '过程', '本身', '一个', 'map', 'reduce', '过程', 'hive', 'load', 'data', '命令', 'hive', 'use', 'crazyant', 'net', 'load', 'data', 'inpath', 'app', 'crazyant', 'student', 'into', 'table', 'student', '其中', 'inpath', '意思', 'input', 'path', '意思', '所以', '不管', '是从', '本地', 'local', '还是', 'hdfs', 'load', 'data', '带上', 'hadoop', '命令', 'hadoop', 'distcp', '命令', '用户名', '密码', '方法', 'hadoop', 'distcp', 'su', 'user1', 'pass1', 'du', 'user1', 'pass1', 'hdfs', 'src1', 'hdfs', 'dest1', '有时候', '两个', '集群', '之间', '没有', 'distcp', '权限', '这时候', '需要', '带上', '两个', '集群', '账号密码', 'su', '后面', '带上', '第一个', '集群', '账号密码', 'du', '后面', '带上', '目标', '集群', '账号密码', 'mysql', '命令', '查看', '数据表', '详细', '描述', '信息', 'show', 'full', 'fields', 'from', 'student', '命令', '注释', '权限', '默认值', '类型', '表字', '信息', '列出来', '查看', '正在', '执行', 'mysql', '线程', 'mysql', 'show', 'processlist', '+---------+-----------+--------------------+-------------+---------+------+-------+------------------+', 'id', 'user', 'host', 'db', 'command', 'time', 'state', 'info', '+---------+-----------+--------------------+-------------+---------+------+-------+------------------+', '2153201', 'crazyant', '127.0', '0.1', '25357', 'pulse', 'sleep', '914', 'null', '2153733', 'crazyant', '127.0', '0.1', '48814', 'hive', 'query', 'null', 'show', 'processlist', '2153735', 'crazyant', '127.0', '0.1', '39639', 'pulse', 'sleep', '13', 'null', '2153736', 'crazyant', '127.0', '0.1', '39640', 'pulse', 'sleep', '13', 'null', '+---------+-----------+--------------------+-------------+---------+------+-------+------------------+', 'rows', 'in', 'set', '0.01', 'sec', 'mysql', '使用', 'kill', '命令', '可以', '其中', '一个', '进程', 'mysql', 'kill', '2153474', 'query', 'ok', 'rows', 'affected', '0.00', 'sec', '数据', 'load', 'mysql', '方法', 'load', 'data', 'local', 'infile', 'workbench', 'python', 'result', 'txt', 'replace', 'into', 'table', 'my', 'urlvisit', 'fields', 'terminated', 'by', 'lines', 'terminated', 'by', 'ignore', 'lines', 'url', 'pdate', 'count', 'vim', '命令', '如果', '编辑', '错误', 'esc', '回到', '命令', '模式', '可以', '撤销', '刚才', '编辑', 'vim', '编辑', '中文', '文本', '出现', '乱码', 'vim', '文本', '经常', '出现', '中文', '乱码', '是因为', 'fileencoding', 'termencoding', '编码', '一致', '造成', '设置', '一直', '可以', 'set', 'termencodingtermencoding', 'cp936', 'set', 'fileencodingfileencoding', 'utf', 'set', 'termencoding', 'utf8', '这样', '设置', '一下', 'vim', '正常', '显示', '中文', '转载', '注明', '来源', 'http', 'crazyant', 'net', '1209', 'html']","[[-0.26110027 -0.10533182  0.24865181  0.2015657   0.2435105  -0.37988406
  -0.11546417  0.49747416 -0.04902466 -0.09345096 -0.06049466 -0.38883657
  -0.12225071  0.54968855  0.13975515 -0.13225367 -0.12104282 -0.00131547
  -0.04172594 -0.46538033 -0.00968462  0.2742343  -0.07457534 -0.18777745
   0.04755792 -0.48364443 -0.3207778   0.05358078 -0.21270057 -0.08476364
   0.18338262  0.05894579 -0.00181466 -0.11729017 -0.17288099  0.36046312
  -0.17429747 -0.26498644  0.08423937 -0.71395189 -0.11795582 -0.55239216
  -0.04427314 -0.03848076 -0.13110296 -0.22327774 -0.28948697  0.41185049
  -0.10557522  0.41852647  0.12154376 -0.29208571 -0.07386988 -0.22431531
  -0.00393051  0.40930937  0.17418196 -0.08651473  0.12786821 -0.13573977
   0.11177087  0.23254205  0.01241801  0.06925893 -0.37188178  0.04639515
   0.02043468  0.00908705 -0.26114276  0.43162398  0.08100161 -0.17706685
   0.40353033 -0.3282046   0.56355951  0.27885335  0.21258665 -0.19258335
  -0.26501495 -0.16717532 -0.05605789  0.03997081 -0.11195399  0.400166
  -0.34841787  0.19098257 -0.28416229  0.47236232  0.51540818  0.16960773
   0.22907432  0.1189129   0.34124269  0.17770412  0.19770026  0.40802595
   0.10176354 -0.27307159  0.07218702 -0.1134287 ]]"
1214,网站从织梦DEDECMS迁移到Wordpress过程以及URL重定向方法,"广告：本人承接迁移织梦到wordpress的业务.前一段时间自己的程序员求职网www.51projob.com被人挂了黑链，我打开首页顶部出现了大片大片的广告图片，我在后台各种地方找黑链代码，改了几个地方不行，然后把代码下载下来采用搜索等方法找，过程中竟然发现了好多个类似sys.cmd这种木马入口文件，然而黑链却一直没有被删掉。无奈之下想采用最彻底的解决方法：将程序员求职网从织梦直接迁移到wordpress，因为wordpress是全球著名博客系统，官方对博客系统经常进行升级以修补漏洞，因此安全性很有保障，而织梦作为国内CMS老大，由其衍生了一大批的垃圾站点，各种被入侵各种被挂马，然而官方却对很多漏洞视而不见，修补非常缓慢。考虑到这些，我准备进行迁移。迁移过程迁移过程网上很多文章，大致是这样的：1、在网上找生成织梦全站RSS文件的方法，然后将代码上传，生成全站文章的rss文件；2、在wordpress中将生成的rss导入进去，这时候已经在wp上看到所有文章了，但是没有内容这时候需要修改dede_articleaddon表，增加title字段并填充值：UPDATE dede_addonarticle,dede_archives SET dede_addonarticle.title=dede_archives.title WHERE dede_addonarticle.aid=dede_archives.id;3、进入织梦数据库，将dede_articleaddon数据表导出来4、将第3步的数据表导入到wp数据库5、写一条SQL，大致是这样的UPDATE wp_posts,dede_addonarticle SET wp_posts.post_content=dede_addonarticle.body WHERE wp_posts.post_title=dede_addonarticle.title;将wp_posts表和dede_articleaddon根据文章的title作join然后采用update将wp_posts的content字段设定为join后dede_articleaddon表的内容body字段6、这时候发现文章已经有内容了，但是图片不对7、将织梦的uploads目录上传到wordpress的根目录8、发现文章和图片全部OK了链接规则变化导致百度收录为0迁移完成后，感觉松了一口气，wordpress终于能够显示织梦之前所有的文章了，并且现在我能够使用windows live write写文章，感觉非常的方便。然而过了几天我发现，百度收录网站链接几乎变成了0，看了一下是因为URL规则变化了，原来是这样的链接：http://www.51projob.com/a/weiruan/20120826/449.html现在变成了这样：http://www.51projob.com/?p=2343百度收录的650篇文章，全部是第一种格式的URL，于是用户链接进来全部是404页面，找不到文章了。这可是个大事，辛辛苦苦2年积攒的页面权重，就这样没了，岂不是前功尽弃，如果百度因此惩罚我的网站永不收录，那我该哭了。采用301进行URL的redirect能拯救网页权重对于用户不能访问的问题，我开始是做了一个漂亮点的404页面，上面列出了所有的网站分类，希望用户看到该页面后，能在网站上停留一会：然而发现也还是不乐观，用户貌似不会继续点其他链接，直接就离开了网站。今天看了一篇文章“百度搜索引擎优化指南2.0[官方版]”，里面提到这么一段话301• 301返回码的含义是“Moved Permanently”，百度会认为网页当前跳转至新url。当遇到站点迁移，域名更换、站点改版的情况时，推荐使用301返回码，尽量减少改版带来的流量损失。虽然百度spider现在对301跳转的响应周期较长，但我们还是推荐大家这么做。由此我看到了希望，这样做首先用户访问网站能跳转到所需的页面，其次搜索引擎也能进行权重的转移，是一个较为完美的方案。查找织梦DEDE和wordpress的URL的映射关系要实现301跳转，需要先找到织梦和wordpress两者URL之间的对应关系，然后才能设定跳转。而他们两者之间不变的对应项，用文章标题来做最合适不过。1、获取织梦DEDE的文章标题和链接的对应关系由于织梦采用静态文件生成的方法提供URL，因此我先把原先备份的网站目录的“a”目录复制过来，得到如下的一个文章目录结果：其中每一个html就是一个文章页面，而其目录访问结构“/a/alibaba/20120828/481.html”就是文章的具体链接子地址，加上www.51projob.com作为开头，就形成了http://www.51projob.com/a/alibaba/20120828/481.html作为正式的访问链接。然后用python递归遍历的方法，可以得到每个文件的链接以及文章标题[面试经验] [阿里巴巴]笔试面试全过程(精华)    www.51projob.com/a/alibaba/20120828/493.html阿里巴巴笔试题    www.51projob.com/a/alibaba/20120828/494.html[阿里巴巴]面试失败经历    www.51projob.com/a/alibaba/20120828/495.html阿里巴巴常用面试题    www.51projob.com/a/alibaba/20120828/496.html《分享面试经历—阿里巴巴》    www.51projob.com/a/alibaba/20120828/497.html阿里巴巴面试总结    www.51projob.com/a/alibaba/20120828/498.html阿里巴巴面试经历    www.51projob.com/a/alibaba/20120828/499.html淘宝网2010春季校园招聘笔试题    www.51projob.com/a/alibaba/20120829/519.html淘宝2011.9.23校园招聘会面试题    www.51projob.com/a/alibaba/20120830/540.html阿里云2011.9.17招聘会笔试题    www.51projob.com/a/alibaba/20120903/589.html2、获取wordpress每个文章的链接地址和标题这个比较简单，我直接进数据库，将wp_posts数据表的（id，post_title）两列导出就可以了，然后根据id可以构造每个文章的链接，比如http://www.51projob.com/?p=2482，这样，我就得到了wordpress的文章标题和URL的对应关系：[百度] Web笔试分享（下）    http://www.51projob.com/?p=2477百度笔试题：malloc/free与new/delete的区别    http://www.51projob.com/?p=2473百度技术研发笔试题目    http://www.51projob.com/?p=2435百度2012招聘测试工程师实习生笔试题    http://www.51projob.com/?p=2425百度2011招聘笔试题和答案解析    http://www.51projob.com/?p=2424百度2010校园招聘算法题之编译模块    http://www.51projob.com/?p=2423百度研发笔试题    http://www.51projob.com/?p=2408百度的前端面试经历    http://www.51projob.com/?p=2380百度面试全攻略    http://www.51projob.com/?p=2340百度面试题2012年8月28日    http://www.51projob.com/?p=23272011百度校园招聘笔试题 C++类-附原创答案    http://www.51projob.com/?p=2264百度面试题集锦    http://www.51projob.com/?p=2256百度2012校招笔试题之位数和编码    http://www.51projob.com/?p=2214百度笔试题目分享    http://www.51projob.com/?p=21513、实现两类URL的映射这就很简单了，由于前两步已经得到了（title, dede_url)和(title，wp_url)两份数据，现在根据title作下join，就得到了(dede_url，wp_url）即织梦DED的URL和wordpress的对应文章URL的对应关系表：www.51projob.com/a/baidu/20120813/302.html    http://www.51projob.com/?p=2480www.51projob.com/a/baidu/20120813/304.html    http://www.51projob.com/?p=2478www.51projob.com/a/baidu/20120813/305.html    http://www.51projob.com/?p=2477www.51projob.com/a/baidu/20120813/309.html    http://www.51projob.com/?p=2473www.51projob.com/a/baidu/20120814/352.html    http://www.51projob.com/?p=2435批量生成apache的301 redirect重置命令可以修改网站根目录下的.htaccess文件来进行URL的转向，但是URL映射关系太多，所以我们可以用程序自动生成一下（在文本文件中批量替换也能实现），最终得到下面的重定向规则：Redirect 301 /a/alibaba/20120903/591.html http://www.51projob.com/?p=2209Redirect 301 /a/alibaba/20120908/636.html http://www.51projob.com/?p=2176Redirect 301 /a/alibaba/20120908/642.html http://www.51projob.com/?p=2170Redirect 301 /a/alibaba/20120911/652.html http://www.51projob.com/?p=2160Redirect 301 /a/baidu/20120329/150.html http://www.51projob.com/?p=2604Redirect 301 /a/baidu/20120504/222.html http://www.51projob.com/?p=2543Redirect 301 /a/baidu/20120505/223.html http://www.51projob.com/?p=2542Redirect 301 /a/baidu/20120505/225.html http://www.51projob.com/?p=2540Redirect 301 /a/baidu/20120715/285.html http://www.51projob.com/?p=2495Redirect 301 /a/baidu/20120813/300.html http://www.51projob.com/?p=2482Redirect 301 /a/baidu/20120813/301.html http://www.51projob.com/?p=2481测试，大功告成将上面生成的命令全部贴到.htaccess中后，可以测试一下，在网页输入旧链接：回车后发现自动跳转到了新链接：用fifefox的httpfox插件看一下状态转移：发现经过两次301页面转移，链接从原来的织梦dede错误地址转到了新的wordpress新地址。本次代码地址：http://pan.baidu.com/s/1DrBF6用到了BeautifulSoup开源库用来在python中提取文章的标题。","['网站', '从织', 'dedecms', '迁移', 'wordpress', '过程', '以及', 'url', '重定向', '方法', '广告', '本人', '承接', '迁移', '织梦到', 'wordpress', '业务', '一段时间', '自己', '程序员', '求职网', 'www.51', 'projob', 'com', '黑链', '打开', '首页', '顶部', '出现', '大片大片', '广告', '图片', '后台', '各种', '地方', '黑链', '代码', '改了', '几个', '地方', '不行', '然后', '代码', '下载', '下来', '采用', '搜索', '方法', '过程', '竟然', '发现', '好多个', '类似', 'sys', 'cmd', '这种', '木马', '入口', '文件', '然而', '黑链', '一直', '没有', '删掉', '无奈', '之下', '采用', '彻底', '解决', '方法', '程序员', '求职网', '从织', '直接', '迁移', 'wordpress', '因为', 'wordpress', '全球', '著名', '博客', '系统', '官方', '博客', '系统', '经常', '进行', '升级', '修补', '漏洞', '因此', '安全性', '保障', '而织', '作为', '国内', 'cms', '老大', '衍生', '一大批', '垃圾', '站点', '各种', '入侵', '各种', '然而', '官方', '很多', '漏洞', '视而不见', '修补', '非常', '缓慢', '考虑', '这些', '准备', '进行', '迁移', '迁移', '过程', '迁移', '过程', '网上', '很多', '文章', '大致', '这样', '网上', '生成', '织梦', '全站', 'rss', '文件', '方法', '然后', '代码', '上传', '生成', '全站', '文章', 'rss', '文件', 'wordpress', '中将', '生成', 'rss', '导入', '进去', '这时候', '已经', 'wp', '看到', '所有', '文章', '但是', '没有', '内容', '这时候', '需要', '修改', 'dede', 'articleaddon', '增加', 'title', '字段', '填充', 'update', 'dede', 'addonarticle', 'dede', 'archives', 'set', 'dede', 'addonarticle', 'title', 'dede', 'archives', 'title', 'where', 'dede', 'addonarticle', 'aid', 'dede', 'archives', 'id', '进入', '织梦', '数据库', 'dede', 'articleaddon', '数据表', '导出来', '数据表', '导入到', 'wp', '数据库', '一条', 'sql', '大致', '这样', 'update', 'wp', 'posts', 'dede', 'addonarticle', 'set', 'wp', 'posts', 'post', 'content', 'dede', 'addonarticle', 'body', 'where', 'wp', 'posts', 'post', 'title', 'dede', 'addonarticle', 'title', 'wp', 'posts', 'dede', 'articleaddon', '根据', '文章', 'title', 'join', '然后', '采用', 'update', 'wp', 'posts', 'content', '字段', '设定', 'join', 'dede', 'articleaddon', '内容', 'body', '字段', '这时候', '发现', '文章', '已经', '内容', '但是', '图片', '将织', 'uploads', '目录', '传到', 'wordpress', '根目录', '发现', '文章', '图片', '全部', 'ok', '链接', '规则', '变化', '导致', '百度', '收录', '迁移', '完成', '感觉', '一口气', 'wordpress', '终于', '能够', '显示', '织梦', '之前', '所有', '文章', '并且', '现在', '能够', '使用', 'windows', 'live', 'write', '写文章', '感觉', '非常', '方便', '然而', '几天', '发现', '百度', '收录', '网站', '链接', '几乎', '变成', '一下', '是因为', 'url', '规则', '变化', '原来', '这样', '链接', 'http', 'www.51', 'projob', 'com', 'weiruan', '20120826', '449', 'html', '现在', '变成', '这样', 'http', 'www.51', 'projob', 'com', '2343', '百度', '收录', '650', '篇文章', '全部', '第一种', '格式', 'url', '于是', '用户', '链接', '进来', '全部', '404', '页面', '不到', '文章', '可是', '大事', '辛辛苦苦', '积攒', '页面', '权重', '这样', '不是', '前功尽弃', '如果', '百度', '因此', '惩罚', '网站', '永不', '收录', '采用', '301', '进行', 'url', 'redirect', '拯救', '网页', '权重', '对于', '用户', '不能', '访问', '问题', '开始', '一个', '漂亮', '404', '页面', '上面', '列出', '所有', '网站', '分类', '希望', '用户', '看到', '页面', '网站', '停留', '一会', '然而', '发现', '还是', '乐观', '用户', '貌似', '不会', '继续', '其他', '链接', '直接', '离开', '网站', '今天', '一篇', '文章', '百度', '搜索引擎', '优化', '指南', '2.0', '官方版', '里面', '提到', '这么', '一段话', '301', '301', '返回', '含义', 'moved', 'permanently', '百度', '认为', '网页', '当前', '跳转', 'url', '遇到', '站点', '迁移', '域名', '更换', '站点', '改版', '情况', '推荐', '使用', '301', '返回', '尽量减少', '改版', '带来', '流量', '损失', '虽然', '百度', 'spider', '现在', '301', '跳转', '响应', '周期', '较长', '我们', '还是', '推荐', '大家', '这么', '由此', '看到', '希望', '这样', '首先', '用户', '访问', '网站', '跳转', '页面', '其次', '搜索引擎', '进行', '权重', '转移', '一个', '较为', '完美', '方案', '查找', '织梦', 'dede', 'wordpress', 'url', '映射', '关系', '实现', '301', '跳转', '需要', '找到', '织梦', 'wordpress', '两者', 'url', '之间', '对应', '关系', '然后', '才能', '设定', '跳转', '他们', '两者之间', '不变', '对应', '文章', '标题', '最合适', '不过', '获取', '织梦', 'dede', '文章', '标题', '链接', '对应', '关系', '由于', '织梦', '采用', '静态', '文件', '生成', '方法', '提供', 'url', '因此', '原先', '备份', '网站', '目录', '目录', '复制', '过来', '得到', '如下', '一个', '文章', '目录', '结果', '其中', '一个', 'html', '就是', '一个', '文章', '页面', '目录', '访问', '结构', 'alibaba', '20120828', '481', 'html', '就是', '文章', '具体', '链接', '地址', '加上', 'www.51', 'projob', 'com', '作为', '开头', '形成', 'http', 'www.51', 'projob', 'com', 'alibaba', '20120828', '481', 'html', '作为', '正式', '访问', '链接', '然后', 'python', '递归', '遍历', '方法', '可以', '得到', '每个', '文件', '链接', '以及', '文章', '标题', '面试', '经验', '阿里巴巴', '笔试', '面试', '全过程', '精华', 'www.51', 'projob', 'com', 'alibaba', '20120828', '493', 'html', '阿里巴巴', '笔试', 'www.51', 'projob', 'com', 'alibaba', '20120828', '494', 'html', '阿里巴巴', '面试', '失败', '经历', 'www.51', 'projob', 'com', 'alibaba', '20120828', '495', 'html', '阿里巴巴', '常用', '面试题', 'www.51', 'projob', 'com', 'alibaba', '20120828', '496', 'html', '分享', '面试', '经历', '阿里巴巴', 'www.51', 'projob', 'com', 'alibaba', '20120828', '497', 'html', '阿里巴巴', '面试', '总结', 'www.51', 'projob', 'com', 'alibaba', '20120828', '498', 'html', '阿里巴巴', '面试', '经历', 'www.51', 'projob', 'com', 'alibaba', '20120828', '499', 'html', '淘宝网', '2010', '春季', '校园', '招聘', '笔试', 'www.51', 'projob', 'com', 'alibaba', '20120829', '519', 'html', '淘宝', '2011.9', '23', '校园', '招聘会', '面试题', 'www.51', 'projob', 'com', 'alibaba', '20120830', '540', 'html', '阿里', '2011.9', '17', '招聘会', '笔试', 'www.51', 'projob', 'com', 'alibaba', '20120903', '589', 'html2', '获取', 'wordpress', '每个', '文章', '链接', '地址', '标题', '这个', '比较简单', '直接', '数据库', 'wp', 'posts', '数据表', 'id', 'post', 'title', '两列', '导出', '可以', '然后', '根据', 'id', '可以', '构造', '每个', '文章', '链接', '比如', 'http', 'www.51', 'projob', 'com', '2482', '这样', '得到', 'wordpress', '文章', '标题', 'url', '对应', '关系', '百度', 'web', '笔试', '分享', 'http', 'www.51', 'projob', 'com', '2477', '百度', '笔试', 'malloc', 'free', 'new', 'delete', '区别', 'http', 'www.51', 'projob', 'com', '2473', '百度', '技术', '研发', '笔试', '题目', 'http', 'www.51', 'projob', 'com', '2435', '百度', '2012', '招聘', '测试', '工程师', '实习生', '笔试', 'http', 'www.51', 'projob', 'com', '2425', '百度', '2011', '招聘', '笔试', '答案', '解析', 'http', 'www.51', 'projob', 'com', '2424', '百度', '2010', '校园', '招聘', '算法', '编译', '模块', 'http', 'www.51', 'projob', 'com', '2423', '百度', '研发', '笔试', 'http', 'www.51', 'projob', 'com', '2408', '百度', '前端', '面试', '经历', 'http', 'www.51', 'projob', 'com', '2380', '百度', '面试', '全攻略', 'http', 'www.51', 'projob', 'com', '2340', '百度', '面试题', '2012', '28', 'http', 'www.51', 'projob', 'com', '23272011', '百度', '校园', '招聘', '笔试', 'c++', '原创', '答案', 'http', 'www.51', 'projob', 'com', '2264', '百度', '面试题', '集锦', 'http', 'www.51', 'projob', 'com', '2256', '百度', '2012', '校招', '笔试', '位数', '编码', 'http', 'www.51', 'projob', 'com', '2214', '百度', '笔试', '题目', '分享', 'http', 'www.51', 'projob', 'com', '21513', '实现', '两类', 'url', '映射', '简单', '由于', '两步', '已经', '得到', 'title', 'dede', 'url', 'title', 'wp', 'url', '两份', '数据', '现在', '根据', 'title', '作下', 'join', '得到', 'dede', 'url', 'wp', 'url', '即织', 'ded', 'url', 'wordpress', '对应', '文章', 'url', '对应', '关系', 'www.51', 'projob', 'com', 'baidu', '20120813', '302', 'html', 'http', 'www.51', 'projob', 'com', '2480www.51', 'projob', 'com', 'baidu', '20120813', '304', 'html', 'http', 'www.51', 'projob', 'com', '2478www.51', 'projob', 'com', 'baidu', '20120813', '305', 'html', 'http', 'www.51', 'projob', 'com', '2477www.51', 'projob', 'com', 'baidu', '20120813', '309', 'html', 'http', 'www.51', 'projob', 'com', '2473www.51', 'projob', 'com', 'baidu', '20120814', '352', 'html', 'http', 'www.51', 'projob', 'com', '2435', '批量', '生成', 'apache', '301', 'redirect', '重置', '命令', '可以', '修改', '网站', '根目录', 'htaccess', '文件', '进行', 'url', '转向', '但是', 'url', '映射', '关系', '所以', '我们', '可以', '程序', '自动', '生成', '一下', '文本文件', '批量', '替换', '实现', '最终', '得到', '下面', '重定向', '规则', 'redirect', '301', 'alibaba', '20120903', '591', 'html', 'http', 'www.51', 'projob', 'com', '2209redirect', '301', 'alibaba', '20120908', '636', 'html', 'http', 'www.51', 'projob', 'com', '2176redirect', '301', 'alibaba', '20120908', '642', 'html', 'http', 'www.51', 'projob', 'com', '2170redirect', '301', 'alibaba', '20120911', '652', 'html', 'http', 'www.51', 'projob', 'com', '2160redirect', '301', 'baidu', '20120329', '150', 'html', 'http', 'www.51', 'projob', 'com', '2604redirect', '301', 'baidu', '20120504', '222', 'html', 'http', 'www.51', 'projob', 'com', '2543redirect', '301', 'baidu', '20120505', '223', 'html', 'http', 'www.51', 'projob', 'com', '2542redirect', '301', 'baidu', '20120505', '225', 'html', 'http', 'www.51', 'projob', 'com', '2540redirect', '301', 'baidu', '20120715', '285', 'html', 'http', 'www.51', 'projob', 'com', '2495redirect', '301', 'baidu', '20120813', '300', 'html', 'http', 'www.51', 'projob', 'com', '2482redirect', '301', 'baidu', '20120813', '301', 'html', 'http', 'www.51', 'projob', 'com', '2481', '测试', '大功告成', '上面', '生成', '命令', '全部', '贴到', 'htaccess', '中后', '可以', '测试', '一下', '网页', '输入', '链接', '回车', '发现', '自动', '跳转', '链接', 'fifefox', 'httpfox', '插件', '一下', '状态', '转移', '发现', '经过', '两次', '301', '页面', '转移', '链接', '原来', 'dede', '错误', '地址', '转到', 'wordpress', '地址', '本次', '代码', '地址', 'http', 'pan', 'baidu', 'com', '1drbf6', '用到', 'beautifulsoup', '开源', '用来', 'python', '提取', '文章', '标题']","[[-0.25879559 -0.13182746  0.30272955  0.34078105  0.15433051 -0.46020005
  -0.10218663  0.53474326 -0.06330668 -0.10024706 -0.11934783 -0.45730052
  -0.10475446  0.57345166  0.07854887 -0.17483657 -0.13700899  0.02008684
   0.03330592 -0.3973187  -0.00389873  0.31278486 -0.1221297  -0.22653678
  -0.02355582 -0.44335028 -0.38164705  0.08781599 -0.19894793 -0.07838548
   0.17917155  0.18747102  0.02481489 -0.1024748  -0.24187192  0.41352735
  -0.17986713 -0.26455615  0.04694023 -0.6698971  -0.04386454 -0.56524111
  -0.03896014 -0.03311844 -0.11456161 -0.30101733 -0.42320748  0.43996692
   0.03614424  0.37144745  0.0327258  -0.33268755  0.07300328 -0.28885637
  -0.04525784  0.47780005  0.17194588 -0.10648255  0.14643052 -0.09463176
   0.17642402  0.21149421 -0.00723247  0.08663197 -0.3407947   0.06675989
  -0.06607757  0.08437831 -0.19461567  0.4630428   0.03396047 -0.17461269
   0.47221041 -0.35677001  0.60746264  0.35621893  0.34724109 -0.2604849
  -0.18543263 -0.26361326 -0.12628161  0.05326366 -0.14017625  0.46005778
  -0.44004322  0.17666614 -0.30318591  0.59233002  0.61695643  0.22331746
   0.177679    0.13755653  0.32364009  0.15738813  0.21634052  0.53919057
   0.06695035 -0.22343956  0.26751906 -0.09281422]]"
1216,Python生成文件md5校验值函数,"linux有个命令叫做md5sum，能生成文件的md5值，一般情况下都会将结果记录到一个文件中用于校验使用，比如会这样使用：[crazyant@localhost PythonMd5]$ more sample_file www.crazyant.netwww.51projob.com[crazyant@localhost PythonMd5]$ md5sum sample_file > sample_file.md5file[crazyant@localhost PythonMd5]$ more sample_file.md5file 311d384505e3622ccf85d88930e2b0a0  sample_file[crazyant@localhost PythonMd5]$ md5sum -c sample_file.md5file sample_file: OK其中md5sum -c用于检测生成的md5值是否正确。使用python生成文件md5值以及生成和md5sum结果一样的结果文件python可以使用hashlib的md5模块对文件内容进行md5校验码生成，如果要生成和md5sum一样的结果文件，只需要将MD5结果值和文件名输出一行，中间有两个空格输出即可。测试代码：# -*- encoding:utf-8 -*-from hashlib import md5import osdef generate_file_md5value(fpath):    '''以文件路径作为参数，返回对文件md5后的值    '''    m = md5()    # 需要使用二进制格式读取文件内容    a_file = open(fpath, 'rb')        m.update(a_file.read())    a_file.close()    return m.hexdigest()def generate_file_md5sumFile(fpath):    fname = os.path.basename(fpath)    fpath_md5 = ""%s.md5"" % fpath    fout = open(fpath_md5, ""w"")    fout.write(""%s  %s\n"" % (generate_file_md5value(fpath), fname.strip()))    print ""generate success, fpath:%s"" % fpath_md5    fout.flush()    fout.close()if __name__ == ""__main__"":    fpath = ""/home/users/workbench/PythonMd5/sample_file""    # 测试一：以文件路径作为参数，获得md5后的字符串    print generate_file_md5value(fpath)        # 测试二：生成和linux命令：md5sum同样结果的.md5文件    generate_file_md5sumFile(fpath) 运行结果：[crazyant@localhost PythonMd5]$ python generateMd5file.py311d384505e3622ccf85d88930e2b0a0generate success, fpath:/home/crazyant/workbench/PythonMd5/sample_file.md5[crazyant@localhost PythonMd5]$ md5sum -c sample_file.md5sample_file: OK 注意点在windows下开发的代码，如果直接提交到linux运行，经常因为windows下的换行符是\r\n而linux是\n的缘故导致代码执行失败，一般情况下都要进行一下转换。","['python', '生成', '文件', 'md5', '校验', '函数', 'linux', '有个', '命令', '叫做', 'md5sum', '生成', '文件', 'md5', '一般', '情况', '结果', '记录', '一个', '文件', '用于', '校验', '使用', '比如', '这样', '使用', 'crazyant', 'localhost', 'pythonmd5', 'more', 'sample', 'file', 'www', 'crazyant', 'netwww.51', 'projob', 'com', 'crazyant', 'localhost', 'pythonmd5', 'md5sum', 'sample', 'file', 'sample', 'file', 'md5file', 'crazyant', 'localhost', 'pythonmd5', 'more', 'sample', 'file', 'md5file', '311d384505e3622ccf85d88930e2b0a0', 'sample', 'file', 'crazyant', 'localhost', 'pythonmd5', 'md5sum', 'sample', 'file', 'md5file', 'sample', 'file', 'ok', '其中', 'md5sum', '用于', '检测', '生成', 'md5', '是否', '正确', '使用', 'python', '生成', '文件', 'md5', '以及', '生成', 'md5sum', '结果', '一样', '结果', '文件', 'python', '可以', '使用', 'hashlib', 'md5', '模块', '文件', '内容', '进行', 'md5', '校验码', '生成', '如果', '生成', 'md5sum', '一样', '结果', '文件', '需要', 'md5', '结果', '文件名', '输出', '一行', '中间', '两个', '空格', '输出', '即可', '测试代码', 'encoding', 'utf', 'from', 'hashlib', 'import', 'md5import', 'osdef', 'generate', 'file', 'md5value', 'fpath', '文件', '路径', '作为', '参数', '返回', '文件', 'md5', 'md5', '需要', '使用', '二进制', '格式', '读取', '文件', '内容', 'file', 'open', 'fpath', 'rb', 'update', 'file', 'read', 'file', 'close', 'return', 'hexdigest', 'def', 'generate', 'file', 'md5sumfile', 'fpath', 'fname', 'os', 'path', 'basename', 'fpath', 'fpath', 'md5', 'md5', 'fpath', 'fout', 'open', 'fpath', 'md5', 'fout', 'write', 'generate', 'file', 'md5value', 'fpath', 'fname', 'strip', 'print', 'generate', 'success', 'fpath', 'fpath', 'md5', 'fout', 'flush', 'fout', 'close', 'if', '__', 'name', '__', '__', 'main', '__', 'fpath', 'home', 'users', 'workbench', 'pythonmd5', 'sample', 'file', '测试', '文件', '路径', '作为', '参数', '获得', 'md5', '字符串', 'print', 'generate', 'file', 'md5value', 'fpath', '测试', '生成', 'linux', '命令', 'md5sum', '同样', '结果', 'md5', '文件', 'generate', 'file', 'md5sumfile', 'fpath', '运行', '结果', 'crazyant', 'localhost', 'pythonmd5', 'python', 'generatemd5file', 'py311d384505e3622ccf85d88930e2b0a0generate', 'success', 'fpath', 'home', 'crazyant', 'workbench', 'pythonmd5', 'sample', 'file', 'md5', 'crazyant', 'localhost', 'pythonmd5', 'md5sum', 'sample', 'file', 'md5sample', 'file', 'ok', '注意', 'windows', '开发', '代码', '如果', '直接', '提交', 'linux', '运行', '经常', '因为', 'windows', '换行符', 'linux', '缘故', '导致', '代码执行', '失败', '一般', '情况', '进行', '一下', '转换']","[[-0.22771698 -0.13454537  0.24255214  0.1624508   0.24859461 -0.38078912
  -0.11155458  0.48483863 -0.0626712  -0.1312549  -0.04589605 -0.38293374
  -0.16594984  0.52909597  0.13208714 -0.12602254 -0.1243527   0.01720047
  -0.035734   -0.50362681 -0.0537221   0.26850404 -0.05585163 -0.22160793
   0.06059123 -0.46497569 -0.31499971  0.04335674 -0.25096984 -0.08390359
   0.16037244  0.03037233  0.02641105 -0.14047376 -0.2017923   0.33616893
  -0.21407868 -0.2856784   0.07508394 -0.70197168 -0.11985646 -0.58375663
  -0.05691423 -0.00316429 -0.11496151 -0.24893055 -0.22693305  0.36043912
  -0.12173204  0.45865959  0.132967   -0.28871862 -0.09720786 -0.17320753
  -0.03663266  0.39520195  0.14707869 -0.11447389  0.14370947 -0.17628158
   0.13189818  0.23887438  0.0198899   0.08685963 -0.3761107   0.06243946
   0.01982663 -0.00668181 -0.29814709  0.4281294   0.08461281 -0.15371676
   0.39658955 -0.32012923  0.5818562   0.29497126  0.15239925 -0.18147476
  -0.30901517 -0.11412658 -0.01465152  0.04705097 -0.14745269  0.3953297
  -0.33409571  0.1758721  -0.28347311  0.47267373  0.50758034  0.15453032
   0.21410969  0.11874717  0.33473254  0.18381682  0.20587523  0.38495677
   0.13003868 -0.29014807 -0.00519108 -0.13433923]]"
1292,Firefox数据采集插件大全,"本文介绍了使用firefox进行数据采集的一些小窍门、一些数据采集建议和一些优秀的用于数据采集的firefox插件。实时操作浏览器DOM的一些注意事项firefox的插件能够实时的对展现出来的网页进行DOM操作和查看，请注意通过firefox的firebug还有chrome的""查看元素""功能查看到的都不是页面最初的源码，而是经过浏览器的一些修改后的结果，比如浏览器会对收到的源码作清理操作，作执行javascript操作。比如对于firefox浏览器，它会自动的给table元素加上<tbody>标签。然而在数据采集时候，比如使用scrapy时，并没有经过浏览器这一步骤的处理，所以如果采集规则中带有<tbody>标签，显然会解析失败。因此，使用firefox或者xpath做数据采集规则设计和处理时，要注意：先禁用firefox的javascript执行引擎，然后再对DOM做提取xpath的操作，这样的xpath才能用于scrapy框架中不要使用xpath的完全绝对路径，比如/html/body/div/a/href这样的，最好使用一些相对的定位方法（比如id, class, width等），或者其他的一些特性比如contains(@href, 'image')在你的xpath中永远不要出现<tbody>标签，除非你确定目标站有这个标签用于数据采集的firefox插件Firebug地址：http://getfirebug.com/Firebug是一个web开发者大都知道的工具，它在web采集中也非常的有用。当你鼠标移动到一个页面元素上时，firebug能够让你快速查看其html代码，这样当你构建一个元素的xpath路径时非常的有用。XPather地址：https://addons.mozilla.org/zh-CN/firefox/addon/xpather/当你写好了一个xpath，使用该插件能够在该页面检测一下是否正确，是否能正常工作。XPath Checker地址：https://addons.mozilla.org/zh-CN/firefox/addon/xpath-checker/另外一个firefox插件，能够让你在页面上检测写的xpath是否正确。Tamper Data地址：https://addons.mozilla.org/zh-CN/firefox/addon/tamper-data/一个插件，能够让你修改由firefox发送的HTTP头，Firebug也能够查看HTTP头但不能修改。这个功能很强大，能直接绕过页面的javascript检测直接将参数提交给服务器。Firecookie地址：https://addons.mozilla.org/zh-CN/firefox/addon/firecookie/使用Firecookie很方便的对cookie进行查看和管理，使用该插件能够创建一个新的cookie，删除已有的cookie，查看现有网站的cookie列表，管理cookie权限等很多操作。HttpFox地址：https://addons.mozilla.org/en-US/firefox/addon/httpfox/对HTTP的发送、接受、参数、cookie进行查看、修改、重新发送的插件Edit Cookies地址：https://addons.mozilla.org/en-US/firefox/addon/edit-cookies/?src=search在线更新、新增、删除cookie插件，不需要页面刷新或者修改txt文件。Edit Cookies提供了一个界面用于对cookie的操作。Tamper Data地址：https://addons.mozilla.org/en-US/firefox/addon/tamper-data/?src=search使用tamperdata能够查看和修改浏览器的HTTP/HTTPS头和发送的POST数据。比如对HTTP的发送接收信息进行跟踪和调试，或者对提交的POST数据进行修改。Live HTTP Headers地址：https://addons.mozilla.org/en-US/firefox/addon/live-http-headers/?src=search查看HTTP headers的插件插件的选择对于大部分静态页面来说，使用firebug、xpath、XPath Checker就能够设计一套解析规则，设计采集流程。但是对于大部分动态网站来说，很多内容都是javascript加载交互的，就需要进行HTTP头、cookie的分析，比如对于新浪微博的模拟登陆，就需要实时的监控其异步交互过程，这时就需要HttpFox、Tamper Data等插件。更特别的，有时候需要解析网站的javascript代码，可以使用webkit开元库模拟一个浏览器，来对页面做动态解析，不过性能会降低些，可以统一作权衡。转载请注明来源：http://crazyant.net/2013/09/30/firefox%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8/","['firefox', '数据', '采集', '插件', '大全', '本文', '介绍', '使用', 'firefox', '进行', '数据', '采集', '一些', '小窍门', '一些', '数据', '采集', '建议', '一些', '优秀', '用于', '数据', '采集', 'firefox', '插件', '实时', '操作', '浏览器', 'dom', '一些', '注意事项', 'firefox', '插件', '能够', '实时', '展现', '出来', '网页', '进行', 'dom', '操作', '查看', '注意', '通过', 'firefox', 'firebug', '还有', 'chrome', '查看', '元素', '功能', '查看', '不是', '页面', '最初', '源码', '而是', '经过', '浏览器', '一些', '修改', '结果', '比如', '浏览器', '收到', '源码', '清理', '操作', '执行', 'javascript', '操作', '比如', '对于', 'firefox', '浏览器', '它会', '自动', 'table', '元素', '加上', 'tbody', '标签', '然而', '数据', '采集', '时候', '比如', '使用', 'scrapy', '没有', '经过', '浏览器', '这一', '步骤', '处理', '所以', '如果', '采集', '规则', '带有', 'tbody', '标签', '显然', '解析', '失败', '因此', '使用', 'firefox', '或者', 'xpath', '数据', '采集', '规则', '设计', '处理', '注意', '禁用', 'firefox', 'javascript', '执行', '引擎', '然后', 'dom', '提取', 'xpath', '操作', '这样', 'xpath', '才能', '用于', 'scrapy', '框架', '不要', '使用', 'xpath', '完全', '绝对路径', '比如', 'html', 'body', 'div', 'href', '这样', '最好', '使用', '一些', '相对', '定位', '方法', '比如', 'id', 'class', 'width', '或者', '其他', '一些', '特性', '比如', 'contains', 'href', 'image', 'xpath', '永远', '不要', '出现', 'tbody', '标签', '除非', '确定', '目标', '这个', '标签', '用于', '数据', '采集', 'firefox', '插件', 'firebug', '地址', 'http', 'getfirebug', 'com', 'firebug', '一个', 'web', '开发者', '大都', '知道', '工具', 'web', '采集', '非常', '有用', '鼠标', '移动', '一个', '页面', '元素', '上时', 'firebug', '能够', '快速', '查看', 'html', '代码', '这样', '构建', '一个', '元素', 'xpath', '路径', '非常', '有用', 'xpather', '地址', 'https', 'addons', 'mozilla', 'org', 'zh', 'cn', 'firefox', 'addon', 'xpather', '一个', 'xpath', '使用', '插件', '能够', '页面', '检测', '一下', '是否', '正确', '是否', '正常', '工作', 'xpath', 'checker', '地址', 'https', 'addons', 'mozilla', 'org', 'zh', 'cn', 'firefox', 'addon', 'xpath', 'checker', '另外', '一个', 'firefox', '插件', '能够', '让你在', '页面', '检测', 'xpath', '是否', '正确', 'tamper', 'data', '地址', 'https', 'addons', 'mozilla', 'org', 'zh', 'cn', 'firefox', 'addon', 'tamper', 'data', '一个', '插件', '能够', '修改', 'firefox', '发送', 'http', 'firebug', '能够', '查看', 'http', '不能', '修改', '这个', '功能', '强大', '直接', '绕过', '页面', 'javascript', '检测', '直接', '参数', '提交', '服务器', 'firecookie', '地址', 'https', 'addons', 'mozilla', 'org', 'zh', 'cn', 'firefox', 'addon', 'firecookie', '使用', 'firecookie', '方便', 'cookie', '进行', '查看', '管理', '使用', '插件', '能够', '创建', '一个', 'cookie', '删除', '已有', 'cookie', '查看', '现有', '网站', 'cookie', '列表', '管理', 'cookie', '权限', '很多', '操作', 'httpfox', '地址', 'https', 'addons', 'mozilla', 'org', 'en', 'us', 'firefox', 'addon', 'httpfox', 'http', '发送', '接受', '参数', 'cookie', '进行', '查看', '修改', '重新', '发送', '插件', 'edit', 'cookies', '地址', 'https', 'addons', 'mozilla', 'org', 'en', 'us', 'firefox', 'addon', 'edit', 'cookies', 'src', 'search', '在线', '更新', '新增', '删除', 'cookie', '插件', '需要', '页面', '刷新', '或者', '修改', 'txt', '文件', 'edit', 'cookies', '提供', '一个', '界面', '用于', 'cookie', '操作', 'tamper', 'data', '地址', 'https', 'addons', 'mozilla', 'org', 'en', 'us', 'firefox', 'addon', 'tamper', 'data', 'src', 'search', '使用', 'tamperdata', '能够', '查看', '修改', '浏览器', 'http', 'https', '发送', 'post', '数据', '比如', 'http', '发送', '接收', '信息', '进行', '跟踪', '调试', '或者', '提交', 'post', '数据', '进行', '修改', 'live', 'http', 'headers', '地址', 'https', 'addons', 'mozilla', 'org', 'en', 'us', 'firefox', 'addon', 'live', 'http', 'headers', 'src', 'search', '查看', 'http', 'headers', '插件', '插件', '选择', '对于', '大部分', '静态', '页面', '来说', '使用', 'firebug', 'xpath', 'xpath', 'checker', '能够', '设计', '一套', '解析', '规则', '设计', '采集', '流程', '但是', '对于', '大部分', '动态', '网站', '来说', '很多', '内容', 'javascript', '加载', '交互', '需要', '进行', 'http', 'cookie', '分析', '比如', '对于', '新浪', '微博', '模拟', '登陆', '需要', '实时', '监控', '异步', '交互', '过程', '这时', '需要', 'httpfox', 'tamper', 'data', '插件', '特别', '有时候', '需要', '解析', '网站', 'javascript', '代码', '可以', '使用', 'webkit', '开元', '模拟', '一个', '浏览器', '页面', '动态', '解析', '不过', '性能', '降低', '可以', '统一', '权衡', '转载', '注明', '来源', 'http', 'crazyant', 'net', '2013', '09', '30', 'firefox%', 'e6%', '95%', 'b0%', 'e6%', '8d%', 'ae%', 'e9%', '87%', '87%', 'e9%', '9b%', '86%', 'e6%', '8f%', '92%', 'e4%', 'bb%', 'b6%', 'e5%', 'a4%', 'a7%', 'e5%', '85%', 'a8']","[[-0.24992411 -0.12144125  0.23536884  0.23944727  0.22303291 -0.36152036
  -0.14758821  0.48264222 -0.02400682 -0.04049263 -0.08040042 -0.35965841
  -0.13311572  0.56516163  0.12189292 -0.12618132 -0.13777297 -0.0016764
  -0.05113748 -0.40495704  0.02514038  0.26031755 -0.04608194 -0.12835837
   0.05884665 -0.48596211 -0.30515539  0.08579399 -0.18369327 -0.06251453
   0.21617959  0.08571721 -0.00608515 -0.12241583 -0.14525237  0.35581989
  -0.1357314  -0.22336534  0.09007729 -0.69577948 -0.11349181 -0.528946
  -0.03343597 -0.06291364 -0.14421683 -0.18853245 -0.31661789  0.44801889
  -0.07607564  0.35336234  0.12534296 -0.28763523 -0.04118282 -0.2525775
   0.03964921  0.41043376  0.21545854 -0.06693545  0.11478921 -0.08425585
   0.08955021  0.24555258  0.01473949  0.07996943 -0.35288682  0.01973001
  -0.00461174  0.02551395 -0.20991242  0.42567095  0.089066   -0.20911526
   0.40970806 -0.32339486  0.55080676  0.2204795   0.25929658 -0.1796965
  -0.2169441  -0.22858285 -0.11003309  0.00519735 -0.08466152  0.3653954
  -0.37359518  0.18286784 -0.27747229  0.45303722  0.49525593  0.15323173
   0.2436948   0.12321525  0.32503677  0.17141868  0.18707011  0.42158514
   0.07318027 -0.24721119  0.09819813 -0.0864298 ]]"
1297,wordpress按层级方式显示分类链接的方法,"wordpress自带的模板有很都地方都比较难看，都不符合人性化设计，比如分类页面，只显示“分类归档：百度”这种样子，显然改成导航形式的比较好。先看效果：首页 > 名企攻略 > 百度这种样式的导航，首先让用户很清楚的知道自己所在的位置，其次对于搜索引擎来说也是很好的一个搜索优化。实现第一步：在模板目录下的functions.php中添加两个函数function get_url_byLinkName($link, $name){    return ""<a href=\""$link\"" title=\""$name\"">$name</a>"";}function get_hierarchy_category_path(){    //来自疯狂的蚂蚁的博客www.crazyant.net    //$wp_query是整个wordpress的全局变量，在任何地方都能够使用    global $wp_query;    //获取当前请求的参数中的分类ID    $catid=$wp_query->query_vars['cat'];    //获取首页的地址    $home_url=get_url_byLinkName(home_url( '/' ),'首页');    $result="""";    //采用迭代的方法获取上一级的分类信息    while($catid!=0){        $current_cat=get_category($catid);        $current_cat_link = get_category_link( $catid );        $current_cat_url=get_url_byLinkName(esc_url( $current_cat_link ),$current_cat->name);        if($result){            $result = ""$current_cat_url > $result"";            } else {            $result = $current_cat_url;        }        //将父亲的分类ID付给迭代变量        $catid=$current_cat->category_parent;    }    $result = ""$home_url > $result"";    return $result;} 第一个函数是为了偷懒，用其生成一个URL链接。第二个函数中，主要用到了wordpress的全局请求参数对象$wp_query还有分类的一些函数。$wp_query对象请参考：http://codex.wordpress.org/Function_Reference/WP_Querywordpress分类相关请参考：is_categoryin_categorycat_is_ancestor_ofget_category_parentsget_all_category_idsget_categoriesget_the_categoryget_categoryget_category_by_pathget_category_by_slugget_cat_IDget_cat_nameget_category_link在开发过程中，随时都可以使用print_r函数打印一下对象的内容，就知道怎样获取参数数据了。实现第二步：修改category.php模板文件替换导航找到模板目录下的category.php文件，找到这个文字：<h1 class=""page-title""><?phpprintf( __( 'Category Archives: %s', 'twentyten' ), '<span>' . single_cat_title( '', false ) . '</span>' );?></h1> 然后替换成调用我们编写的函数：<h1 class=""page-title""><?phpecho get_hierarchy_category_path();?></h1> 总结第一次开发wordpress函数（相当于小插件），整个过程一直在学习，官方的函数参考文档提供了几乎所有自己想要的函数和类：http://codex.wordpress.org/zh-cn:%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83用的最多的应该就是全局变量$wp_query，当客户端请求服务器时，除了初始化配置，wordpress做的第一件事就是用HTTP请求参数初始化该全局变量，这样在代码的任何地方都可以随时引用。比如本文的category.php中并没有给函数传递参数，因为在get_hierarchy_category_path中我们可以使用$wp_query这个全局变量获取所需的所有信息。转载请注明：http://crazyant.net/1297.html","['wordpress', '层级', '方式', '显示', '分类', '链接', '方法', 'wordpress', '自带', '模板', '地方', '比较', '难看', '符合', '人性化', '设计', '比如', '分类', '页面', '显示', '分类', '归档', '百度', '这种', '样子', '显然', '改成', '导航', '形式', '比较', '先看', '效果', '首页', '名企', '攻略', '百度', '这种', '样式', '导航', '首先', '用户', '清楚', '知道', '自己', '所在', '位置', '其次', '对于', '搜索引擎', '来说', '一个', '搜索', '优化', '实现', '第一步', '模板', '目录', 'functions', 'php', '添加', '两个', '函数', 'function', 'get', 'url', 'bylinkname', 'link', 'name', 'return', 'href', 'link', 'title', 'name', 'name', 'function', 'get', 'hierarchy', 'category', 'path', '来自', '疯狂', '蚂蚁', '博客', 'www', 'crazyant', 'net', 'wp', 'query', '整个', 'wordpress', '全局变量', '任何', '地方', '能够', '使用', 'global', 'wp', 'query', '获取', '当前', '请求', '参数', '分类', 'id', 'catid', 'wp', 'query', 'query', 'vars', 'cat', '获取', '首页', '地址', 'home', 'url', 'get', 'url', 'bylinkname', 'home', 'url', '首页', 'result', '采用', '迭代', '方法', '获取', '一级', '分类', '信息', 'while', 'catid', 'current', 'cat', 'get', 'category', 'catid', 'current', 'cat', 'link', 'get', 'category', 'link', 'catid', 'current', 'cat', 'url', 'get', 'url', 'bylinkname', 'esc', 'url', 'current', 'cat', 'link', 'current', 'cat', 'name', 'if', 'result', 'result', 'current', 'cat', 'url', 'result', 'else', 'result', 'current', 'cat', 'url', '父亲', '分类', 'id', '付给', '迭代', '变量', 'catid', 'current', 'cat', 'category', 'parent', 'result', 'home', 'url', 'result', 'return', 'result', '第一个', '函数', '为了', '偷懒', '生成', '一个', 'url', '链接', '第二个', '函数', '主要', '用到', 'wordpress', '全局', '请求', '参数', '对象', 'wp', 'query', '还有', '分类', '一些', '函数', 'wp', 'query', '对象', '参考', 'http', 'codex', 'wordpress', 'org', 'function', 'reference', 'wp', 'querywordpress', '分类', '相关', '参考', 'is', 'categoryin', 'categorycat', 'is', 'ancestor', 'ofget', 'category', 'parentsget', 'all', 'category', 'idsget', 'categoriesget', 'the', 'categoryget', 'categoryget', 'category', 'by', 'pathget', 'category', 'by', 'slugget', 'cat', 'idget', 'cat', 'nameget', 'category', 'link', '开发', '过程', '随时', '可以', '使用', 'print', '函数', '打印', '一下', '对象', '内容', '知道', '怎样', '获取', '参数', '数据', '实现', '第二步', '修改', 'category', 'php', '模板', '文件', '替换', '导航', '找到', '模板', '目录', 'category', 'php', '文件', '找到', '这个', '文字', 'h1', 'class', 'page', 'title', 'phpprintf', '__', 'category', 'archives', 'twentyten', 'span', 'single', 'cat', 'title', 'false', 'span', 'h1', '然后', '替换成', '调用', '我们', '编写', '函数', 'h1', 'class', 'page', 'title', 'phpecho', 'get', 'hierarchy', 'category', 'path', 'h1', '总结', '第一次', '开发', 'wordpress', '函数', '相当于', '插件', '整个', '过程', '一直', '学习', '官方', '函数', '参考', '文档', '提供', '几乎', '所有', '自己', '想要', '函数', 'http', 'codex', 'wordpress', 'org', 'zh', 'cn', 'e5%', '87%', 'bd%', 'e6%', '95%', 'b0%', 'e5%', '8f%', '82%', 'e8%', '80%', '83', '应该', '就是', '全局变量', 'wp', 'query', '客户端', '请求', '服务器时', '除了', '初始化', '配置', 'wordpress', '第一件', '就是', 'http', '请求', '参数', '初始化', '全局变量', '这样', '代码', '任何', '地方', '可以', '随时', '引用', '比如', '本文', 'category', 'php', '没有', '函数', '传递', '参数', '因为', 'get', 'hierarchy', 'category', 'path', '我们', '可以', '使用', 'wp', 'query', '这个', '全局变量', '获取', '所有', '信息', '转载', '注明', 'http', 'crazyant', 'net', '1297', 'html']","[[-0.23738974 -0.11696769  0.26891483  0.16846368  0.28149926 -0.37802529
  -0.12565736  0.48707234 -0.05865029 -0.10687654 -0.05243451 -0.38851017
  -0.14339027  0.54815367  0.1587783  -0.10698041 -0.13590484 -0.00947471
  -0.0659001  -0.51603517 -0.02491026  0.26212496 -0.05823883 -0.1932939
   0.04884421 -0.48535747 -0.32790362  0.05010919 -0.24327695 -0.08818439
   0.17410652  0.03878482  0.00312918 -0.12626199 -0.18207574  0.34946202
  -0.19847366 -0.27032731  0.07550333 -0.73474775 -0.13532335 -0.59955722
  -0.06866831 -0.02001713 -0.13043162 -0.23028371 -0.27149893  0.38156535
  -0.15373769  0.45991541  0.14269481 -0.28212374 -0.08887259 -0.20495278
  -0.00437489  0.40095519  0.16409376 -0.08176839  0.11723624 -0.1297483
   0.09977693  0.23492092  0.01841858  0.09047759 -0.37402748  0.04348952
   0.04050872 -0.00517635 -0.27805796  0.45121045  0.09659724 -0.18547431
   0.40220552 -0.33405526  0.57565615  0.27064344  0.18757254 -0.16613028
  -0.29914162 -0.17212045 -0.02025719  0.06088593 -0.12798438  0.38546368
  -0.36757672  0.21193738 -0.29249941  0.46841451  0.52147619  0.16686289
   0.24073699  0.10925646  0.36549297  0.18914742  0.20162976  0.39396826
   0.10566856 -0.30094711  0.01564589 -0.11797636]]"
1303,python子类调用父类的方法,"python和其他面向对象语言类似，每个类可以拥有一个或者多个父类，它们从父类那里继承了属性和方法。如果一个方法在子类的实例中被调用，或者一个属性在子类的实例中被访问，但是该方法或属性在子类中并不存在，那么就会自动的去其父类中进行查找。继承父类后，就能调用父类方法和访问父类属性，而要完成整个集成过程，子类是需要调用的构造函数的。子类不显式调用父类的构造方法，而父类构造函数初始化了一些属性，就会出现问题如果子类和父类都有构造函数，子类其实是重写了父类的构造函数，如果不显式调用父类构造函数，父类的构造函数就不会被执行，导致子类实例访问父类初始化方法中初始的变量就会出现问题。class A:    def __init__(self):        self.namea=""aaa""    def funca(self):        print ""function a : %s""%self.nameaclass B(A):    def __init__(self):        self.nameb=""bbb""    def funcb(self):        print ""function b : %s""%self.namebb=B()print b.namebb.funcb()b.funca()结果：bbbfunction b : bbbTraceback (most recent call last):  File ""D:\workbench\python\MyPythonProject\test\study\overwrite_method.py"", line 19, in <module>    print b.funca()  File ""D:\workbench\python\MyPythonProject\test\study\overwrite_method.py"", line 6, in funca    print ""function a : %s""%self.nameaAttributeError: B instance has no attribute 'namea'在子类中，构造函数被重写，但新的构造方法没有任何关于初始化父类的namea属性的代码，为了达到预期的效果，子类的构造方法必须调用其父类的构造方法来进行基本的初始化。有两种方法能达到这个目的：调用超类构造方法的未绑定版本，或者使用super函数。方法一：调用未绑定的超类构造方法修改代码，多增一行：class A:    def __init__(self):        self.namea=""aaa""    def funca(self):        print ""function a : %s""%self.nameaclass B(A):    def __init__(self):        #这一行解决了问题        A.__init__(self)        self.nameb=""bbb""    def funcb(self):        print ""function b : %s""%self.namebb=B()print b.namebb.funcb()b.funca()如上有注释的一行解决了该问题，直接使用父类名称调用其构造函数即可。这种方法叫做调用父类的未绑定的构造方法。在调用一个实例的方法时，该方法的self参数会被自动绑定到实例上（称为绑定方法）。但如果直接调用类的方法（比如A.__init），那么就没有实例会被绑定。这样就可以自由的提供需要的self参数，这种方法称为未绑定unbound方法。通过将当前的实例作为self参数提供给未绑定方法，B类就能使用其父类构造方法的所有实现，从而namea变量被设置。方法二：使用super函数修改代码，这次需要增加在原来代码上增加2行：#父类需要继承object对象class A(object):    def __init__(self):        self.namea=""aaa""    def funca(self):        print ""function a : %s""%self.nameaclass B(A):    def __init__(self):        #这一行解决问题        super(B,self).__init__()        self.nameb=""bbb""    def funcb(self):        print ""function b : %s""%self.namebb=B()print b.namebb.funcb()b.funca()如上有注释的为新增的代码，其中第一句让类A继承自object类，这样才能使用super函数，因为这是python的“新式类”支持的特性。当前的雷和对象可以作为super函数的参数使用，调用函数返回的对象的任何方法都是调用超类的方法，而不是当前类的方法。super函数会返回一个super对象，这个对象负责进行方法解析，解析过程其会自动查找所有的父类以及父类的父类。 方法一更直观，方法二可以一次初始化所有超类super函数比在超累中直接调用未绑定方法更直观，但是其最大的有点是如果子类继承了多个父类，它只需要使用一次super函数就可以。然而如果没有这个需求，直接使用A.__init__(self)更直观一些。","['python', '子类', '调用', '父类', '方法', 'python', '其他', '面向对象', '语言', '类似', '每个', '可以', '拥有', '一个', '或者', '多个', '父类', '它们', '父类', '那里', '继承', '属性', '方法', '如果', '一个', '方法', '子类', '实例', '调用', '或者', '一个', '属性', '子类', '实例', '访问', '但是', '方法', '属性', '子类', '存在', '那么', '自动', '其父', '类中', '进行', '查找', '继承', '父类', '调用', '父类', '方法', '访问', '父类', '属性', '完成', '整个', '集成', '过程', '子类', '需要', '调用', '构造函数', '子类', '显式', '调用', '父类', '构造方法', '父类', '构造函数', '初始化', '一些', '属性', '出现', '问题', '如果', '子类', '父类', '构造函数', '子类', '其实', '重写', '父类', '构造函数', '如果', '显式', '调用', '父类', '构造函数', '父类', '构造函数', '不会', '执行', '导致', '子类', '实例', '访问', '父类', '初始化', '方法', '初始', '变量', '出现', '问题', 'class', 'def', '__', 'init', '__', 'self', 'self', 'namea', 'aaa', 'def', 'funca', 'self', 'print', 'function', 'self', 'nameaclass', 'def', '__', 'init', '__', 'self', 'self', 'nameb', 'bbb', 'def', 'funcb', 'self', 'print', 'function', 'self', 'namebb', 'print', 'namebb', 'funcb', 'funca', '结果', 'bbbfunction', 'bbbtraceback', 'most', 'recent', 'call', 'last', 'file', 'workbench', 'python', 'mypythonproject', 'test', 'study', 'overwrite', 'method', 'py', 'line', '19', 'in', 'module', 'print', 'funca', 'file', 'workbench', 'python', 'mypythonproject', 'test', 'study', 'overwrite', 'method', 'py', 'line', 'in', 'funca', 'print', 'function', 'self', 'nameaattributeerror', 'instance', 'has', 'no', 'attribute', 'namea', '子类', '构造函数', '重写', '构造方法', '没有', '任何', '关于', '初始化', '父类', 'namea', '属性', '代码', '为了', '达到', '预期', '效果', '子类', '构造方法', '必须', '调用', '其父', '构造方法', '进行', '基本', '初始化', '两种', '方法', '达到', '这个', '目的', '调用', '超类', '构造方法', '绑定', '版本', '或者', '使用', 'super', '函数', '方法', '调用', '绑定', '超类', '构造方法', '修改', '代码', '多增', '一行', 'class', 'def', '__', 'init', '__', 'self', 'self', 'namea', 'aaa', 'def', 'funca', 'self', 'print', 'function', 'self', 'nameaclass', 'def', '__', 'init', '__', 'self', '一行', '解决', '问题', '.__', 'init', '__', 'self', 'self', 'nameb', 'bbb', 'def', 'funcb', 'self', 'print', 'function', 'self', 'namebb', 'print', 'namebb', 'funcb', 'funca', '如上', '注释', '一行', '解决', '问题', '直接', '使用', '父类', '名称', '调用', '构造函数', '即可', '这种', '方法', '叫做', '调用', '父类', '绑定', '构造方法', '调用', '一个', '实例', '方法', '方法', 'self', '参数', '自动', '绑定', '实例', '称为', '绑定', '方法', '如果', '直接', '调用', '方法', '比如', '.__', 'init', '那么', '没有', '实例', '绑定', '这样', '可以', '自由', '提供', '需要', 'self', '参数', '这种', '方法', '称为', '绑定', 'unbound', '方法', '通过', '当前', '实例', '作为', 'self', '参数', '提供', '绑定', '方法', '使用', '其父', '构造方法', '所有', '实现', '从而', 'namea', '变量', '设置', '方法', '使用', 'super', '函数', '修改', '代码', '这次', '需要', '增加', '原来', '代码', '增加', '父类', '需要', '继承', 'object', '对象', 'class', 'object', 'def', '__', 'init', '__', 'self', 'self', 'namea', 'aaa', 'def', 'funca', 'self', 'print', 'function', 'self', 'nameaclass', 'def', '__', 'init', '__', 'self', '一行', '解决问题', 'super', 'self', '.__', 'init', '__', 'self', 'nameb', 'bbb', 'def', 'funcb', 'self', 'print', 'function', 'self', 'namebb', 'print', 'namebb', 'funcb', 'funca', '如上', '注释', '新增', '代码', '其中', '第一句', '继承', 'object', '这样', '才能', '使用', 'super', '函数', '因为', '这是', 'python', '新式', '支持', '特性', '当前', '对象', '可以', '作为', 'super', '函数', '参数', '使用', '调用函数', '返回', '对象', '任何', '方法', '调用', '超类', '方法', '不是', '当前', '方法', 'super', '函数', '返回', '一个', 'super', '对象', '这个', '对象', '负责', '进行', '方法', '解析', '解析', '过程', '其会', '自动', '查找', '所有', '父类', '以及', '父类', '父类', '方法', '直观', '方法', '可以', '一次', '初始化', '所有', '超类', 'super', '函数', '超累', '直接', '调用', '绑定', '方法', '直观', '但是', '最大', '有点', '如果', '子类', '继承', '多个', '父类', '需要', '使用', '一次', 'super', '函数', '可以', '然而', '如果', '没有', '这个', '需求', '直接', '使用', '.__', 'init', '__', 'self', '直观', '一些']","[[-0.15561636 -0.16483772  0.20254313  0.06654228  0.32251844 -0.37714909
  -0.13929544  0.49788114 -0.08598874 -0.1415228  -0.01218435 -0.36493322
  -0.27133728  0.56895618  0.18684954 -0.10790409 -0.14885223  0.05097135
  -0.08735481 -0.62381393 -0.10589031  0.25643844  0.03058476 -0.24079352
   0.09817005 -0.49264569 -0.28480226  0.01416298 -0.31785746 -0.0611388
   0.2021946  -0.05526209  0.10377701 -0.21328498 -0.2097499   0.31183062
  -0.2895344  -0.31162067  0.11064588 -0.76562958 -0.1679805  -0.6532673
  -0.09910149  0.06337266 -0.11693697 -0.23479773 -0.11375921  0.29747747
  -0.2242832   0.53753776  0.20364248 -0.30330423 -0.19969879 -0.09806292
  -0.01816727  0.4177454   0.15025495 -0.1210435   0.15266112 -0.22326713
   0.13517213  0.28109651  0.05360802  0.15607242 -0.44211478  0.05337121
   0.05214734 -0.07884007 -0.4032268   0.44546362  0.0699824  -0.16699198
   0.38863257 -0.34694313  0.63692353  0.22605587  0.0220252  -0.09287506
  -0.4353504  -0.03497598  0.02612647  0.06206926 -0.1967301   0.35885728
  -0.31994222  0.18817355 -0.27976983  0.41458888  0.48315184  0.08964394
   0.24562042  0.09085076  0.35243488  0.20382479  0.22038434  0.31810795
   0.22374433 -0.32587901 -0.20721068 -0.14430051]]"
1309,Python封装的常用日期函数,"处理日志数据时，经常要对日期进行进行计算，比如日期加上天数、日期相差天数、日期对应的周等计算，本文收集了几个常用的python日期功能函数，一直更新中。直接贴代码（文件名DateUtil.py），函数功能可以直接查看注释：# -*- encoding:utf8 -*-'''@author: crazyant@version: 2013-10-12'''import datetime, time#定义的日期的格式，可以自己改一下，比如改成""$Y年$m月$d日""format_date = ""%Y-%m-%d""format_datetime = ""%Y-%m-%d %H:%M:%S""def getCurrentDate():    '''            获取当前日期：2013-09-10这样的日期字符串    '''    return time.strftime(format_date, time.localtime(time.time()))def getCurrentDateTime():    '''            获取当前时间：2013-09-10 11:22:11这样的时间年月日时分秒字符串    '''    return time.strftime(format_datetime, time.localtime(time.time()))def getCurrentHour():    '''            获取当前时间的小时数，比如如果当前是下午16时，则返回16    '''    currentDateTime=getCurrentDateTime()    return currentDateTime[-8:-6] def getDateElements(sdate):    '''            输入日期字符串，返回一个结构体组，包含了日期各个分量            输入：2013-09-10或者2013-09-10 22:11:22            返回：time.struct_time(tm_year=2013, tm_mon=4, tm_mday=1, tm_hour=21, tm_min=22, tm_sec=33, tm_wday=0, tm_yday=91, tm_isdst=-1)    '''    dformat = """"    if judgeDateFormat(sdate) == 0:        return None    elif judgeDateFormat(sdate) == 1:        dformat = format_date    elif judgeDateFormat(sdate) == 2:        dformat = format_datetime    sdate = time.strptime(sdate, dformat)    return sdatedef getDateToNumber(date1):    '''            将日期字符串中的减号冒号去掉:             输入：2013-04-05，返回20130405            输入：2013-04-05 22:11:23，返回20130405221123    '''    return date1.replace(""-"","""").replace("":"","""").replace("""","""")def judgeDateFormat(datestr):    '''            判断日期的格式，如果是""%Y-%m-%d""格式则返回1，如果是""%Y-%m-%d %H:%M:%S""则返回2，否则返回0            参数 datestr:日期字符串    '''    try:        datetime.datetime.strptime(datestr, format_date)        return 1    except:        pass    try:        datetime.datetime.strptime(datestr, format_datetime)        return 2    except:        pass    return 0def minusTwoDate(date1, date2):    '''            将两个日期相减，获取相减后的datetime.timedelta对象            对结果可以直接访问其属性days、seconds、microseconds    '''    if judgeDateFormat(date1) == 0 or judgeDateFormat(date2) == 0:        return None    d1Elements = getDateElements(date1)    d2Elements = getDateElements(date2)    if not d1Elements or not d2Elements:        return None    d1 = datetime.datetime(d1Elements.tm_year, d1Elements.tm_mon, d1Elements.tm_mday, d1Elements.tm_hour, d1Elements.tm_min, d1Elements.tm_sec)    d2 = datetime.datetime(d2Elements.tm_year, d2Elements.tm_mon, d2Elements.tm_mday, d2Elements.tm_hour, d2Elements.tm_min, d2Elements.tm_sec)    return d1 - d2def dateAddInDays(date1, addcount):    '''            日期加上或者减去一个数字，返回一个新的日期            参数date1：要计算的日期            参数addcount：要增加或者减去的数字，可以为1、2、3、-1、-2、-3，负数表示相减    '''    try:        addtime=datetime.timedelta(days=int(addcount))        d1Elements=getDateElements(date1)        d1 = datetime.datetime(d1Elements.tm_year, d1Elements.tm_mon, d1Elements.tm_mday)        datenew=d1+addtime        return datenew.strftime(format_date)    except Exception as e:        print e        return Nonedef is_leap_year(pyear):    '''            判断输入的年份是否是闰年     '''       try:                             datetime.datetime(pyear, 2, 29)        return True              except ValueError:               return False         def dateDiffInDays(date1, date2):    '''            获取两个日期相差的天数，如果date1大于date2，返回正数，否则返回负数    '''    minusObj = minusTwoDate(date1, date2)    try:        return minusObj.days    except:        return Nonedef dateDiffInSeconds(date1, date2):    '''            获取两个日期相差的秒数    '''    minusObj = minusTwoDate(date1, date2)    try:        return minusObj.days * 24 * 3600 + minusObj.seconds    except:        return Nonedef getWeekOfDate(pdate):    '''            获取日期对应的周，输入一个日期，返回一个周数字，范围是0~6、其中0代表周日    '''    pdateElements=getDateElements(pdate)    weekday=int(pdateElements.tm_wday)+1    if weekday==7:        weekday=0    return weekdayif __name__==""__main__"":    '''            一些测试代码    '''    print judgeDateFormat(""2013-04-01"")    print judgeDateFormat(""2013-04-01 21:22:33"")    print judgeDateFormat(""2013-04-31 21:22:33"")    print judgeDateFormat(""2013-xx"")    print ""--""    print datetime.datetime.strptime(""2013-04-01"", ""%Y-%m-%d"")    print 'elements'    print getDateElements(""2013-04-01 21:22:33"")    print 'minus'    print minusTwoDate(""2013-03-05"", ""2012-03-07"").days    print dateDiffInSeconds(""2013-03-07 12:22:00"", ""2013-03-07 10:22:00"")    print type(getCurrentDate())    print getCurrentDateTime()    print dateDiffInSeconds(getCurrentDateTime(), ""2013-06-17 14:00:00"")    print getCurrentHour()    print dateAddInDays(""2013-04-05"",-5)    print getDateToNumber(""2013-04-05"")    print getDateToNumber(""2013-04-05 22:11:33"")    print getWeekOfDate(""2013-10-01"")转载请注明来源:http://crazyant.net/1309.html","['python', '封装', '常用', '日期', '函数', '处理', '日志', '数据', '经常', '日期', '进行', '进行', '计算', '比如', '日期', '加上', '天数', '日期', '相差', '天数', '日期', '对应', '计算', '本文', '收集', '几个', '常用', 'python', '日期', '功能', '函数', '一直', '更新', '直接', '代码', '文件名', 'dateutil', 'py', '函数', '功能', '可以', '直接', '查看', '注释', 'encoding', 'utf8', 'author', 'crazyant', 'version', '2013', '10', '12', 'import', 'datetime', 'time', '定义', '日期', '格式', '可以', '自己', '一下', '比如', '改成', 'format', 'date', '-%', '-%', 'format', 'datetime', '-%', '-%', 'def', 'getcurrentdate', '获取', '当前', '日期', '2013', '09', '10', '这样', '日期', '字符串', 'return', 'time', 'strftime', 'format', 'date', 'time', 'localtime', 'time', 'time', 'def', 'getcurrentdatetime', '获取', '当前', '时间', '2013', '09', '10', '11', '22', '11', '这样', '时间', '年月日', '时分秒', '字符串', 'return', 'time', 'strftime', 'format', 'datetime', 'time', 'localtime', 'time', 'time', 'def', 'getcurrenthour', '获取', '当前', '时间', '小时数', '比如', '如果', '当前', '下午', '16', '返回', '16', 'currentdatetime', 'getcurrentdatetime', 'return', 'currentdatetime', 'def', 'getdateelements', 'sdate', '输入', '日期', '字符串', '返回', '一个', '结构', '体组', '包含', '日期', '各个', '分量', '输入', '2013', '09', '10', '或者', '2013', '09', '10', '22', '11', '22', '返回', 'time', 'struct', 'time', 'tm', 'year', '2013', 'tm', 'mon', 'tm', 'mday', 'tm', 'hour', '21', 'tm', 'min', '22', 'tm', 'sec', '33', 'tm', 'wday', 'tm', 'yday', '91', 'tm', 'isdst', 'dformat', 'if', 'judgedateformat', 'sdate', 'return', 'none', 'elif', 'judgedateformat', 'sdate', 'dformat', 'format', 'date', 'elif', 'judgedateformat', 'sdate', 'dformat', 'format', 'datetime', 'sdate', 'time', 'strptime', 'sdate', 'dformat', 'return', 'sdatedef', 'getdatetonumber', 'date1', '日期', '字符串', '减号', '冒号', '去掉', '输入', '2013', '04', '05', '返回', '20130405', '输入', '2013', '04', '05', '22', '11', '23', '返回', '20130405221123', 'return', 'date1', 'replace', 'replace', 'replace', 'def', 'judgedateformat', 'datestr', '判断', '日期', '格式', '如果', '-%', '-%', '格式', '返回', '如果', '-%', '-%', '返回', '否则', '返回', '参数', 'datestr', '日期', '字符串', 'try', 'datetime', 'datetime', 'strptime', 'datestr', 'format', 'date', 'return', 'except', 'pass', 'try', 'datetime', 'datetime', 'strptime', 'datestr', 'format', 'datetime', 'return', 'except', 'pass', 'return', '0def', 'minustwodate', 'date1', 'date2', '两个', '日期', '相减', '获取', '相减', 'datetime', 'timedelta', '对象', '结果', '可以', '直接', '访问', '属性', 'days', 'seconds', 'microseconds', 'if', 'judgedateformat', 'date1', 'or', 'judgedateformat', 'date2', 'return', 'none', 'd1elements', 'getdateelements', 'date1', 'd2elements', 'getdateelements', 'date2', 'if', 'not', 'd1elements', 'or', 'not', 'd2elements', 'return', 'none', 'd1', 'datetime', 'datetime', 'd1elements', 'tm', 'year', 'd1elements', 'tm', 'mon', 'd1elements', 'tm', 'mday', 'd1elements', 'tm', 'hour', 'd1elements', 'tm', 'min', 'd1elements', 'tm', 'sec', 'd2', 'datetime', 'datetime', 'd2elements', 'tm', 'year', 'd2elements', 'tm', 'mon', 'd2elements', 'tm', 'mday', 'd2elements', 'tm', 'hour', 'd2elements', 'tm', 'min', 'd2elements', 'tm', 'sec', 'return', 'd1', 'd2def', 'dateaddindays', 'date1', 'addcount', '日期', '加上', '或者', '减去', '一个', '数字', '返回', '一个', '日期', '参数', 'date1', '计算', '日期', '参数', 'addcount', '增加', '或者', '减去', '数字', '可以', '负数', '表示', '相减', 'try', 'addtime', 'datetime', 'timedelta', 'days', 'int', 'addcount', 'd1elements', 'getdateelements', 'date1', 'd1', 'datetime', 'datetime', 'd1elements', 'tm', 'year', 'd1elements', 'tm', 'mon', 'd1elements', 'tm', 'mday', 'datenew', 'd1', 'addtime', 'return', 'datenew', 'strftime', 'format', 'date', 'except', 'exception', 'as', 'print', 'return', 'nonedef', 'is', 'leap', 'year', 'pyear', '判断', '输入', '年份', '是否是', '闰年', 'try', 'datetime', 'datetime', 'pyear', '29', 'return', 'true', 'except', 'valueerror', 'return', 'false', 'def', 'datediffindays', 'date1', 'date2', '获取', '两个', '日期', '相差', '天数', '如果', 'date1', '大于', 'date2', '返回', '正数', '否则', '返回', '负数', 'minusobj', 'minustwodate', 'date1', 'date2', 'try', 'return', 'minusobj', 'days', 'except', 'return', 'nonedef', 'datediffinseconds', 'date1', 'date2', '获取', '两个', '日期', '相差', '秒数', 'minusobj', 'minustwodate', 'date1', 'date2', 'try', 'return', 'minusobj', 'days', '24', '3600', 'minusobj', 'seconds', 'except', 'return', 'nonedef', 'getweekofdate', 'pdate', '获取', '日期', '对应', '输入', '一个', '日期', '返回', '一个', '数字', '范围', '其中', '代表', '周日', 'pdateelements', 'getdateelements', 'pdate', 'weekday', 'int', 'pdateelements', 'tm', 'wday', 'if', 'weekday', 'weekday', 'return', 'weekdayif', '__', 'name', '__', '__', 'main', '__', '一些', '测试代码', 'print', 'judgedateformat', '2013', '04', '01', 'print', 'judgedateformat', '2013', '04', '01', '21', '22', '33', 'print', 'judgedateformat', '2013', '04', '31', '21', '22', '33', 'print', 'judgedateformat', '2013', 'xx', 'print', '--', 'print', 'datetime', 'datetime', 'strptime', '2013', '04', '01', '-%', '-%', 'print', 'elements', 'print', 'getdateelements', '2013', '04', '01', '21', '22', '33', 'print', 'minus', 'print', 'minustwodate', '2013', '03', '05', '2012', '03', '07', 'days', 'print', 'datediffinseconds', '2013', '03', '07', '12', '22', '00', '2013', '03', '07', '10', '22', '00', 'print', 'type', 'getcurrentdate', 'print', 'getcurrentdatetime', 'print', 'datediffinseconds', 'getcurrentdatetime', '2013', '06', '17', '14', '00', '00', 'print', 'getcurrenthour', 'print', 'dateaddindays', '2013', '04', '05', 'print', 'getdatetonumber', '2013', '04', '05', 'print', 'getdatetonumber', '2013', '04', '05', '22', '11', '33', 'print', 'getweekofdate', '2013', '10', '01', '转载', '注明', '来源', 'http', 'crazyant', 'net', '1309', 'html']","[[-0.21856519 -0.08933492  0.26347068  0.08270295  0.26790683 -0.39303702
  -0.08320488  0.440403   -0.07670929 -0.15575841 -0.02394329 -0.38563097
  -0.14035667  0.50580814  0.15844032 -0.119998   -0.10935397 -0.00307474
  -0.04490011 -0.52770216 -0.07501805  0.25030422 -0.06180824 -0.22975333
   0.04311492 -0.43621909 -0.27931396  0.00527899 -0.24119376 -0.07648275
   0.13979637 -0.01894826  0.04221624 -0.12009014 -0.18421403  0.29058511
  -0.21234443 -0.28604486  0.07485037 -0.6945625  -0.13328995 -0.59189696
  -0.09536018 -0.00226691 -0.10823901 -0.24831074 -0.19798175  0.29683891
  -0.19294063  0.48912184  0.12664853 -0.2415068  -0.13006785 -0.14521029
  -0.06353302  0.35724527  0.11104799 -0.12381504  0.10565837 -0.16804904
   0.11350881  0.23262231  0.00419074  0.08042923 -0.36820361  0.06162535
   0.06481923 -0.0628864  -0.30792442  0.41054368  0.06128685 -0.14765066
   0.3542393  -0.30916111  0.54348973  0.30189746  0.09852449 -0.1630593
  -0.30934552 -0.07050475  0.03524938  0.08727357 -0.14673525  0.38540416
  -0.29140614  0.18432652 -0.26797881  0.44679357  0.46844482  0.15708533
   0.20264238  0.11894188  0.3407886   0.1599971   0.19779184  0.31573759
   0.15287167 -0.32477058 -0.0470159  -0.11683056]]"
1319,python执行shell的两种方法,"有两种方法可以在Python中执行SHELL程序，方法一是使用Python的commands包，方法二则是使用subprocess包，这两个包均是Python现有的内置模块。使用python内置commands模块执行shellcommands对Python的os.popen()进行了封装，使用SHELL命令字符串作为其参数，返回命令的结果数据以及命令执行的状态；该命令目前已经废弃，被subprocess所替代；# coding=utf-8'''Created on 2013年11月22日@author: crazyant.net'''import commandsimport pprintdef cmd_exe(cmd_String):    print ""will exe cmd,cmd:""+cmd_String    return commands.getstatusoutput(cmd_String)if __name__==""__main__"":    pprint.pprint(cmd_exe(""ls -la""))使用python最新的subprocess模块执行shellPython目前已经废弃了os.system，os.spawn*，os.popen*，popen2.*，commands.*来执行其他语言的命令，subprocesss是被推荐的方法；subprocess允许你能创建很多子进程，创建的时候能指定子进程和子进程的输入、输出、错误输出管道，执行后能获取输出结果和执行状态。# coding=utf-8'''Created on 2013年11月22日@author: crazyant.net'''import shleximport datetimeimport subprocessimport timedef execute_command(cmdstring, cwd=None, timeout=None, shell=False):    """"""执行一个SHELL命令            封装了subprocess的Popen方法, 支持超时判断，支持读取stdout和stderr           参数:        cwd: 运行命令时更改路径，如果被设定，子进程会直接先更改当前路径到cwd        timeout: 超时时间，秒，支持小数，精度0.1秒        shell: 是否通过shell运行    Returns: return_code    Raises:  Exception: 执行超时    """"""    if shell:        cmdstring_list = cmdstring    else:        cmdstring_list = shlex.split(cmdstring)    if timeout:        end_time = datetime.datetime.now() + datetime.timedelta(seconds=timeout)        #没有指定标准输出和错误输出的管道，因此会打印到屏幕上；    sub = subprocess.Popen(cmdstring_list, cwd=cwd, stdin=subprocess.PIPE,shell=shell,bufsize=4096)        #subprocess.poll()方法：检查子进程是否结束了，如果结束了，设定并返回码，放在subprocess.returncode变量中     while sub.poll() is None:        time.sleep(0.1)        if timeout:            if end_time <= datetime.datetime.now():                raise Exception(""Timeout：%s""%cmdstring)                return str(sub.returncode)if __name__==""__main__"":    print execute_command(""ls"")也可以在Popen中指定stdin和stdout为一个变量，这样就能直接接收该输出变量值。总结在python中执行SHELL有时候也是很必须的，比如使用Python的线程机制启动不同的shell进程，目前subprocess是Python官方推荐的方法，其支持的功能也是最多的，推荐大家使用。转载请注明来源：http://crazyant.net/1319.html","['python', '执行', 'shell', '两种', '方法', '两种', '方法', '可以', 'python', '执行', 'shell', '程序', '方法', '一是', '使用', 'python', 'commands', '方法', '二则', '使用', 'subprocess', '两个', '包均', 'python', '现有', '内置', '模块', '使用', 'python', '内置', 'commands', '模块', '执行', 'shellcommands', 'python', 'os', 'popen', '进行', '封装', '使用', 'shell', '命令', '字符串', '作为', '参数', '返回', '命令', '结果', '数据', '以及', '命令', '执行', '状态', '命令', '目前', '已经', '废弃', 'subprocess', '替代', 'coding', 'utf', 'created', 'on', '2013', '11', '22', 'author', 'crazyant', 'net', 'import', 'commandsimport', 'pprintdef', 'cmd', 'exe', 'cmd', 'string', 'print', 'will', 'exe', 'cmd', 'cmd', 'cmd', 'string', 'return', 'commands', 'getstatusoutput', 'cmd', 'string', 'if', '__', 'name', '__', '__', 'main', '__', 'pprint', 'pprint', 'cmd', 'exe', 'ls', 'la', '使用', 'python', '最新', 'subprocess', '模块', '执行', 'shellpython', '目前', '已经', '废弃', 'os', 'system', 'os', 'spawn', 'os', 'popen', 'popen2', 'commands', '执行', '其他', '语言', '命令', 'subprocesss', '推荐', '方法', 'subprocess', '允许', '创建', '很多', '进程', '创建', '时候', '指定', '进程', '和子', '进程', '输入', '输出', '错误', '输出', '管道', '执行', '后能', '获取', '输出', '结果', '执行', '状态', 'coding', 'utf', 'created', 'on', '2013', '11', '22', 'author', 'crazyant', 'net', 'import', 'shleximport', 'datetimeimport', 'subprocessimport', 'timedef', 'execute', 'command', 'cmdstring', 'cwd', 'none', 'timeout', 'none', 'shell', 'false', '执行', '一个', 'shell', '命令', '封装', 'subprocess', 'popen', '方法', '支持', '超时', '判断', '支持', '读取', 'stdout', 'stderr', '参数', 'cwd', '运行', '命令', '更改', '路径', '如果', '设定', '进程', '直接', '更改', '当前', '路径', 'cwd', 'timeout', '超时', '时间', '支持', '小数', '精度', '0.1', 'shell', '是否', '通过', 'shell', '运行', 'returns', 'return', 'code', 'raises', 'exception', '执行', '超时', 'if', 'shell', 'cmdstring', 'list', 'cmdstring', 'else', 'cmdstring', 'list', 'shlex', 'split', 'cmdstring', 'if', 'timeout', 'end', 'time', 'datetime', 'datetime', 'now', 'datetime', 'timedelta', 'seconds', 'timeout', '没有', '指定', '标准', '输出', '错误', '输出', '管道', '因此', '打印', '屏幕', 'sub', 'subprocess', 'popen', 'cmdstring', 'list', 'cwd', 'cwd', 'stdin', 'subprocess', 'pipe', 'shell', 'shell', 'bufsize', '4096', 'subprocess', 'poll', '方法', '检查', '进程', '是否', '结束', '如果', '结束', '设定', '返回', '放在', 'subprocess', 'returncode', '变量', 'while', 'sub', 'poll', 'is', 'none', 'time', 'sleep', '0.1', 'if', 'timeout', 'if', 'end', 'time', 'datetime', 'datetime', 'now', 'raise', 'exception', 'timeout', 'cmdstring', 'return', 'str', 'sub', 'returncode', 'if', '__', 'name', '__', '__', 'main', '__', 'print', 'execute', 'command', 'ls', '可以', 'popen', '指定', 'stdin', 'stdout', '一个', '变量', '这样', '直接', '接收', '输出', '变量值', '总结', 'python', '执行', 'shell', '有时候', '必须', '比如', '使用', 'python', '线程', '机制', '启动', '不同', 'shell', '进程', '目前', 'subprocess', 'python', '官方', '推荐', '方法', '支持', '功能', '推荐', '大家', '使用', '转载', '注明', '来源', 'http', 'crazyant', 'net', '1319', 'html']","[[-0.21389691 -0.12924086  0.2203191   0.12975188  0.27297727 -0.35477374
  -0.13293406  0.47180884 -0.04702586 -0.09725491 -0.04288465 -0.35224849
  -0.17701884  0.53881978  0.15119495 -0.11138944 -0.13372125  0.01762883
  -0.06755786 -0.50267652 -0.03514429  0.2426119  -0.02666288 -0.17697662
   0.07846835 -0.47339558 -0.2864795   0.04443093 -0.23880532 -0.06957244
   0.18104947  0.00843484  0.0241992  -0.14782666 -0.16514876  0.32059249
  -0.19727133 -0.25826712  0.09523993 -0.7109001  -0.14351386 -0.57231649
  -0.05866106 -0.00635006 -0.12856697 -0.20683192 -0.21159706  0.36241233
  -0.15810288  0.43891651  0.16254576 -0.27177908 -0.11978666 -0.16865177
   0.00416023  0.3847687   0.16904473 -0.09235244  0.12208453 -0.15321289
   0.09792555  0.24808491  0.02838021  0.09632553 -0.38028696  0.03373243
   0.03579996 -0.02705822 -0.29527505  0.41700776  0.0975929  -0.17562149
   0.37664375 -0.31255272  0.56189429  0.238393    0.1349414  -0.14046336
  -0.31827795 -0.1185303  -0.02349576  0.03804197 -0.1235926   0.35551204
  -0.3286437   0.18860336 -0.27303107  0.42300428  0.46891607  0.13137551
   0.24181205  0.10736812  0.338279    0.18034392  0.19557293  0.34678709
   0.13549436 -0.29007469 -0.04831534 -0.12304766]]"
1321,Python访问MySQL封装的常用类,"python访问mysql比较简单，细节请参考我的另一篇文章：链接自己平时也就用到两个mysql函数：查询和更新，下面是自己常用的函数的封装，大家拷贝过去直接可以使用。文件名：DBUtil.py# -*- encoding:utf8 -*-'''@author: crazyant.net@version: 2013-10-22封装的mysql常用函数'''import MySQLdbclass DB():    def __init__(self, DB_HOST, DB_PORT, DB_USER, DB_PWD, DB_NAME):        self.DB_HOST = DB_HOST        self.DB_PORT = DB_PORT        self.DB_USER = DB_USER        self.DB_PWD = DB_PWD        self.DB_NAME = DB_NAME                self.conn = self.getConnection()    def getConnection(self):        return MySQLdb.Connect(                           host=self.DB_HOST, #设置MYSQL地址                           port=self.DB_PORT, #设置端口号                           user=self.DB_USER, #设置用户名                           passwd=self.DB_PWD, #设置密码                           db=self.DB_NAME, #数据库名                           charset='utf8' #设置编码                           )    def query(self, sqlString):        cursor=self.conn.cursor()        cursor.execute(sqlString)        returnData=cursor.fetchall()        cursor.close()        self.conn.close()        return returnData        def update(self, sqlString):        cursor=self.conn.cursor()        cursor.execute(sqlString)        self.conn.commit()        cursor.close()        self.conn.close()if __name__==""__main__"":    db=DB('127.0.0.1',3306,'root','','wordpress')    print db.query(""show tables;"")使用方法为文件下面的main函数，使用query执行select语句并获取结果；或者使用update进行insert、delete等操作。  ","['python', '访问', 'mysql', '封装', '常用', 'python', '访问', 'mysql', '比较简单', '细节', '参考', '一篇', '文章', '链接', '自己', '平时', '就用到', '两个', 'mysql', '函数', '查询', '更新', '下面', '自己', '常用', '函数', '封装', '大家', '拷贝', '过去', '直接', '可以', '使用', '文件名', 'dbutil', 'py', 'encoding', 'utf8', 'author', 'crazyant', 'net', 'version', '2013', '10', '22', '封装', 'mysql', '常用', '函数', 'import', 'mysqldbclass', 'db', 'def', '__', 'init', '__', 'self', 'db', 'host', 'db', 'port', 'db', 'user', 'db', 'pwd', 'db', 'name', 'self', 'db', 'host', 'db', 'host', 'self', 'db', 'port', 'db', 'port', 'self', 'db', 'user', 'db', 'user', 'self', 'db', 'pwd', 'db', 'pwd', 'self', 'db', 'name', 'db', 'name', 'self', 'conn', 'self', 'getconnection', 'def', 'getconnection', 'self', 'return', 'mysqldb', 'connect', 'host', 'self', 'db', 'host', '设置', 'mysql', '地址', 'port', 'self', 'db', 'port', '设置', '端口号', 'user', 'self', 'db', 'user', '设置', '用户名', 'passwd', 'self', 'db', 'pwd', '设置', '密码', 'db', 'self', 'db', 'name', '数据库', 'charset', 'utf8', '设置', '编码', 'def', 'query', 'self', 'sqlstring', 'cursor', 'self', 'conn', 'cursor', 'cursor', 'execute', 'sqlstring', 'returndata', 'cursor', 'fetchall', 'cursor', 'close', 'self', 'conn', 'close', 'return', 'returndata', 'def', 'update', 'self', 'sqlstring', 'cursor', 'self', 'conn', 'cursor', 'cursor', 'execute', 'sqlstring', 'self', 'conn', 'commit', 'cursor', 'close', 'self', 'conn', 'close', 'if', '__', 'name', '__', '__', 'main', '__', 'db', 'db', '127.0', '0.1', '3306', 'root', 'wordpress', 'print', 'db', 'query', 'show', 'tables', '使用', '方法', '文件', '下面', 'main', '函数', '使用', 'query', '执行', 'select', '语句', '获取', '结果', '或者', '使用', 'update', '进行', 'insert', 'delete', '操作']","[[-0.1288457  -0.14718637  0.24179978  0.04897358  0.30795923 -0.44329718
  -0.0639889   0.52394461 -0.16462108 -0.27240168  0.00164034 -0.43680598
  -0.24931246  0.51473139  0.19232576 -0.11783588 -0.1164911   0.05961452
  -0.02714517 -0.70922052 -0.19719648  0.29469067 -0.03326209 -0.4043297
   0.02969442 -0.41737616 -0.33070964 -0.04113398 -0.36366258 -0.08601212
   0.12682751 -0.05384572  0.14903289 -0.19972783 -0.31355857  0.3277722
  -0.39434471 -0.38906989  0.06931142 -0.73884797 -0.11241584 -0.68551458
  -0.1334666   0.15197018 -0.06682535 -0.34562793 -0.09041298  0.17313714
  -0.209441    0.64008793  0.12694694 -0.32973973 -0.20070018 -0.04137054
  -0.13139268  0.43993727  0.03840367 -0.16392184  0.19400886 -0.28929382
   0.22902362  0.21942615  0.04325205  0.16283603 -0.44395376  0.12797772
   0.05694061 -0.08862015 -0.48818646  0.45199939 -0.00332237 -0.08438834
   0.38454478 -0.36422241  0.65250543  0.36535869 -0.04147178 -0.1281373
  -0.50701318  0.07101717  0.11858339  0.15409502 -0.29363385  0.43872936
  -0.28264344  0.1888999  -0.28270516  0.48373591  0.54929147  0.12139606
   0.15910061  0.07486135  0.35160668  0.20611999  0.24009197  0.31987579
   0.26417119 -0.34036867 -0.19142768 -0.17514236]]"
1326,[织梦DEDE迁移]读取织梦MySQL生成所有文章链接,"广告：本人承接迁移织梦到wordpress的业务.本文阐述了从织梦的Mysql数据库读取数据表，生成所有文章链接的方法。本文中使用了封装了Mysql常用函数的一个模块DBUtil，代码见链接1、确认链接的组成结构这个信息记录在dede的分类表dede_arctype的namerule字段中；执行SQL语句：SELECT namerule  FROM dede_arctype;会看到返回结果都是一个值（一般都没有修改）：{typedir}/{Y}/{M}{D}/{aid}.html这意思是，链接由以下字段组成：{typedir}：类型的目录，来源于dede_arctype的typedir字段；{Y}{M}{D}：文章发布的时间，来源于dede_archives表的pubdate字段；{aid}：文章ID，来源于dede_archives的ID字段；2、读取Mysql，拼凑URL大致过程：读取mysql的dede_arctype表和dede_archives，得到所有链接信息（包括文章ID、类型名称、类型目录、标题、发布日期、自定义文件名）对于每一个链接，根据第1步骤的介绍装备链接；至此已经拿到了所有的链接ID、链接标题和链接URL。# -*- encoding:utf8 -*-from common import DBUtilimport pprintimport datetimedbUtil = DBUtil.DB('127.0.0.1',3306,'root','','oiayafnq_lwqn')site_home_url = ""http://crazyant.net""class Link():    def __init__(self, p_linkid, p_title, p_linkurl):        self.linkid=p_linkid        self.title=p_title        self.linkurl=p_linkurl    def __str__(self):        strv=""%s\n%s\n%s\n""%(self.linkid,self.title,self.linkurl)        return strvclass DedeLinks():    def __init__(self):        self.allLinks=[]    def getDbArticlesInfo(self):        '''                        获取数据库中链接的信息以及对应的分类        '''        rs = dbUtil.query('''                    SELECT                         dede_archives.id,dede_arctype.typename,dede_arctype.typedir,typeid,title,pubdate,filename                    FROM                         dede_archives,dede_arctype                     WHERE dede_archives.typeid=dede_arctype.id;                ''')        return rs    def equipLink(self, typedir, urldate, filename, linkid):        '''                        根据分类目录、发布文章日期、自定义连接名（可以为空），链接ID，拼接成一个URL        '''        article_date=str(datetime.date.fromtimestamp(urldate)).replace(""-"","""")        #print filename        link_dir = ""%s/%s/%s""%(typedir,article_date[:4],article_date[4:])        if filename.strip()!="""":            link = ""%s/%s.html""%(link_dir,filename)        else:            link = ""%s/%s.html""%(link_dir,linkid)        link = link.replace(""{cmspath}"",site_home_url)        return link    def getAllDedeLinks(self):        rs = self.getDbArticlesInfo()        for row in rs:            (linkid,typename,typedir,typeid,title,pubdate,filename) = row            linkurl =self.equipLink(typedir, pubdate, filename, linkid)            linkNode = Link(linkid, title, linkurl)            self.allLinks.append(linkNode)    def process(self):        self.getAllDedeLinks()if __name__==""__main__"":    dlinks = DedeLinks()    dlinks.process()    for linkNode in dlinks.allLinks:        print linkNode其他模块可以访问该模块，采用dlinks.allLinks来访问所有的链接，其中的每个列表元素均包括链接ID、链接标题和链接URL。转载请注明来源：织梦dede迁移读取织梦mysql生成所有文章链接 ","['织梦', 'dede', '迁移', '读取', '织梦', 'mysql', '生成', '所有', '文章', '链接', '广告', '本人', '承接', '迁移', '织梦到', 'wordpress', '业务', '本文', '阐述', '从织', 'mysql', '数据库', '读取数据', '生成', '所有', '文章', '链接', '方法', '本文', '使用', '封装', 'mysql', '常用', '函数', '一个', '模块', 'dbutil', '代码', '链接', '确认', '链接', '组成', '结构', '这个', '信息', '记录', 'dede', '分类', 'dede', 'arctype', 'namerule', '字段', '执行', 'sql', '语句', 'select', 'namerule', 'from', 'dede', 'arctype', '看到', '返回', '结果', '一个', '一般', '没有', '修改', 'typedir', 'aid', 'html', '意思', '链接', '以下', '组成', 'typedir', '类型', '目录', '来源于', 'dede', 'arctype', 'typedir', '字段', '文章', '发布', '时间', '来源于', 'dede', 'archives', 'pubdate', '字段', 'aid', '文章', 'id', '来源于', 'dede', 'archives', 'id', '字段', '读取', 'mysql', '拼凑', 'url', '大致', '过程', '读取', 'mysql', 'dede', 'arctype', 'dede', 'archives', '得到', '所有', '链接', '信息', '包括', '文章', 'id', '类型', '名称', '类型', '目录', '标题', '发布', '日期', '自定义', '文件名', '对于', '一个', '链接', '根据', '步骤', '介绍', '装备', '链接', '至此', '已经', '拿到', '所有', '链接', 'id', '链接', '标题', '链接', 'url', 'encoding', 'utf8', 'from', 'common', 'import', 'dbutilimport', 'pprintimport', 'datetimedbutil', 'dbutil', 'db', '127.0', '0.1', '3306', 'root', 'oiayafnq', 'lwqn', 'site', 'home', 'url', 'http', 'crazyant', 'net', 'class', 'link', 'def', '__', 'init', '__', 'self', 'linkid', 'title', 'linkurl', 'self', 'linkid', 'linkid', 'self', 'title', 'title', 'self', 'linkurl', 'linkurl', 'def', '__', 'str', '__', 'self', 'strv', 'n%', 'n%', 'self', 'linkid', 'self', 'title', 'self', 'linkurl', 'return', 'strvclass', 'dedelinks', 'def', '__', 'init', '__', 'self', 'self', 'alllinks', 'def', 'getdbarticlesinfo', 'self', '获取', '数据库', '链接', '信息', '以及', '对应', '分类', 'rs', 'dbutil', 'query', 'select', 'dede', 'archives', 'id', 'dede', 'arctype', 'typename', 'dede', 'arctype', 'typedir', 'typeid', 'title', 'pubdate', 'filename', 'from', 'dede', 'archives', 'dede', 'arctype', 'where', 'dede', 'archives', 'typeid', 'dede', 'arctype', 'id', 'return', 'rs', 'def', 'equiplink', 'self', 'typedir', 'urldate', 'filename', 'linkid', '根据', '分类目录', '发布', '文章', '日期', '自定义', '连接', '可以', '为空', '链接', 'id', '拼接', '一个', 'url', 'article', 'date', 'str', 'datetime', 'date', 'fromtimestamp', 'urldate', 'replace', 'print', 'filename', 'link', 'dir', 'typedir', 'article', 'date', 'article', 'date', 'if', 'filename', 'strip', 'link', 'html', 'link', 'dir', 'filename', 'else', 'link', 'html', 'link', 'dir', 'linkid', 'link', 'link', 'replace', 'cmspath', 'site', 'home', 'url', 'return', 'link', 'def', 'getalldedelinks', 'self', 'rs', 'self', 'getdbarticlesinfo', 'for', 'row', 'in', 'rs', 'linkid', 'typename', 'typedir', 'typeid', 'title', 'pubdate', 'filename', 'row', 'linkurl', 'self', 'equiplink', 'typedir', 'pubdate', 'filename', 'linkid', 'linknode', 'link', 'linkid', 'title', 'linkurl', 'self', 'alllinks', 'append', 'linknode', 'def', 'process', 'self', 'self', 'getalldedelinks', 'if', '__', 'name', '__', '__', 'main', '__', 'dlinks', 'dedelinks', 'dlinks', 'process', 'for', 'linknode', 'in', 'dlinks', 'alllinks', 'print', 'linknode', '其他', '模块', '可以', '访问', '模块', '采用', 'dlinks', 'alllinks', '访问', '所有', '链接', '其中', '每个', '列表', '元素', '包括', '链接', 'id', '链接', '标题', '链接', 'url', '转载', '注明', '来源', '织梦', 'dede', '迁移', '读取', '织梦', 'mysql', '生成', '所有', '文章', '链接']","[[-0.16237329 -0.12882824  0.23879633  0.09582249  0.27634495 -0.39424526
  -0.09106091  0.48154265 -0.1076387  -0.18761846 -0.02352199 -0.3943721
  -0.19625363  0.50568645  0.16224685 -0.11183986 -0.11740237  0.03474932
  -0.03748518 -0.59144979 -0.11660039  0.26163343 -0.04355429 -0.3004346
   0.03550099 -0.42551406 -0.31709512  0.00688601 -0.29270027 -0.07566792
   0.13411049 -0.00801854  0.08417918 -0.16243855 -0.24337359  0.31555168
  -0.28890676 -0.31864292  0.06704878 -0.69633598 -0.11763385 -0.61990818
  -0.09954235  0.0734637  -0.08761359 -0.28818038 -0.15752361  0.2524918
  -0.16713013  0.52929234  0.12527515 -0.28950405 -0.14076415 -0.10050126
  -0.07726338  0.40059693  0.09166468 -0.12702255  0.15075051 -0.20806123
   0.16357234  0.21440255  0.02492837  0.12642445 -0.38681268  0.08899449
   0.04248264 -0.05089409 -0.3753514   0.42529544  0.04231729 -0.12130518
   0.37293767 -0.3293699   0.58380006  0.31116141  0.05281169 -0.1449145
  -0.39071312 -0.02950814  0.04965813  0.10306507 -0.20584987  0.39372467
  -0.30536874  0.1853478  -0.27012967  0.45962211  0.51169288  0.13794859
   0.18198453  0.09166478  0.33971387  0.18245341  0.21181393  0.33229875
   0.18413235 -0.30866925 -0.09714747 -0.14390883]]"
1337,mysql根据A表更新B表的方法,"最近遇到一个需求：mysql中A表和B表都有(id, age)字段，现在想读取B表的age字段，将其update到A表对应ID的age字段中去，我直接想到了一种方案：用Python读取B表，获得{id:age}形式的数据，然后根据每个ID和age的值依次update A表。两个表分别定义和数据如下：A表定义：FieldTypeCommentidint(11) namevarchar(20) ageint(11) 数据：1,name1,02,name2,03,name3,04,name4,05,name5,0B表定义FieldTypeCommentidint(11) ageint(11) 数据：1,112,213,314,415,51python代码来实现# -*- encoding:utf8 -*-'''@author: crazyant.net读取B表的(id, age)数据，然后依次更新A表；'''from common.DBUtil import DBdbUtil = DB('127.0.0.1',3306,'root','','test')rs = dbUtil.query(""SELECT id,age FROM table_b"")for row in rs:    (idv,age)=row    print (idv,age)    update_sql=""update table_a set age='%s' where id='%s';""%(age,idv)    print update_sql    dbUtil.update(update_sql)print 'over'​其实一条SQL语句就可以搞定 看了看代码，实在是简单，于是网上搜了一下mysql能不能根据一个表更新另一个表，结果发现update本身就支持多个表更新的功能。UPDATE table_a,table_b SET table_a.age=table_b.age WHERE table_a.id=table_b.id;用python代码就显得是大炮打蚊子多次一举了。 转载请注明来源：链接","['mysql', '根据', '更新', '方法', '最近', '遇到', '一个', '需求', 'mysql', '表都', 'id', 'age', '现在', '读取', 'age', '字段', 'update', '对应', 'id', 'age', '字段', '直接', '想到', '一种', '方案', 'python', '读取', '获得', 'id', 'age', '形式', '数据', '然后', '根据', '每个', 'id', 'age', '依次', 'update', '两个', '分别', '定义', '数据', '如下', '定义', 'fieldtypecommentidint', '11', 'namevarchar', '20', 'ageint', '11', '数据', 'name1', '02', 'name2', '03', 'name3', '04', 'name4', '05', 'name5', '0b', '定义', 'fieldtypecommentidint', '11', 'ageint', '11', '数据', '112', '213', '314', '415', '51python', '代码', '实现', 'encoding', 'utf8', 'author', 'crazyant', 'net', '读取', 'id', 'age', '数据', '然后', '依次', '更新', 'from', 'common', 'dbutil', 'import', 'dbdbutil', 'db', '127.0', '0.1', '3306', 'root', 'test', 'rs', 'dbutil', 'query', 'select', 'id', 'age', 'from', 'table', 'for', 'row', 'in', 'rs', 'idv', 'age', 'row', 'print', 'idv', 'age', 'update', 'sql', 'update', 'table', 'set', 'age', 'where', 'id', 'age', 'idv', 'print', 'update', 'sql', 'dbutil', 'update', 'update', 'sql', 'print', 'over', '其实', '一条', 'sql', '语句', '可以', '搞定', '代码', '实在', '简单', '于是', '网上', '一下', 'mysql', '不能', '根据', '一个', '更新', '一个', '结果', '发现', 'update', '本身', '支持', '多个', '更新', '功能', 'update', 'table', 'table', 'set', 'table', 'age', 'table', 'age', 'where', 'table', 'id', 'table', 'id', 'python', '代码', '显得', '大炮', '蚊子', '多次', '一举', '转载', '注明', '来源', '链接']","[[-0.24480148 -0.12098866  0.26033264  0.12571703  0.33364178 -0.40234666
  -0.15683589  0.54604403 -0.05206619 -0.11794678 -0.05338762 -0.39240583
  -0.18098687  0.60574304  0.17193336 -0.10687547 -0.13108974  0.00201649
  -0.08508091 -0.57500424 -0.03495325  0.26924428 -0.0548048  -0.22560879
   0.08374891 -0.54217409 -0.3476599   0.05720766 -0.26437131 -0.07938872
   0.19771038  0.02373269 -0.00819919 -0.14274942 -0.17619954  0.36174229
  -0.21191527 -0.2883486   0.09578481 -0.81027123 -0.16112049 -0.66772229
  -0.0764798  -0.01781493 -0.14457128 -0.23587554 -0.24029321  0.40622525
  -0.205943    0.51132171  0.18122304 -0.28681743 -0.14525293 -0.18444437
  -0.01253866  0.41331458  0.18403829 -0.09549181  0.11128845 -0.15271276
   0.09821068  0.26206339  0.01194448  0.10272766 -0.40223584  0.04015932
   0.07950777 -0.04577307 -0.33112932  0.47490283  0.13061711 -0.20173511
   0.40402876 -0.36127304  0.61316159  0.28789931  0.15260595 -0.17111438
  -0.35530947 -0.13107871  0.00498473  0.07017359 -0.12039931  0.40876109
  -0.37299109  0.23531293 -0.3074049   0.48331531  0.53865639  0.16810528
   0.28946824  0.11449129  0.40543416  0.19762522  0.21312797  0.37430909
   0.12748142 -0.35589235 -0.0475276  -0.12759652]]"
1345,MySQL一条语句更新多个表的方法,"MySQL本身是支持一条update语句更新多个表的，有时候这是非常有用的一个特性。Multiple-table syntaxUPDATE [LOW_PRIORITY] [IGNORE] table_references    SET col_name1={expr1|DEFAULT} [, col_name2={expr2|DEFAULT}] ...    [WHERE where_condition]</pre>于是继续找table_references说明； table_references:    escaped_table_reference [, escaped_table_reference] ...escaped_table_reference:    table_reference  | { OJ table_reference }table_reference:    table_factor  | join_tabletable_factor:    tbl_name [[AS] alias] [index_hint]  | table_subquery [AS] alias  | ( table_references )可以看到，update的关键词可以写多个表，每个表也可以是个子查询、也可以是join语句。一个小尝试在我的另一篇文章中，我已经用到了该语法：UPDATE table_a,table_b SET table_a.age=table_b.age WHERE table_a.id=table_b.id;该语句中的table_b表也可以换成子查询、join子句，比如：UPDATE table_a,(SELECT id,age FROM table_b) AS tb SET table_a.age=tb.age WHERE table_a.id=tb.id;mysql update官方文档：http://dev.mysql.com/doc/refman/5.0/en/update.html转载请注明来源：链接","['mysql', '一条', '语句', '更新', '多个', '方法', 'mysql', '本身', '支持', '一条', 'update', '语句', '更新', '多个', '有时候', '这是', '非常', '有用', '一个', '特性', 'multiple', 'table', 'syntaxupdate', 'low', 'priority', 'ignore', 'table', 'references', 'set', 'col', 'name1', 'expr1', 'default', 'col', 'name2', 'expr2', 'default', '...', 'where', 'where', 'condition', 'pre', '于是', '继续', 'table', 'references', '说明', 'table', 'references', 'escaped', 'table', 'reference', 'escaped', 'table', 'reference', '...', 'escaped', 'table', 'reference', 'table', 'reference', 'oj', 'table', 'reference', 'table', 'reference', 'table', 'factor', 'join', 'tabletable', 'factor', 'tbl', 'name', 'as', 'alias', 'index', 'hint', 'table', 'subquery', 'as', 'alias', 'table', 'references', '可以', '看到', 'update', '关键词', '可以', '多个', '每个', '可以', '个子', '查询', '可以', 'join', '语句', '一个', '尝试', '一篇', '文章', '已经', '用到', '语法', 'update', 'table', 'table', 'set', 'table', 'age', 'table', 'age', 'where', 'table', 'id', 'table', 'id', '语句', 'table', '可以', '换成', '查询', 'join', '子句', '比如', 'update', 'table', 'select', 'id', 'age', 'from', 'table', 'as', 'tb', 'set', 'table', 'age', 'tb', 'age', 'where', 'table', 'id', 'tb', 'id', 'mysql', 'update', '官方', '文档', 'http', 'dev', 'mysql', 'com', 'doc', 'refman', '5.0', 'en', 'update', 'html', '转载', '注明', '来源', '链接']","[[-0.22532153 -0.09911034  0.24847853  0.13297694  0.30083259 -0.37661096
  -0.12872903  0.51610327 -0.06426508 -0.13334864 -0.0491422  -0.37837242
  -0.14598779  0.54777858  0.15630688 -0.09753519 -0.10778294  0.00551872
  -0.06843913 -0.54383863 -0.04996918  0.26429833 -0.07719191 -0.24872635
   0.05695348 -0.48576969 -0.34450058  0.05270283 -0.25233229 -0.0848313
   0.16033454  0.04113919 -0.01891932 -0.12110777 -0.18243834  0.35436364
  -0.21347771 -0.28055249  0.06971221 -0.74455807 -0.12639325 -0.61798473
  -0.0782737   0.00705996 -0.12453253 -0.24640685 -0.23218883  0.35968465
  -0.17989936  0.48943139  0.1375336  -0.27487504 -0.12711724 -0.16376954
  -0.03619478  0.39581064  0.14751339 -0.08876961  0.11047159 -0.14756716
   0.11585811  0.20923109  0.00925001  0.09818947 -0.3667119   0.05616653
   0.07123541 -0.03279233 -0.3169676   0.44276375  0.11409204 -0.16192736
   0.37537159 -0.34305645  0.5586568   0.30779424  0.14104146 -0.17577084
  -0.34298275 -0.11142756  0.01680538  0.08081237 -0.11896117  0.40089485
  -0.34152465  0.23175373 -0.28041687  0.46783222  0.5264062   0.17475776
   0.25108464  0.09725237  0.38438984  0.18904072  0.20021501  0.35990853
   0.11274294 -0.32952479 -0.01593529 -0.12999035]]"
1355,MySQL数据导入导出实例教程手册,"mysqldump是mysql自带的一个数据导入导出工具，其官方注释为：shell> mysqldump [options] db_name [tbl_name ...]shell> mysqldump [options] --databases db_name ...shell> mysqldump [options] --all-databases使用mysqldump命令将整个数据库导出mysqldump -h 127.0.0.1 -P 3306 -u root -p123456 crazyant --skip-lock-tables > crazyant.sql其中-h后面是主机名，-P后面是端口号，-u后面是用户名，-p后面是密码；crazyant是要导出的数据库名；由于导出过程中出现了这个错误：mysqldump: Got error: 1044: Access denied for user 'root'@'127.0.0.1' to database 'crazyant' when using LOCK TABLE所以在最后面，我加上了--skip-lock-tables这个选项，就没有错误了。mysqldump命令导出时设定不需要导出的表有时候一个数据库中有一些表我们不想导出，这时候可以使用mysqldump的--ignore-table命令来设定过滤的表，该参数的用法如下：--ignore-table=name Do not dump the specified table. To specify more than one                      table to ignore, use the directive multiple times, once                      for each table.  Each table must be specified with both                      database and table names, e.g.,                      --ignore-table=database.table.可以看出其用法： --ignore-table=database.table每次只能指定一个表，如果要指定多个表，该选项需要写多次使用实例：mysqldump -h 127.0.1.1 -P 3306 -u root -p123456 crazyant --skip-lock-tables --ignore-table=crazyant.table1 --ignore-table=crazyant.table2 --ignore-table=crazyant.table3 --ignore-table=crazyant.table4 > crazyant.sql使用mysqldump命令只导出1个表或指定表的方法也可以在mysqldump的database后面跟上要1个要导出的表，来只导出单个表。mysqldump -h 127.0.0.1 -P 3306 -u root -p123456 --skip-lock-tables crazyant  table_a >dump_table_a.sql也可以写上多个要导出的表，以空格分开它们即可：mysqldump -h 127.0.0.1 -P 3306 -u root -p123456 --skip-lock-tables crazyant table_a table_b >dump_two_tables.sql可以看出，只要用“database_name tablename1 tablename2 tablename3”的方式写出导出数据库的表即可。使用mysqldump命令只导出表结构的方法mysqldump还有一个选项能够只导出表的结构，而不导出表的内容：-d, --no-data       No row information使用实例：mysqldump --opt -d  -h 127.0.0.1 -P 3306 -u root -p123456 crazyant --skip-lock-tables使用source命令导入数据使用mysql的source命令，可以将mysqldump的导出结果直接Load到数据表里面；使用方法如下：> mysql -h 127.0.1.1 -P 3306 -u root -p123456mysql>  use crazyant;mysql> source /home/crazyant.net/mysqldump_crazyant.sql这样就完成了导入，如果是全量导入，有时候有必要使用truncate table的方式先将数据清空；总结使用MySQL自带的mysqldump和source命令，能够很方便的将数据库的数据导出，也能够将导出的数据导入到库中；mysqldump官方文档地址：http://dev.mysql.com/doc/refman/5.1/en/mysqldump.html转载请注明来源：http://crazyant.net/mysql/1355.html","['mysql', '数据', '导入', '导出', '实例教程', '手册', 'mysqldump', 'mysql', '自带', '一个', '数据', '导入', '导出', '工具', '官方', '注释', 'shell', 'mysqldump', 'options', 'db', 'name', 'tbl', 'name', '...', 'shell', 'mysqldump', 'options', '--', 'databases', 'db', 'name', '...', 'shell', 'mysqldump', 'options', '--', 'all', 'databases', '使用', 'mysqldump', '命令', '整个', '数据库', '导出', 'mysqldump', '127.0', '0.1', '3306', 'root', 'p123456', 'crazyant', '--', 'skip', 'lock', 'tables', 'crazyant', 'sql', '其中', '后面', '主机名', '后面', '端口号', '后面', '用户名', '后面', '密码', 'crazyant', '导出', '数据库', '由于', '导出', '过程', '出现', '这个', '错误', 'mysqldump', 'got', 'error', '1044', 'access', 'denied', 'for', 'user', 'root', '127.0', '0.1', 'to', 'database', 'crazyant', 'when', 'using', 'lock', 'table', '所以', '最后', '加上', '--', 'skip', 'lock', 'tables', '这个', '选项', '没有', '错误', 'mysqldump', '命令', '导出', '设定', '需要', '导出', '有时候', '一个', '数据库', '中有', '一些', '我们', '不想', '导出', '这时候', '可以', '使用', 'mysqldump', '--', 'ignore', 'table', '命令', '设定', '过滤', '参数', '用法', '如下', '--', 'ignore', 'table', 'name', 'do', 'not', 'dump', 'the', 'specified', 'table', 'to', 'specify', 'more', 'than', 'one', 'table', 'to', 'ignore', 'use', 'the', 'directive', 'multiple', 'times', 'once', 'for', 'each', 'table', 'each', 'table', 'must', 'be', 'specified', 'with', 'both', 'database', 'and', 'table', 'names', '--', 'ignore', 'table', 'database', 'table', '可以', '看出', '用法', '--', 'ignore', 'table', 'database', 'table', '每次', '只能', '指定', '一个', '如果', '指定', '多个', '选项', '需要', '多次', '使用', '实例', 'mysqldump', '127.0', '1.1', '3306', 'root', 'p123456', 'crazyant', '--', 'skip', 'lock', 'tables', '--', 'ignore', 'table', 'crazyant', 'table1', '--', 'ignore', 'table', 'crazyant', 'table2', '--', 'ignore', 'table', 'crazyant', 'table3', '--', 'ignore', 'table', 'crazyant', 'table4', 'crazyant', 'sql', '使用', 'mysqldump', '命令', '导出', '个表', '指定', '方法', '可以', 'mysqldump', 'database', '后面', '跟上', '导出', '导出', '单个', 'mysqldump', '127.0', '0.1', '3306', 'root', 'p123456', '--', 'skip', 'lock', 'tables', 'crazyant', 'table', 'dump', 'table', 'sql', '可以', '多个', '导出', '空格', '分开', '它们', '即可', 'mysqldump', '127.0', '0.1', '3306', 'root', 'p123456', '--', 'skip', 'lock', 'tables', 'crazyant', 'table', 'table', 'dump', 'two', 'tables', 'sql', '可以', '看出', '只要', 'database', 'name', 'tablename1', 'tablename2', 'tablename3', '方式', '写出', '导出', '数据库', '即可', '使用', 'mysqldump', '命令', '导出', '结构', '方法', 'mysqldump', '还有', '一个', '选项', '能够', '导出', '结构', '导出', '内容', '--', 'no', 'data', 'no', 'row', 'information', '使用', '实例', 'mysqldump', '--', 'opt', '127.0', '0.1', '3306', 'root', 'p123456', 'crazyant', '--', 'skip', 'lock', 'tables', '使用', 'source', '命令', '导入', '数据', '使用', 'mysql', 'source', '命令', '可以', 'mysqldump', '导出', '结果', '直接', 'load', '数据表', '里面', '使用', '方法', '如下', 'mysql', '127.0', '1.1', '3306', 'root', 'p123456mysql', 'use', 'crazyant', 'mysql', 'source', 'home', 'crazyant', 'net', 'mysqldump', 'crazyant', 'sql', '这样', '完成', '导入', '如果', '全量', '导入', '有时候', '必要', '使用', 'truncate', 'table', '方式', '数据', '清空', '总结', '使用', 'mysql', '自带', 'mysqldump', 'source', '命令', '能够', '方便', '数据库', '数据', '导出', '能够', '导出', '数据', '导入到', '库中', 'mysqldump', '官方', '文档', '地址', 'http', 'dev', 'mysql', 'com', 'doc', 'refman', '5.1', 'en', 'mysqldump', 'html', '转载', '注明', '来源', 'http', 'crazyant', 'net', 'mysql', '1355', 'html']","[[-0.24499539 -0.09889085  0.24573074  0.18446841  0.21785675 -0.390619
  -0.09443919  0.49096104 -0.04659952 -0.11890027 -0.05468709 -0.38307591
  -0.12174153  0.52320415  0.11593878 -0.1397869  -0.10224172  0.01628286
  -0.02493448 -0.44061665 -0.01370639  0.25259441 -0.09661424 -0.20683713
   0.03772052 -0.4677502  -0.31413143  0.04122384 -0.21310235 -0.09085148
   0.15366303  0.07042897  0.01099275 -0.11095382 -0.19347755  0.34190068
  -0.1626984  -0.26802617  0.0640906  -0.6658747  -0.10079409 -0.54996029
  -0.03744406 -0.03721387 -0.10910121 -0.23952002 -0.27979807  0.39139026
  -0.08207212  0.42475273  0.1045538  -0.27301212 -0.05300753 -0.20801615
  -0.04136483  0.3873392   0.15246287 -0.09624853  0.13217246 -0.16124387
   0.13010853  0.22101472  0.00290038  0.05844258 -0.34962024  0.06478593
   0.01934238  0.00257445 -0.25740245  0.41976031  0.07210978 -0.16465602
   0.38537281 -0.31862731  0.56912648  0.31124662  0.2019122  -0.21051857
  -0.24179434 -0.14634694 -0.04689422  0.07245613 -0.13122884  0.40246675
  -0.34378593  0.18485948 -0.27750098  0.47720013  0.51782153  0.17056166
   0.20898077  0.11177411  0.323295    0.15834003  0.19399794  0.41620675
   0.09680241 -0.26956903  0.08539256 -0.11455174]]"
1372,chrome自动刷新网页插件：Auto Refresh Plus,Hadoop执行进度日志是在网页上能查看的，为了想要查看最新的进展，经常需要对页面刷新看到最新的数据，于是我一直就是F5刷新啊刷新，今天想到应该有现成的插件能够使用。在chrome应用商店里面搜索refresh，看到了这么个扩展程序：Auto Refresh Plus使用方法：设定刷新时间间隔，点start按钮后，自动按时间刷新网页；设定一下刷新时间，然后点Start，网页会一直按时间进行刷新，非常好用。转载请注明来源：http://crazyant.net/?p=1372,"['chrome', '自动', '刷新', '网页', '插件', 'auto', 'refresh', 'plus', 'hadoop', '执行', '进度', '日志', '网页', '上能', '查看', '为了', '想要', '查看', '最新', '进展', '经常', '需要', '页面', '刷新', '看到', '最新', '数据', '于是', '一直', '就是', 'f5', '刷新', '刷新', '今天', '想到', '应该', '现成', '插件', '能够', '使用', 'chrome', '应用', '商店', '里面', '搜索', 'refresh', '看到', '这么', '扩展', '程序', 'auto', 'refresh', 'plus', '使用', '方法', '设定', '刷新', '时间', '间隔', 'start', '按钮', '自动', '时间', '刷新', '网页', '设定', '一下', '刷新', '时间', '然后', 'start', '网页', '一直', '时间', '进行', '刷新', '非常', '好用', '转载', '注明', '来源', 'http', 'crazyant', 'net', '1372']","[[-0.24736909 -0.11981853  0.21863282  0.2015104   0.23425911 -0.34444949
  -0.14426765  0.46340928 -0.01310451 -0.03332134 -0.07161304 -0.34181869
  -0.14310385  0.54452984  0.12254939 -0.11826312 -0.13600661 -0.00083969
  -0.05731963 -0.39891485  0.03038274  0.23973828 -0.0330219  -0.10968221
   0.0745423  -0.48666007 -0.28446209  0.07839362 -0.18608022 -0.06474469
   0.21531835  0.06831704 -0.00908907 -0.11934455 -0.12913669  0.33156778
  -0.12190352 -0.20905247  0.09400613 -0.68149628 -0.12754545 -0.52161233
  -0.02951124 -0.07153386 -0.14108021 -0.1655763  -0.2916681   0.44051134
  -0.09914115  0.35087117  0.1454981  -0.26249933 -0.05525608 -0.23948817
   0.0415589   0.38265725  0.2149782  -0.06349957  0.10352636 -0.09051013
   0.07142993  0.25061704  0.0153731   0.07297394 -0.35002463  0.00705214
   0.01018519  0.01234934 -0.20763392  0.41034876  0.10259173 -0.20946334
   0.38794128 -0.30753731  0.54243275  0.19916228  0.23649883 -0.16597518
  -0.21867364 -0.21140765 -0.09670979  0.00606361 -0.07774069  0.34227881
  -0.36365053  0.17611732 -0.27246001  0.42383998  0.46295829  0.13846978
   0.25068634  0.11793688  0.32056202  0.16475891  0.18042994  0.39292496
   0.0814481  -0.25163405  0.06410175 -0.08595063]]"
1390,Python内置函数map、reduce、filter在文本处理中的应用,"文件是由很多行组成的，这些行组成一个列表，python提供了处理列表很有用的三个函数：map、reduce、filter。因此在文本处理中，可以使用这三个函数达到代码的更加精简清晰。这里的map、reduce是python的内置函数，跟hadoop的map、reduce函数没有关系，不过使用的目的有点类似，map函数做预处理、reduce函数一般做聚合。map、reduce、filter在文本处理中的使用下面是一个文本文件的内容，第1列是ID，第4列是权重，我们的目标是获取所有ID是奇数的行，将这些行的权重翻倍，最后返回权重值的总和。     ID键值权重1name1value1112name2value2123name3value3134name4value4145name5value5156name6value6167name7value7178name8value8189name9value91910name10value1020使用filter、map、reduce函数的代码如下；#coding=utf8'''Created on 2013-12-15@author: www.crazyant.net'''import pprintdef read_file(file_path):    '''            读取文件的每一行，按\t分割后返回字段列表；    '''    with open(file_path,""r"") as fp:        for line in fp:            fields=line[:-1].split(""\t"")            yield fields    fp.close()def is_even_lines(fields):    '''            判断该行是否第一列的数字为偶数；    '''    return int(fields[0])%2==0def double_weights(fields):    '''            将每一行的权重这一字段的值翻倍    '''    fields[-1]=int(fields[-1])*2    return fieldsdef sum_weights(sum_value, fields):    '''            累加数字x到数字sum_value上面；            返回新的sum_value值；    '''    sum_value+=int(fields[-1])    return sum_valueif __name__==""__main__"":    #读取文件中的所有行    file_lines=[x for x in read_file(""test_data"")]    print '文件中原始的行：'    pprint.pprint(file_lines)        print '----'        #过滤掉ID为偶数的行    odd_lines=filter(is_even_lines,file_lines)    print '过滤掉ID为偶数的行：'    pprint.pprint(odd_lines)        print '----'        #将每行的权重值翻倍    double_weights_lines=map(double_weights,odd_lines)    print '将每行的权重值翻倍：'    pprint.pprint(double_weights_lines)        print '----'        #计算所有的权重值的和    #由于传给sum函数的每个元素都是一个列表，所以需要先提供累加的初始值，这里指定为0    sum_val=reduce(sum_weights, double_weights_lines, 0)    print '计算每行权重值的综合：'    print sum_val运行结果：文件中原始的行：[['1', 'name1', 'value1', '11'], ['2', 'name2', 'value2', '12'], ['3', 'name3', 'value3', '13'], ['4', 'name4', 'value4', '14'], ['5', 'name5', 'value5', '15'], ['6', 'name6', 'value6', '16'], ['7', 'name7', 'value7', '17'], ['8', 'name8', 'value8', '18'], ['9', 'name9', 'value9', '19'], ['10', 'name10', 'value10', '20']]----过滤掉ID为偶数的行：[['2', 'name2', 'value2', '12'], ['4', 'name4', 'value4', '14'], ['6', 'name6', 'value6', '16'], ['8', 'name8', 'value8', '18'], ['10', 'name10', 'value10', '20']]----将每行的权重值翻倍：[['2', 'name2', 'value2', 24], ['4', 'name4', 'value4', 28], ['6', 'name6', 'value6', 32], ['8', 'name8', 'value8', 36], ['10', 'name10', 'value10', 40]]----计算每行权重值的综合：160 map、reduce、filter函数的特点filter函数：以列表为参数，返回满足条件的元素组成的列表；类似于SQL中的where a=1map函数：以列表为参数，对每个元素做处理，返回这些处理后元素组成的列表；类似于sql中的select a*2reduce函数：以列表为参数，对列表进行累计、汇总、平均等聚合函数；类似于sql中的select sum(a),average(b)这些函数官方的解释map(function, iterable, ...)Apply function to every item of iterable and return a list of the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. If one iterable is shorter than another it is assumed to be extended with None items. If function is None, the identity function is assumed; if there are multiple arguments, map() returns a list consisting of tuples containing the corresponding items from all iterables (a kind of transpose operation). The iterable arguments may be a sequence or any iterable object; the result is always a list.reduce(function, iterable[, initializer])Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value. For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5). The left argument, x, is the accumulated value and the right argument, y, is the update value from the iterable. If the optional initializer is present, it is placed before the items of the iterable in the calculation, and serves as a default when the iterable is empty. If initializer is not given and iterable contains only one item, the first item is returned. Roughly equivalent to:def reduce(function, iterable, initializer=None):it = iter(iterable)if initializer is None:try:initializer = next(it)except StopIteration:raise TypeError('reduce() of empty sequence with no initial value')accum_value = initializerfor x in it:accum_value = function(accum_value, x)return accum_value​filter(function, iterable)Construct a list from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.Note that filter(function, iterable) is equivalent to [item for item in iterable if function(item)] if function is not None and [item for item in iterable if item] if function is None.See itertools.ifilter() and itertools.ifilterfalse() for iterator versions of this function, including a variation that filters for elements where the function returns false.参考资料：http://docs.python.org/2/library/functions.htmlhttp://www.oschina.net/code/snippet_111708_16145转载请注明来源： http://crazyant.net/1390.html","['python', '内置', '函数', 'map', 'reduce', 'filter', '文本处理', '应用', '文件', '很多', '组成', '这些', '组成', '一个', '列表', 'python', '提供', '处理', '列表', '有用', '三个', '函数', 'map', 'reduce', 'filter', '因此', '文本处理', '可以', '使用', '三个', '函数', '达到', '代码', '更加', '精简', '清晰', '这里', 'map', 'reduce', 'python', '内置', '函数', 'hadoop', 'map', 'reduce', '函数', '没有', '关系', '不过', '使用', '目的', '有点', '类似', 'map', '函数', '预处理', 'reduce', '函数', '一般', '聚合', 'map', 'reduce', 'filter', '文本处理', '使用', '下面', '一个', '文本文件', '内容', '列是', 'id', '列是', '权重', '我们', '目标', '获取', '所有', 'id', '奇数', '这些', '权重', '翻倍', '最后', '返回', '权重', '总和', 'id', '键值', '权重', '1name1value1112name2value2123name3value3134name4value4145name5value5156name6value6167name7value7178name8value8189name9value91910name10value1020', '使用', 'filter', 'map', 'reduce', '函数', '代码', '如下', 'coding', 'utf8', 'created', 'on', '2013', '12', '15', 'author', 'www', 'crazyant', 'net', 'import', 'pprintdef', 'read', 'file', 'file', 'path', '读取', '文件', '一行', '分割', '返回', '列表', 'with', 'open', 'file', 'path', 'as', 'fp', 'for', 'line', 'in', 'fp', 'fields', 'line', 'split', 'yield', 'fields', 'fp', 'close', 'def', 'is', 'even', 'lines', 'fields', '判断', '该行', '是否', '第一列', '数字', '偶数', 'return', 'int', 'fields', '0def', 'double', 'weights', 'fields', '一行', '权重', '这一字', '翻倍', 'fields', 'int', 'fields', 'return', 'fieldsdef', 'sum', 'weights', 'sum', 'value', 'fields', '累加', '数字', '数字', 'sum', 'value', '上面', '返回', 'sum', 'value', 'sum', 'value', 'int', 'fields', 'return', 'sum', 'valueif', '__', 'name', '__', '__', 'main', '__', '读取', '文件', '所有', 'file', 'lines', 'for', 'in', 'read', 'file', 'test', 'data', 'print', '文件', '原始', 'pprint', 'pprint', 'file', 'lines', 'print', '----', '过滤', 'id', '偶数', 'odd', 'lines', 'filter', 'is', 'even', 'lines', 'file', 'lines', 'print', '过滤', 'id', '偶数', 'pprint', 'pprint', 'odd', 'lines', 'print', '----', '每行', '权重', '翻倍', 'double', 'weights', 'lines', 'map', 'double', 'weights', 'odd', 'lines', 'print', '每行', '权重', '翻倍', 'pprint', 'pprint', 'double', 'weights', 'lines', 'print', '----', '计算', '所有', '权重', '由于', '传给', 'sum', '函数', '每个', '元素', '一个', '列表', '所以', '需要', '提供', '累加', '初始值', '这里', '指定', 'sum', 'val', 'reduce', 'sum', 'weights', 'double', 'weights', 'lines', 'print', '计算', '每行', '权重', '综合', 'print', 'sum', 'val', '运行', '结果', '文件', '原始', 'name1', 'value1', '11', 'name2', 'value2', '12', 'name3', 'value3', '13', 'name4', 'value4', '14', 'name5', 'value5', '15', 'name6', 'value6', '16', 'name7', 'value7', '17', 'name8', 'value8', '18', 'name9', 'value9', '19', '10', 'name10', 'value10', '20', '----', '过滤', 'id', '偶数', 'name2', 'value2', '12', 'name4', 'value4', '14', 'name6', 'value6', '16', 'name8', 'value8', '18', '10', 'name10', 'value10', '20', '----', '每行', '权重', '翻倍', 'name2', 'value2', '24', 'name4', 'value4', '28', 'name6', 'value6', '32', 'name8', 'value8', '36', '10', 'name10', 'value10', '40', '----', '计算', '每行', '权重', '综合', '160', 'map', 'reduce', 'filter', '函数', '特点', 'filter', '函数', '列表', '参数', '返回', '满足条件', '元素', '组成', '列表', '类似', 'sql', 'where', '1map', '函数', '列表', '参数', '每个', '元素', '处理', '返回', '这些', '处理', '元素', '组成', '列表', '类似', 'sql', 'select', '2reduce', '函数', '列表', '参数', '列表', '进行', '累计', '汇总', '平均', '聚合', '函数', '类似', 'sql', 'select', 'sum', 'average', '这些', '函数', '官方', '解释', 'map', 'function', 'iterable', '...', 'apply', 'function', 'to', 'every', 'item', 'of', 'iterable', 'and', 'return', 'list', 'of', 'the', 'results', 'if', 'additional', 'iterable', 'arguments', 'are', 'passed', 'function', 'must', 'take', 'that', 'many', 'arguments', 'and', 'is', 'applied', 'to', 'the', 'items', 'from', 'all', 'iterables', 'in', 'parallel', 'if', 'one', 'iterable', 'is', 'shorter', 'than', 'another', 'it', 'is', 'assumed', 'to', 'be', 'extended', 'with', 'none', 'items', 'if', 'function', 'is', 'none', 'the', 'identity', 'function', 'is', 'assumed', 'if', 'there', 'are', 'multiple', 'arguments', 'map', 'returns', 'list', 'consisting', 'of', 'tuples', 'containing', 'the', 'corresponding', 'items', 'from', 'all', 'iterables', 'kind', 'of', 'transpose', 'operation', 'the', 'iterable', 'arguments', 'may', 'be', 'sequence', 'or', 'any', 'iterable', 'object', 'the', 'result', 'is', 'always', 'list', 'reduce', 'function', 'iterable', 'initializer', 'apply', 'function', 'of', 'two', 'arguments', 'cumulatively', 'to', 'the', 'items', 'of', 'iterable', 'from', 'left', 'to', 'right', 'so', 'as', 'to', 'reduce', 'the', 'iterable', 'to', 'single', 'value', 'for', 'example', 'reduce', 'lambda', 'calculates', 'the', 'left', 'argument', 'is', 'the', 'accumulated', 'value', 'and', 'the', 'right', 'argument', 'is', 'the', 'update', 'value', 'from', 'the', 'iterable', 'if', 'the', 'optional', 'initializer', 'is', 'present', 'it', 'is', 'placed', 'before', 'the', 'items', 'of', 'the', 'iterable', 'in', 'the', 'calculation', 'and', 'serves', 'as', 'default', 'when', 'the', 'iterable', 'is', 'empty', 'if', 'initializer', 'is', 'not', 'given', 'and', 'iterable', 'contains', 'only', 'one', 'item', 'the', 'first', 'item', 'is', 'returned', 'roughly', 'equivalent', 'to', 'def', 'reduce', 'function', 'iterable', 'initializer', 'none', 'it', 'iter', 'iterable', 'if', 'initializer', 'is', 'none', 'try', 'initializer', 'next', 'it', 'except', 'stopiteration', 'raise', 'typeerror', 'reduce', 'of', 'empty', 'sequence', 'with', 'no', 'initial', 'value', 'accum', 'value', 'initializerfor', 'in', 'it', 'accum', 'value', 'function', 'accum', 'value', 'return', 'accum', 'value', 'filter', 'function', 'iterable', 'construct', 'list', 'from', 'those', 'elements', 'of', 'iterable', 'for', 'which', 'function', 'returns', 'true', 'iterable', 'may', 'be', 'either', 'sequence', 'container', 'which', 'supports', 'iteration', 'or', 'an', 'iterator', 'if', 'iterable', 'is', 'string', 'or', 'tuple', 'the', 'result', 'also', 'has', 'that', 'type', 'otherwise', 'it', 'is', 'always', 'list', 'if', 'function', 'is', 'none', 'the', 'identity', 'function', 'is', 'assumed', 'that', 'is', 'all', 'elements', 'of', 'iterable', 'that', 'are', 'false', 'are', 'removed', 'note', 'that', 'filter', 'function', 'iterable', 'is', 'equivalent', 'to', 'item', 'for', 'item', 'in', 'iterable', 'if', 'function', 'item', 'if', 'function', 'is', 'not', 'none', 'and', 'item', 'for', 'item', 'in', 'iterable', 'if', 'item', 'if', 'function', 'is', 'none', 'see', 'itertools', 'ifilter', 'and', 'itertools', 'ifilterfalse', 'for', 'iterator', 'versions', 'of', 'this', 'function', 'including', 'variation', 'that', 'filters', 'for', 'elements', 'where', 'the', 'function', 'returns', 'false', '参考资料', 'http', 'docs', 'python', 'org', 'library', 'functions', 'htmlhttp', 'www', 'oschina', 'net', 'code', 'snippet', '111708', '16145', '转载', '注明', '来源', 'http', 'crazyant', 'net', '1390', 'html']","[[-0.20585372 -0.09488301  0.28066419  0.0809742   0.29040621 -0.38639634
  -0.08578635  0.45345279 -0.10361371 -0.19667522 -0.009773   -0.40135188
  -0.13923954  0.4964462   0.18025391 -0.09920358 -0.11091494 -0.01171151
  -0.05475194 -0.60030236 -0.11060442  0.26584127 -0.0759316  -0.29183648
   0.03298325 -0.42723526 -0.31935461  0.00325752 -0.27608642 -0.09208501
   0.10747739 -0.03321277  0.02675368 -0.12119838 -0.21104764  0.3092531
  -0.25900632 -0.32805989  0.05625595 -0.71293009 -0.12844334 -0.6248256
  -0.10836938  0.04513439 -0.10130997 -0.29474549 -0.18017787  0.26377927
  -0.21994714  0.54502176  0.12195781 -0.26512241 -0.15686707 -0.11987972
  -0.07978019  0.37131223  0.07868532 -0.12421134  0.12473951 -0.19344671
   0.12630416  0.19953817  0.0029306   0.09223689 -0.3713884   0.09003914
   0.07422781 -0.05482695 -0.35909383  0.42929477  0.07674696 -0.11805276
   0.36184447 -0.31982839  0.54305437  0.34026904  0.07054494 -0.17284296
  -0.37485532 -0.03631743  0.08034512  0.09746254 -0.16486033  0.40723239
  -0.28749001  0.21450196 -0.27964178  0.4674541   0.49777053  0.18318439
   0.18554807  0.09958106  0.36480429  0.18263854  0.20527489  0.31313386
   0.15255419 -0.3491903  -0.06901049 -0.15739661]]"
1397,Python批量重命名文件的方法,"用到了os的两个接口：1、列出文件夹中的所有文件（也包含目录）os.listdir(path)Return a list containing the names of the entries in the directory given by path. The list is in arbitrary order. It does not include the special entries '.' and '..' even if they are present in the directory.Availability: Unix, Windows.Changed in version 2.3: On Windows NT/2k/XP and Unix, if path is a Unicode object, the result will be a list of Unicode objects. Undecodable filenames will still be returned as string objects2、对文件进行重命名os.rename(src, dst)Rename the file or directory src to dst. If dst is a directory, OSError will be raised. On Unix, if dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail on some Unix flavors if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement). On Windows, if dst already exists, OSError will be raised even if it is a file; there may be no way to implement an atomic rename when dst names an existing file.Availability: Unix, Windowsimport osdirpath=""D:/workbench/crazyant.net/myfiles""for fname in os.listdir(dirpath):    newfname=fname[3:]    newfpath=""%s/%s""%(dirpath,newfname)    oldfpath=""%s/%s""%(dirpath,fname)        os.rename(oldfpath, newfpath)其实就是用os.listdir读取里面所有的文件，然后用os.rename进行文件重命名即可实现。python的os模块官方介绍：http://docs.python.org/2/library/os.html转载请注明来源：http://crazyant.net/1397.html","['python', '批量', '重命名', '文件', '方法', '用到', 'os', '两个', '接口', '列出', '文件夹', '所有', '文件', '包含', '目录', 'os', 'listdir', 'path', 'return', 'list', 'containing', 'the', 'names', 'of', 'the', 'entries', 'in', 'the', 'directory', 'given', 'by', 'path', 'the', 'list', 'is', 'in', 'arbitrary', 'order', 'it', 'does', 'not', 'include', 'the', 'special', 'entries', 'and', '..', 'even', 'if', 'they', 'are', 'present', 'in', 'the', 'directory', 'availability', 'unix', 'windows', 'changed', 'in', 'version', '2.3', 'on', 'windows', 'nt', '2k', 'xp', 'and', 'unix', 'if', 'path', 'is', 'unicode', 'object', 'the', 'result', 'will', 'be', 'list', 'of', 'unicode', 'objects', 'undecodable', 'filenames', 'will', 'still', 'be', 'returned', 'as', 'string', 'objects2', '文件', '进行', '重命名', 'os', 'rename', 'src', 'dst', 'rename', 'the', 'file', 'or', 'directory', 'src', 'to', 'dst', 'if', 'dst', 'is', 'directory', 'oserror', 'will', 'be', 'raised', 'on', 'unix', 'if', 'dst', 'exists', 'and', 'is', 'file', 'it', 'will', 'be', 'replaced', 'silently', 'if', 'the', 'user', 'has', 'permission', 'the', 'operation', 'may', 'fail', 'on', 'some', 'unix', 'flavors', 'if', 'src', 'and', 'dst', 'are', 'on', 'different', 'filesystems', 'if', 'successful', 'the', 'renaming', 'will', 'be', 'an', 'atomic', 'operation', 'this', 'is', 'posix', 'requirement', 'on', 'windows', 'if', 'dst', 'already', 'exists', 'oserror', 'will', 'be', 'raised', 'even', 'if', 'it', 'is', 'file', 'there', 'may', 'be', 'no', 'way', 'to', 'implement', 'an', 'atomic', 'rename', 'when', 'dst', 'names', 'an', 'existing', 'file', 'availability', 'unix', 'windowsimport', 'osdirpath', 'workbench', 'crazyant', 'net', 'myfiles', 'for', 'fname', 'in', 'os', 'listdir', 'dirpath', 'newfname', 'fname', 'newfpath', 'dirpath', 'newfname', 'oldfpath', 'dirpath', 'fname', 'os', 'rename', 'oldfpath', 'newfpath', '其实', '就是', 'os', 'listdir', '读取', '里面', '所有', '文件', '然后', 'os', 'rename', '进行', '文件', '重命名', '即可', '实现', 'python', 'os', '模块', '官方', '介绍', 'http', 'docs', 'python', 'org', 'library', 'os', 'html', '转载', '注明', '来源', 'http', 'crazyant', 'net', '1397', 'html']","[[-2.12994390e-01 -9.41926757e-02  2.89486391e-01  1.28877549e-01
   2.44751714e-01 -3.89051551e-01 -5.63528384e-02  4.46413518e-01
  -1.21176169e-01 -2.18742034e-01 -1.93752131e-02 -4.19770639e-01
  -1.06157740e-01  4.56204681e-01  1.56328953e-01 -1.05729211e-01
  -9.71646876e-02 -1.37910033e-02 -1.72647369e-02 -5.67785212e-01
  -1.19262452e-01  2.83447794e-01 -1.07987045e-01 -3.23635905e-01
   1.80506502e-03 -3.82489325e-01 -3.35991758e-01  5.80044855e-04
  -2.67483736e-01 -1.05042388e-01  7.29985261e-02  3.64485596e-03
   2.29582357e-02 -1.04705829e-01 -2.39466128e-01  3.25472737e-01
  -2.66238043e-01 -3.40036930e-01  2.87044941e-02 -6.62910835e-01
  -8.45084452e-02 -5.90464947e-01 -9.68313801e-02  5.70634050e-02
  -8.32436967e-02 -3.21996666e-01 -2.13228159e-01  2.46123968e-01
  -1.59503739e-01  5.25136944e-01  7.41488333e-02 -2.75024490e-01
  -1.10985611e-01 -1.26094992e-01 -1.09694693e-01  3.68856082e-01
   4.76915720e-02 -1.24373407e-01  1.41850593e-01 -1.89406033e-01
   1.58152164e-01  1.64099495e-01  2.19347421e-03  7.88267263e-02
  -3.50657215e-01  1.12971081e-01  4.53118727e-02 -1.74610015e-02
  -3.40081650e-01  4.19003496e-01  5.37184062e-02 -8.29198134e-02
   3.68143843e-01 -3.09265747e-01  5.29212468e-01  3.78750569e-01
   9.99806971e-02 -2.04583978e-01 -3.53081542e-01 -4.51632924e-02
   7.01288124e-02  1.02003397e-01 -1.76720859e-01  4.28047801e-01
  -2.82585094e-01  2.02035334e-01 -2.71759605e-01  5.00645109e-01
   5.17816986e-01  2.04745206e-01  1.39368489e-01  1.01087844e-01
   3.48847311e-01  1.81712926e-01  2.04220130e-01  3.42995954e-01
   1.38165346e-01 -3.20543292e-01  1.14675732e-02 -1.64009773e-01]]"
1404,HIVE的几个使用技巧,"1.小表在前，大表在后，如果表很小就用mapjoin写JOIN的时候，将小表写在JOIN的前面，这样HIVE就会将小表载入内存，然后扫描大表。如果表足够的小，就使用map join。2.设定map的并发数，保证一次map结束；根据输入数据量估计reduce的tasks数目，并根据运行中间数据情况修正；http://superlxw1234.iteye.com/blog/15828803.临时表能提升计算速度在处理海量数据时我们通常会对很多大表进行操作，基于Hadoop现在的局限性，不能像分布式并行数据库那样很好地在分布式环境利用数据局部性，Hadoop对于大表只能全表扫描并筛选数据，而每一次对大表的扫描都是苦不堪言的。（最后知道真相的我眼泪掉下来。。。）所以我们会用到在编码中经常用到的重构技巧，提取公共变量，在Hive中，就是创建临时表。4.Union all在数据对齐中的使用；不支持 top level，以及各个select字段名称、属性必须严格一致5.Hive支持跨数据库查询比如database arch的table1和database algo的table2 进行joinA: 可以，只要有用户有这两张表的select权限即可，用户需要用“database.table”的方式来指定数据库下的表6.Hive支持本地执行模式当数据量小的时候，本地执行比提交到集群上执行效率提升很大set hive.exec.mode.local.auto=true(默认false)当一个job满足如下条件才能真正使用本地模式：job的输入数据大小必须小于参数hive.exec.mode.local.auto.inputbytes.max(默认值128MB)job的map处理的文件数大于参数hive.exec.mode.local.auto.input.files.max(默认值4)job的reduce数必须为0或者1，不管是用户设置的还是系统推测出来的用参数hive.mapred.local.mem(默认0)来设置local mode下mapper和reducer task jvm heap size7.NULL和数字相加的问题sum(t.shop_gmvcount + t.gmvcount_new + t.auc_shop_gmvcount + t.spu_gmv_cnt) gmv_cnt，这样的统计结果，当t.t.shop_gmvcount为null时，即使后面的t.gmvcount_new 不为null，那么总计的结果这个计算仍然是null;修改的方法是：采用sum(coalesce(t.shop_gmvcount,cast(0 as bigint)) + coalesce(t.gmvcount_new,cast(0 as bigint))这样的方式，coalesce函数类似于oracle数据库里面的nvl。参考文章：Hive 在多维统计分析中的应用 & 技巧总结http://my.oschina.net/leejun2005/blog/121945hive本地mrhttp://superlxw1234.iteye.com/blog/1703546hive优化之------控制hive任务中的map数和reduce数http://superlxw1234.iteye.com/blog/1582880Hive Tipshttp://blog.hesey.net/2012/04/hive-tips.html本文收集自网络；转载请注明来源：http://crazyant.net/1404.html","['hive', '几个', '使用', '技巧', '小表', '大表', '如果', '很小', 'mapjoin', 'join', '时候', '小表写', 'join', '前面', '这样', 'hive', '小表', '载入', '内存', '然后', '扫描', '大表', '如果', '足够', '使用', 'map', 'join', '设定', 'map', '并发', '保证', '一次', 'map', '结束', '根据', '输入', '数据量', '估计', 'reduce', 'tasks', '数目', '根据', '运行', '中间', '数据', '情况', '修正', 'http', 'superlxw1234', 'iteye', 'com', 'blog', '15828803', '临时', '表能', '提升', '计算速度', '处理', '海量', '数据', '我们', '通常', '很多', '大表', '进行', '操作', '基于', 'hadoop', '现在', '局限性', '不能', '分布式', '并行', '数据库', '那样', '分布式', '环境', '利用', '数据', '局部性', 'hadoop', '对于', '大表', '只能', '全表', '扫描', '筛选', '数据', '一次', '对大表', '扫描', '苦不堪言', '最后', '知道', '真相', '眼泪', '掉下来', '所以', '我们', '用到', '编码', '经常', '用到', '重构', '技巧', '提取', '公共', '变量', 'hive', '就是', '创建', '临时', 'union', 'all', '数据', '对齐', '使用', '支持', 'top', 'level', '以及', '各个', 'select', '字段名', '属性', '必须', '严格', '一致', 'hive', '支持', '数据库', '查询', '比如', 'database', 'arch', 'table1', 'database', 'algo', 'table2', '进行', 'joina', '可以', '只要', '用户', '两张', 'select', '权限', '即可', '用户', '需要', 'database', 'table', '方式', '指定', '数据库', 'hive', '支持', '本地', '执行', '模式', '数据量', '时候', '本地', '执行', '提交', '集群', '执行', '效率', '提升', '很大', 'set', 'hive', 'exec', 'mode', 'local', 'auto', 'true', '默认', 'false', '一个', 'job', '满足', '如下', '条件', '才能', '真正', '使用', '本地', '模式', 'job', '输入', '数据', '大小', '必须', '小于', '参数', 'hive', 'exec', 'mode', 'local', 'auto', 'inputbytes', 'max', '默认值', '128mb', 'job', 'map', '处理', '文件', '大于', '参数', 'hive', 'exec', 'mode', 'local', 'auto', 'input', 'files', 'max', '默认值', 'job', 'reduce', '必须', '或者', '不管', '用户', '设置', '还是', '系统', '推测', '出来', '参数', 'hive', 'mapred', 'local', 'mem', '默认', '设置', 'local', 'mode', 'mapper', 'reducer', 'task', 'jvm', 'heap', 'size7', 'null', '数字', '相加', '问题', 'sum', 'shop', 'gmvcount', 'gmvcount', 'new', 'auc', 'shop', 'gmvcount', 'spu', 'gmv', 'cnt', 'gmv', 'cnt', '这样', '统计', '结果', 'shop', 'gmvcount', 'null', '即使', '后面', 'gmvcount', 'new', '不为', 'null', '那么', '总计', '结果', '这个', '计算', '仍然', 'null', '修改', '方法', '采用', 'sum', 'coalesce', 'shop', 'gmvcount', 'cast', 'as', 'bigint', 'coalesce', 'gmvcount', 'new', 'cast', 'as', 'bigint', '这样', '方式', 'coalesce', '函数', '类似', 'oracle', '数据库', '里面', 'nvl', '参考', '文章', 'hive', '多维', '统计分析', '应用', '技巧', '总结', 'http', 'my', 'oschina', 'net', 'leejun2005', 'blog', '121945hive', '本地', 'mrhttp', 'superlxw1234', 'iteye', 'com', 'blog', '1703546hive', '优化', '------', '控制', 'hive', '任务', 'map', 'reduce', 'http', 'superlxw1234', 'iteye', 'com', 'blog', '1582880hive', 'tipshttp', 'blog', 'hesey', 'net', '2012', '04', 'hive', 'tips', 'html', '本文', '收集', '网络', '转载', '注明', '来源', 'http', 'crazyant', 'net', '1404', 'html']","[[-0.2543251  -0.11529983  0.2335058   0.19955674  0.24958322 -0.35764779
  -0.14507165  0.48204419 -0.02726278 -0.05278365 -0.0673795  -0.35567102
  -0.13656361  0.56121152  0.13444959 -0.12068592 -0.13446709 -0.00496201
  -0.06329294 -0.43850851  0.01345191  0.25541589 -0.04080232 -0.13527563
   0.06966596 -0.49313379 -0.30034037  0.07506024 -0.19626658 -0.06780522
   0.21045288  0.05657471 -0.01026723 -0.11905317 -0.13801505  0.34624296
  -0.1459853  -0.23291556  0.09585199 -0.71131629 -0.13008662 -0.54275948
  -0.04079198 -0.05719201 -0.14521499 -0.18529287 -0.28805292  0.43316508
  -0.11696566  0.38260943  0.14494096 -0.27813582 -0.07481044 -0.23337302
   0.03227757  0.40022624  0.20747744 -0.07315303  0.10930616 -0.10467
   0.07929516  0.24966723  0.01552309  0.07532856 -0.36619793  0.01747133
   0.01965676  0.00608081 -0.23519972  0.42603167  0.10195951 -0.20304811
   0.39623277 -0.31969813  0.54972396  0.22423131  0.22451702 -0.16926048
  -0.24779559 -0.1938063  -0.07643292  0.01345559 -0.08430965  0.36475347
  -0.35760588  0.19122679 -0.2797858   0.44001467  0.48196212  0.15252968
   0.25602883  0.11811052  0.33633414  0.17606265  0.1880657   0.39338934
   0.08916587 -0.26939298  0.053517   -0.09672743]]"
1409,[转]Hive中对group结果分组取limit N值的实现,"转载引言：数据处理中遇到了取全国各个省份的效果数据先排序后limit 100的需求，HIVE自带功能无法实现，网上搜了下该文章的方法直接拷贝过来就能实现。将其中的代码复制过来后可以用maven打成Jar包，然后在hive中即可使用。观察代码可以看出，由于是取各个分组的top数据，因此可以先用distribute和sort进行数据分区并排序，在各个reduce节点上，由于运行的是单个JVM虚拟机，所以在JAVA类中使用static变量即可进行整个处理过程的数据共享。于是comparedColumn字符串数组被用来记录每一组的key值，同时用rowNum来记录每一组值的最大标记。最终使用数字标记和所需的数字比较，取出group后的limit数目。背景假设有一个学生各门课的成绩的表单，应用hive取出每科成绩前100名的学生成绩。这个就是典型在分组取Top N的需求。解决思路对于取出每科成绩前100名的学生成绩，针对学生成绩表，根据学科，成绩做order by排序,然后对排序后的成绩，执行自定义函数row_number(),必须带一个或者多个列参数，如ROW_NUMBER(col1, ....)，它的作用是按指定的列进行分组生成行序列。在ROW_NUMBER(a,b) 时，若两条记录的a，b列相同，则行序列+1，否则重新计数。只要返回row_number()返回值小于100的的成绩记录，就可以返回每个单科成绩前一百的学生。解决过程成绩表结构create table score_table (  subject        string,  student       string,  score           int)partitioned by (date string)  如果要查询2012年每科成绩前100的学生成绩，sql如下create temporary function row_number as 'com.blue.hive.udf.RowNumber';select subject,score,student from    (select subject,score,student from score where dt='2012'  order by subject,socre desc) order_scorewhere row_number(subject) <= 100;com.blue.hive.udf.RowNumber是自定义函数，函数的作用是按指定的列进行分组生成行序列。这里根据每个科目的所有成绩，生成序列，序列值从1开始自增。假设成绩表的记录如下:物理  80 张三数学  100 李一物理  90  张二数学  90  李二物理  100 张一数学  80  李三.....经过order by全局排序后，记录如下物理  100 张一物理  90  张二物理  80 张三.....数学  100 李一数学  90  李二数学  80  李三....接着执行row_number函数，返回值如下科目  成绩 学生   row_number物理  100 张一      1物理  90  张二      2物理  80  张三      3.....数学  100 李一      1数学  90  李二      2数学  80  李三      3....因为hive是基于MAPREADUCE的，必须保证row_number执行是在reducer中执行。上述的语句保证了成绩表的记录，按照科目和成绩做了全局排序，然后在reducer端执行row_number函数，如果在map端执行了row_number，那么结果将是错误的。要查看row_number函数在map端还是reducer端执行，可以查看hive的执行计划:create temporary function row_number as 'com.blue.hive.udf.RowNumber';explain select subject,score,student from    (select subject,score,student from score where dt='2012'  order by subject,socre desc) order_scorewhere row_number(subject) <= 100; explain不会执行mapreduce计算，只会显示执行计划。只要row_number函数在reducer端执行，除了使用order by全局排序配合，也可以使用distribute by + sort by。distribute by可以让相同科目的成绩记录发送到同一个reducer,而sort by可以在reducer端对记录做排序。而使用order by全局排序，只有一个reducer，未能充分利用资源，相比之下，distribute by + sort by在这里更有性能优势，可以在多个reducer做排序，再做row_number的计算。sql如下：create temporary function row_number as 'com.blue.hive.udf.RowNumber';select subject,score,student from    (select subject,score,student from score where dt='2012'  distribute by subject sort by subject asc, socre desc) order_scorewhere row_number(subject) <= 100;如果成绩有学院字段college，要找出学院里,单科成绩前一百的学生，解决方法如下:create temporary function row_number as 'com.blue.hive.udf.RowNumber';explain select college,subject,score,student from    (select college,subject,score,student from score where dt='2012'  order by college asc,subject asc,socre desc) order_scorewhere row_number(college,subject) <= 100;如果成绩有学院字段college，要找出学院里,总成绩前一百的学生，解决方法如下:create temporary function row_number as 'com.blue.hive.udf.RowNumber';explain select college,totalscore,student from    (select college,student,sum(score) as totalscore from score where dt='2012'  group by college,student  order by college asc,totalscore desc) order_scorewhere row_number(college) <= 100;row_number的源码函数row_number(),必须带一个或者多个列参数，如ROW_NUMBER(col1, ....)，它的作用是按指定的列进行分组生成行序列。在ROW_NUMBER(a,b) 时，若两条记录的a，b列相同，则行序列+1，否则重新计数。package com.blue.hive.udf;import org.apache.hadoop.hive.ql.exec.UDF;public class RowNumber extends UDF {private static int MAX_VALUE = 50;private static String comparedColumn[] = new String[MAX_VALUE];private static int rowNum = 1;public int evaluate(Object... args) {String columnValue[] = new String[args.length];for (int i = 0; i < args.length; i++) {columnValue[i] = args[i].toString();}if (rowNum == 1) {for (int i = 0; i < columnValue.length; i++)comparedColumn[i] = columnValue[i];}for (int i = 0; i < columnValue.length; i++) {if (!comparedColumn[i].equals(columnValue[i])) {for (int j = 0; j < columnValue.length; j++) {comparedColumn[j] = columnValue[j];}rowNum = 1;return rowNum++;}}return rowNum++;}}编译后，打包成一个jar包，如/usr/local/hive/udf/blueudf.jar然后在hive shell下使用，如下:add jar /usr/local/hive/udf/blueudf.jar;create temporary function row_number as 'com.blue.hive.udf.RowNumber';select subject,score,student from    (select subject,score,student from score where dt='2012'  order by subject,socre desc) order_scorewhere row_number(subject) <= 100;转自：http://www.cnblogs.com/ggjucheng/archive/2013/01/30/2868993.html本文地址：http://crazyant.net/1409.html","['hive', 'group', '结果', '分组', 'limit', '实现', '转载', '引言', '数据处理', '遇到', '全国', '各个', '省份', '效果', '数据', '排序', 'limit', '100', '需求', 'hive', '自带', '功能', '无法', '实现', '网上', '文章', '方法', '直接', '拷贝', '过来', '实现', '其中', '代码', '复制', '过来', '可以', 'maven', '打成', 'jar', '然后', 'hive', '即可', '使用', '观察', '代码', '可以', '看出', '由于', '各个', '分组', 'top', '数据', '因此', '可以', '先用', 'distribute', 'sort', '进行', '数据', '分区', '排序', '各个', 'reduce', '节点', '由于', '运行', '单个', 'jvm', '虚拟机', '所以', 'java', '类中', '使用', 'static', '变量', '即可', '进行', '整个', '处理过程', '数据共享', '于是', 'comparedcolumn', '字符串', '数组', '用来', '记录', '一组', 'key', '同时', 'rownum', '记录', '一组', '最大', '标记', '最终', '使用', '数字', '标记', '数字', '比较', '取出', 'group', 'limit', '数目', '背景', '假设', '一个', '学生', '各门', '成绩', '表单', '应用', 'hive', '取出', '成绩', '100', '学生', '成绩', '这个', '就是', '典型', '分组', 'top', '需求', '解决', '思路', '对于', '取出', '成绩', '100', '学生', '成绩', '针对', '学生', '成绩表', '根据', '学科', '成绩', 'order', 'by', '排序', '然后', '排序', '成绩', '执行', '自定义', '函数', 'row', 'number', '必须', '一个', '或者', '多个', '参数', 'row', 'number', 'col1', '....', '作用', '指定', '进行', '分组', '生成', '序列', 'row', 'number', '两条', '记录', '相同', '序列', '否则', '重新', '计数', '只要', '返回', 'row', 'number', '返回值', '小于', '100', '成绩', '记录', '可以', '返回', '每个', '单科', '成绩', '一百', '学生', '解决', '过程', '成绩表', '结构', 'create', 'table', 'score', 'table', 'subject', 'string', 'student', 'string', 'score', 'int', 'partitioned', 'by', 'date', 'string', '如果', '查询', '2012', '每科', '成绩', '100', '学生', '成绩', 'sql', '如下', 'create', 'temporary', 'function', 'row', 'number', 'as', 'com', 'blue', 'hive', 'udf', 'rownumber', 'select', 'subject', 'score', 'student', 'from', 'select', 'subject', 'score', 'student', 'from', 'score', 'where', 'dt', '2012', 'order', 'by', 'subject', 'socre', 'desc', 'order', 'scorewhere', 'row', 'number', 'subject', '100', 'com', 'blue', 'hive', 'udf', 'rownumber', '自定义', '函数', '函数', '作用', '指定', '进行', '分组', '生成', '序列', '这里', '根据', '每个', '科目', '所有', '成绩', '生成', '序列', '序列', '开始', '自增', '假设', '成绩表', '记录', '如下', '物理', '80', '张三', '数学', '100', '李一', '物理', '90', '张二', '数学', '90', '李二', '物理', '100', '张一', '数学', '80', '李三', '.....', '经过', 'order', 'by', '全局', '排序', '记录', '如下', '物理', '100', '张一', '物理', '90', '张二', '物理', '80', '张三', '.....', '数学', '100', '李一', '数学', '90', '李二', '数学', '80', '李三', '....', '接着', '执行', 'row', 'number', '函数', '返回值', '如下', '科目', '成绩', '学生', 'row', 'number', '物理', '100', '张一', '物理', '90', '张二', '物理', '80', '张三', '.....', '数学', '100', '李一', '数学', '90', '李二', '数学', '80', '李三', '....', '因为', 'hive', '基于', 'mapreaduce', '必须', '保证', 'row', 'number', '执行', 'reducer', '执行', '上述', '语句', '保证', '成绩表', '记录', '按照', '科目', '成绩', '全局', '排序', '然后', 'reducer', '执行', 'row', 'number', '函数', '如果', 'map', '执行', 'row', 'number', '那么', '结果', '错误', '查看', 'row', 'number', '函数', 'map', '还是', 'reducer', '执行', '可以', '查看', 'hive', '执行', '计划', 'create', 'temporary', 'function', 'row', 'number', 'as', 'com', 'blue', 'hive', 'udf', 'rownumber', 'explain', 'select', 'subject', 'score', 'student', 'from', 'select', 'subject', 'score', 'student', 'from', 'score', 'where', 'dt', '2012', 'order', 'by', 'subject', 'socre', 'desc', 'order', 'scorewhere', 'row', 'number', 'subject', '100', 'explain', '不会', '执行', 'mapreduce', '计算', '只会', '显示', '执行', '计划', '只要', 'row', 'number', '函数', 'reducer', '执行', '除了', '使用', 'order', 'by', '全局', '排序', '配合', '可以', '使用', 'distribute', 'by', 'sort', 'by', 'distribute', 'by', '可以', '相同', '科目', '成绩', '记录', '发送到', '同一个', 'reducer', 'sort', 'by', '可以', 'reducer', '记录', '排序', '使用', 'order', 'by', '全局', '排序', '只有', '一个', 'reducer', '未能', '充分利用', '资源', '相比之下', 'distribute', 'by', 'sort', 'by', '这里', '性能', '优势', '可以', '多个', 'reducer', '排序', 'row', 'number', '计算', 'sql', '如下', 'create', 'temporary', 'function', 'row', 'number', 'as', 'com', 'blue', 'hive', 'udf', 'rownumber', 'select', 'subject', 'score', 'student', 'from', 'select', 'subject', 'score', 'student', 'from', 'score', 'where', 'dt', '2012', 'distribute', 'by', 'subject', 'sort', 'by', 'subject', 'asc', 'socre', 'desc', 'order', 'scorewhere', 'row', 'number', 'subject', '100', '如果', '成绩', '学院', '字段', 'college', '找出', '学院', '单科', '成绩', '一百', '学生', '解决', '方法', '如下', 'create', 'temporary', 'function', 'row', 'number', 'as', 'com', 'blue', 'hive', 'udf', 'rownumber', 'explain', 'select', 'college', 'subject', 'score', 'student', 'from', 'select', 'college', 'subject', 'score', 'student', 'from', 'score', 'where', 'dt', '2012', 'order', 'by', 'college', 'asc', 'subject', 'asc', 'socre', 'desc', 'order', 'scorewhere', 'row', 'number', 'college', 'subject', '100', '如果', '成绩', '学院', '字段', 'college', '找出', '学院', '总成绩', '一百', '学生', '解决', '方法', '如下', 'create', 'temporary', 'function', 'row', 'number', 'as', 'com', 'blue', 'hive', 'udf', 'rownumber', 'explain', 'select', 'college', 'totalscore', 'student', 'from', 'select', 'college', 'student', 'sum', 'score', 'as', 'totalscore', 'from', 'score', 'where', 'dt', '2012', 'group', 'by', 'college', 'student', 'order', 'by', 'college', 'asc', 'totalscore', 'desc', 'order', 'scorewhere', 'row', 'number', 'college', '100', 'row', 'number', '源码', '函数', 'row', 'number', '必须', '一个', '或者', '多个', '参数', 'row', 'number', 'col1', '....', '作用', '指定', '进行', '分组', '生成', '序列', 'row', 'number', '两条', '记录', '相同', '序列', '否则', '重新', '计数', 'package', 'com', 'blue', 'hive', 'udf', 'import', 'org', 'apache', 'hadoop', 'hive', 'ql', 'exec', 'udf', 'public', 'class', 'rownumber', 'extends', 'udf', 'private', 'static', 'int', 'max', 'value', '50', 'private', 'static', 'string', 'comparedcolumn', 'new', 'string', 'max', 'value', 'private', 'static', 'int', 'rownum', 'public', 'int', 'evaluate', 'object', '...', 'args', 'string', 'columnvalue', 'new', 'string', 'args', 'length', 'for', 'int', 'args', 'length', '++', 'columnvalue', 'args', 'tostring', 'if', 'rownum', 'for', 'int', 'columnvalue', 'length', '++', 'comparedcolumn', 'columnvalue', 'for', 'int', 'columnvalue', 'length', '++', 'if', 'comparedcolumn', 'equals', 'columnvalue', 'for', 'int', 'columnvalue', 'length', '++', 'comparedcolumn', 'columnvalue', 'rownum', 'return', 'rownum', '++', 'return', 'rownum', '++', '编译', '打包', '一个', 'jar', 'usr', 'local', 'hive', 'udf', 'blueudf', 'jar', '然后', 'hive', 'shell', '使用', '如下', 'add', 'jar', 'usr', 'local', 'hive', 'udf', 'blueudf', 'jar', 'create', 'temporary', 'function', 'row', 'number', 'as', 'com', 'blue', 'hive', 'udf', 'rownumber', 'select', 'subject', 'score', 'student', 'from', 'select', 'subject', 'score', 'student', 'from', 'score', 'where', 'dt', '2012', 'order', 'by', 'subject', 'socre', 'desc', 'order', 'scorewhere', 'row', 'number', 'subject', '100', '转自', 'http', 'www', 'cnblogs', 'com', 'ggjucheng', 'archive', '2013', '01', '30', '2868993', 'html', '本文', '地址', 'http', 'crazyant', 'net', '1409', 'html']","[[-0.23439372 -0.09616555  0.24931088  0.13939893  0.28201997 -0.36001066
  -0.13113757  0.47542089 -0.05851807 -0.10925397 -0.04165114 -0.36584699
  -0.13159328  0.53777627  0.16026227 -0.10445267 -0.11918952 -0.0115545
  -0.06812324 -0.51139998 -0.03770648  0.25592742 -0.05745748 -0.19412889
   0.05610008 -0.46754562 -0.3085034   0.05002563 -0.2302899  -0.06946186
   0.16914613  0.01736975 -0.00555335 -0.11828754 -0.15478051  0.3346684
  -0.18731128 -0.26396654  0.08442695 -0.72042052 -0.13285423 -0.58066947
  -0.07452518 -0.01122591 -0.12935283 -0.22345653 -0.23776317  0.36137093
  -0.17319686  0.45299019  0.13956054 -0.2703986  -0.12128154 -0.17798034
  -0.0048863   0.38411122  0.15928577 -0.08514469  0.10434624 -0.13261129
   0.09037909  0.22460136  0.01380523  0.08487495 -0.36193863  0.03747895
   0.0530192  -0.02441454 -0.28830006  0.424779    0.10187679 -0.17223577
   0.37183505 -0.3199396   0.53465783  0.26940172  0.15031672 -0.16268115
  -0.31171992 -0.1234144  -0.00230342  0.04882845 -0.10367938  0.37795732
  -0.32936786  0.20920053 -0.278779    0.43842355  0.48460867  0.16698258
   0.24071308  0.10656387  0.35617539  0.18314968  0.19291953  0.34831865
   0.11207807 -0.31117959 -0.0134537  -0.11982891]]"
1413,《大数据时代》是一部科幻小说,虽然一直在使用HADOOP、HIVE等技术在处理T级别的数据，认为自己也属于大数据领域的人了，然而对于什么是大数据一直是模糊的概念。自己处理的是T级别数据，感觉HADOOP技术其实就是分布式计算的演变版，并不是什么新奇的事物。然而最近读的《大数据时代》一书，作者从思维、商业、风险、掌控等方面对大数据给出了自己独特的见解，其中的有些观点有些匪夷所思，然而毕竟是作者自己看法，很是新颖。1、不是随机样本，而是全体数据大数据时代的来临，一切数据将是全体数据。比如在之前我们要统计春运期间哪里的车站人最多，或者乘客流量趋势，只能通过人工的方式采样几个地区的车站，统计其人流量，然后对整体情况作出预测，而如今通过手机GPS定位，百度能够收集任何一个人所在的位置，使用最全量的位置信息绘制出所有的流动情况。这正是因为目前存储能力（廉价的磁盘）和计算能力（HADOOP等云计算技术兴起）的大幅改进所带来的变革，只要能检测到，就能对其数字化、存储，然后分析其中的规律或者预测其中蕴含的趋势。通过获取全量的数据而不是局部的采样，能够得到最全面不留任何死角的信息。得到的决策判断也就更加准确，往往能揭示出限于局部无法察觉的规律。“一叶障目不见泰山”、“不识庐山真面目，只缘身在此山中”，这些都是说人们往往由于视野、见识等限制，无法看到事情的全貌，从而会做出局限性、局部性的判断和认识。现在如果能看到整个泰山，能看到庐山全面目，那么人们看到的可能不只是山的雄伟，可能还有山的趋势、山的变迁。2、大数据对人类的威胁？作者举了一个例子，未来通过大数据能够预测到一个人会在下一周犯罪的几率有多大，然后警察提前逮捕此人甚至定罪，就因为通过出行、电话、购物、行为表现等各种信息，大数据发现其跟某种犯罪特征极为相近，判定其要犯罪的几率非常的大而得出结论。看到这里倒像是感觉作者在写一部科幻小说，未来政府可能只需要一个大数据中心，一方面通过互联网、摄像头、传感器、刷卡消费记录等各种信息收集到几乎方方面面每个人所有的数据；另一方面能够建立各种犯罪、治安、暴力事情的特征库，通过和每个人的行为特征对比，政府能够判定这个人是否将来会犯罪、是否会酒驾、是否会逃税，从而加重对这个人的监控，甚至抓起来审问“你为什么将来会偷邻居王小二家的西瓜？”而商业领域也会同样的建立每个人的消费数据、习惯、洗好等信息，有一天当你洗发水用完了要出门去买，打开门发现货到付款的快递已经到你楼下了，你是应该感到恐怖呢还是应该高兴呢。作者倒像是一个科幻小说家，构想了这么一副宏达的未来世界之后，他还对其防范措施、法律指定、反垄断等实际方案进行了阐述。信誓旦旦的提到，未来应该制定法律，应该保护人类自由选择、为行为负责的权利，而不能过分的相信大数据判定某人可能有罪的结论。很荒诞，也很有趣，能自圆其说实在是了不起。从这本书我真的感觉到了，其实要有所突出就要敢提出自己的想法，哪怕这个想法很荒诞很错误，但是只要是自己的想法，就要敢于提出。3、大数据技能的发展作者有些观点我也挺赞同的，他提到目前来说大数据领域仍在兴起阶段，因此相当一段时间内大数据的分析师、算法师等人才是极为稀缺的职位，同时大数据技能也是很快发展但是非常重要的技术。然而随着时间的发展，技术并不是门槛，因为各种数据、教程的出现，懂并且熟练掌握这种技术的人会越来越多，技术会变得越来越不值钱。而一直价值不会降低的，是数据。因为数据存放的时间即使很长，由于新的分析、挖掘想法的出现，这些旧的数据蕴含的金矿才会被一次次重复性的发现出来。联系到个人的发展，首先自己的大数据技能目前只限于简单的处理，并没有涉及到分析、挖掘内涵、发现规律等领域，要想涉足大数据领域，只会文本分析和简单处理是不够的，需要继续深入到分析领域。不只是表层的技术，而是机器学习、数据挖掘领域等探索性的技术。或者将来可以拥兵自重，以数据中间人的方式来谋生，比如数据采集、存储、整合等领域，活生生的例子是微博爬萌和同学的数据采集自游职业，能拿来买卖的是数据而不是技能。换句话说，之前的是金子，而不是挖矿技能。 总的来说，这本书让我一个自认为处于大数据领域，而其实只是边缘化的人来说，涨了一些见识，懂得了什么是大数据，大数据究竟以为着什么。为什么都在热捧大数据它到底带来了什么变化。思想上的提升才能带来现实的改变，作者毫无束缚天马行空的思想，让我感觉这确实是一个广阔的天地，能发挥的空间非常大。 转载请注明链接：http://crazyant.net/1413.html,"['数据', '时代', '一部', '科幻小说', '虽然', '一直', '使用', 'hadoop', 'hive', '技术', '处理', '级别', '数据', '认为', '自己', '属于', '数据', '领域', '然而', '对于', '什么', '数据', '一直', '模糊', '概念', '自己', '处理', '级别', '数据', '感觉', 'hadoop', '技术', '其实', '就是', '分布式计算', '演变', '不是', '什么', '新奇', '事物', '然而', '最近', '数据', '时代', '一书', '作者', '思维', '商业', '风险', '掌控', '方面', '对大', '数据', '给出', '自己', '独特', '见解', '其中', '有些', '观点', '有些', '匪夷所思', '然而', '毕竟', '作者', '自己', '看法', '新颖', '不是', '随机样本', '而是', '全体', '数据', '数据', '时代', '来临', '一切', '数据', '全体', '数据', '比如', '之前', '我们', '统计', '春运期间', '哪里', '车站', '或者', '乘客', '流量', '趋势', '只能', '通过', '人工', '方式', '采样', '几个', '地区', '车站', '统计', '人流量', '然后', '整体', '情况', '作出', '预测', '如今', '通过', '手机', 'gps', '定位', '百度', '能够', '收集', '任何', '一个', '所在', '位置', '使用', '最全', '位置', '信息', '绘制', '所有', '流动', '情况', '正是', '因为', '目前', '存储', '能力', '廉价', '磁盘', '计算能力', 'hadoop', '计算技术', '兴起', '大幅', '改进', '带来', '变革', '只要', '检测', '数字化', '存储', '然后', '分析', '其中', '规律', '或者', '预测', '其中', '蕴含', '趋势', '通过', '获取', '全量', '数据', '不是', '局部', '采样', '能够', '得到', '全面', '不留', '任何', '死角', '信息', '得到', '决策', '判断', '更加', '准确', '往往', '揭示', '限于', '局部', '无法', '察觉', '规律', '一叶障目', '不见泰山', '不识庐山真面目', '只缘身在此山中', '这些', '人们', '往往', '由于', '视野', '见识', '限制', '无法', '看到', '事情', '全貌', '从而', '做出', '局限性', '局部性', '判断', '认识', '现在', '如果', '看到', '整个', '泰山', '看到', '庐山', '全面', '那么', '人们', '看到', '可能', '只是', '雄伟', '可能', '还有', '趋势', '变迁', '数据', '人类', '威胁', '作者', '一个', '例子', '未来', '通过', '数据', '能够', '预测', '一个', '人会', '一周', '犯罪', '几率', '然后', '警察', '提前', '逮捕', '此人', '甚至', '定罪', '因为', '通过', '出行', '电话', '购物', '行为表现', '各种', '信息', '数据', '发现', '某种', '犯罪', '特征', '极为', '相近', '判定', '其要', '犯罪', '几率', '非常', '得出结论', '看到', '这里', '倒像', '感觉', '作者', '一部', '科幻小说', '未来', '政府', '可能', '需要', '一个', '数据中心', '一方面', '通过', '互联网', '摄像头', '传感器', '刷卡', '消费', '记录', '各种', '信息', '收集', '几乎', '方方面面', '每个', '所有', '数据', '另一方面', '能够', '建立', '各种', '犯罪', '治安', '暴力', '事情', '特征', '通过', '每个', '行为', '特征', '对比', '政府', '能够', '判定', '这个', '是否', '将来', '犯罪', '是否', '会酒', '是否', '逃税', '从而', '加重', '这个', '监控', '甚至', '起来', '审问', '为什么', '将来', '邻居', '王小二', '西瓜', '商业', '领域', '同样', '建立', '每个', '消费', '数据', '习惯', '洗好', '信息', '一天', '洗发水', '出门', '打开门', '发现', '货到付款', '快递', '已经', '楼下', '应该', '感到', '恐怖', '还是', '应该', '高兴', '作者', '倒像', '一个', '科幻小说', '构想', '这么', '一副', '宏达', '未来', '世界', '之后', '防范措施', '法律', '指定', '反垄断', '实际', '方案', '进行', '阐述', '信誓旦旦', '提到', '未来', '应该', '制定', '法律', '应该', '保护', '人类', '自由选择', '行为', '负责', '权利', '不能', '过分', '相信', '数据', '判定', '某人', '可能', '有罪', '结论', '荒诞', '有趣', '自圆其说', '实在', '了不起', '本书', '真的', '感觉', '其实', '有所', '突出', '就要', '提出', '自己', '想法', '哪怕', '这个', '想法', '荒诞', '错误', '但是', '只要', '自己', '想法', '就要', '敢于', '提出', '数据', '技能', '发展', '作者', '有些', '观点', '赞同', '提到', '目前', '来说', '数据', '领域', '兴起', '阶段', '因此', '相当', '一段时间', '内大', '数据', '分析师', '算法', '人才', '极为', '稀缺', '职位', '同时', '数据', '技能', '很快', '发展', '但是', '非常', '重要', '技术', '然而', '随着', '时间', '发展', '技术', '不是', '门槛', '因为', '各种', '数据', '教程', '出现', '并且', '熟练掌握', '这种', '技术', '人会', '越来越', '技术', '变得', '越来越', '不值钱', '一直', '价值', '不会', '降低', '数据', '因为', '数据', '存放', '时间', '即使', '很长', '由于', '分析', '挖掘', '想法', '出现', '这些', '数据', '蕴含', '金矿', '一次次', '重复性', '发现', '出来', '联系', '个人', '发展', '首先', '自己', '数据', '技能', '目前', '限于', '简单', '处理', '没有', '涉及', '分析', '挖掘', '内涵', '发现', '规律', '领域', '涉足', '数据', '领域', '只会', '文本', '分析', '简单', '处理', '不够', '需要', '继续', '深入', '分析', '领域', '只是', '表层', '技术', '而是', '机器', '学习', '数据挖掘', '领域', '探索性', '技术', '或者', '将来', '可以', '拥兵自重', '数据', '中间人', '方式', '谋生', '比如', '数据', '采集', '存储', '整合', '领域', '活生生', '例子', '微博', '同学', '数据', '采集', '自游', '职业', '拿来', '买卖', '数据', '不是', '技能', '换句话说', '之前', '金子', '不是', '挖矿', '技能', '总的来说', '本书', '一个', '认为', '处于', '数据', '领域', '其实', '只是', '边缘化', '来说', '一些', '见识', '懂得', '什么', '数据', '数据', '究竟', '以为', '什么', '为什么', '数据', '到底', '带来', '什么', '变化', '思想', '提升', '才能', '带来', '现实', '改变', '作者', '毫无', '束缚', '天马行空', '思想', '感觉', '确实', '一个', '广阔', '天地', '发挥', '空间', '非常', '转载', '注明', '链接', 'http', 'crazyant', 'net', '1413', 'html']","[[-0.24360472 -0.13255174  0.2037658   0.16355548  0.28201537 -0.32159062
  -0.19093328  0.46274491  0.01110749  0.00399312 -0.06471728 -0.30399018
  -0.180388    0.58192811  0.1367432  -0.09639185 -0.1493942  -0.00893135
  -0.10463287 -0.41436191  0.04850947  0.22062967  0.01482827 -0.06132127
   0.12546741 -0.53522543 -0.26603955  0.0943914  -0.18640701 -0.05117299
   0.2530471   0.03638987 -0.02507734 -0.13568846 -0.08140794  0.31520407
  -0.10578031 -0.1917416   0.11482581 -0.72861729 -0.17025493 -0.55152701
  -0.02757388 -0.08896409 -0.16696286 -0.11958438 -0.26047044  0.47307739
  -0.16249523  0.35707942  0.20741483 -0.2497687  -0.1028607  -0.23431151
   0.08420473  0.36680224  0.26067356 -0.04633457  0.08300659 -0.07172688
   0.02374362  0.29325746  0.01956903  0.08208944 -0.36541223 -0.02563623
   0.03940501 -0.01518529 -0.21239469  0.4212282   0.14629748 -0.25549019
   0.3825819  -0.30944681  0.55165349  0.1305481   0.21771262 -0.12985538
  -0.23963513 -0.22544827 -0.0965582  -0.01544189 -0.0481349   0.30403115
  -0.36858979  0.19437582 -0.27668141  0.38151917  0.43278902  0.11513556
   0.31080027  0.1174903   0.34255483  0.17398792  0.17422213  0.36325636
   0.08526229 -0.28195027 -0.0163992  -0.07101767]]"
1423,MapReduce文件切分个数计算方法,"Hadoop的MapReduce计算的第一个阶段是InputFormat处理的，先将文件进行切分，然后将每个切分传递给每个Map任务来执行，本文阐述切分个数，也就是Map任务数目的计算方法；Hadoop首先会计算每个切分的大小，然后使用”文件总大小/每个切分的大小“来决定划分的总数，如果不足一个切分的大小，则当做1个；在org.apache.hadoop.mapred.FileInputFormat中给出了计算每个划分大小的方法：  protected long computeSplitSize(long goalSize, long minSize,                                       long blockSize) {    return Math.max(minSize, Math.min(goalSize, blockSize));  }其中几个变量的解释如下：blockSize：HDFS存储的基本单元，默认为64MB或者128MB；minSize：由用户设置的最小切分大小，配置项为mapred.min.split.size；goalSize：计算公式为""文件总大小/用户设定的Map任务个数""，即用户间接期望的大小；由此可以推断出选定策略：划分大小为blockSize：blockSize小于用户期望的大小，比用户设定的最小值要大；也就是说如果用户设定的最小值太小的话，会使用block size作为划分大小；划分大小为goalSize：用户设定了Map的任务数目，那么即使算出来的划分大小比block size小也会使用，这个时候出现了两个用户设定值：最小值和期望值，hadoop会选择两者中大的那个；划分大小为minSize：如果用户期望的值，还有blocksize只都比用户设定的最小值要小，那么就会使用这个最小值；针对这几个值，用户可以根据输入数据的情况，合理的设置mapred.min.split.size和map.tasks.size来实现优化，InputSplit和blockSize相同是非常好的一种方法，因为不需要拆分block了.文章地址：http://crazyant.net/1423.html ","['mapreduce', '文件', '切分', '个数', '计算方法', 'hadoop', 'mapreduce', '计算', '第一个', '阶段', 'inputformat', '处理', '文件', '进行', '切分', '然后', '每个', '切分', '传递', '每个', 'map', '任务', '执行', '本文', '阐述', '切分', '个数', '就是', 'map', '任务', '数目', '计算方法', 'hadoop', '首先', '计算', '每个', '切分', '大小', '然后', '使用', '文件', '大小', '每个', '切分', '大小', '决定', '划分', '总数', '如果', '不足', '一个', '切分', '大小', '当做', 'org', 'apache', 'hadoop', 'mapred', 'fileinputformat', '给出', '计算', '每个', '划分', '大小', '方法', 'protected', 'long', 'computesplitsize', 'long', 'goalsize', 'long', 'minsize', 'long', 'blocksize', 'return', 'math', 'max', 'minsize', 'math', 'min', 'goalsize', 'blocksize', '其中', '几个', '变量', '解释', '如下', 'blocksize', 'hdfs', '存储', '基本', '单元', '默认', '64mb', '或者', '128mb', 'minsize', '用户', '设置', '最小', '切分', '大小', '配置', '项为', 'mapred', 'min', 'split', 'size', 'goalsize', '计算公式', '文件', '大小', '用户', '设定', 'map', '任务', '个数', '用户', '间接', '期望', '大小', '由此', '可以', '推断出', '选定', '策略', '划分', '大小', 'blocksize', 'blocksize', '小于', '用户', '期望', '大小', '用户', '设定', '最小值', '也就是说', '如果', '用户', '设定', '最小值', '太小', '的话', '使用', 'block', 'size', '作为', '划分', '大小', '划分', '大小', 'goalsize', '用户', '设定', 'map', '任务', '数目', '那么', '即使', '出来', '划分', '大小', 'block', 'size', '使用', '这个', '时候', '出现', '两个', '用户', '设定值', '最小值', '期望值', 'hadoop', '选择', '两者', '中大', '那个', '划分', '大小', 'minsize', '如果', '用户', '期望', '还有', 'blocksize', '用户', '设定', '最小值', '那么', '使用', '这个', '最小值', '针对', '几个', '用户', '可以', '根据', '输入', '数据', '情况', '合理', '设置', 'mapred', 'min', 'split', 'size', 'map', 'tasks', 'size', '实现', '优化', 'inputsplit', 'blocksize', '相同', '非常', '一种', '方法', '因为', '需要', '拆分', 'block', '文章', '地址', 'http', 'crazyant', 'net', '1423', 'html']","[[-0.26725476 -0.12986443  0.23177083  0.18972577  0.2827093  -0.35463615
  -0.17474452  0.49409322 -0.00753131 -0.0251301  -0.06664865 -0.34942847
  -0.16299931  0.60461513  0.15054488 -0.11514496 -0.15251585 -0.01120725
  -0.09688859 -0.45669482  0.03471423  0.25583477 -0.01347832 -0.09645162
   0.10662032 -0.5511541  -0.29530309  0.08595972 -0.20266001 -0.06305917
   0.24930981  0.04086092 -0.01969161 -0.13727286 -0.11280807  0.34971487
  -0.13178896 -0.22965652  0.11529999 -0.77113843 -0.16936958 -0.57438258
  -0.0381569  -0.08364462 -0.17056486 -0.15468629 -0.285444    0.4816334
  -0.15778284  0.39525872  0.19117132 -0.28260393 -0.10507349 -0.24755715
   0.06728699  0.40579857  0.24784085 -0.06646138  0.10493107 -0.09783179
   0.0528674   0.29116672  0.02090928  0.0810707  -0.39425838 -0.00366393
   0.03264028 -0.00838887 -0.24159461  0.44951852  0.12936796 -0.24298643
   0.41623867 -0.33441899  0.57468018  0.1826843   0.22793769 -0.15447139
  -0.26034439 -0.21774506 -0.08629607 -0.00538335 -0.069364    0.35227972
  -0.38000508  0.20244505 -0.29321647  0.42836825  0.48150626  0.13705116
   0.30217452  0.12702083  0.35737368  0.18860028  0.19020478  0.3967938
   0.09247228 -0.29581818  0.01095626 -0.09364438]]"
1426,Java使用lombok自动生成getter和setter方法,lombok 可帮你在编译时自动生成getter、setter等方法，所以我们无需再编写占据很大篇幅的getter/setter方法，请看下图效果，你就明白了：地址：http://www.projectlombok.org/download.html  ,"['java', '使用', 'lombok', '自动', '生成', 'getter', 'setter', '方法', 'lombok', '可帮', '编译', '自动', '生成', 'getter', 'setter', '方法', '所以', '我们', '无需', '编写', '占据', '很大', '篇幅', 'getter', 'setter', '方法', '下图', '效果', '明白', '地址', 'http', 'www', 'projectlombok', 'org', 'download', 'html']","[[-0.35471436 -0.1181172   0.31330795  0.45531109  0.17171472 -0.47941476
  -0.11918618  0.62480244 -0.08854291 -0.08075969 -0.13155858 -0.5146396
  -0.07245486  0.66649191  0.13382405 -0.20802039 -0.15029641 -0.00527604
   0.0173168  -0.44884733  0.01636661  0.40512757 -0.12940815 -0.22557316
  -0.01977163 -0.51288106 -0.42880685  0.0923381  -0.20093141 -0.09874343
   0.2546293   0.18790978  0.01273087 -0.13168845 -0.24692927  0.52854816
  -0.19767925 -0.3097777   0.082712   -0.81806149 -0.05073175 -0.55370568
  -0.03680873 -0.05218522 -0.15504418 -0.29890913 -0.49541366  0.54558968
   0.04735338  0.37683271  0.02815501 -0.43174208  0.03848229 -0.37228454
   0.02860375  0.58246659  0.22177259 -0.09101955  0.19278024 -0.1088513
   0.20152813  0.23211112  0.03481051  0.0857999  -0.43718649  0.08261122
  -0.08940454  0.1183221  -0.23960063  0.53068291 -0.00105566 -0.18281266
   0.55607297 -0.42531742  0.6579      0.37017728  0.40551641 -0.28903336
  -0.227675   -0.31736328 -0.19912381 -0.00945721 -0.13049248  0.53946253
  -0.4497824   0.19367243 -0.33400629  0.64284208  0.68551408  0.24482002
   0.19984727  0.15499414  0.36618065  0.2201995   0.24725995  0.62253244
   0.07360935 -0.20065485  0.33622912 -0.12002708]]"
1428,MySQL 查看数据库中每个表占用的空间大小,"转自：http://www.oschina.net/question/12_36731、进去指定schema 数据库（存放了其他的数据库的信息） mysql> use information_schema;Database changed2、查询所有数据的大小mysql> select concat(round(sum(DATA_LENGTH/1024/1024), 2), 'MB')    -> as data from TABLES;+-----------+| data      |+-----------+| 6674.48MB |+-----------+1 row in set (16.81 sec)​3、查看指定数据库实例的大小，比如说数据库 forexpertmysql> select concat(round(sum(DATA_LENGTH/1024/1024), 2), 'MB')    -> as data from TABLES where table_schema='forexpert';+-----------+| data      |+-----------+| 6542.30MB |+-----------+1 row in set (7.47 sec)4、查看指定数据库的表的大小，比如说数据库 forexpert 中的 member 表 ​mysql> select concat(round(sum(DATA_LENGTH/1024/1024),2),'MB') as data    -> from TABLES where table_schema='forexpert'    -> and table_name='member';+--------+| data   |+--------+| 2.52MB |+--------+1 row in set (1.88 sec)","['mysql', '查看', '数据库', '每个', '占用', '空间', '大小', '转自', 'http', 'www', 'oschina', 'net', 'question', '12', '36731', '进去', '指定', 'schema', '数据库', '存放', '其他', '数据库', '信息', 'mysql', 'use', 'information', 'schema', 'database', 'changed2', '查询', '所有', '数据', '大小', 'mysql', 'select', 'concat', 'round', 'sum', 'data', 'length', '1024', '1024', 'mb', 'as', 'data', 'from', 'tables', '+-----------+', 'data', '+-----------+', '6674.48', 'mb', '+-----------+', 'row', 'in', 'set', '16.81', 'sec', '查看', '指定', '数据库', '实例', '大小', '比如说', '数据库', 'forexpertmysql', 'select', 'concat', 'round', 'sum', 'data', 'length', '1024', '1024', 'mb', 'as', 'data', 'from', 'tables', 'where', 'table', 'schema', 'forexpert', '+-----------+', 'data', '+-----------+', '6542.30', 'mb', '+-----------+', 'row', 'in', 'set', '7.47', 'sec', '查看', '指定', '数据库', '大小', '比如说', '数据库', 'forexpert', 'member', 'mysql', 'select', 'concat', 'round', 'sum', 'data', 'length', '1024', '1024', 'mb', 'as', 'data', 'from', 'tables', 'where', 'table', 'schema', 'forexpert', 'and', 'table', 'name', 'member', '+--------+', 'data', '+--------+', '2.52', 'mb', '+--------+', 'row', 'in', 'set', '1.88', 'sec']","[[-0.22266476 -0.10573011  0.27122975  0.12863394  0.29602504 -0.40857265
  -0.10571777  0.51338273 -0.09286892 -0.1741537  -0.03677578 -0.41316033
  -0.14344236  0.54077192  0.16611061 -0.11064188 -0.10975769 -0.00693134
  -0.04354465 -0.57750314 -0.07938915  0.27979337 -0.08988307 -0.28960052
   0.0358352  -0.46805503 -0.34604281  0.03006007 -0.26347036 -0.09254718
   0.14153498  0.02220001  0.0116287  -0.12520794 -0.21238067  0.34849067
  -0.24728131 -0.31583642  0.06848449 -0.74917859 -0.11155446 -0.6348952
  -0.09078477  0.03207439 -0.11128347 -0.28530715 -0.22437827  0.32985444
  -0.18187609  0.5271624   0.12010793 -0.29420653 -0.13040696 -0.15355963
  -0.06416667  0.40814054  0.1172526  -0.11177939  0.13031187 -0.16837633
   0.14096381  0.21009375  0.00588434  0.0945981  -0.38476231  0.07757608
   0.06382378 -0.03179877 -0.34634315  0.44835524  0.08846809 -0.14435616
   0.39165633 -0.34407485  0.57278032  0.34075733  0.12235076 -0.191303
  -0.36957452 -0.07768492  0.04157668  0.09754892 -0.15858465  0.43279443
  -0.32319046  0.2205268  -0.28717946  0.49391988  0.54084067  0.18724856
   0.2186144   0.10149845  0.3826088   0.19496596  0.21125317  0.35930051
   0.13814307 -0.34430189 -0.01020027 -0.14613781]]"
1437,Hive使用TRANSFORM运行Python脚本总结,1、Python环境设置可以使用add cachearchive的方法把tar.gz添加到分布式缓存，Hive会自动解压压缩包，但是目录名是和压缩包名称一样的；add cachearchive ${env:my_workbench}/share/python2.7.tar.gz;--这样使用using 'python2.7.tar.gz/bin/python my.py' 2、一定使用distribute by或者cluster by如果不加上这两个关键词，那么数据会被分发到1个机器，如果数据量大执行会很慢；但是Hive 0.8的一个问题是，distribute by和cluster by后面只能跟1列，如果多列就会报错；如果数据量大，并且数据不能被拆分，那只能设置mapred.reduce.tasks=1；如果数据可以满足结合律，那么使用子查询，在外面聚合一下，就可以解决只能跟1列的问题；3、每个python脚本并不是执行了reduce上的所有数据；每个reducer机器会从很多maper机器上取数据，取过来之后会合并，但不一定合并成1个文件，而会是S个；因此即使设置mapred.reduce.tasks数值为1，Python程序会被启动S个进程来执行每个分片，执行完毕后再汇总成1个数据；也就是说1个reducer上，每个python脚本也会被启动N个进程处理不同的数据分片的。--这个问题查了好久，仔细分析了结果数据才发现的，多么痛的领悟；4、self join非常耗时间，尤其关联规则有运算的时候；最开始我启动的一个self join是这样的tablea a join tablea b on a.id=b.id+1 join tablea c on a.id=c.id+2这个程序在很小的数据量上运行了1个多小时，表示极度郁闷；然后我对其改进，在tablea数据表中直接增加id+1和id+2数值的两个冗余字段，然后改写为：tablea a join tablea b on a.id_1=b.id join tablea c on a.id_2=c.id运行时间有所减少，但是还是非常慢，运行了好几十分钟被我Kill掉了；真不知道Hive怎么实现这个语句的；实在没办法只好Hive中调用Transform的Python脚本，使用distribute by id进行分发，然后每个节点的每个python中运行两边扫描：第一步：以id为key，把数据全部存入词典，内存幸好没爆；第二步：扫描第一步的词典，取出每个id，直接从词典中取id-1和id-2的数据，输出；这样改进后非常快。杀鸡用牛刀，真是浪费资源，Hive为什么self join如此耗时真是不理解；本文链接：http://crazyant.net/1437.html,"['hive', '使用', 'transform', '运行', 'python', '脚本', '总结', 'python', '环境', '设置', '可以', '使用', 'add', 'cachearchive', '方法', 'tar', 'gz', '添加', '分布式', '缓存', 'hive', '自动', '解压', '压缩包', '但是', '目录名', '压缩包', '名称', '一样', 'add', 'cachearchive', 'env', 'my', 'workbench', 'share', 'python2.7', 'tar', 'gz', '--', '这样', '使用', 'using', 'python2.7', 'tar', 'gz', 'bin', 'python', 'my', 'py', '一定', '使用', 'distribute', 'by', '或者', 'cluster', 'by', '如果', '加上', '两个', '关键词', '那么', '数据', '分发', '机器', '如果', '数据量', '执行', '很慢', '但是', 'hive', '0.8', '一个', '问题', 'distribute', 'by', 'cluster', 'by', '后面', '只能', '如果', '多列', '报错', '如果', '数据量', '并且', '数据', '不能', '拆分', '只能', '设置', 'mapred', 'reduce', 'tasks', '如果', '数据', '可以', '满足', '结合律', '那么', '使用', '查询', '外面', '聚合', '一下', '可以', '解决', '只能', '问题', '每个', 'python', '脚本', '不是', '执行', 'reduce', '所有', '数据', '每个', 'reducer', '机器', '很多', 'maper', '机器', '上取', '数据', '过来', '之后', '合并', '一定', '合并', '文件', '而会', '因此', '即使', '设置', 'mapred', 'reduce', 'tasks', '数值', 'python', '程序', '启动', '进程', '执行', '每个', '分片', '执行', '完毕', '汇总', '数据', '也就是说', 'reducer', '每个', 'python', '脚本', '启动', '进程', '处理', '不同', '数据', '分片', '--', '这个', '问题', '好久', '仔细分析', '结果', '数据', '发现', '多么', '领悟', 'self', 'join', '非常', '耗时间', '尤其', '关联', '规则', '运算', '时候', '开始', '启动', '一个', 'self', 'join', '这样', 'tablea', 'join', 'tablea', 'on', 'id', 'id', 'join', 'tablea', 'on', 'id', 'id', '这个', '程序', '很小', '数据量', '运行', '小时', '表示', '极度', '郁闷', '然后', '改进', 'tablea', '数据表', '直接', '增加', 'id', 'id', '数值', '两个', '冗余', '然后', '改写', 'tablea', 'join', 'tablea', 'on', 'id', 'id', 'join', 'tablea', 'on', 'id', 'id', '运行', '时间', '有所', '减少', '但是', '还是', '非常', '运行', '几十分钟', 'kill', '真不知道', 'hive', '怎么', '实现', '这个', '语句', '实在', '办法', '只好', 'hive', '调用', 'transform', 'python', '脚本', '使用', 'distribute', 'by', 'id', '进行', '分发', '然后', '每个', '节点', '每个', 'python', '运行', '两边', '扫描', '第一步', 'id', 'key', '数据', '全部', '存入', '词典', '内存', '幸好', '没爆', '第二步', '扫描', '第一步', '词典', '取出', '每个', 'id', '直接', '词典', '中取', 'id', 'id', '数据', '输出', '这样', '改进', '非常', '杀鸡', '牛刀', '真是', '浪费资源', 'hive', '为什么', 'self', 'join', '如此', '耗时', '真是', '理解', '本文', '链接', 'http', 'crazyant', 'net', '1437', 'html']","[[-0.24970708 -0.13545074  0.22237296  0.15091509  0.31474565 -0.35501906
  -0.19457906  0.51299896 -0.00948378 -0.03817419 -0.06050148 -0.33424754
  -0.19290605  0.61394578  0.15978119 -0.10425258 -0.15160869  0.0031035
  -0.10990085 -0.49757069  0.01613628  0.24330321 -0.0055219  -0.11995985
   0.12128383 -0.56190793 -0.3034611   0.08556643 -0.22479805 -0.05851986
   0.24227407  0.024048   -0.0190424  -0.15267275 -0.11612782  0.34717623
  -0.15206807 -0.2344608   0.12089023 -0.78735113 -0.18041077 -0.61091784
  -0.04348281 -0.06196556 -0.16672222 -0.16079881 -0.25022202  0.46330993
  -0.18822004  0.42506746  0.2118516  -0.27622875 -0.13259594 -0.21784872
   0.06069987  0.39656631  0.24356932 -0.06688742  0.10064676 -0.11384592
   0.05189287  0.29312774  0.02441842  0.09561048 -0.396586   -0.00463566
   0.05636203 -0.0276365  -0.27657116  0.45348276  0.14498847 -0.24405444
   0.39952369 -0.33655661  0.59172294  0.18664374  0.18821001 -0.13843136
  -0.30246122 -0.18542108 -0.0582992   0.01158929 -0.07754835  0.3490436
  -0.37793242  0.21338849 -0.29681496  0.42214788  0.47951961  0.13201447
   0.31813509  0.11679369  0.37358632  0.19269487  0.19638914  0.37451424
   0.10728172 -0.31413423 -0.04913692 -0.10278784]]"
1440,把HIVE程序优化30倍的经验,"今天遇到一个HIVE需求，输入只有4列，大概160MB，需要引用一些字典文件，然后输出70列数据；典型的复杂计算，由于HIVE无法单独实现，采用TRANSFORM写了PYTHON脚本实现； 刚开始写完，map.tasks被设置为7个，结果运行了40分钟还没结束；以下是一些改进的过程：1、修改mapred.map.tasks无法实现修改map.tasks数目的目的，迂回的办法是将输入数据进行分片我将输入数据分片到了87，这样该任务的map.tasks数目变成了87，速度大为提升，每个机器处理的速度减慢；2、将输入数据按照键distribute by如果不这样做，那么每个机器分到的数据都是平均的，导致一些聚合操作无法减少存储量，事先对输入数据进行distribute by分片，单个机器上的聚合效果非常好；3、Python代码中优化数据结构由于Python代码需要遍历所有的数据行，所以最好不要每个行都去查询很多词典，把多次相同的查询保存下来，共用结果数据；同时把（a,b,c)为Key的词典，优化成dict[a][b][c]的形式，这样的查询效率高，并且省了更多的内存；4、增加日志的跟踪在HADOOP的脚本中，可以用sys.stderr输出一些错误日志，这样就不会干扰结果数据，但是能保存日志记录，比如写个这样的函数：def logger(msg):    curr_time = time.strftime(""%Y-%m-%d %H:%M:%S"", time.localtime(time.time()))    sys.stderr.write(""%s %s\n"" % (str(curr_time), str(msg)))就能够记录时间和自己想要跟踪的信息。本文地址：http://crazyant.net/1440.html","['hive', '程序', '优化', '30', '经验', '今天', '遇到', '一个', 'hive', '需求', '输入', '只有', '大概', '160mb', '需要', '引用', '一些', '字典', '文件', '然后', '输出', '70', '数据', '典型', '复杂', '计算', '由于', 'hive', '无法', '单独', '实现', '采用', 'transform', 'python', '脚本', '实现', '开始', 'map', 'tasks', '设置', '结果', '运行', '40', '分钟', '结束', '以下', '一些', '改进', '过程', '修改', 'mapred', 'map', 'tasks', '无法', '实现', '修改', 'map', 'tasks', '数目', '目的', '迂回', '办法', '输入', '数据', '进行', '分片', '输入', '数据', '分片', '87', '这样', '任务', 'map', 'tasks', '数目', '变成', '87', '速度', '大为', '提升', '每个', '机器', '处理', '速度', '减慢', '输入', '数据', '按照', 'distribute', 'by', '如果', '这样', '那么', '每个', '机器', '分到', '数据', '平均', '导致', '一些', '聚合', '操作', '无法', '减少', '存储量', '事先', '输入', '数据', '进行', 'distribute', 'by', '分片', '单个', '机器', '聚合', '效果', '非常', 'python', '代码', '优化', '数据结构', '由于', 'python', '代码', '需要', '遍历', '所有', '数据', '所以', '最好', '不要', '每个', '行都', '查询', '很多', '词典', '多次', '相同', '查询', '保存', '下来', '共用', '结果', '数据', '同时', 'key', '词典', '优化', 'dict', '形式', '这样', '查询', '效率高', '并且', '内存', '增加', '日志', '跟踪', 'hadoop', '脚本', '可以', 'sys', 'stderr', '输出', '一些', '错误', '日志', '这样', '不会', '干扰', '结果', '数据', '但是', '保存', '日志', '记录', '比如', '写个', '这样', '函数', 'def', 'logger', 'msg', 'curr', 'time', 'time', 'strftime', '-%', '-%', 'time', 'localtime', 'time', 'time', 'sys', 'stderr', 'write', 'str', 'curr', 'time', 'str', 'msg', '能够', '记录时间', '自己', '想要', '跟踪', '信息', '本文', '地址', 'http', 'crazyant', 'net', '1440', 'html']","[[-0.2766223  -0.13909594  0.23910453  0.18950089  0.30373327 -0.37437643
  -0.19427034  0.52480451 -0.0052573  -0.02883424 -0.07082762 -0.36176048
  -0.18310543  0.63745196  0.15519822 -0.11798299 -0.16060907 -0.00669298
  -0.09880076 -0.48047668  0.03277426  0.25986424 -0.01033654 -0.10549423
   0.11690025 -0.57501185 -0.30691998  0.09325306 -0.21452822 -0.06252269
   0.25957608  0.04175683 -0.01964522 -0.14696113 -0.11710217  0.36330636
  -0.13890676 -0.23485786  0.12175504 -0.80468476 -0.17501056 -0.61362505
  -0.03828686 -0.08351325 -0.1760848  -0.16492898 -0.29262413  0.50310646
  -0.16852109  0.41411312  0.20577186 -0.29011866 -0.10953404 -0.25497111
   0.06821516  0.41905337  0.26064075 -0.06873571  0.1043003  -0.10315823
   0.05127282  0.30967876  0.02172854  0.08780501 -0.40892741 -0.00760001
   0.04023597 -0.01193178 -0.25544587  0.47130414  0.14439886 -0.25741222
   0.42765423 -0.34611603  0.61133962  0.19103214  0.23572873 -0.16029737
  -0.27627908 -0.22351011 -0.08709879 -0.00342564 -0.07308249  0.36525601
  -0.39908242  0.212331   -0.31010064  0.44848316  0.49976092  0.14294614
   0.32072685  0.13120965  0.37791757  0.19561215  0.20046673  0.41015914
   0.09926127 -0.31220796  0.00142366 -0.09521191]]"
1451,向Hive程序传递变量的三种方法," 图 1 外部向Hive程序中传递变量的方法 使用Hive编写程序最常用的方法是将Hive语句写到文件中，然后使用hive -f filename.hql来批量执行查询语句。经常需要将外部参数传入到hql语句中替换其中的变量来动态执行任务，比如动态设定数据库名、表名、时间值、字段序列等变量，以达到脚本泛化执行的目的。 1) 方法1：字符串、正则、模板引擎等暴力方式替换 最简单也最暴力的方式，是在hql文件中设定{table_name}这样的变量占位符，然后使用调度程序比如shell、python、java语言读取整个hql文件到一个字符串，替换其中的变量。然后使用hive -e cmd_str来执行该Hive命令字符串。举例代码如表格 1和表格 2所示。 表格 1 hive ql文件内容     use test; select * from student limit {limit_count}; 表格 2 Python脚本读取、替换和执行Hive程序     import os #step1: 读取query.ql整个文件的内容 ql_source=open(""query.ql"",""r"").read() #step2：替换其中的占位符变量 ql_target=ql_source.replace(""{limit_count}"",""10"") #step3：使用hive -e的方法执行替换后的Hql语句序列 os.system(""hive -e '%s'""%ql_target) 2) 方法2：使用系统变量或者环境变量 通常情况是使用shell来调度执行hive程序的，Hive提供了可以直接读取系统env和system变量的方法，如表格 3所示。 表格 3 使用env和system读取外部环境变量     use test; --使用${env:varname}的方法读取shell中export的变量 select * from student limit ${env:g_limit_count}; --使用${system:varname}的方法读取系统的变量 select ${system:HOME} as my_home from student; 这种方式比较好，比如在shell中可以配置整个项目的各种路径变量，hive程序中使用env就可以直接读取这些配置了。 3) 方法3：在执行Hive命令时传入hivevar和hiveconf 第3中方法是在用hive命令执行hive程序时传递命令行参数，使用-hivevar和-hiveconf两种参数选项给该次执行传入外部变量，其中hivevar是专门提供给用户自定义变量的，而hiveconf则包括了hive-site.xml中配置的hive全局变量。 表格 4 hivevar和hiveconf传递变量的方法     hive -hivevar -f file  hive -hivevar tbname='a' -hivevar count=10 -f filename.hql   hive -hivevar -e cmd  hive -hivevar tbname='a' -hivevar count=10 -e 'select * from ${hivevar:tbname} limit ${hivevar:count}'   hive -hiveconf -f file  hive -hiveconf tbname='a' - hiveconf count=10 -f filename.hql   hive -hiveconf -e cmd  hive -hiveconf tbname='a' -hiveconf count=10 -e 'select * from ${hivevar:tbname} limit ${hivevar:count}'最经常使用的是env和-hivevar方法，前者直接在Hive脚本中读取shell export的变量，后者则对脚本的当前执行进行参数设置。 本文地址：http://crazyant.net/1451.html","['hive', '程序', '传递', '变量', '三种', '方法', '外部', 'hive', '程序', '传递', '变量', '方法', '使用', 'hive', '编写程序', '常用', '方法', 'hive', '语句', '文件', '然后', '使用', 'hive', 'filename', 'hql', '批量', '执行', '查询', '语句', '经常', '需要', '外部', '参数', '传入', 'hql', '语句', '替换', '其中', '变量', '动态', '执行', '任务', '比如', '动态', '设定', '数据库', '表名', '时间', '序列', '变量', '达到', '脚本', '泛化', '执行', '目的', '方法', '字符串', '正则', '模板', '引擎', '暴力', '方式', '替换', '简单', '暴力', '方式', 'hql', '文件', '设定', 'table', 'name', '这样', '变量', '占位', '然后', '使用', '调度', '程序', '比如', 'shell', 'python', 'java', '语言', '读取', '整个', 'hql', '文件', '一个', '字符串', '替换', '其中', '变量', '然后', '使用', 'hive', 'cmd', 'str', '执行', 'hive', '命令', '字符串', '举例', '代码', '表格', '表格', '所示', '表格', 'hive', 'ql', '文件', '内容', 'use', 'test', 'select', 'from', 'student', 'limit', 'limit', 'count', '表格', 'python', '脚本', '读取', '替换', '执行', 'hive', '程序', 'import', 'os', 'step1', '读取', 'query', 'ql', '整个', '文件', '内容', 'ql', 'source', 'open', 'query', 'ql', 'read', 'step2', '替换', '其中', '占位', '变量', 'ql', 'target', 'ql', 'source', 'replace', 'limit', 'count', '10', 'step3', '使用', 'hive', '方法', '执行', '替换', 'hql', '语句', '序列', 'os', 'system', 'hive', 'ql', 'target', '方法', '使用', '系统', '变量', '或者', '环境变量', '通常', '情况', '使用', 'shell', '调度', '执行', 'hive', '程序', 'hive', '提供', '可以', '直接', '读取', '系统', 'env', 'system', '变量', '方法', '表格', '所示', '表格', '使用', 'env', 'system', '读取', '外部', '环境变量', 'use', 'test', '--', '使用', 'env', 'varname', '方法', '读取', 'shell', 'export', '变量', 'select', 'from', 'student', 'limit', 'env', 'limit', 'count', '--', '使用', 'system', 'varname', '方法', '读取', '系统', '变量', 'select', 'system', 'home', 'as', 'my', 'home', 'from', 'student', '这种', '方式', '比较', '比如', 'shell', '可以', '配置', '整个', '项目', '各种', '路径', '变量', 'hive', '程序', '使用', 'env', '可以', '直接', '读取', '这些', '配置', '方法', '执行', 'hive', '命令', '传入', 'hivevar', 'hiveconf', '方法', 'hive', '命令', '执行', 'hive', '程序', '传递', '命令行', '参数', '使用', 'hivevar', 'hiveconf', '两种', '参数', '选项', '该次', '执行', '传入', '外部', '变量', '其中', 'hivevar', '专门', '提供', '用户', '自定义', '变量', 'hiveconf', '包括', 'hive', 'site', 'xml', '配置', 'hive', '全局变量', '表格', 'hivevar', 'hiveconf', '传递', '变量', '方法', 'hive', 'hivevar', 'file', 'hive', 'hivevar', 'tbname', 'hivevar', 'count', '10', 'filename', 'hql', 'hive', 'hivevar', 'cmd', 'hive', 'hivevar', 'tbname', 'hivevar', 'count', '10', 'select', 'from', 'hivevar', 'tbname', 'limit', 'hivevar', 'count', 'hive', 'hiveconf', 'file', 'hive', 'hiveconf', 'tbname', 'hiveconf', 'count', '10', 'filename', 'hql', 'hive', 'hiveconf', 'cmd', 'hive', 'hiveconf', 'tbname', 'hiveconf', 'count', '10', 'select', 'from', 'hivevar', 'tbname', 'limit', 'hivevar', 'count', '经常', '使用', 'env', 'hivevar', '方法', '前者', '直接', 'hive', '脚本', '读取', 'shell', 'export', '变量', '后者', '脚本', '当前', '执行', '进行', '参数设置', '本文', '地址', 'http', 'crazyant', 'net', '1451', 'html']","[[-3.09435233e-01 -1.24983103e-01  2.45159946e-01  1.90961334e-01
   3.21943820e-01 -3.79257485e-01 -1.76713155e-01  5.52254995e-01
  -2.50995202e-02 -4.69249696e-02 -6.73297279e-02 -3.75717619e-01
  -1.64138746e-01  6.40998143e-01  1.72544777e-01 -1.29453603e-01
  -1.45828224e-01 -1.29933489e-02 -9.88191488e-02 -5.16658169e-01
   1.70290456e-02  2.83999567e-01 -2.26210823e-02 -1.27430193e-01
   1.12978486e-01 -5.92322739e-01 -3.22973501e-01  8.04567070e-02
  -2.30123454e-01 -8.01585068e-02  2.53932822e-01  2.55904457e-02
  -2.82842355e-02 -1.43130877e-01 -1.28940311e-01  3.91462114e-01
  -1.67682607e-01 -2.65514950e-01  1.32216654e-01 -8.46113402e-01
  -1.76428539e-01 -6.15449927e-01 -4.23084872e-02 -6.47477750e-02
  -1.77719458e-01 -1.79294006e-01 -2.91468474e-01  5.02161104e-01
  -1.84285864e-01  4.44394487e-01  2.00791714e-01 -3.08016407e-01
  -1.36619606e-01 -2.50594162e-01  6.00953654e-02  4.38986376e-01
   2.49560021e-01 -7.72739703e-02  1.14982129e-01 -1.30432491e-01
   6.57968188e-02  2.96077957e-01  3.32276790e-02  7.96086121e-02
  -4.35372865e-01  6.63128006e-04  5.50965136e-02 -8.31790460e-03
  -2.86592201e-01  4.81753428e-01  1.37853827e-01 -2.37446625e-01
   4.39913157e-01 -3.60222647e-01  6.17005267e-01  2.33666790e-01
   2.18649527e-01 -1.61507686e-01 -3.18118702e-01 -1.97295583e-01
  -7.12069907e-02  2.77414627e-05 -7.11709489e-02  4.00999291e-01
  -3.89214638e-01  2.25120766e-01 -3.13679827e-01  4.68266077e-01
   5.15165465e-01  1.55991438e-01  3.27776770e-01  1.34886535e-01
   3.94272752e-01  2.17082142e-01  2.14339779e-01  4.14931586e-01
   1.13537686e-01 -3.22685743e-01 -2.26700731e-03 -1.15518841e-01]]"
1456,Hive中Order by和Sort by的区别是什么?,Hive基于HADOOP来执行分布式程序的，和普通单机程序不同的一个特点就是最终的数据会产生多个子文件，每个reducer节点都会处理partition给自己的那份数据产生结果文件，这导致了在HADOOP环境下很难对数据进行全局排序，如果在HADOOP上进行order by全排序，会导致所有的数据集中在一台reducer节点上，然后进行排序，这样很可能会超过单个节点的磁盘和内存存储能力导致任务失败。 一种替代的方案则是放弃全局有序，而是分组有序，比如不求全百度最高的点击词排序，而是求每种产品线的最高点击词排序。  使用order by会引发全局排序     select * from baidu_click order by click desc; 使用distribute和sort进行分组排序     select * from baidu_click distribute by product_line sort by click desc; distribute by + sort by就是该替代方案，被distribute by设定的字段为KEY，数据会被HASH分发到不同的reducer机器上，然后sort by会对同一个reducer机器上的每组数据进行局部排序。  order by是全局有序而distribute+sort是分组有序 distribute+sort的结果是按组有序而全局无序的，输入数据经过了以下两个步骤的处理： 1) 根据KEY字段被HASH，相同组的数据被分发到相同的reducer节点； 2) 对每个组内部做排序 由于每组数据是按KEY进行HASH后的存储并且组内有序，其还可以有两种用途： 1) 直接作为HBASE的输入源，导入到HBASE； 2) 在distribute+sort后再进行orderby阶段，实现间接的全局排序； 不过即使是先distribute by然后sort by这样的操作，如果某个分组数据太大也会超出reduce节点的存储限制，常常会出现137内存溢出的错误，对大数据量的排序都是应该避免的。  本文地址：http://crazyant.net/1456.html,"['hive', 'order', 'by', 'sort', 'by', '区别', '什么', 'hive', '基于', 'hadoop', '执行', '分布式', '程序', '普通', '单机', '程序', '不同', '一个', '特点', '就是', '最终', '数据', '产生', '多个', '文件', '每个', 'reducer', '节点', '处理', 'partition', '自己', '那份', '数据', '产生', '结果', '文件', '导致', 'hadoop', '环境', '数据', '进行', '全局', '排序', '如果', 'hadoop', '进行', 'order', 'by', '排序', '导致', '所有', '数据', '集中', '一台', 'reducer', '节点', '然后', '进行', '排序', '这样', '可能', '超过', '单个', '节点', '磁盘', '内存', '存储', '能力', '导致', '任务', '失败', '一种', '替代', '方案', '放弃', '全局', '有序', '而是', '分组', '有序', '比如', '求全', '百度', '最高', '点击', '排序', '而是', '每种', '产品线', '最高', '点击', '排序', '使用', 'order', 'by', '引发', '全局', '排序', 'select', 'from', 'baidu', 'click', 'order', 'by', 'click', 'desc', '使用', 'distribute', 'sort', '进行', '分组', '排序', 'select', 'from', 'baidu', 'click', 'distribute', 'by', 'product', 'line', 'sort', 'by', 'click', 'desc', 'distribute', 'by', 'sort', 'by', '就是', '替代', '方案', 'distribute', 'by', '设定', 'key', '数据', 'hash', '分发', '不同', 'reducer', '机器', '然后', 'sort', 'by', '同一个', 'reducer', '机器', '每组', '数据', '进行', '局部', '排序', 'order', 'by', '全局', '有序', 'distribute', 'sort', '分组', '有序', 'distribute', 'sort', '结果', '按组', '有序', '全局', '无序', '输入', '数据', '经过', '以下', '两个', '步骤', '处理', '根据', 'key', '字段', 'hash', '相同', '数据', '分发', '相同', 'reducer', '节点', '每个', '内部', '排序', '由于', '每组', '数据', 'key', '进行', 'hash', '存储', '并且', '组内', '有序', '可以', '两种', '用途', '直接', '作为', 'hbase', '输入', '导入到', 'hbase', 'distribute', 'sort', '进行', 'orderby', '阶段', '实现', '间接', '全局', '排序', '不过', '即使', 'distribute', 'by', '然后', 'sort', 'by', '这样', '操作', '如果', '某个', '分组', '数据', '太大', '超出', 'reduce', '节点', '存储', '限制', '常常', '出现', '137', '内存', '溢出', '错误', '对大', '数据量', '排序', '应该', '避免', '本文', '地址', 'http', 'crazyant', 'net', '1456', 'html']","[[-0.26529411 -0.12881287  0.23586061  0.16819634  0.30824095 -0.36039409
  -0.19416334  0.51238621 -0.00476716 -0.03548116 -0.06226531 -0.34505717
  -0.1746514   0.61951908  0.15652969 -0.10493185 -0.15301684 -0.00871324
  -0.10361694 -0.48664614  0.02519055  0.2496258  -0.01471439 -0.11299574
   0.11252467 -0.55648298 -0.31054278  0.09243138 -0.21807546 -0.05619604
   0.24028516  0.04323655 -0.03100674 -0.14089985 -0.10866963  0.3516294
  -0.13708496 -0.22815034  0.1148333  -0.78295996 -0.1760472  -0.61101358
  -0.04468622 -0.07298217 -0.16743396 -0.16491987 -0.27467089  0.47764191
  -0.17884733  0.41917566  0.19990724 -0.2767489  -0.11574645 -0.23575049
   0.05977236  0.39944086  0.24716789 -0.05793557  0.09145448 -0.09812321
   0.04864745  0.29176013  0.01775634  0.09175004 -0.38458293 -0.00789372
   0.05290102 -0.01458227 -0.2567731   0.45910314  0.14868941 -0.24837396
   0.40501183 -0.3338044   0.58492162  0.19360981  0.21287473 -0.15566978
  -0.28107957 -0.20602987 -0.062569    0.0094746  -0.06924401  0.35266417
  -0.39390838  0.21555576 -0.3004985   0.43171086  0.48890959  0.14295065
   0.31866735  0.12650283  0.3721308   0.18900761  0.19553698  0.39253895
   0.09621715 -0.31597492 -0.02173947 -0.09630216]]"
1459,从产品和技术的对比想到的,一想到产品与技术这对关系词，就联想到一大片的对比概念：  阴和阳  文科和理科  冲动和冷静  内功和外功  外表与内在  能力和素质  道德与科学 其中一个词代表内在，而另一个代表外在，没有内就没有外，而只有内却无法成型。 一直都是技术出身，不知道产品是什么意思，学校的时候有个技术社团招收技术和产品两个方向的团员，感觉技术才能积累，才是自己的，才能够创造财富；而产品是虚的，没什么积累，就好像是这个时候会灵机一动，下一时刻就一片空白，我才不要产品，因为有技术，我才不会恐慌，才不会害怕，就好像手里握着锄头，才会觉得自己不会饿着一样。 工作一年多了，我才发现技术只是手段，只是达成目的的工具。而一切的运行技术能解决的，只有好少的一部分。  分歧和冲突的处理  问题的解决方案  文档的遣词造句和写作技巧  交流的技巧和说服的方法  时间的管理和节奏的把握 这些全是在技术之外，但是却占用了大部分的时间，关键的问题在于，别人对你的评判和认定，都是靠这些“虚”的东西，而不是技术来进行的。 回到产品和技术，我终于领会到，只有技术自身的灵机一动做出来的东西是完全不能成为产品的。开发者做一个东西的动机往往不是因为某个需求，而是因为他觉得自己拥有的技术能做出来什么内容。而第二个方面，则是即使开发者做出来一个像模像样的东西，没有推广营销，再好的东西只是闭门造车，也成为不了大众接收的东西。 产品就是美观、广告、周知、实用的代名词，它的目的就是为了解决实际的需要而产出，它可以做到极致的美观和简洁，这样所有人能从中受益。 这一切都从乔布斯传中感到了强烈的震撼，乔布斯不懂技术，他是个产品经理，但他做出了最伟大的技术产品。他的做法是从产品出发，以要做什么出发，将外观设计到极致，将简洁发挥到不能再简洁，然后再督促技术以产品的设计为目标来实现。对于用户来说，产品才是他们能接触到的，而使用了什么技术，运行的是什么高深的代码，都没有关系。 从今天开始，多晒太阳，多徒步行走； 从今天开始：  更多的关注产品  更多的关注素质  更多的关注思想  更多的关注外在  更多的关注写作  更多的关注交谈 一切在于调和，不能顾此失彼，产品和技术，他俩是一对双胞胎，正如阴和阳。 本文地址：http://crazyant.net/1459.html,"['产品', '技术', '对比', '想到', '想到', '产品', '技术', '关系', '联想', '大片', '对比', '概念', '阴和阳', '文科', '理科', '冲动', '冷静', '内功', '外功', '外表', '内在', '能力', '素质', '道德', '科学', '其中', '一个', '代表', '内在', '一个', '代表', '没有', '没有', '只有', '无法', '成型', '一直', '技术', '出身', '知道', '产品', '什么', '意思', '学校', '时候', '有个', '技术', '社团', '招收', '技术', '产品', '两个', '方向', '团员', '感觉', '技术', '才能', '积累', '自己', '能够', '创造财富', '产品', '没什么', '积累', '好像', '这个', '时候', '灵机一动', '时刻', '一片空白', '不要', '产品', '因为', '技术', '不会', '恐慌', '不会', '害怕', '好像', '手里', '锄头', '觉得', '自己', '不会', '一样', '工作', '一年', '发现', '技术', '只是', '手段', '只是', '达成', '目的', '工具', '一切', '运行', '技术', '解决', '只有', '好少', '一部分', '分歧', '冲突', '处理', '问题', '解决方案', '文档', '遣词造句', '写作技巧', '交流', '技巧', '说服', '方法', '时间', '管理', '节奏', '把握', '这些', '全是', '技术', '之外', '但是', '占用', '大部分', '时间', '关键', '问题', '在于', '别人', '评判', '认定', '这些', '东西', '不是', '技术', '进行', '回到', '产品', '技术', '终于', '领会到', '只有', '技术', '自身', '灵机一动', '出来', '东西', '完全', '不能', '成为', '产品', '开发者', '一个', '东西', '动机', '往往', '不是', '因为', '某个', '需求', '而是', '因为', '觉得', '自己', '拥有', '技术', '出来', '什么', '内容', '第二个', '方面', '即使', '开发者', '出来', '一个', '像模像样', '东西', '没有', '推广', '营销', '东西', '只是', '闭门造车', '成为', '不了', '大众', '接收', '东西', '产品', '就是', '美观', '广告', '周知', '实用', '代名词', '目的', '就是', '为了', '解决', '实际', '需要', '产出', '可以', '做到', '极致', '美观', '简洁', '这样', '所有人', '从中', '受益', '一切', '乔布斯', '传中', '感到', '强烈', '震撼', '乔布斯', '技术', '产品', '经理', '做出', '伟大', '技术', '产品', '做法', '是从', '产品', '出发', '以要', '什么', '出发', '外观设计', '极致', '简洁', '发挥', '不能', '简洁', '然后', '督促', '技术', '产品', '设计', '目标', '实现', '对于', '用户', '来说', '产品', '他们', '接触', '使用', '什么', '技术', '运行', '什么', '高深', '代码', '没有', '关系', '今天', '开始', '晒太阳', '徒步', '行走', '今天', '开始', '关注', '产品', '关注', '素质', '关注', '思想', '关注', '关注', '写作', '关注', '交谈', '一切', '在于', '调和', '不能', '顾此失彼', '产品', '技术', '他俩', '一对', '双胞胎', '正如', '阴和阳', '本文', '地址', 'http', 'crazyant', 'net', '1459', 'html']","[[-0.24666895 -0.13120163  0.22267682  0.18154281  0.26623292 -0.34344609
  -0.17178144  0.47363697 -0.00692719 -0.01989963 -0.06462378 -0.3338738
  -0.16964265  0.58055559  0.1348374  -0.11043146 -0.14749899 -0.00634434
  -0.08420463 -0.42420248  0.0303461   0.24034114 -0.00840292 -0.09359739
   0.10409628 -0.5246454  -0.28130402  0.08278513 -0.19579157 -0.05723224
   0.2380594   0.04715576 -0.01067919 -0.13109689 -0.10778083  0.32560904
  -0.12551837 -0.21236016  0.1027014  -0.72745047 -0.15522255 -0.55875912
  -0.03381353 -0.07767704 -0.15882398 -0.15030146 -0.27588664  0.45889753
  -0.14359265  0.37363223  0.18297593 -0.26249841 -0.08971696 -0.23639847
   0.06152072  0.38332964  0.23831514 -0.06001315  0.09383418 -0.08504484
   0.04952618  0.28142224  0.01836571  0.08305613 -0.37209147 -0.01009725
   0.03075954 -0.00859845 -0.2218448   0.42787819  0.12669401 -0.23967688
   0.39521335 -0.31977337  0.5681176   0.17174428  0.22704243 -0.15273929
  -0.24331655 -0.2198006  -0.09233818 -0.00220816 -0.07070894  0.33272635
  -0.3754466   0.19440658 -0.28419261  0.41699574  0.46150157  0.13369371
   0.28654986  0.12196264  0.34214811  0.17253195  0.18221614  0.38242495
   0.09258337 -0.28205391  0.01514274 -0.07896917]]"
1465,将网站的创意变成钱的过程,"1、想好一个网站的主题 有些人认为围绕一个主题建站就能赚钱，这种想法并不合适。应该是围绕一个充满激情的主题开发一个网站。如果你热爱的话题,你会坚持下去,并将继续写作和增加内容，然后带来收入。如果你不热爱它,你最终会放弃这个网站,收入将不了了之。 2、最大化压缩你的主题 应该把你的创意压缩到最小的主题。例如,如果你想做一个关于家长的网站，你可以缩小成一个关于养育孩子的网站,或对有特殊需要的孩子的养育。 3、想一个网站的名称 尽可能多的想一个可爱的玩弄文字似的的名称，如果你网站名字告诉读者什么是网站，搜索引擎会更喜欢(读者会更容易发现你)。 4、注册域名 这是把网站名称变成一个网站的URL的过程。 5、找一个虚拟主机或者服务器存放网站代码 把网站放在一个虚拟主机或者服务器上，然后全世界的人都能访问。 6、在网站上添加点击付费广告 比如使用百度联盟，通常选点击付费，效果很好。 7、加入网站联盟 网站联盟可以让网站所有者和广告主取得联系。网站联盟注册之后，可以搜索哪些广告是很好的适合你的网站。例如,如果你的网站是关于糖果,你应该寻找卖东西像糖果模具,成分,包装的广告主等等。 8、在网站上增加广告链接 找到合适的广告后，在网站上添加广告代码链接，这将在你的网站上放置横幅或文字广告，当用户点击广告和商家买东西,你会赚佣金。 9、在你的网站上销售广告空间 如果你的网站变得受欢迎，拥有广泛的读者，你可以让其他人在你的网站上提供私人广告空间来宣传他们的产品，服务或网站。价格取决于读者的数量,广告的持续时间,位置和尺寸的广告。 文章地址：http://www.ehow.com/how_4913958_make-money-website-idea.html 本文地址：http://crazyant.net/1465.html","['网站', '创意', '变成', '过程', '一个', '网站', '主题', '有些', '认为', '围绕', '一个', '主题', '建站', '赚钱', '这种', '想法', '合适', '应该', '围绕', '一个', '充满', '激情', '主题', '开发', '一个', '网站', '如果', '热爱', '话题', '坚持下去', '继续', '写作', '增加', '内容', '然后', '带来', '收入', '如果', '热爱', '最终', '放弃', '这个', '网站', '收入', '不了了之', '最大化', '压缩', '主题', '应该', '创意', '压缩', '最小', '主题', '例如', '如果', '一个', '关于', '家长', '网站', '可以', '缩小成', '一个', '关于', '养育', '孩子', '网站', '特殊', '需要', '孩子', '养育', '一个', '网站', '名称', '尽可能', '一个', '可爱', '玩弄', '文字', '似的', '名称', '如果', '网站', '名字', '告诉', '读者', '什么', '网站', '搜索引擎', '喜欢', '读者', '容易', '发现', '注册', '域名', '网站', '名称', '变成', '一个', '网站', 'url', '过程', '一个', '虚拟主机', '或者', '服务器', '存放', '网站', '代码', '网站', '放在', '一个', '虚拟主机', '或者', '服务器', '然后', '全世界', '访问', '网站', '添加', '点击', '付费', '广告', '比如', '使用', '百度', '联盟', '通常', '点击', '付费', '效果', '加入', '网站', '联盟', '网站', '联盟', '可以', '网站', '所有者', '广告主', '取得联系', '网站', '联盟', '注册', '之后', '可以', '搜索', '哪些', '广告', '适合', '网站', '例如', '如果', '网站', '关于', '糖果', '应该', '寻找', '卖东西', '糖果', '模具', '成分', '包装', '广告主', '等等', '网站', '增加', '广告', '链接', '找到', '合适', '广告', '网站', '添加', '广告', '代码', '链接', '网站', '放置', '横幅', '文字广告', '用户', '点击', '广告', '商家', '东西', '佣金', '网站', '销售', '广告', '空间', '如果', '网站', '变得', '受欢迎', '拥有', '广泛', '读者', '可以', '其他人', '网站', '提供', '私人', '广告', '空间', '宣传', '他们', '产品', '服务', '网站', '价格', '取决于', '读者', '数量', '广告', '持续时间', '位置', '尺寸', '广告', '文章', '地址', 'http', 'www', 'ehow', 'com', 'how', '4913958', 'make', 'money', 'website', 'idea', 'html', '本文', '地址', 'http', 'crazyant', 'net', '1465', 'html']","[[-0.25286967 -0.14378821  0.22621813  0.22625003  0.25282948 -0.36694915
  -0.17802326  0.50445479 -0.00295939 -0.00999114 -0.08120765 -0.35347124
  -0.17839695  0.61441633  0.12394231 -0.12640174 -0.15674323  0.00638636
  -0.07485527 -0.41735112  0.04485082  0.25017982 -0.01326837 -0.09612608
   0.09872439 -0.54624509 -0.29986081  0.10137389 -0.19437852 -0.05734676
   0.24939313  0.08001479 -0.00851642 -0.13953482 -0.12710368  0.35127578
  -0.12733726 -0.21400227  0.10422263 -0.7412858  -0.14969131 -0.57367307
  -0.02623808 -0.08274875 -0.1654132  -0.16523946 -0.31394383  0.49184194
  -0.1055712   0.36550167  0.17707269 -0.28607353 -0.06033103 -0.26098352
   0.06652405  0.41282035  0.25454665 -0.06588903  0.10401618 -0.08324514
   0.06516582  0.28680704  0.01779426  0.08749072 -0.37986817 -0.00716991
   0.00455476  0.01343414 -0.21186898  0.44695217  0.12785856 -0.25007253
   0.42372651 -0.33481814  0.59610363  0.18557916  0.26420943 -0.17006229
  -0.23074736 -0.25020111 -0.12336748 -0.00644562 -0.07452648  0.35151415
  -0.40902436  0.19460705 -0.29363832  0.45170589  0.49909689  0.14291029
   0.29038113  0.13401335  0.34626212  0.1770288   0.19240642  0.42715515
   0.08349822 -0.27467841  0.05445116 -0.0817717 ]]"
1470,Hive的left join、left outer join和left semi join三者的区别,"Hive的Join的文档说明地址：https://cwiki.apache.org/confluence/display/Hive/LanguageManual%2BJoins以下为两个测试数据表建表语句：use test;DROP TABLE IF EXISTS table1;create table table1(    student_no      bigint  comment '学号',    student_name    string  comment '姓名')COMMENT 'test 学生信息'ROW FORMAT DELIMITEDFIELDS TERMINATED BY '\t'LINES TERMINATED BY '\n'STORED AS TEXTFILE;DROP TABLE IF EXISTS table2;create table table2(    student_no      bigint  comment '学号',    class_no        bigint  comment '课程号')COMMENT 'test 学生选课信息'ROW FORMAT DELIMITEDFIELDS TERMINATED BY '\t'LINES TERMINATED BY '\n'STORED AS TEXTFILE;load data local inpath 'data_table1.txt' overwrite into table table1;load data local inpath 'data_table2.txt' overwrite into table table2;测试数据为：hive left join测试数据测试1：left join语句：select * from table1 left outer join table2 on(table1.student_no=table2.student_no);结果：FAILED: Parse Error: line 1:22 cannot recognize input near 'left' 'join' 'table2' in join type specifier我用的HIVE版本是0.8，不支持直接的left join写法；测试2：left outer join语句：select * from table1 left outer join table2 on(table1.student_no=table2.student_no);结果：1 name1 1 111 name1 1 121 name1 1 132 name2 2 112 name2 2 143 name3 3 153 name3 3 124 name4 4 134 name4 4 125 name5 5 145 name5 5 166 name6 NULL NULL可以看到left outer join左边表的数据都列出来了，如果右边表没有对应的列，则写成了NULL值。同时注意到，如果左边的主键在右边找到了N条，那么结果也是会叉乘得到N条的，比如这里主键为1的显示了右边的3条。测试3：left semi join语句：select * from table1 left semi join table2 on(table1.student_no=table2.student_no);结果：1 name12 name23 name34 name45 name5可以看到，只打印出了左边的表中的列，规律是如果主键在右边表中存在，则打印，否则过滤掉了。结论：hive不支持'left join'的写法；hive的left outer join：如果右边有多行和左边表对应，就每一行都映射输出；如果右边没有行与左边行对应，就输出左边行，右边表字段为NULL；hive的left semi join：相当于SQL的in语句，比如上面测试3的语句相当于“select * from table1 where table1.student_no in (table2.student_no)”，注意，结果中是没有B表的字段的。本文地址：http://crazyant.net/1470.html","['hive', 'left', 'join', 'left', 'outer', 'join', 'left', 'semi', 'join', '三者', '区别', 'hive', 'join', '文档', '说明', '地址', 'https', 'cwiki', 'apache', 'org', 'confluence', 'display', 'hive', 'languagemanual%', '2bjoins', '以下', '两个', '测试数据', '表建表', '语句', 'use', 'test', 'drop', 'table', 'if', 'exists', 'table1', 'create', 'table', 'table1', 'student', 'no', 'bigint', 'comment', 'student', 'name', 'string', 'comment', '姓名', 'comment', 'test', '学生', '信息', 'row', 'format', 'delimitedfields', 'terminated', 'by', 'lines', 'terminated', 'by', 'stored', 'as', 'textfile', 'drop', 'table', 'if', 'exists', 'table2', 'create', 'table', 'table2', 'student', 'no', 'bigint', 'comment', 'class', 'no', 'bigint', 'comment', '课程', 'comment', 'test', '学生', '选课', '信息', 'row', 'format', 'delimitedfields', 'terminated', 'by', 'lines', 'terminated', 'by', 'stored', 'as', 'textfile', 'load', 'data', 'local', 'inpath', 'data', 'table1', 'txt', 'overwrite', 'into', 'table', 'table1', 'load', 'data', 'local', 'inpath', 'data', 'table2', 'txt', 'overwrite', 'into', 'table', 'table2', '测试数据', 'hive', 'left', 'join', '测试数据', '测试', 'left', 'join', '语句', 'select', 'from', 'table1', 'left', 'outer', 'join', 'table2', 'on', 'table1', 'student', 'no', 'table2', 'student', 'no', '结果', 'failed', 'parse', 'error', 'line', '22', 'cannot', 'recognize', 'input', 'near', 'left', 'join', 'table2', 'in', 'join', 'type', 'specifier', '我用', 'hive', '版本', '0.8', '支持', '直接', 'left', 'join', '写法', '测试', 'left', 'outer', 'join', '语句', 'select', 'from', 'table1', 'left', 'outer', 'join', 'table2', 'on', 'table1', 'student', 'no', 'table2', 'student', 'no', '结果', 'name1', '111', 'name1', '121', 'name1', '132', 'name2', '112', 'name2', '143', 'name3', '153', 'name3', '124', 'name4', '134', 'name4', '125', 'name5', '145', 'name5', '166', 'name6', 'null', 'null', '可以', '看到', 'left', 'outer', 'join', '左边', '数据', '列出来', '如果', '右边', '没有', '对应', '写成', 'null', '同时', '注意', '如果', '左边', '主键', '右边', '找到', '那么', '结果', '得到', '比如', '这里', '主键', '显示', '右边', '测试', 'left', 'semi', 'join', '语句', 'select', 'from', 'table1', 'left', 'semi', 'join', 'table2', 'on', 'table1', 'student', 'no', 'table2', 'student', 'no', '结果', 'name12', 'name23', 'name34', 'name45', 'name5', '可以', '看到', '打印', '左边', '表中', '规律', '如果', '主键', '右边', '表中', '存在', '打印', '否则', '过滤', '结论', 'hive', '支持', 'left', 'join', '写法', 'hive', 'left', 'outer', 'join', '如果', '右边', '多行', '左边', '对应', '一行', '映射', '输出', '如果', '右边', '没有', '左边', '对应', '输出', '左边', '右边', '表字', 'null', 'hive', 'left', 'semi', 'join', '相当于', 'sql', 'in', '语句', '比如', '上面', '测试', '语句', '相当于', 'select', 'from', 'table1', 'where', 'table1', 'student', 'no', 'in', 'table2', 'student', 'no', '注意', '结果', '中是', '没有', '本文', '地址', 'http', 'crazyant', 'net', '1470', 'html']","[[-0.22304654 -0.09266499  0.24236879  0.12697961  0.27391722 -0.35276715
  -0.11452913  0.46103455 -0.06274415 -0.12023293 -0.03633963 -0.35975231
  -0.12967589  0.51068369  0.15586546 -0.09911417 -0.11077828 -0.01031241
  -0.05815449 -0.50699656 -0.04666944  0.25152651 -0.05970795 -0.21165716
   0.0525829  -0.45001186 -0.30452693  0.04063222 -0.22900497 -0.07254826
   0.15252256  0.01241513 -0.00476559 -0.11225078 -0.15947285  0.32132926
  -0.19585803 -0.26571359  0.07634947 -0.69512587 -0.12560872 -0.56696179
  -0.0721462  -0.00237473 -0.11680768 -0.22499241 -0.21981798  0.33814568
  -0.17254044  0.45163541  0.12832919 -0.25943599 -0.12256898 -0.16196802
  -0.02519659  0.3708349   0.13957211 -0.08909139  0.1094619  -0.13943609
   0.09715168  0.20863905  0.00710913  0.08441147 -0.35493661  0.04782831
   0.06131975 -0.03095169 -0.29109858  0.41010857  0.09177062 -0.15118549
   0.35808728 -0.31331814  0.52364284  0.2741099   0.13523422 -0.16108785
  -0.31169838 -0.10324394  0.00957666  0.05885101 -0.11252629  0.37466935
  -0.30570085  0.20120355 -0.26791267  0.4327669   0.47590781  0.15932423
   0.22372018  0.09763125  0.34463333  0.17459549  0.18824923  0.33386754
   0.11375066 -0.30309671 -0.01347139 -0.11980564]]"
1587,MySQL执行Select语句将结果导出到文件的方法,"如果是对MySQL整个表数据导出，可以参照文章：http://crazyant.net/1355.html然而也会遇到的场景是，需要执行一个SQL语句，然后将SQL语句的结果输出到文件；方法一：使用MySQL的select * into outfile '/tmp/rs.txt' from tb_name句型这是个不可行的方法；举个例子，执行以下的SQL语句：mysql -h10.10.10.10 -ucrazyant -p123456 -P3306 -e ""use test; select * into outfile '/tmp/rs.txt' from tb_test;""这个SQL总会报出下面的错误：ERROR 1045 (28000) at line 1: Access denied for user 'crazyant'@'10.10.10.10' (using password: YES)原因是这个语句并不是在MySQL客户端，而是在MySQL的服务器上执行的，通常用于服务器管理员在服务器机器上进行数据备份使用，由于MySQL客户端账号并没有访问服务器机器本身的权限，所以这个SQL执行不会成功。方法2：直接将SQL执行的结果重定向到文件即可执行下面的命令，能够将SQL语句执行的结果输出到文件：mysql -h10.10.10.10 -ucrazyant -p123456 -P3306 -Ne ""use test; select * from tb_test;"" > /tmp/rs.txt其中-Ne是执行这个SQL语句的选项，-N代表输出SQL语句执行结果中不带第一行的字段名称，-e表示要执行SQL语句；执行下面的命令，则可以执行SQL文件，并把结果输出到文件：新建一个文件，名称为runsql.sql，内容为：use test; select * from db_test;然后这样执行命令：mysql -h10.10.10.10 -ucrazyant -p123456 -P3306 -N < runsql.sql > /tmp/rs.txt其中-N命令仍然表示不输出表头字段说明（第一行），小于号表示输入重定向，runsql.sql的文件内容会被发送给mysql的命令，大于号则表示输出重定向，会将命令执行的结果输出到文件；总结：select into outfile只能在MySQL服务器上执行，客户端上无法执行；mysql -Ne ""sql"" > rs.txt可以将SQL语句执行后输出为文件mysql -N < runsql.sql > rs.txt可以执行sql文件中的内容，然后将结果输出到文件；mysql -N的选项，表示输出时不带表头本文地址：http://crazyant.net/1587.html ","['mysql', '执行', 'select', '语句', '结果', '导出', '文件', '方法', '如果', 'mysql', '整个', '数据', '导出', '可以', '参照', '文章', 'http', 'crazyant', 'net', '1355', 'html', '然而', '遇到', '场景', '需要', '执行', '一个', 'sql', '语句', '然后', 'sql', '语句', '结果', '输出', '文件', '方法', '使用', 'mysql', 'select', 'into', 'outfile', 'tmp', 'rs', 'txt', 'from', 'tb', 'name', '句型', '可行', '方法', '举个', '例子', '执行', '以下', 'sql', '语句', 'mysql', 'h10.10', '10.10', 'ucrazyant', 'p123456', 'p3306', 'use', 'test', 'select', 'into', 'outfile', 'tmp', 'rs', 'txt', 'from', 'tb', 'test', '这个', 'sql', '总会', '报出', '下面', '错误', 'error', '1045', '28000', 'at', 'line', 'access', 'denied', 'for', 'user', 'crazyant', '10.10', '10.10', 'using', 'password', 'yes', '原因', '这个', '语句', '不是', 'mysql', '客户端', '而是', 'mysql', '服务器', '执行', '通常', '用于', '服务器', '管理员', '服务器', '机器', '进行', '数据备份', '使用', '由于', 'mysql', '客户端', '账号', '没有', '访问', '服务器', '机器', '本身', '权限', '所以', '这个', 'sql', '执行', '不会', '成功', '方法', '直接', 'sql', '执行', '结果', '重定向', '文件', '即可', '执行', '下面', '命令', '能够', 'sql', '语句', '执行', '结果', '输出', '文件', 'mysql', 'h10.10', '10.10', 'ucrazyant', 'p123456', 'p3306', 'ne', 'use', 'test', 'select', 'from', 'tb', 'test', 'tmp', 'rs', 'txt', '其中', 'ne', '执行', '这个', 'sql', '语句', '选项', '代表', '输出', 'sql', '语句', '执行', '结果', '中不带', '第一行', '字段名', '表示', '执行', 'sql', '语句', '执行', '下面', '命令', '可以', '执行', 'sql', '文件', '结果', '输出', '文件', '新建', '一个', '文件', '名称', 'runsql', 'sql', '内容', 'use', 'test', 'select', 'from', 'db', 'test', '然后', '这样', '执行命令', 'mysql', 'h10.10', '10.10', 'ucrazyant', 'p123456', 'p3306', 'runsql', 'sql', 'tmp', 'rs', 'txt', '其中', '命令', '仍然', '表示', '输出表', '头字段', '说明', '第一行', '小于号', '表示', '输入', '重定向', 'runsql', 'sql', '文件', '内容', '发送给', 'mysql', '命令', '大于号', '表示', '输出', '重定向', '命令', '执行', '结果', '输出', '文件', '总结', 'select', 'into', 'outfile', '只能', 'mysql', '服务器', '执行', '客户端', '无法', '执行', 'mysql', 'ne', 'sql', 'rs', 'txt', '可以', 'sql', '语句', '执行', '输出', '文件', 'mysql', 'runsql', 'sql', 'rs', 'txt', '可以', '执行', 'sql', '文件', '内容', '然后', '结果', '输出', '文件', 'mysql', '选项', '表示', '输出', '时不带', '表头', '本文', '地址', 'http', 'crazyant', 'net', '1587', 'html']","[[-0.28849764 -0.16435413  0.23171812  0.19549011  0.3374715  -0.39724127
  -0.20743244  0.59767715 -0.00747082 -0.04434321 -0.08832191 -0.38014641
  -0.20797977  0.6817704   0.16265495 -0.12043647 -0.1705261   0.01240279
  -0.09297101 -0.52610965  0.03525609  0.27519421 -0.02245042 -0.13091169
   0.12935268 -0.6262438  -0.34742495  0.10684511 -0.24690717 -0.07500514
   0.26865344  0.0584751  -0.03739192 -0.16366837 -0.14155029  0.40999831
  -0.17259306 -0.2456073   0.13212311 -0.86737277 -0.17846173 -0.66068703
  -0.02746889 -0.06306898 -0.1797573  -0.1856873  -0.3072724   0.54254437
  -0.16603986  0.44774641  0.2267825  -0.31887095 -0.11259417 -0.26159787
   0.0724748   0.46093706  0.27969947 -0.06978498  0.12548372 -0.12189472
   0.07273148  0.31452487  0.0299691   0.09770558 -0.43425802 -0.01138393
   0.04476966 -0.00268612 -0.28261589  0.4973323   0.17781407 -0.26227813
   0.45329246 -0.36989171  0.66700328  0.22834046  0.24522151 -0.16309521
  -0.32820565 -0.22934444 -0.08616648  0.00948898 -0.0753212   0.40042563
  -0.44009072  0.23474222 -0.32966023  0.49354335  0.55933514  0.15584995
   0.35937259  0.13335289  0.41123659  0.22133975  0.21944314  0.44509817
   0.10245022 -0.33321722  0.00091548 -0.11705682]]"
1600,Hive取非Group by字段数据的方法,"遇到这么一个需求，输入数据为一个ID对应多个name，要求输出数据为ID是唯一的，name随便取一个就可以。执行以下hive ql语句：SELECT   sid,  class_id FROM  table2 GROUP BY sid ;会报错：FAILED: Error in semantic analysis: Line 1:18 Expression not in GROUP BY key 'class_id'查了一下，HIVE有这么一个函数collect_set，类似于mysql的group_concat函数，把每个分组的其他字段，按照逗号进行拼接，得到一个最终字符串：collect_set(col)返回类型：array解释：返回一个去重后的对象集合将上述的QL语句改一下：select sid,collect_set(class_id) from table2 group by sid;结果是这样的：1 [11,12,13]2 [11,14]3 [12,15]4 [12,13]5 [16,14]7 [13,15]这个时候，我们就可以针对第二列做一些计数、求和操作，分别对应到Hive的聚合函数count、sum。对应到本文的目的，直接从数组获取第一个元素就达到目的了，这样做：select sid,collect_set(class_id)[0] from table2 group by sid;结果如下：1 112 113 124 125 167 13总结：Hive不允许直接访问非group by字段；对于非group by字段，可以用Hive的collect_set函数收集这些字段，返回一个数组；使用数字下标，可以直接访问数组中的元素；参考文章：http://wangjunle23.blog.163.com/blog/static/117838171201310222309391/本文地址：http://crazyant.net/1600.html","['hive', '取非', 'group', 'by', '字段', '数据', '方法', '遇到', '这么', '一个', '需求', '输入', '数据', '一个', 'id', '对应', '多个', 'name', '要求', '输出', '数据', 'id', '唯一', 'name', '随便', '一个', '可以', '执行', '以下', 'hive', 'ql', '语句', 'select', 'sid', 'class', 'id', 'from', 'table2', 'group', 'by', 'sid', '报错', 'failed', 'error', 'in', 'semantic', 'analysis', 'line', '18', 'expression', 'not', 'in', 'group', 'by', 'key', 'class', 'id', '一下', 'hive', '这么', '一个', '函数', 'collect', 'set', '类似', 'mysql', 'group', 'concat', '函数', '每个', '分组', '其他', '按照', '逗号', '进行', '拼接', '得到', '一个', '最终', '字符串', 'collect', 'set', 'col', '返回', '类型', 'array', '解释', '返回', '一个', '重后', '对象', '集合', '上述', 'ql', '语句', '一下', 'select', 'sid', 'collect', 'set', 'class', 'id', 'from', 'table2', 'group', 'by', 'sid', '结果', '这样', '11', '12', '13', '11', '14', '12', '15', '12', '13', '16', '14', '13', '15', '这个', '时候', '我们', '可以', '针对', '第二列', '一些', '计数', '求和', '操作', '分别', '对应', 'hive', '聚合', '函数', 'count', 'sum', '对应', '本文', '目的', '直接', '数组', '获取', '第一个', '元素', '达到', '目的', '这样', 'select', 'sid', 'collect', 'set', 'class', 'id', 'from', 'table2', 'group', 'by', 'sid', '结果', '如下', '112', '113', '124', '125', '167', '13', '总结', 'hive', '允许', '直接', '访问', 'group', 'by', '字段', '对于', 'group', 'by', '字段', '可以', 'hive', 'collect', 'set', '函数', '收集', '这些', '返回', '一个', '数组', '使用', '数字', '下标', '可以', '直接', '访问', '数组', '元素', '参考', '文章', 'http', 'wangjunle23', 'blog.163', 'com', 'blog', 'static', '117838171201310222309391', '本文', '地址', 'http', 'crazyant', 'net', '1600', 'html']","[[-0.26503704 -0.13108965  0.2724884   0.1685902   0.32939223 -0.41392419
  -0.18047656  0.55789356 -0.03775817 -0.0879118  -0.05713137 -0.40414473
  -0.18477412  0.66061332  0.17892606 -0.12103834 -0.15573381  0.00373167
  -0.09513668 -0.57453534 -0.01409159  0.28148829 -0.04434586 -0.18552752
   0.09018853 -0.58068392 -0.35410501  0.07894028 -0.25783522 -0.0711788
   0.22716265  0.02848902 -0.00543358 -0.15265145 -0.16613849  0.38191493
  -0.19572777 -0.27928305  0.11269633 -0.8476926  -0.17889001 -0.68043901
  -0.07269959 -0.03986889 -0.16250061 -0.23536208 -0.27909957  0.46319261
  -0.19240486  0.50117305  0.18899183 -0.31129194 -0.13187617 -0.22340416
   0.02538858  0.45131367  0.22411532 -0.09298713  0.1162135  -0.1468266
   0.0897446   0.29013349  0.01569123  0.10854542 -0.42447409  0.0283373
   0.05981343 -0.02682505 -0.3172024   0.50167202  0.13906816 -0.23179359
   0.44118067 -0.37188067  0.64061106  0.27373201  0.1943635  -0.17917212
  -0.33721117 -0.17871457 -0.03609692  0.03910932 -0.10976243  0.41814115
  -0.40969642  0.23607915 -0.32794537  0.50078235  0.56277307  0.17576016
   0.30960856  0.12963537  0.41091035  0.20770054  0.22534742  0.41834007
   0.12217299 -0.35008335 -0.02952403 -0.12617945]]"
1607,将普通Maven Spring项目转换成Web项目的方法,"最近在按照李刚的《疯狂J2EE》一书学习Spring，其中第7章的一些代码是ant编译的，而公司用的是Maven，所以想要将其部署并转换成Maven Spring Web项目来执行一下。本文用的是《疯狂j2ee》第7章的request_scope代码；1、建立普通的maven project；2、转换成web项目，这里选2.5版本，注意有的WEB项目的webcontent目录会有所不同，可以点击""further configuration available""按钮进行设定，设定的时候，路径从src目录开始复制即可。[caption id=""attachment_1672"" align=""aligncenter"" width=""525""] 配置WEB目录所在的位置[/caption]3、把光盘的代码复制到相应的位置这里看到test.jsp报错了，因为没有Spring的jar包导致，第4步会在Pom.xml中配置这个依赖；4、在pom.xml中增加依赖的Spring的JAR包<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd""><modelVersion>4.0.0</modelVersion><groupId>pss</groupId><artifactId>chapter75-requestScope</artifactId><version>0.0.1-SNAPSHOT</version><dependencies><dependency><groupId>org.springframework</groupId><artifactId>spring-context</artifactId><version>4.0.6.RELEASE</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-web</artifactId><version>4.0.6.RELEASE</version></dependency></dependencies></project> 5、在web.xml中配置部署Spring配置文件<?xml version=""1.0"" encoding=""GBK""?><web-app xmlns=""http://java.sun.com/xml/ns/javaee"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""xsi:schemaLocation=""http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd""version=""3.0""><listener><listener-class>org.springframework.web.context.ContextLoaderListener</listener-class></listener><listener><listener-class>org.springframework.web.context.request.RequestContextListener</listener-class></listener><context-param><param-name>contextConfigLocation</param-name><param-value>classpath:applicationContext.xml</param-value></context-param></web-app> 6、设定将Maven的jar包也发布到Tomcat的web目录中，如果依赖了其他的子项目，也需要在这里进行添加，举个例子，如果你的项目用到了项目组的common的JAR包，那么在这里需要也加上才能正确的被部署。7、新建一个server，把该web项目部署在其中8、修改server中tomcat的路径并启动server运行，看到结果；总结：1、需要将项目转成web项目；2、需要在pom中引入spring的context和web两个依赖包；3、需要在项目部署的设置中，将maven的包也部署一下；3、需要在web.xml中指定applicationContext.xml的部署位置；本文地址：http://crazyant.net/1607.html","['普通', 'maven', 'spring', '项目', '转换成', 'web', '项目', '方法', '最近', '按照', '李刚', '疯狂', 'j2ee', '一书', '学习', 'spring', '其中', '一些', '代码', 'ant', '编译', '公司', 'maven', '所以', '想要', '部署', '转换成', 'maven', 'spring', 'web', '项目', '执行', '一下', '本文', '疯狂', 'j2ee', 'request', 'scope', '代码', '建立', '普通', 'maven', 'project', '转换成', 'web', '项目', '这里', '2.5', '版本', '注意', 'web', '项目', 'webcontent', '目录', '有所不同', '可以', '点击', 'further', 'configuration', 'available', '按钮', '进行', '设定', '设定', '时候', '路径', 'src', '目录', '开始', '复制', '即可', 'caption', 'id', 'attachment', '1672', 'align', 'aligncenter', 'width', '525', '配置', 'web', '目录', '所在', '位置', 'caption', '光盘', '代码', '复制到', '相应', '位置', '这里', '看到', 'test', 'jsp', '报错', '因为', '没有', 'spring', 'jar', '导致', '步会', 'pom', 'xml', '配置', '这个', '依赖', 'pom', 'xml', '增加', '依赖', 'spring', 'jar', 'project', 'xmlns', 'http', 'maven', 'apache', 'org', 'pom', '4.0', 'xmlns', 'xsi', 'http', 'www', 'w3', 'org', '2001', 'xmlschema', 'instance', 'xsi', 'schemalocation', 'http', 'maven', 'apache', 'org', 'pom', '4.0', 'http', 'maven', 'apache', 'org', 'xsd', 'maven', '4.0', 'xsd', 'modelversion', '4.0', 'modelversion', 'groupid', 'pss', 'groupid', 'artifactid', 'chapter75', 'requestscope', 'artifactid', 'version', '0.0', 'snapshot', 'version', 'dependencies', 'dependency', 'groupid', 'org', 'springframework', 'groupid', 'artifactid', 'spring', 'context', 'artifactid', 'version', '4.0', 'release', 'version', 'dependency', 'dependency', 'groupid', 'org', 'springframework', 'groupid', 'artifactid', 'spring', 'web', 'artifactid', 'version', '4.0', 'release', 'version', 'dependency', 'dependencies', 'project', 'web', 'xml', '配置', '部署', 'spring', '配置文件', 'xml', 'version', '1.0', 'encoding', 'gbk', 'web', 'app', 'xmlns', 'http', 'java', 'sun', 'com', 'xml', 'ns', 'javaee', 'xmlns', 'xsi', 'http', 'www', 'w3', 'org', '2001', 'xmlschema', 'instance', 'xsi', 'schemalocation', 'http', 'java', 'sun', 'com', 'xml', 'ns', 'javaeehttp', 'java', 'sun', 'com', 'xml', 'ns', 'javaee', 'web', 'app', 'xsd', 'version', '3.0', 'listener', 'listener', 'class', 'org', 'springframework', 'web', 'context', 'contextloaderlistener', 'listener', 'class', 'listener', 'listener', 'listener', 'class', 'org', 'springframework', 'web', 'context', 'request', 'requestcontextlistener', 'listener', 'class', 'listener', 'context', 'param', 'param', 'name', 'contextconfiglocation', 'param', 'name', 'param', 'value', 'classpath', 'applicationcontext', 'xml', 'param', 'value', 'context', 'param', 'web', 'app', '设定', 'maven', 'jar', '发布', 'tomcat', 'web', '目录', '如果', '依赖', '其他', '子项目', '需要', '这里', '进行', '添加', '举个', '例子', '如果', '项目', '用到', '项目组', 'common', 'jar', '那么', '这里', '需要', '加上', '才能', '正确', '部署', '新建', '一个', 'server', 'web', '项目', '部署', '其中', '修改', 'server', 'tomcat', '路径', '启动', 'server', '运行', '看到', '结果', '总结', '需要', '项目', '转成', 'web', '项目', '需要', 'pom', '引入', 'spring', 'context', 'web', '两个', '依赖', '需要', '项目', '部署', '设置', 'maven', '部署', '一下', '需要', 'web', 'xml', '指定', 'applicationcontext', 'xml', '部署', '位置', '本文', '地址', 'http', 'crazyant', 'net', '1607', 'html']","[[-0.29727581 -0.07302809  0.30036213  0.30276727  0.19186111 -0.40802587
  -0.07824836  0.51080212 -0.1037907  -0.12134536 -0.07169659 -0.45008884
  -0.04969854  0.54125339  0.1564313  -0.1580999  -0.10435269 -0.03518288
  -0.00629653 -0.47268237 -0.03055396  0.34997263 -0.11583009 -0.22161459
  -0.0150678  -0.43625563 -0.35445031  0.03357389 -0.19638234 -0.09199153
   0.17570978  0.07467054  0.00121824 -0.0983287  -0.20687047  0.43238144
  -0.19985509 -0.3122847   0.06036143 -0.73438449 -0.0636455  -0.51605231
  -0.06760002 -0.01699746 -0.1334257  -0.25595645 -0.37548185  0.39827799
  -0.06914836  0.41044321  0.03820224 -0.34232956 -0.05347713 -0.26266619
  -0.01234894  0.46561755  0.14844695 -0.09013151  0.14947191 -0.11596098
   0.15809317  0.18442842  0.01429908  0.06259931 -0.38242892  0.08713843
  -0.01482144  0.03901316 -0.26317745  0.4532125  -0.00421789 -0.14461212
   0.44317528 -0.36605494  0.54366341  0.34127995  0.2656078  -0.23242582
  -0.25228143 -0.19113378 -0.07686913  0.03087658 -0.12290787  0.45796768
  -0.32787402  0.20254531 -0.28295105  0.52347335  0.56210464  0.21012211
   0.17730778  0.12765301  0.33942458  0.20236431  0.20354832  0.46575357
   0.08438506 -0.24253126  0.19229244 -0.11521943]]"
1625,Hive开发经验问答式总结,"本文是自己开发Hive经验的总结，希望对大家有所帮助，有问题请留言交流。Hive开发经验思维导图[caption id=""attachment_1652"" align=""aligncenter"" width=""2005""] Hive开发经验总结思维导图（点击查看大图）[/caption] 文档目录向Hive程序传递变量的方式方法1：字符串、正则、模板引擎等暴力方式替换方法2：使用系统变量或者环境变量方法3：在执行Hive命令时传入hivevar和hiveconfOrder by和Sort by的区别？遇到SQL无法实现的逻辑该怎么办？怎样使用脚本语言来扩展HIVEHive任务执行很慢，但是导入数据非常的快？要读取的数据是tar.gz的格式怎么办？已经有了Partitoin，为什么需要Bucket？字段类型设置的越宽泛当然更好了？有哪些针对HIVE的优化方法Join时大表写在最后如果Join表数据量小，使用MapJoin数据的思维，多使用临时表怎样实现In语法其他的一些技巧删除整个数据库的方法查看数据表的详细信息Hive中可以执行shell和hadoop dfs命令union all在数据对齐中的使用NULL和数字相加的问题增加数据到HIVE表的两种方法1. 向Hive程序传递变量的方式使用Hive编写程序最常用的方法是将Hive语句写到文件中，然后使用hive -f filename.hql来批量执行查询语句。经常需要将外部参数传入到hql语句中替换其中的变量来动态执行任务，比如动态设定数据库名、表名、时间值、字段序列等变量，以达到脚本泛化执行的目的。方法1：字符串、正则、模板引擎等暴力方式替换最简单也最暴力的方式，是在hql文件中设定{table_name}这样的变量占位符，然后使用调度程序比如shell、python、java语言读取整个hql文件到一个字符串，替换其中的变量。然后使用hive -e cmd_str来执行该Hive命令字符串。举例代码如表格 1和表格 2所示。表格 1 hive ql文件内容# 来源：疯狂的蚂蚁www.crazyant.netuse test;select * from student limit {limit_count};表格 2 Python脚本读取、替换和执行Hive程序import os#step1: 读取query.ql整个文件的内容ql_source=open(""query.ql"",""r"").read()#step2：替换其中的占位符变量ql_target=ql_source.replace(""{limit_count}"",""10"")#step3：使用hive -e的方法执行替换后的Hql语句序列os.system(""hive -e '%s'""%ql_target)方法2：使用系统变量或者环境变量通常情况是使用shell来调度执行hive程序的，Hive提供了可以直接读取系统env和system变量的方法，如表格 3所示。表格 3 使用env和system读取外部环境变量use test;--使用${env:varname}的方法读取shell中export的变量select * from student limit ${env:g_limit_count};--使用${system:varname}的方法读取系统的变量select ${system:HOME} as my_home from student;这种方式比较好，比如在shell中可以配置整个项目的各种路径变量，hive程序中使用env就可以直接读取这些配置了。方法3：在执行Hive命令时传入hivevar和hiveconf第3种方法是在用hive命令执行hive程序时传递命令行参数，使用-hivevar和-hiveconf两种参数选项给该次执行传入外部变量，其中hivevar是专门提供给用户自定义变量的，而hiveconf则包括了hive-site.xml中配置的hive全局变量。表格 4 hivevar和hiveconf传递变量的方法hive -hivevar -f filehive -hivevar tbname='a' -hivevar count=10 -f filename.hqlhive -hivevar -e cmdhive -hivevar tbname='a' -hivevar count=10 -e 'select * from ${hivevar:tbname} limit ${hivevar:count}'hive -hiveconf -f filehive -hiveconf tbname='a' - hiveconf count=10 -f filename.hqlhive -hiveconf -e cmdhive -hiveconf tbname='a' -hiveconf count=10 -e 'select * from ${hivevar:tbname} limit ${hivevar:count}'最经常使用的是env和-hivevar方法，前者直接在Hive脚本中读取shell export的变量，后者则对脚本的当前执行进行参数设置。2. Order by和Sort by的区别？Hive基于HADOOP执行分布式程序，和普通单机程序不同的一个特点就是最终的数据会产生多个子文件，每个reducer节点都会处理partition给自己的那份数据产生结果文件，这导致了在HADOOP环境下很难对数据进行全局排序，如果在HADOOP上进行order by全排序，会导致所有的数据集中在一台reducer节点上，然后进行排序，这样很可能会超过单个节点的磁盘和内存存储能力导致任务失败。一种替代的方案则是放弃全局有序，而是分组有序，比如不求全百度最高的点击词排序，而是求每种产品线的最高点击词排序。表格 5 使用order by会引发全局排序select * from baidu_click order by click desc;表格 6 使用distribute和sort进行分组排序select * from baidu_click distribute by product_line sort by click desc;distribute by + sort by就是该替代方案，被distribute by设定的字段为KEY，数据会被HASH分发到不同的reducer机器上，然后sort by会对同一个reducer机器上的每组数据进行局部排序。[caption id=""attachment_1636"" align=""aligncenter"" width=""532""] 图 2 order by是全局有序而distribute+sort是分组有序[/caption]distribute+sort的结果是按组有序而全局无序的，输入数据经过了以下两个步骤的处理：1) 根据KEY字段被HASH，相同组的数据被分发到相同的reducer节点；2) 对每个组内部做排序由于每组数据是按KEY进行HASH后的存储并且组内有序，其还可以有两种用途：1) 直接作为HBASE的输入源，导入到HBASE；2) 在distribute+sort后再进行orderby阶段，实现间接的全局排序；不过即使是先distribute by然后sort by这样的操作，如果某个分组数据太大也会超出reduce节点的存储限制，常常会出现137内存溢出的错误，对大数据量的排序都是应该避免的。3. 遇到SQL无法实现的逻辑该怎么办？经常有Hive语句无法满足的需求，比如将日期20140319转换成2014Q1的季度字符串、先按照KEY进行group然后取每个分组的limt N值等情景，最直接的实现是使用Hive的提供的Java UDF接口来实现。Hive共提供了以下三种类型的UDF，分别对应处理不同的场景：表格 7 Hive提供的3种UDF类型UDF类型名称特点举例UDF用户自定义函数读取一行，返回单个值abs求单行某字段的绝对值UDAF用户自定义聚合函数读取多行，返回单个值sum求多行的和UDTF用户自定义表生成函数读取一行或多行，返回多行或这多列explode将一个字段变成多行，每个元素是一行这三类函数，最常用是UDF，其次是UDAF，而UDTF一般都不会遇到，如下是一个UDF的编写与使用的完整实例，有以下几个特点：继承apache.hadoop.hive.ql.exec.UDF父类；覆盖Text evaluate(Text str)方法；表格 8 将日期转换成季度字符串的UDFpackage myudf;import org.apache.hadoop.hive.ql.exec.UDF;import org.apache.hadoop.io.Text;/** * 来源：疯狂的蚂蚁 www.crazyant.net* UDF处理一行数据，产生一行数据 * step1：用户需要继承UDF父类；step2：需要实现evalute方法用于被Hive回调； * @author www.crazyant.net */public class DateToQuarter extends UDF {    /**     * 把YYMMDD形式的日期字符串，转换成'2014Q1'形式的季度字符串；     * @param str 输入的日期     * @return '2014Q1'形式的季度字符串值     */    public Text evaluate(Text str) {        if (str == null) return null;        //提取字符串中的年份和月份        String year = str.toString().substring(0, 4);        int month = Integer.parseInt(str.toString().substring(4, 6));        String quarter = """";        if (month >= 1 && month <= 3) {            quarter = ""Q1"";        } else if (month >= 4 && month <= 6) {            quarter = ""Q2"";        } else if (month >= 7 && month <= 9) {            quarter = ""Q3"";        } else if (month >= 10 && month <= 12) {            quarter = ""Q4"";        }                // 要返回的2014Q1季度字符串        return new Text(year + quarter);    }}表格 9 Hive使用UDF的语法use test;add jar /home/users/crazyant/tmp/hive-udf-test-0.0.1-SNAPSHOT.jar;CREATE TEMPORARY FUNCTION datatoquarter as 'myudf.DateToQuarter.';select sname, datatoquarter(enter_date) from student;UDF和UTAF是两类非常常用的自定义函数，前者处理单个字段，后者处理多行合并为1个字段，如果熟悉JAVA可以用这种方法开发，优点是这些UDF程序会直接在MAP-REDUCE本身任务的JVM中运行效率较高，但是缺点在于开发复杂周期长，不如解释性语言如Python的开发高效。4. 怎样使用脚本语言来扩展HIVE除了JAVA也可以使用其它语言来编写Streaming程序扩展Hive，好处是开发速度快（省去了JAVA编译、打包等步骤），缺点是Hadoop会多启动一个子Streaming进程来和父Java进程来通信，导致性能的降低。[caption id=""attachment_1637"" align=""aligncenter"" width=""398""] 图 3 Streaming UDF比JAVA UDF慢[/caption] 开发Hive的Streaming程序和开发Hadoop的Streaming程序是相同的，都是从标准输入中读取按\t分割的数据，将\t分割的结果写出到标准输出中表格 10 Hive Streaming的Python脚本# coding: utf8'''来源：疯狂的蚂蚁 www.crazyant.net将日期字符串转换成季度字符串形式输入：YYYYMMDD或者YYYY-MM-DD的日期形式；返回：YYYYQ1、YYYYQ2、YYYYQ3、YYYYQ4，季度字符串形式'''import sysdef get_date_year_quarter_str(pdate):    '''获取日期的季度字符串形式    '''    (year_val, month_val) = (pdate[:4], pdate[4:6])    # 算出季度的序号    quarter_index = (int(month_val) - 1) / 3 + 1    quarter_str = ""%sQ%d"" % (year_val, quarter_index)        return quarter_strdef process_input():    '''主处理函数，每行最后一个字段是日期'''    for line in sys.stdin:        line = str(line).strip()        if not line: continue        fields = line.split(""\t"")        # 将YYYY-MM-DD转换成YYYYMMDD        date_val = str(fields[-1]).replace(""-"", """")        # 重新组装输出字段        output_fields = fields[:-1] + [get_date_year_quarter_str(date_val)]        print '\t'.join(output_fields)        if __name__ == ""__main__"":    process_input()然后在Hive程序中可以这样调用该Steaming脚本表格 11 Hive程序中调用Steaming的方法use test;-- 来源：疯狂的蚂蚁 www.crazyant.net-- step1：以绝对路径的方式添加脚本add file /home/users/crazyant/workbench/streaming/date_to_quarter.py;-- step2：用TRANSFORM.. using.. as.. 句式调用select      TRANSFORM (sname, birthday) using 'python date_to_quarter.py' as (sname, bir_quarter) from student_info; 几个需要注意的地方：需要用绝对路径的方法添加脚本文件；add file可以用于添加字典数据add file也是map join分发数据文件的方法select中除了TRANSFORM不能有其他的字段；所有需要的字段都需要写在TRANSFORM中；一个python脚本会处理该节点上所有的数据TRANSFORM一般都需要和distribute by.. sort by句式一起使用；如果不用distribute by.. sort by句式，数据会被分到1个reduce节点上，造成单点负载过重；因此该python脚本可以实现UTAF（多行聚合）和UDTF（1行变多行或多列）的；5. Hive任务执行很慢，但是导入数据非常的快？Hive使用Hadoop来执行查询，其查询执行速度是很慢的，但是使用load data向Hive中导入数据却非常快，这是因为Hive采取的是读时模式。读时模式：读取数据的时候，对数据的类型、格式做检查；写时模式：写入数据的时候，对数据的类型、格式等规范做检查；将数据存到Hive的数据表时，Hive采用的是“读时模式”，意思是针对写操作不会做任何校验，只是简单的将文件复制到Hive的表对应的HDFS目录，如图 4所示。跟“读时模式”相对应的是“写时模式”，RDBMS一般采用“写时模式”，在将数据写入到数据表的时候会检查每一条记录是否合法，如果检查不通过会直接返回失败信息。[caption id=""attachment_1639"" align=""aligncenter"" width=""457""] 图 4 向Hive中导入数据只是简单的复制[/caption] 由于向Hive中存入数据的只是简单的文件复制和粘贴，所以导入数据速度非常的快。当读取、查询的时候，才会根据表模式来解释数据，这个时候如果遇到了不符合模式的数据，Hive会直接将数据解析成NULL。Hive采用读时模式带来了以下几个好处：向Hive表中新增数据非常的快，通常情况下对于外来数据，采用的方法是直接用Hadoop命令将文件上传到一个HDFS目录，Hive直接读这个目录；一份数据可以被解析成多种模式，存储在Hive表中的数据跟Hive本身没有关系，数据也可以被其他工具比如Pig来处理；6. 要读取的数据是tar.gz的格式怎么办？HADOOP中存放的大部分都是日志数据，这些数据的字段重复率高，进行压缩的话能节省大量的存储空间，同时由于减少了网络传输带宽，使得任务的执行速率也会提升。有没有方法读取压缩后的数据，比如tar.gz结尾的文件呢，答案是肯定的，并且不需要做任何操作就可以读取。HADOOP默认已经安装了编码解码器，并且是自动加载的。使用如下命令可以查看当前HADOOP安装的编解码器：表 1 Hive客户端默认安装的编码解码器hive> set io.compression.codecs;io.compression.codecs= org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.BZip2Codec,org.apache.hadoop.io.compress.LzopCodec,org.apache.hadoop.io.compress.LzoCodec,org.apache.hadoop.io.compress.LzmaCodec,org.apache.hadoop.io.compress.QuickLzCodec 其中GzipCodec用于对.tar.gz文件进行压缩和解压。不同的编解码文件规则也是不同的，比如gzip文件由于压缩的时候掩盖了文件边缘信息，导致这个文件如果按大小拆分后会乱码，因此每个gzip文件如果特别大，就不适合做HADOOP计算。这样的文件可以采用另外的Bzip2进行压缩，这种格式用限定大小比如64MB的方法拆分后，每个分片都是独立完整能够读取的。对于HADOOP的计算，有以下的三种压缩：输入数据压缩：比如对原始日志进行压缩，目的是节省HDFS存储空间；中间过程压缩：对MAP的结果进行压缩，传输到REDUCE节点后解压缩，然后进行计算，可以节省网络传输时间，不过解压缩会耗费CPU。HADOOP由于大部分计算是IO密集型而非CPU密集型，因此这种方法也会使用；输出结果压缩：目的也是节省存储空间，同时方便后续的其他任务快速读取和处理；7. 已经有了Partitoin，为什么需要Bucket？[caption id=""attachment_1640"" align=""aligncenter"" width=""381""] 图 5 Hive各个数据结构的逻辑划分[/caption] 如图 5是Hive的数据结构划分，从大到小依次是：数据库database：对应HDFS上的最顶层目录，类似MySQL的数据库；表table：对应数据库下面的文件夹，表下面可以直接放数据，对应MySQL的表；分区partition：是对表按照某一维度进行的分表存储，比如各个省份的数据分别是一张表、或者每天一个分区，对应MySQL的分表概念；分桶bucket：是对数据按照某一字段进行HASH分开存储的结果，比如如果按照账号ID进行2个bucket存储，那么账号ID是奇数或者偶数，会分开存到两个不同的篮子中；文件：这个文件代表原始数据，可以放在篮子中，也可以放在partion和table中。由此可以看出，partition和bucket的概念是类似的，不过也有所不同。bucket是对partion的更深一层HASH划分，并且可以限定HASH的桶数。如果按照日期分区，那么每天都是一个partition一直增长下去，但是如果限定30个bucket，不论多少数据，都会分开放在这30个bucket中。同时分桶的概念，也是为了解决分区的一个问题，比如可以按照天、季度、省份等对数据分区，因为这些分类都是可控的，但是无法对账号进行分区，这样的分区数目会太大超过Inode数目限制。分桶的出现有以下优点：解决一些数据无法分区问题，比如不能按账号分区，但是可以把账号数据分成N个桶；桶的数据量是固定的，所以不会有数据波动；每个桶中是一类数据，适合抽样；分桶有利于高效的Map join，比如两个表都按照账号ID分成了30个桶，那么可以肯定同一个账号肯定都在对应的桶里面，这样就实现了分桶JOIN。8. 字段类型设置的越宽泛当然更好了？Hive遵从读时模式，不论表模式定义成什么样子，存储的数据量是不变的。于是为了表模式的可扩展性，很容易将字段类型设置成最宽泛，比如只要是数字就设置成bigint，理由就是“数据量并没有因为我设置更大的范围类型而存储变大，当然设置越宽泛越好”。字段类型确实没有影响到数据的存储，但是影响到了数据的计算。[caption id=""attachment_1642"" align=""aligncenter"" width=""495""] 图 6 Java通过Hive表定义来给存储的数据字段建模[/caption] 由于Hive底层是执行的Hadoop程序是使用Java来实现的，将Hive的执行命令转化成Hive语句执行时，会将表字段的类型映射到Java中的变量，比如Hive中的int会映射到Java中的Int，但是Hive中的bigint会映射到Java中的Long。当程序被分发到上千的机器节点上的时候，由于分配的是long类型而不是更合适的int类型，会造成整体的内存耗费量大幅增加，最终的结果就是Hive的执行效率降低了。如果确认能够用更小的类型表示字段，就不要用更宽泛的类型。9. 有哪些针对HIVE的优化方法Join时大表写在最后执行例如tablea join tableb join tablec的Hive join语句是，Hive会将table和tableb都全部加载到内存，然后逐行扫描tablec进行Join，因此写Join语句时一定把大表写在最后。如果Join表数据量小，使用MapJoin如果确认用于Join的表数据量很小，比如只有100MB大小，可以使用/*+ MAPJOIN(a) */语法，这样Hive会先将小表分发到所有reducer节点的分布式缓存中并加载到内存，然后进行Join操作，由于减少了shuffle操作，性能有所提升。表 2 使用mapjoin的方法SELECT /*+ MAPJOIN(a) */tablea.id, tableb.nameFROM tablea join tableb on (tablea.id=tableb.id); 数据的思维，多使用临时表和关系数据库不同，Hive最终是对磁盘上的文件进行扫描处理，应该用数据处理的思维来待这些SQL。如果一个表很大，但是只用到了其中的一部分列字段，那么最好先建立一个临时表，该临时表的字段是大表的有效字段。这样会减少大表的重复扫描来提升性能。不过临时表太多也是Hive的一个确定，这也是Pig其实更适合用于ETL处理的一个对比。怎样实现In语法Hive没有提供IN语法，比如in(select)的语句都会报错，但是这种需求是存在的。其实可以通过left semi join来实现。比如有这么两个数据表：[caption id=""attachment_1643"" align=""aligncenter"" width=""420""] 图 7 left semi join的例子数据[/caption] 对这两个表执行下面的left semi join操作：表 3 left semi join实现IN语法的方法SELECT * FROM table1 LEFT semi JOIN table2 ON ( table1.student_no = table2.student_no);会得到如下的执行结果：1 name12 name23 name34 name45 name5该结果和使用in(select)结果是相同的。10. 其他的一些技巧删除整个数据库的方法当数据库存在表时，先要删除表再能删除数据库，不过加上CASCADE关键字会递归的删除整个数据库：DROP DATABASE test_db CASCADE;查看数据表的详细信息可以有3种方法查看数据表的信息，分别是desc student_info; desc extended student_info; desc formatted student_info;第1种显示最简单的字段信息，第2种除了显示字段信息还显示数据存放位置、输入输出格式等详细信息，第3种则是用格式化的方法显示详细信息，更方便查看。Hive中可以执行shell和hadoop dfs命令在hive程序中可以直接执行shell命令和hadoop命令，并且因为这些HADOOP命令会直接共用Hive的当前JVM，执行速度会更快；表格 12 在Hive环境下能更快速的执行Hadoop命令hive> dfs -ls /app/ecom; union all在数据对齐中的使用常常会遇到来自很多数据源的数据，每份数据都有相似的格式，并且处理逻辑也是相同的。可以用union all先将各份数据对齐后存储到一个表中，后续再对这个大表进行统一处理。NULL和数字相加的问题如果有用到sum函数，但是发现sum的列中有NULL值，可以使用以下方法转换成0值：COALESCE(f, cast(0 AS bigint))，coalesce方法会返回列表中第一个不为NULL的字段，相当于如果第一个字段是NULL，就第二个字段。增加数据到HIVE表的两种方法如果是外部数据，可以用external外部表，每天用hadoop fs -put的方法将数据复制到表目录中即可，这样也可以用于除了Hive的其他程序读取；如果是中间表、临时表、产出表，则可以使用内部表，每天计算全量覆盖这些表内容； 本文地址：http://crazyant.net/1625.html ，转载请注明出处，谢谢。本文也有PDF格式的文档，文字更清晰，只是图片不能放大，下载地址：http://pan.baidu.com/s/1sjpwjSh","['hive', '开发', '经验', '问答式', '总结', '本文', '自己', '开发', 'hive', '经验', '总结', '希望', '大家', '有所', '帮助', '问题', '留言', '交流', 'hive', '开发', '经验', '思维', '导图', 'caption', 'id', 'attachment', '1652', 'align', 'aligncenter', 'width', '2005', 'hive', '开发', '经验总结', '思维', '导图', '点击', '查看', '大图', 'caption', '文档', '目录', 'hive', '程序', '传递', '变量', '方式', '方法', '字符串', '正则', '模板', '引擎', '暴力', '方式', '替换', '方法', '使用', '系统', '变量', '或者', '环境变量', '方法', '执行', 'hive', '命令', '传入', 'hivevar', 'hiveconforder', 'by', 'sort', 'by', '区别', '遇到', 'sql', '无法', '实现', '逻辑', '怎么办', '怎样', '使用', '脚本语言', '扩展', 'hivehive', '任务', '执行', '但是', '导入', '数据', '非常', '读取', '数据', 'tar', 'gz', '格式', '怎么办', '已经', 'partitoin', '为什么', '需要', 'bucket', '类型', '设置', '宽泛', '当然', '更好', '哪些', '针对', 'hive', '优化', '方法', 'join', '时大表写', '最后', '如果', 'join', '数据量', '使用', 'mapjoin', '数据', '思维', '使用', '临时', '怎样', '实现', 'in', '语法', '其他', '一些', '技巧', '删除', '整个', '数据库', '方法', '查看', '数据表', '详细信息', 'hive', '可以', '执行', 'shell', 'hadoop', 'dfs', '命令', 'union', 'all', '数据', '对齐', '使用', 'null', '数字', '相加', '问题', '增加', '数据', 'hive', '两种', '方法', 'hive', '程序', '传递', '变量', '方式', '使用', 'hive', '编写程序', '常用', '方法', 'hive', '语句', '文件', '然后', '使用', 'hive', 'filename', 'hql', '批量', '执行', '查询', '语句', '经常', '需要', '外部', '参数', '传入', 'hql', '语句', '替换', '其中', '变量', '动态', '执行', '任务', '比如', '动态', '设定', '数据库', '表名', '时间', '序列', '变量', '达到', '脚本', '泛化', '执行', '目的', '方法', '字符串', '正则', '模板', '引擎', '暴力', '方式', '替换', '简单', '暴力', '方式', 'hql', '文件', '设定', 'table', 'name', '这样', '变量', '占位', '然后', '使用', '调度', '程序', '比如', 'shell', 'python', 'java', '语言', '读取', '整个', 'hql', '文件', '一个', '字符串', '替换', '其中', '变量', '然后', '使用', 'hive', 'cmd', 'str', '执行', 'hive', '命令', '字符串', '举例', '代码', '表格', '表格', '所示', '表格', 'hive', 'ql', '文件', '内容', '来源', '疯狂', '蚂蚁', 'www', 'crazyant', 'netuse', 'test', 'select', 'from', 'student', 'limit', 'limit', 'count', '表格', 'python', '脚本', '读取', '替换', '执行', 'hive', '程序', 'import', 'os', 'step1', '读取', 'query', 'ql', '整个', '文件', '内容', 'ql', 'source', 'open', 'query', 'ql', 'read', 'step2', '替换', '其中', '占位', '变量', 'ql', 'target', 'ql', 'source', 'replace', 'limit', 'count', '10', 'step3', '使用', 'hive', '方法', '执行', '替换', 'hql', '语句', '序列', 'os', 'system', 'hive', 'ql', 'target', '方法', '使用', '系统', '变量', '或者', '环境变量', '通常', '情况', '使用', 'shell', '调度', '执行', 'hive', '程序', 'hive', '提供', '可以', '直接', '读取', '系统', 'env', 'system', '变量', '方法', '表格', '所示', '表格', '使用', 'env', 'system', '读取', '外部', '环境变量', 'use', 'test', '--', '使用', 'env', 'varname', '方法', '读取', 'shell', 'export', '变量', 'select', 'from', 'student', 'limit', 'env', 'limit', 'count', '--', '使用', 'system', 'varname', '方法', '读取', '系统', '变量', 'select', 'system', 'home', 'as', 'my', 'home', 'from', 'student', '这种', '方式', '比较', '比如', 'shell', '可以', '配置', '整个', '项目', '各种', '路径', '变量', 'hive', '程序', '使用', 'env', '可以', '直接', '读取', '这些', '配置', '方法', '执行', 'hive', '命令', '传入', 'hivevar', 'hiveconf', '方法', 'hive', '命令', '执行', 'hive', '程序', '传递', '命令行', '参数', '使用', 'hivevar', 'hiveconf', '两种', '参数', '选项', '该次', '执行', '传入', '外部', '变量', '其中', 'hivevar', '专门', '提供', '用户', '自定义', '变量', 'hiveconf', '包括', 'hive', 'site', 'xml', '配置', 'hive', '全局变量', '表格', 'hivevar', 'hiveconf', '传递', '变量', '方法', 'hive', 'hivevar', 'filehive', 'hivevar', 'tbname', 'hivevar', 'count', '10', 'filename', 'hqlhive', 'hivevar', 'cmdhive', 'hivevar', 'tbname', 'hivevar', 'count', '10', 'select', 'from', 'hivevar', 'tbname', 'limit', 'hivevar', 'count', 'hive', 'hiveconf', 'filehive', 'hiveconf', 'tbname', 'hiveconf', 'count', '10', 'filename', 'hqlhive', 'hiveconf', 'cmdhive', 'hiveconf', 'tbname', 'hiveconf', 'count', '10', 'select', 'from', 'hivevar', 'tbname', 'limit', 'hivevar', 'count', '经常', '使用', 'env', 'hivevar', '方法', '前者', '直接', 'hive', '脚本', '读取', 'shell', 'export', '变量', '后者', '脚本', '当前', '执行', '进行', '参数设置', 'order', 'by', 'sort', 'by', '区别', 'hive', '基于', 'hadoop', '执行', '分布式', '程序', '普通', '单机', '程序', '不同', '一个', '特点', '就是', '最终', '数据', '产生', '多个', '文件', '每个', 'reducer', '节点', '处理', 'partition', '自己', '那份', '数据', '产生', '结果', '文件', '导致', 'hadoop', '环境', '数据', '进行', '全局', '排序', '如果', 'hadoop', '进行', 'order', 'by', '排序', '导致', '所有', '数据', '集中', '一台', 'reducer', '节点', '然后', '进行', '排序', '这样', '可能', '超过', '单个', '节点', '磁盘', '内存', '存储', '能力', '导致', '任务', '失败', '一种', '替代', '方案', '放弃', '全局', '有序', '而是', '分组', '有序', '比如', '求全', '百度', '最高', '点击', '排序', '而是', '每种', '产品线', '最高', '点击', '排序', '表格', '使用', 'order', 'by', '引发', '全局', '排序', 'select', 'from', 'baidu', 'click', 'order', 'by', 'click', 'desc', '表格', '使用', 'distribute', 'sort', '进行', '分组', '排序', 'select', 'from', 'baidu', 'click', 'distribute', 'by', 'product', 'line', 'sort', 'by', 'click', 'desc', 'distribute', 'by', 'sort', 'by', '就是', '替代', '方案', 'distribute', 'by', '设定', 'key', '数据', 'hash', '分发', '不同', 'reducer', '机器', '然后', 'sort', 'by', '同一个', 'reducer', '机器', '每组', '数据', '进行', '局部', '排序', 'caption', 'id', 'attachment', '1636', 'align', 'aligncenter', 'width', '532', 'order', 'by', '全局', '有序', 'distribute', 'sort', '分组', '有序', 'caption', 'distribute', 'sort', '结果', '按组', '有序', '全局', '无序', '输入', '数据', '经过', '以下', '两个', '步骤', '处理', '根据', 'key', '字段', 'hash', '相同', '数据', '分发', '相同', 'reducer', '节点', '每个', '内部', '排序', '由于', '每组', '数据', 'key', '进行', 'hash', '存储', '并且', '组内', '有序', '可以', '两种', '用途', '直接', '作为', 'hbase', '输入', '导入到', 'hbase', 'distribute', 'sort', '进行', 'orderby', '阶段', '实现', '间接', '全局', '排序', '不过', '即使', 'distribute', 'by', '然后', 'sort', 'by', '这样', '操作', '如果', '某个', '分组', '数据', '太大', '超出', 'reduce', '节点', '存储', '限制', '常常', '出现', '137', '内存', '溢出', '错误', '对大', '数据量', '排序', '应该', '避免', '遇到', 'sql', '无法', '实现', '逻辑', '怎么办', '经常', 'hive', '语句', '无法', '满足', '需求', '比如', '日期', '20140319', '转换成', '2014q1', '季度', '字符串', '按照', 'key', '进行', 'group', '然后', '每个', '分组', 'limt', '情景', '直接', '实现', '使用', 'hive', '提供', 'java', 'udf', '接口', '实现', 'hive', '提供', '以下', '三种', '类型', 'udf', '分别', '对应', '处理', '不同', '场景', '表格', 'hive', '提供', 'udf', '类型', 'udf', '类型', '名称', '特点', '举例', 'udf', '用户', '自定义', '函数', '读取', '一行', '返回', '单个', 'abs', '单行', '某字', '绝对值', 'udaf', '用户', '自定义', '聚合', '函数', '读取', '多行', '返回', '单个', 'sum', '多行', 'udtf', '用户', '自定义', '生成', '函数', '读取', '一行', '多行', '返回', '多行', '多列', 'explode', '一个', '变成', '多行', '每个', '元素', '一行', '这三类', '函数', '常用', 'udf', '其次', 'udaf', 'udtf', '一般', '不会', '遇到', '如下', '一个', 'udf', '编写', '使用', '完整', '实例', '以下', '几个', '特点', '继承', 'apache', 'hadoop', 'hive', 'ql', 'exec', 'udf', '父类', '覆盖', 'text', 'evaluate', 'text', 'str', '方法', '表格', '日期', '转换成', '季度', '字符串', 'udfpackage', 'myudf', 'import', 'org', 'apache', 'hadoop', 'hive', 'ql', 'exec', 'udf', 'import', 'org', 'apache', 'hadoop', 'io', 'text', '来源', '疯狂', '蚂蚁', 'www', 'crazyant', 'net', 'udf', '处理', '一行', '数据', '产生', '一行', '数据', 'step1', '用户', '需要', '继承', 'udf', '父类', 'step2', '需要', '实现', 'evalute', '方法', '用于', 'hive', '回调', 'author', 'www', 'crazyant', 'net', 'public', 'class', 'datetoquarter', 'extends', 'udf', 'yymmdd', '形式', '日期', '字符串', '转换成', '2014q1', '形式', '季度', '字符串', 'param', 'str', '输入', '日期', 'return', '2014q1', '形式', '季度', '字符串', 'public', 'text', 'evaluate', 'text', 'str', 'if', 'str', 'null', 'return', 'null', '提取', '字符串', '年份', '月份', 'string', 'year', 'str', 'tostring', 'substring', 'int', 'month', 'integer', 'parseint', 'str', 'tostring', 'substring', 'string', 'quarter', 'if', 'month', '&&', 'month', 'quarter', 'q1', 'else', 'if', 'month', '&&', 'month', 'quarter', 'q2', 'else', 'if', 'month', '&&', 'month', 'quarter', 'q3', 'else', 'if', 'month', '10', '&&', 'month', '12', 'quarter', 'q4', '返回', '2014q1', '季度', '字符串', 'return', 'new', 'text', 'year', 'quarter', '表格', 'hive', '使用', 'udf', '语法', 'use', 'test', 'add', 'jar', 'home', 'users', 'crazyant', 'tmp', 'hive', 'udf', 'test', '0.0', 'snapshot', 'jar', 'create', 'temporary', 'function', 'datatoquarter', 'as', 'myudf', 'datetoquarter', 'select', 'sname', 'datatoquarter', 'enter', 'date', 'from', 'student', 'udf', 'utaf', '两类', '非常', '常用', '自定义', '函数', '前者', '处理', '单个', '后者', '处理', '多行', '合并', '如果', '熟悉', 'java', '可以', '这种', '方法', '开发', '优点', '这些', 'udf', '程序', '直接', 'map', 'reduce', '本身', '任务', 'jvm', '运行', '效率', '但是', '缺点', '在于', '开发', '复杂', '周期长', '不如', '解释性', '语言', 'python', '开发', '高效', '怎样', '使用', '脚本语言', '扩展', 'hive', '除了', 'java', '可以', '使用', '其它', '语言', '编写', 'streaming', '程序', '扩展', 'hive', '好处', '开发', '速度', '省去', 'java', '编译', '打包', '步骤', '缺点', 'hadoop', '会多', '启动', '一个', 'streaming', '进程', 'java', '进程', '通信', '导致', '性能', '降低', 'caption', 'id', 'attachment', '1637', 'align', 'aligncenter', 'width', '398', 'streaming', 'udf', 'java', 'udf', 'caption', '开发', 'hive', 'streaming', '程序', '开发', 'hadoop', 'streaming', '程序', '相同', '是从', '标准', '输入', '读取', '分割', '数据', '分割', '结果', '写出', '标准', '输出', '表格', '10', 'hive', 'streaming', 'python', '脚本', 'coding', 'utf8', '来源', '疯狂', '蚂蚁', 'www', 'crazyant', 'net', '日期', '字符串', '转换成', '季度', '字符串', '形式', '输入', 'yyyymmdd', '或者', 'yyyy', 'mm', 'dd', '日期', '形式', '返回', 'yyyyq1', 'yyyyq2', 'yyyyq3', 'yyyyq4', '季度', '字符串', '形式', 'import', 'sysdef', 'get', 'date', 'year', 'quarter', 'str', 'pdate', '获取', '日期', '季度', '字符串', '形式', 'year', 'val', 'month', 'val', 'pdate', 'pdate', '季度', '序号', 'quarter', 'index', 'int', 'month', 'val', 'quarter', 'str', 'sq%', 'year', 'val', 'quarter', 'index', 'return', 'quarter', 'strdef', 'process', 'input', '处理函数', '每行', '最后', '一个', '字段', '日期', 'for', 'line', 'in', 'sys', 'stdin', 'line', 'str', 'line', 'strip', 'if', 'not', 'line', 'continue', 'fields', 'line', 'split', 'yyyy', 'mm', 'dd', '转换成', 'yyyymmdd', 'date', 'val', 'str', 'fields', 'replace', '重新', '组装', '输出', 'output', 'fields', 'fields', 'get', 'date', 'year', 'quarter', 'str', 'date', 'val', 'print', 'join', 'output', 'fields', 'if', '__', 'name', '__', '__', 'main', '__', 'process', 'input', '然后', 'hive', '程序', '可以', '这样', '调用', 'steaming', '脚本', '表格', '11', 'hive', '程序', '调用', 'steaming', '方法', 'use', 'test', '--', '来源', '疯狂', '蚂蚁', 'www', 'crazyant', 'net', '--', 'step1', '绝对路径', '方式', '添加', '脚本', 'add', 'file', 'home', 'users', 'crazyant', 'workbench', 'streaming', 'date', 'to', 'quarter', 'py', '--', 'step2', 'transform', '..', 'using', '..', 'as', '..', '句式', '调用', 'select', 'transform', 'sname', 'birthday', 'using', 'python', 'date', 'to', 'quarter', 'py', 'as', 'sname', 'bir', 'quarter', 'from', 'student', 'info', '几个', '需要', '注意', '地方', '需要', '绝对路径', '方法', '添加', '脚本', '文件', 'add', 'file', '可以', '用于', '添加', '字典', '数据', 'add', 'file', 'map', 'join', '分发', '数据文件', '方法', 'select', '除了', 'transform', '不能', '其他', '所有', '需要', '需要', 'transform', '一个', 'python', '脚本', '处理', '节点', '所有', '数据', 'transform', '一般', '需要', 'distribute', 'by', '..', 'sort', 'by', '句式', '一起', '使用', '如果', '不用', 'distribute', 'by', '..', 'sort', 'by', '句式', '数据', '分到', 'reduce', '节点', '造成', '单点', '负载', '过重', '因此', 'python', '脚本', '可以', '实现', 'utaf', '多行', '聚合', 'udtf', '行变', '多行', '多列', 'hive', '任务', '执行', '但是', '导入', '数据', '非常', 'hive', '使用', 'hadoop', '执行', '查询', '查询', '执行', '速度', '但是', '使用', 'load', 'data', 'hive', '导入', '数据', '非常', '是因为', 'hive', '采取', '读时', '模式', '读时', '模式', '读取数据', '时候', '数据', '类型', '格式', '检查', '写时', '模式', '写入', '数据', '时候', '数据', '类型', '格式', '规范', '检查', '数据', '存到', 'hive', '数据表', 'hive', '采用', '读时', '模式', '意思', '针对', '操作', '不会', '任何', '校验', '只是', '简单', '文件', '复制到', 'hive', '对应', 'hdfs', '目录', '如图', '所示', '读时', '模式', '相对', '写时', '模式', 'rdbms', '一般', '采用', '写时', '模式', '数据', '写入', '数据表', '时候', '检查', '一条', '记录', '是否', '合法', '如果', '检查', '通过', '直接', '返回', '失败', '信息', 'caption', 'id', 'attachment', '1639', 'align', 'aligncenter', 'width', '457', 'hive', '导入', '数据', '只是', '简单', '复制', 'caption', '由于', 'hive', '存入', '数据', '只是', '简单', '文件', '复制', '粘贴', '所以', '导入', '数据', '速度', '非常', '读取', '查询', '时候', '根据', '模式', '解释', '数据', '这个', '时候', '如果', '遇到', '符合', '模式', '数据', 'hive', '直接', '数据', '解析', 'null', 'hive', '采用', '读时', '模式', '带来', '以下', '几个', '好处', 'hive', '表中', '新增', '数据', '非常', '通常', '情况', '对于', '外来', '数据', '采用', '方法', '直接', 'hadoop', '命令', '文件', '传到', '一个', 'hdfs', '目录', 'hive', '直接', '这个', '目录', '一份', '数据', '可以', '解析', '多种', '模式', '存储', 'hive', '表中', '数据', 'hive', '本身', '没有', '关系', '数据', '可以', '其他', '工具', '比如', 'pig', '处理', '读取', '数据', 'tar', 'gz', '格式', '怎么办', 'hadoop', '存放', '大部分', '日志', '数据', '这些', '数据', '重复', '率高', '进行', '压缩', '的话', '节省', '大量', '存储空间', '同时', '由于', '减少', '网络', '传输', '带宽', '使得', '任务', '执行', '速率', '提升', '有没有', '方法', '读取', '压缩', '数据', '比如', 'tar', 'gz', '结尾', '文件', '答案', '肯定', '并且', '需要', '任何', '操作', '可以', '读取', 'hadoop', '默认', '已经', '安装', '编码', '解码器', '并且', '自动', '加载', '使用', '如下', '命令', '可以', '查看', '当前', 'hadoop', '安装', '编解码器', 'hive', '客户端', '默认', '安装', '编码', '解码器', 'hive', 'set', 'io', 'compression', 'codecs', 'io', 'compression', 'codecs', 'org', 'apache', 'hadoop', 'io', 'compress', 'defaultcodec', 'org', 'apache', 'hadoop', 'io', 'compress', 'gzipcodec', 'org', 'apache', 'hadoop', 'io', 'compress', 'bzip2codec', 'org', 'apache', 'hadoop', 'io', 'compress', 'lzopcodec', 'org', 'apache', 'hadoop', 'io', 'compress', 'lzocodec', 'org', 'apache', 'hadoop', 'io', 'compress', 'lzmacodec', 'org', 'apache', 'hadoop', 'io', 'compress', 'quicklzcodec', '其中', 'gzipcodec', '用于', 'tar', 'gz', '文件', '进行', '压缩', '解压', '不同', '编解码', '文件', '规则', '不同', '比如', 'gzip', '文件', '由于', '压缩', '时候', '掩盖', '文件', '边缘', '信息', '导致', '这个', '文件', '如果', '大小', '拆分', '乱码', '因此', '每个', 'gzip', '文件', '如果', '特别', '适合', 'hadoop', '计算', '这样', '文件', '可以', '采用', '另外', 'bzip2', '进行', '压缩', '这种', '格式', '限定', '大小', '比如', '64mb', '方法', '拆分', '每个', '分片', '独立', '完整', '能够', '读取', '对于', 'hadoop', '计算', '以下', '三种', '压缩', '输入', '数据压缩', '比如', '原始', '日志', '进行', '压缩', '目的', '节省', 'hdfs', '存储空间', '中间', '过程', '压缩', 'map', '结果', '进行', '压缩', '传输', 'reduce', '节点', '解压缩', '然后', '进行', '计算', '可以', '节省', '网络', '传输', '时间', '不过', '解压缩', '耗费', 'cpu', 'hadoop', '由于', '大部分', '计算', 'io', '密集型', 'cpu', '密集型', '因此', '这种', '方法', '使用', '输出', '结果', '压缩', '目的', '节省', '存储空间', '同时', '方便', '后续', '其他', '任务', '快速', '读取', '处理', '已经', 'partitoin', '为什么', '需要', 'bucket', 'caption', 'id', 'attachment', '1640', 'align', 'aligncenter', 'width', '381', 'hive', '各个', '数据结构', '逻辑', '划分', 'caption', '如图', 'hive', '数据结构', '划分', '从大到', '依次', '数据库', 'database', '对应', 'hdfs', '顶层', '目录', '类似', 'mysql', '数据库', 'table', '对应', '数据库', '下面', '文件夹', '下面', '可以', '直接', '数据', '对应', 'mysql', '分区', 'partition', '对表', '按照', '某一', '维度', '进行', '分表', '存储', '比如', '各个', '省份', '数据', '分别', '一张', '或者', '每天', '一个', '分区', '对应', 'mysql', '分表', '概念', '分桶', 'bucket', '数据', '按照', '某一字', '进行', 'hash', '分开', '存储', '结果', '比如', '如果', '按照', '账号', 'id', '进行', 'bucket', '存储', '那么', '账号', 'id', '奇数', '或者', '偶数', '分开', '两个', '不同', '篮子', '文件', '这个', '文件', '代表', '原始数据', '可以', '放在', '篮子', '可以', '放在', 'partion', 'table', '由此', '可以', '看出', 'partition', 'bucket', '概念', '类似', '不过', '有所不同', 'bucket', 'partion', '更深一层', 'hash', '划分', '并且', '可以', '限定', 'hash', '如果', '按照', '日期', '分区', '那么', '每天', '一个', 'partition', '一直', '增长', '下去', '但是', '如果', '限定', '30', 'bucket', '不论', '多少', '数据', '分开', '放在', '30', 'bucket', '同时', '分桶', '概念', '为了', '解决', '分区', '一个', '问题', '比如', '可以', '按照', '季度', '省份', '数据', '分区', '因为', '这些', '分类', '可控', '但是', '无法', '账号', '进行', '分区', '这样', '分区', '数目', '会太大', '超过', 'inode', '数目', '限制', '分桶', '出现', '以下', '优点', '解决', '一些', '数据', '无法', '分区', '问题', '比如', '不能', '账号', '分区', '但是', '可以', '账号', '数据', '分成', '个桶', '数据量', '固定', '所以', '不会', '数据', '波动', '每个', '一类', '数据', '适合', '抽样', '分桶', '有利于', '高效', 'map', 'join', '比如', '两个', '表都', '按照', '账号', 'id', '分成', '30', '个桶', '那么', '可以', '肯定', '同一个', '账号', '肯定', '对应', '里面', '这样', '实现', '分桶', 'join', '类型', '设置', '宽泛', '当然', '更好', 'hive', '遵从', '读时', '模式', '不论', '模式定义', '什么', '样子', '存储', '数据量', '不变', '于是', '为了', '模式', '可扩展性', '容易', '类型', '设置', '宽泛', '比如', '只要', '数字', '设置', 'bigint', '理由', '就是', '数据量', '没有', '因为', '设置', '更大', '范围', '类型', '存储', '当然', '设置', '宽泛', '类型', '确实', '没有', '影响', '数据', '存储', '但是', '影响', '数据', '计算', 'caption', 'id', 'attachment', '1642', 'align', 'aligncenter', 'width', '495', 'java', '通过', 'hive', '定义', '存储', '数据字', '建模', 'caption', '由于', 'hive', '底层', '执行', 'hadoop', '程序', '使用', 'java', '实现', 'hive', '执行命令', '转化成', 'hive', '语句', '执行', '表字', '类型', '映射', 'java', '变量', '比如', 'hive', 'int', '映射', 'java', 'int', '但是', 'hive', 'bigint', '映射', 'java', 'long', '程序', '分发', '上千', '机器', '节点', '时候', '由于', '分配', 'long', '类型', '不是', '合适', 'int', '类型', '造成', '整体', '内存', '耗费', '大幅', '增加', '最终', '结果', '就是', 'hive', '执行', '效率', '降低', '如果', '确认', '能够', '类型', '表示', '不要', '宽泛', '类型', '哪些', '针对', 'hive', '优化', '方法', 'join', '时大表写', '最后', '执行', '例如', 'tablea', 'join', 'tableb', 'join', 'tablec', 'hive', 'join', '语句', 'hive', 'table', 'tableb', '全部', '加载', '内存', '然后', '逐行扫描', 'tablec', '进行', 'join', '因此', 'join', '语句', '一定', '大表写', '最后', '如果', 'join', '数据量', '使用', 'mapjoin', '如果', '确认', '用于', 'join', '数据量', '很小', '比如', '只有', '100mb', '大小', '可以', '使用', 'mapjoin', '语法', '这样', 'hive', '会先', '小表', '分发', '所有', 'reducer', '节点', '分布式', '缓存', '加载', '内存', '然后', '进行', 'join', '操作', '由于', '减少', 'shuffle', '操作', '性能', '有所', '提升', '使用', 'mapjoin', '方法', 'select', 'mapjoin', 'tablea', 'id', 'tableb', 'namefrom', 'tablea', 'join', 'tableb', 'on', 'tablea', 'id', 'tableb', 'id', '数据', '思维', '使用', '临时', '关系数据库', '不同', 'hive', '最终', '磁盘', '文件', '进行', '扫描', '处理', '应该', '数据处理', '思维', '来待', '这些', 'sql', '如果', '一个', '很大', '但是', '只用', '其中', '一部分', '列字段', '那么', '最好', '建立', '一个', '临时', '临时', '大表', '有效字', '这样', '减少', '大表', '重复', '扫描', '提升', '性能', '不过', '临时', '表太多', 'hive', '一个', '确定', 'pig', '其实', '适合', '用于', 'etl', '处理', '一个', '对比', '怎样', '实现', 'in', '语法', 'hive', '没有', '提供', 'in', '语法', '比如', 'in', 'select', '语句', '报错', '但是', '这种', '需求', '存在', '其实', '可以', '通过', 'left', 'semi', 'join', '实现', '比如', '这么', '两个', '数据表', 'caption', 'id', 'attachment', '1643', 'align', 'aligncenter', 'width', '420', 'left', 'semi', 'join', '例子', '数据', 'caption', '两个', '执行', '下面', 'left', 'semi', 'join', '操作', 'left', 'semi', 'join', '实现', 'in', '语法', '方法', 'select', 'from', 'table1', 'left', 'semi', 'join', 'table2', 'on', 'table1', 'student', 'no', 'table2', 'student', 'no', '得到', '如下', '执行', '结果', 'name12', 'name23', 'name34', 'name45', 'name5', '结果', '使用', 'in', 'select', '结果', '相同', '10', '其他', '一些', '技巧', '删除', '整个', '数据库', '方法', '数据库', '存在', '表时', '删除', '表再', '删除', '数据库', '不过', '加上', 'cascade', '关键字', '递归', '删除', '整个', '数据库', 'drop', 'database', 'test', 'db', 'cascade', '查看', '数据表', '详细信息', '可以', '方法', '查看', '数据表', '信息', '分别', 'desc', 'student', 'info', 'desc', 'extended', 'student', 'info', 'desc', 'formatted', 'student', 'info', '显示', '简单', '信息', '除了', '显示', '信息', '显示', '数据', '存放', '位置', '输入输出', '格式', '详细信息', '种则', '格式化', '方法', '显示', '详细信息', '方便', '查看', 'hive', '可以', '执行', 'shell', 'hadoop', 'dfs', '命令', 'hive', '程序', '可以', '直接', '执行', 'shell', '命令', 'hadoop', '命令', '并且', '因为', '这些', 'hadoop', '命令', '直接', '共用', 'hive', '当前', 'jvm', '执行', '速度', '表格', '12', 'hive', '环境', '下能', '快速', '执行', 'hadoop', '命令', 'hive', 'dfs', 'ls', 'app', 'ecom', 'union', 'all', '数据', '对齐', '使用', '常常', '遇到', '来自', '很多', '数据源', '数据', '每份', '数据', '相似', '格式', '并且', '处理', '逻辑', '相同', '可以', 'union', 'all', '各份', '数据', '对齐', '存储', '一个', '表中', '后续', '这个', '大表', '进行', '统一', '处理', 'null', '数字', '相加', '问题', '如果', '有用', 'sum', '函数', '但是', '发现', 'sum', '列中', 'null', '可以', '使用', '以下', '方法', '转换成', 'coalesce', 'cast', 'as', 'bigint', 'coalesce', '方法', '返回', '列表', '第一个', '不为', 'null', '相当于', '如果', '第一个', '字段', 'null', '第二个', '增加', '数据', 'hive', '两种', '方法', '如果', '外部', '数据', '可以', 'external', '外部', '每天', 'hadoop', 'fs', 'put', '方法', '数据', '复制到', '目录', '即可', '这样', '可以', '用于', '除了', 'hive', '其他', '程序', '读取', '如果', '中间', '临时', '产出', '可以', '使用', '内部', '每天', '计算', '全量', '覆盖', '这些', '内容', '本文', '地址', 'http', 'crazyant', 'net', '1625', 'html', '转载', '注明', '出处', '谢谢', '本文', 'pdf', '格式', '文档', '文字', '清晰', '只是', '图片', '不能', '放大', '下载', '地址', 'http', 'pan', 'baidu', 'com', '1sjpwjsh']","[[-2.73573337e-01 -1.18520135e-01  2.32295620e-01  1.76242518e-01
   3.01831709e-01 -3.51909690e-01 -1.74018210e-01  5.08106376e-01
  -2.19043622e-02 -4.30549070e-02 -5.91027617e-02 -3.50028678e-01
  -1.57643667e-01  6.00970875e-01  1.65920302e-01 -1.12458253e-01
  -1.44411213e-01 -1.29581090e-02 -9.93060414e-02 -4.90426887e-01
   1.44150826e-02  2.62191651e-01 -1.80066133e-02 -1.19535530e-01
   1.04444247e-01 -5.45364300e-01 -3.03616657e-01  7.85106955e-02
  -2.14159494e-01 -6.88063407e-02  2.37230569e-01  2.35315511e-02
  -2.43290708e-02 -1.38947314e-01 -1.17380281e-01  3.60299593e-01
  -1.53501590e-01 -2.44267240e-01  1.19136970e-01 -7.87899393e-01
  -1.67509441e-01 -5.82774070e-01 -4.67122441e-02 -6.05374586e-02
  -1.66977136e-01 -1.66490300e-01 -2.71314887e-01  4.63732729e-01
  -1.77780911e-01  4.16933329e-01  1.89082594e-01 -2.87249226e-01
  -1.29143408e-01 -2.32161897e-01  6.18932442e-02  4.08001469e-01
   2.35417859e-01 -6.50862668e-02  1.05300864e-01 -1.09532914e-01
   5.83340849e-02  2.79406828e-01  2.87065325e-02  8.28779171e-02
  -4.02065620e-01  2.82133472e-03  4.82530564e-02 -1.26072296e-02
  -2.68679686e-01  4.51791377e-01  1.28204591e-01 -2.28302143e-01
   4.08422197e-01 -3.36881589e-01  5.73780726e-01  2.02096276e-01
   2.01324371e-01 -1.49280137e-01 -2.95119356e-01 -1.92020511e-01
  -6.63454064e-02 -5.89224037e-05 -6.99627629e-02  3.64162663e-01
  -3.64171737e-01  2.13819806e-01 -2.94209574e-01  4.28317720e-01
   4.83251568e-01  1.44372273e-01  3.02634885e-01  1.22563287e-01
   3.71256147e-01  2.00884161e-01  1.96595647e-01  3.83435205e-01
   1.03956977e-01 -3.02865500e-01 -9.96812923e-03 -1.05008022e-01]]"
1664,Python操作MySQL视频教程,给大家带来自己制作的Python操作MySQL视频教程。本教程分为三节：Python开发环境搭建以及支持MySQL开发的插件安装、Python访问MySQL数据库的标准API规范接口讲解、Python开发MySQL程序实战编码演示。通过课 程的学习，大家能够基本掌握用Python开发MySQL程序。视频高清版百度链接: http://pan.baidu.com/s/1DB0qM 密码: ri1nPython操作MySQL视频教程第一讲 - 开发环境搭建推荐使用以下的开发环境搭配：Eclipse + JDK7插件：PyDev 3.8.0python-2.7.8插件：MySQL-python-1.2.4b4.win32-py2.7MySQL服务器：使用wampserver2.5软件包自带的MySQL软件需要安装：vcredist_x64Mysql-5.6.17本视频在优酷的地址：http://v.youku.com/v_show/id_XODE3Nzk4MTEy.htmlPython操作MySQL视频教程第二讲 - 标准接口规范第二讲的视频教程讲解的主要内容是：Python官方针对操作数据库的标准规范文档地址：http://legacy.python.org/dev/peps/pep-0249/Python建立和数据库的connect连接对象connection对象的构造函数，包括主机、端口、用户名、密码、编码等参数connection对象的方法，主要是关闭连接、获取游标、提交事务、回滚事务Python执行SQL语句的cursor对象普通游标和字典游标的区别，以及字典游标优于普通游标的原因游标执行SQL语句的方法游标获取执行SQL语句结果集合的方法Python编写访问数据库程序的框架，主要包括以下步骤：导入MySQLdb对象获取connection对象获取普通游标或者字典游标执行SQL语句从游标对象中取出数据，对数据做其他处理；关闭连接视频在优酷的地址：http://v.youku.com/v_show/id_XODIxNzQ1MjQ0.htmlPython操作MySQL视频教程第三讲 - 实例代码演示第三讲的视频教程讲解的主要内容是：Python编写MySQL程序的框架引入模块：import MySQLdb获取连接：conn = MySQLdb.connect()获取游标：cursor = conn.cursor()执行SQL：cursor.execute()获取数据：curosr.fetchall()关闭连接：conn.close()MySQL的Innodb和Myisam引擎的区别innodb支持事务，myisam不支持事务如果访问的是innodb数据库，并执行了insert、delete、update语句，python代码中必须执行conn.commit()才能使得SQL执行生效视频在优酷的地址：http://v.youku.com/v_show/id_XODI4MjE4Njgw.html本文的代码和PPT在git上的地址：http://git.oschina.net/peishuaishuai/python-mysql-tutorial本文的高清视频随后会发布在百度网盘，敬请期待。本文地址：http://crazyant.net/1664.html ，转载请注明来源。,"['python', '操作', 'mysql', '视频教程', '大家', '带来', '自己', '制作', 'python', '操作', 'mysql', '视频教程', '教程', '分为', '三节', 'python', '开发', '环境', '搭建', '以及', '支持', 'mysql', '开发', '插件', '安装', 'python', '访问', 'mysql', '数据库', '标准', 'api', '规范', '接口', '讲解', 'python', '开发', 'mysql', '程序', '实战', '编码', '演示', '通过', '学习', '大家', '能够', '基本', '掌握', 'python', '开发', 'mysql', '程序', '视频', '高清', '百度', '链接', 'http', 'pan', 'baidu', 'com', '1db0qm', '密码', 'ri1npython', '操作', 'mysql', '视频教程', '第一', '开发', '环境', '搭建', '推荐', '使用', '以下', '开发', '环境', '搭配', 'eclipse', 'jdk7', '插件', 'pydev', '3.8', '0python', '2.7', '插件', 'mysql', 'python', '1.2', '4b4', 'win32', 'py2.7', 'mysql', '服务器', '使用', 'wampserver2.5', '软件包', '自带', 'mysql', '软件', '需要', '安装', 'vcredist', 'x64mysql', '5.6', '17', '视频', '优酷', '地址', 'http', 'youku', 'com', 'show', 'id', 'xode3nzk4mtey', 'htmlpython', '操作', 'mysql', '视频教程', '第二', '标准接口', '规范', '第二', '视频教程', '讲解', '主要', '内容', 'python', '官方', '针对', '操作', '数据库', '标准规范', '文档', '地址', 'http', 'legacy', 'python', 'org', 'dev', 'peps', 'pep', '0249', 'python', '建立', '数据库', 'connect', '连接', '对象', 'connection', '对象', '构造函数', '包括', '主机', '端口', '用户名', '密码', '编码', '参数', 'connection', '对象', '方法', '主要', '关闭', '连接', '获取', '游标', '提交', '事务', '回滚', '事务', 'python', '执行', 'sql', '语句', 'cursor', '对象', '普通', '游标', '字典', '游标', '区别', '以及', '字典', '游标', '优于', '普通', '游标', '原因', '游标', '执行', 'sql', '语句', '方法', '游标', '获取', '执行', 'sql', '语句', '结果', '集合', '方法', 'python', '编写', '访问', '数据库', '程序', '框架', '主要', '包括', '以下', '步骤', '导入', 'mysqldb', '对象', '获取', 'connection', '对象', '获取', '普通', '游标', '或者', '字典', '游标', '执行', 'sql', '语句', '游标', '对象', '取出', '数据', '数据', '其他', '处理', '关闭', '连接', '视频', '优酷', '地址', 'http', 'youku', 'com', 'show', 'id', 'xodixnzq1mjq0', 'htmlpython', '操作', 'mysql', '视频教程', '第三', '实例', '代码', '演示', '第三', '视频教程', '讲解', '主要', '内容', 'python', '编写', 'mysql', '程序', '框架', '引入', '模块', 'import', 'mysqldb', '获取', '连接', 'conn', 'mysqldb', 'connect', '获取', '游标', 'cursor', 'conn', 'cursor', '执行', 'sql', 'cursor', 'execute', '获取数据', 'curosr', 'fetchall', '关闭', '连接', 'conn', 'close', 'mysql', 'innodb', 'myisam', '引擎', '区别', 'innodb', '支持', '事务', 'myisam', '支持', '事务', '如果', '访问', 'innodb', '数据库', '执行', 'insert', 'delete', 'update', '语句', 'python', '代码', '必须', '执行', 'conn', 'commit', '才能', '使得', 'sql', '执行', '生效', '视频', '优酷', '地址', 'http', 'youku', 'com', 'show', 'id', 'xodi4mje4njgw', 'html', '本文', '代码', 'ppt', 'git', '地址', 'http', 'git', 'oschina', 'net', 'peishuaishuai', 'python', 'mysql', 'tutorial', '本文', '高清', '视频', '随后', '发布', '百度网', '敬请期待', '本文', '地址', 'http', 'crazyant', 'net', '1664', 'html', '转载', '注明', '来源']","[[-0.25286306 -0.13320684  0.22955179  0.2494897   0.22899171 -0.37832922
  -0.15251528  0.51901737 -0.02752778 -0.05010497 -0.09564838 -0.37072931
  -0.14244026  0.58401091  0.115962   -0.13293605 -0.14068455  0.01511146
  -0.037895   -0.41319135  0.02729995  0.26271699 -0.05973208 -0.14432186
   0.06128841 -0.4964433  -0.3214696   0.09255983 -0.19050984 -0.07031642
   0.21794933  0.10546548 -0.00861103 -0.12671197 -0.1601081   0.37449731
  -0.14972081 -0.22403662  0.09365479 -0.71100163 -0.10594262 -0.54228076
  -0.02502892 -0.05483019 -0.1471353  -0.20072394 -0.32941747  0.46008371
  -0.06412161  0.35842814  0.12300235 -0.30149361 -0.03173186 -0.25543504
   0.03999274  0.42852349  0.21733045 -0.06973498  0.12782324 -0.09503463
   0.10394388  0.24515564  0.02116109  0.08190927 -0.36497929  0.01670286
  -0.00898641  0.03494574 -0.22165439  0.43496814  0.09983638 -0.20835691
   0.4198691  -0.33118943  0.57506912  0.24366764  0.26638058 -0.18367288
  -0.23524799 -0.22605821 -0.11225313  0.01555419 -0.08704481  0.38587858
  -0.39036996  0.18679677 -0.28364848  0.47689194  0.51969993  0.16475267
   0.25075756  0.12128084  0.33632256  0.17944857  0.19563752  0.4372054
   0.07946748 -0.24575882  0.1116658  -0.09498382]]"
1689,Java枚举类型代码的二逼写法和艺术写法,"最近遇到一种需求场景：使用一个类封装Java服务端返回的（返回状态码，返回信息字符串）信息，比如（0，操作成功）、（1，新增失败）、（2，查询失败）等状态。作为一枚Java屌丝，我想到这种常量信息最好写到一个单独的类里面，并且用public static final的形式修饰，为了将返回码code和返回信息msg两者绑定起来可以提供一个公用方法。我做了以下两个努力，一是将两个返回码和返回信息的变量名写的相似，看代码的人一看就知道两个变量的含义和关系；第二个则提供一个根据返回码获得对应的返回信息的方法。写完后自我感觉良好，感觉满足了需求很是完备，于是出现了以下的2B代码：枚举状态码和状态信息的2B写法package net.crazyant;/** *  * 返回给客户端的状态码和状态信息 *  * @author crazyant.net * */public class CommunicateCodeOne {/** * 状态码：操作成功 */public static final int OPERATION_SUCCESS_CODE = 0;/** * 状态信息：操作成功 */public static final String OPERATION_SUCCESS_MSG = ""操作成功"";/** * 状态码：新增失败 */public static final int ADD_DATA_ERROR_CODE = 1;/** * 状态信息：新增失败 */public static final String ADD_DATA_ERROR_MSG = ""新增失败"";/** * 状态码：查询失败 */public static final int QUERY_DATA_ERROR_CODE = 2;/** * 状态信息：查询失败 */public static final String QUERY_DATA_ERROR_MSG = ""查询失败"";/** * 根据状态码获取状态信息 *  * @param communicateCode *            状态码 * @return 状态信息字符串 */public static String getMsg(int communicateCode) {String returnMsg = null;switch (communicateCode) {case OPERATION_SUCCESS_CODE:// 操作成功returnMsg = OPERATION_SUCCESS_MSG;break;case ADD_DATA_ERROR_CODE:// 新增失败returnMsg = ADD_DATA_ERROR_MSG;break;case QUERY_DATA_ERROR_CODE:// 查询失败returnMsg = QUERY_DATA_ERROR_MSG;break;}return returnMsg;}}这种写法存在的问题有两个：如果需要新增状态码和状态信息，需要在getMsg方法中新增switch的case分支；用户调用的时候，需要将状态码传递给getMsg方法，有传递对应不上的风险；学习总是发生在不经意间，在看过其他人的一段代码后，才发现自己写的有多烂，有这么一种艺术的写法：枚举状态码和状态信息的艺术写法package net.crazyant;/** *  * 返回给客户端的状态码和状态信息 *  * @author crazyant.net * */public enum CommunicateCodeTwo {OPERATION_SUCCESS(0, ""操作成功""), ADD_DATA_ERROR(1, ""新增失败""), QUERY_DATA_ERROR(2, ""查询失败"");/** * 返回状态码 */private int statusCode;/** * 返回状态信息 */private String statusMsg;CommunicateCodeTwo(int statusCode, String statusMsg) {this.statusCode = statusCode;this.statusMsg = statusMsg;}/** * @return the statusCode */public int getStatusCode() {return statusCode;}/** * @return the statusMsg */public String getStatusMsg() {return statusMsg;}}每次新增一个状态，只需要增加一个枚举的元素即可，不会出现状态码和信息对应不上的调用问题。2B代码和艺术代码的调用方法对比package net.crazyant;/** * 测试状态码类的两个不同写法类 *  * @author crazyant.net * */public class TestThem {public static void main(String[] args) {// 写法1的调用方法// 缺点：状态码和状态信息的关系需要用户自己绑定，可能出现不一致的情况int statusCode1 = CommunicateCodeOne.OPERATION_SUCCESS_CODE;String statusMsg1 = CommunicateCodeOne.getMsg(statusCode1);System.out.println(statusCode1 + "":"" + statusMsg1);// 写法2的调用方法// 优点：简洁，状态码和信息只能通过单个枚举元素获取int statusCode2 = CommunicateCodeTwo.OPERATION_SUCCESS.getStatusCode();String statusMsg2 = CommunicateCodeTwo.OPERATION_SUCCESS.getStatusMsg();System.out.println(statusCode2 + "":"" + statusMsg2);}}明显的对比显示出第二种写法的优势：简洁、好用、不易出错。本文地址：http://crazyant.net/1689.html ，转载请注明，谢谢","['java', '枚举', '类型', '代码', '写法', '艺术', '写法', '最近', '遇到', '一种', '需求', '场景', '使用', '一个', '封装', 'java', '服务端', '返回', '返回', '状态', '返回', '信息', '字符串', '信息', '比如', '操作', '成功', '新增', '失败', '查询', '失败', '状态', '作为', '一枚', 'java', '屌丝', '想到', '这种', '常量', '信息', '最好', '一个', '单独', '里面', '并且', 'public', 'static', 'final', '形式', '修饰', '为了', '返回', 'code', '返回', '信息', 'msg', '两者', '绑定', '起来', '可以', '提供', '一个', '公用', '方法', '以下', '两个', '努力', '一是', '两个', '返回', '返回', '信息', '变量名', '相似', '代码', '知道', '两个', '变量', '含义', '关系', '第二个', '提供', '一个', '根据', '返回', '获得', '对应', '返回', '信息', '方法', '完后', '自我感觉', '良好', '感觉', '满足', '需求', '完备', '于是', '出现', '以下', '2b', '代码', '枚举', '状态', '状态', '信息', '2b', '写法', 'package', 'net', 'crazyant', '返回', '客户端', '状态', '状态', '信息', 'author', 'crazyant', 'net', 'public', 'class', 'communicatecodeone', '状态', '操作', '成功', 'public', 'static', 'final', 'int', 'operation', 'success', 'code', '状态', '信息', '操作', '成功', 'public', 'static', 'final', 'string', 'operation', 'success', 'msg', '操作', '成功', '状态', '新增', '失败', 'public', 'static', 'final', 'int', 'add', 'data', 'error', 'code', '状态', '信息', '新增', '失败', 'public', 'static', 'final', 'string', 'add', 'data', 'error', 'msg', '新增', '失败', '状态', '查询', '失败', 'public', 'static', 'final', 'int', 'query', 'data', 'error', 'code', '状态', '信息', '查询', '失败', 'public', 'static', 'final', 'string', 'query', 'data', 'error', 'msg', '查询', '失败', '根据', '状态', '获取', '状态', '信息', 'param', 'communicatecode', '状态', 'return', '状态', '信息', '字符串', 'public', 'static', 'string', 'getmsg', 'int', 'communicatecode', 'string', 'returnmsg', 'null', 'switch', 'communicatecode', 'case', 'operation', 'success', 'code', '操作', '成功', 'returnmsg', 'operation', 'success', 'msg', 'break', 'case', 'add', 'data', 'error', 'code', '新增', '失败', 'returnmsg', 'add', 'data', 'error', 'msg', 'break', 'case', 'query', 'data', 'error', 'code', '查询', '失败', 'returnmsg', 'query', 'data', 'error', 'msg', 'break', 'return', 'returnmsg', '这种', '写法', '存在', '问题', '两个', '如果', '需要', '新增', '状态', '状态', '信息', '需要', 'getmsg', '方法', '新增', 'switch', 'case', '分支', '用户', '调用', '时候', '需要', '状态', '传递', 'getmsg', '方法', '传递', '对应', '不上', '风险', '学习', '总是', '发生', '不经意', '看过', '其他人', '一段', '代码', '发现自己', '多烂', '这么', '一种', '艺术', '写法', '枚举', '状态', '状态', '信息', '艺术', '写法', 'package', 'net', 'crazyant', '返回', '客户端', '状态', '状态', '信息', 'author', 'crazyant', 'net', 'public', 'enum', 'communicatecodetwo', 'operation', 'success', '操作', '成功', 'add', 'data', 'error', '新增', '失败', 'query', 'data', 'error', '查询', '失败', '返回', '状态', 'private', 'int', 'statuscode', '返回', '状态', '信息', 'private', 'string', 'statusmsg', 'communicatecodetwo', 'int', 'statuscode', 'string', 'statusmsg', 'this', 'statuscode', 'statuscode', 'this', 'statusmsg', 'statusmsg', 'return', 'the', 'statuscode', 'public', 'int', 'getstatuscode', 'return', 'statuscode', 'return', 'the', 'statusmsg', 'public', 'string', 'getstatusmsg', 'return', 'statusmsg', '每次', '新增', '一个', '状态', '需要', '增加', '一个', '枚举', '元素', '即可', '不会', '出现', '状态', '信息', '对应', '不上', '调用', '问题', '2b', '代码', '艺术', '代码', '调用', '方法', '对比', 'package', 'net', 'crazyant', '测试状态', '码类', '两个', '不同', '写法', 'author', 'crazyant', 'net', 'public', 'class', 'testthem', 'public', 'static', 'void', 'main', 'string', 'args', '写法', '调用', '方法', '缺点', '状态', '状态', '信息', '关系', '需要', '用户', '自己', '绑定', '可能', '出现', '一致', '情况', 'int', 'statuscode1', 'communicatecodeone', 'operation', 'success', 'code', 'string', 'statusmsg1', 'communicatecodeone', 'getmsg', 'statuscode1', 'system', 'out', 'println', 'statuscode1', 'statusmsg1', '写法', '调用', '方法', '优点', '简洁', '状态', '信息', '只能', '通过', '单个', '枚举', '元素', '获取', 'int', 'statuscode2', 'communicatecodetwo', 'operation', 'success', 'getstatuscode', 'string', 'statusmsg2', 'communicatecodetwo', 'operation', 'success', 'getstatusmsg', 'system', 'out', 'println', 'statuscode2', 'statusmsg2', '明显', '对比', '显示', '第二种', '写法', '优势', '简洁', '好用', '不易', '出错', '本文', '地址', 'http', 'crazyant', 'net', '1689', 'html', '转载', '注明', '谢谢']","[[-0.23026757 -0.10417082  0.27343186  0.13846756  0.28203569 -0.38311717
  -0.12586438  0.47982142 -0.0556948  -0.10904621 -0.03657997 -0.40355471
  -0.14120584  0.5561545   0.16797731 -0.11541341 -0.14205276 -0.00447734
  -0.07007296 -0.53694195 -0.02966379  0.25916682 -0.05819021 -0.18440308
   0.05134381 -0.48444038 -0.3174155   0.04456452 -0.23890372 -0.08259055
   0.16618447  0.01066804  0.01145789 -0.12937637 -0.17636084  0.33606372
  -0.189597   -0.27113758  0.08262635 -0.74910229 -0.14913668 -0.6138971
  -0.08241525 -0.01906512 -0.13528483 -0.23976862 -0.25653405  0.37830796
  -0.16519239  0.4787992   0.14745761 -0.2828516  -0.10786333 -0.20028756
   0.00087894  0.41038791  0.16335265 -0.09873762  0.12257224 -0.14920355
   0.09374673  0.24234857  0.01489079  0.08736182 -0.3818658   0.04967683
   0.04717008 -0.02216446 -0.29366845  0.44415438  0.11316117 -0.18338084
   0.4036642  -0.32548165  0.56788601  0.28495308  0.1634728  -0.17845503
  -0.30403688 -0.14926087 -0.01253438  0.04826721 -0.12307746  0.38800386
  -0.35289608  0.21589955 -0.29752291  0.46588694  0.51864809  0.17312127
   0.24190546  0.11598492  0.37154623  0.18178437  0.20273134  0.37278778
   0.12016451 -0.3221081  -0.00819122 -0.13515791]]"
1697,《超体》中的哲学,"  [caption id=""attachment_1700"" align=""aligncenter"" width=""900""] 超体电影封面，我无处不在[/caption]同事LX送了一张一个月的优酷会员卡，赶紧今天使用去找会员才能看的电影来看，一部《超体》激的我热泪盈眶。超体是一部视觉很炫的电影，但是让我飙泪的，是因为里面的大量哲学思想。柏拉图的精神国柏拉图认为，现实是假象，真正的世界是无法感知的精神王国，纯粹的唯心主义。影片中大脑开发到最后，其实也是在一步步的向理想国靠近，一切都由心所生，物质只是心所表象。就像时间加速，汽车就会消失，其实汽车并没有存在，存在的只是思想。知识的传承影片后来，主角可以穿越时空、回到史前，然而我认为主角并没有穿越空间，只是她在经历前人的思想。有哲学家说万物的思想其实一直存在于人的思想之中，但是人类由于局限无法感知，人们平时的学习其实只是回忆已经存在的知识而已。主角到后来已经不需要学习，因为万物、本质，她发现自己早就了然。上帝的存在这里的上帝只是一个名词，并不特指基督。人们普遍认为上帝是一个人，然而也有人认为，上帝无处不在，一切皆上帝。对应于知识的传承，其实上帝存在于每个人的内心，每次的学习、领悟，都是和上帝的对话。这里的上帝，可能也是指柏拉图的精神国对应，同时，也解释了人类的来源所在，人类会不会是上帝的细胞呢？到底什么是存在笛卡尔说我思故我在，身体并不能证明“我”自己，一切都是假象泡影，而“我正在思考，我正在怀疑”才是最真切的。存在就是思想，思想就是存在，万物，皆是影像。真正的幸福影片中主角开发了百分三十的时候，由于参透一切而不再具有喜悦、悲伤、痛苦等情绪，因此变得面无表情。印证了哲学家们苦苦思索的“怎样才能达到真正的喜乐”，这里喜乐也是无法描述，因为它也是情绪。释迦摩尼说自己体验了富裕、贫穷以及人间万般经历，都无法让自己保持永远喜乐，唯有抛却这一些，逃避悲伤但并不追求喜乐，因为喜悦也有破灭的时候，任何的见解都会有推翻它的见解，陷入无尽痛苦。唯有放弃一切，一切皆无，才能达到超脱一切，无我、永生的境界。影片最后达到了无处不在，其已经变成了如来、上帝，进入了无我、大乘、泛在的境界，其也超越了空间、时间，超越了存在。吕克贝松，一个思想高度的导演，敬！！！文章地址：http://crazyant.net/1697.html","['超体', '哲学', 'caption', 'id', 'attachment', '1700', 'align', 'aligncenter', 'width', '900', '超体', '电影', '封面', '无处不在', 'caption', '同事', 'lx', '一张', '一个月', '优酷', '会员卡', '赶紧', '今天', '使用', '会员', '才能', '电影', '来看', '一部', '超体', '热泪盈眶', '超体', '一部', '视觉', '电影', '但是', '飙泪', '是因为', '里面', '大量', '哲学思想', '柏拉图', '精神', '柏拉图', '认为', '现实', '假象', '真正', '世界', '无法', '感知', '精神', '王国', '纯粹', '唯心主义', '影片', '大脑', '开发', '最后', '其实', '一步步', '理想国', '靠近', '一切', '心所生', '物质', '只是', '表象', '时间', '加速', '汽车', '消失', '其实', '汽车', '没有', '存在', '存在', '只是', '思想', '知识', '传承', '影片', '后来', '主角', '可以', '穿越时空', '回到', '史前', '然而', '认为', '主角', '没有', '穿越', '空间', '只是', '经历', '前人', '思想', '哲学家', '万物', '思想', '其实', '一直', '存在', '思想', '之中', '但是', '人类', '由于', '局限', '无法', '感知', '人们', '平时', '学习', '其实', '只是', '回忆', '已经', '存在', '知识', '而已', '主角', '后来', '已经', '需要', '学习', '因为', '万物', '本质', '发现自己', '早就', '了然', '上帝', '存在', '这里', '上帝', '只是', '一个', '名词', '特指', '基督', '人们', '普遍认为', '上帝', '一个', '然而', '有人', '认为', '上帝', '无处不在', '一切', '上帝', '对应', '知识', '传承', '其实', '上帝', '存在', '每个', '内心', '每次', '学习', '领悟', '上帝', '对话', '这里', '上帝', '可能', '柏拉图', '精神', '对应', '同时', '解释', '人类', '来源', '所在', '人类', '不会', '上帝', '细胞', '到底', '什么', '存在', '笛卡尔', '我思', '故我在', '身体', '不能', '证明', '自己', '一切都是', '假象', '泡影', '正在', '思考', '正在', '怀疑', '真切', '存在', '就是', '思想', '思想', '就是', '存在', '万物', '影像', '真正', '幸福', '影片', '主角', '开发', '百分', '三十', '时候', '由于', '参透', '一切', '不再', '具有', '喜悦', '悲伤', '痛苦', '情绪', '因此', '变得', '无表情', '印证', '哲学家', '苦苦', '思索', '怎样才能', '达到', '真正', '喜乐', '这里', '喜乐', '无法', '描述', '因为', '情绪', '释迦', '摩尼说', '自己', '体验', '富裕', '贫穷', '以及', '人间', '万般', '经历', '无法', '自己', '保持', '永远', '喜乐', '唯有', '抛却', '一些', '逃避', '悲伤', '追求', '喜乐', '因为', '喜悦', '破灭', '时候', '任何', '见解', '推翻', '见解', '陷入', '无尽', '痛苦', '唯有', '放弃', '一切', '一切', '才能', '达到', '超脱', '一切', '永生', '境界', '影片', '最后', '达到', '无处不在', '已经', '变成', '如来', '上帝', '进入', '大乘', '境界', '超越', '空间', '时间', '超越', '存在', '吕克贝', '一个', '思想', '高度', '导演', '文章', '地址', 'http', 'crazyant', 'net', '1697', 'html']","[[-0.21392627 -0.11321479  0.19868256  0.15525259  0.2330094  -0.31145154
  -0.14215846  0.41977238 -0.01721558 -0.03449498 -0.0538565  -0.30187066
  -0.15027156  0.50587122  0.12340961 -0.09779824 -0.12605833 -0.00274813
  -0.0679586  -0.39172216  0.01513039  0.21661068 -0.0127693  -0.10270679
   0.0826024  -0.45462916 -0.25359197  0.06696523 -0.18269164 -0.05646757
   0.2000374   0.03803711 -0.00341317 -0.11944171 -0.11021916  0.29177969
  -0.12713168 -0.19817164  0.08623606 -0.64136932 -0.1349362  -0.50042198
  -0.03773929 -0.05649386 -0.13355626 -0.14742401 -0.23787617  0.38788873
  -0.12746     0.34421759  0.15403522 -0.23641198 -0.0821838  -0.19924102
   0.03801621  0.34174906  0.19591405 -0.05863918  0.08990428 -0.08810931
   0.05718574  0.24205754  0.0154247   0.07701002 -0.32758738  0.00592585
   0.02704393 -0.00901722 -0.20921274  0.38133358  0.10393929 -0.19906698
   0.34941119 -0.28385712  0.50169724  0.1706035   0.18925749 -0.13623304
  -0.22450975 -0.1808217  -0.06838611  0.00898973 -0.07269981  0.30526716
  -0.32588931  0.16989913 -0.24989267  0.37733623  0.41718973  0.12252441
   0.24348625  0.1056461   0.30435645  0.1550574   0.16489355  0.33616494
   0.09082575 -0.24941102  0.00888712 -0.07772852]]"
1703,Java怎样创建两个KEY（key-pair）的MAP,"就像在XY坐标系中，一个X刻度、一个Y刻度，会对应图上的一个点，即pair(x, y) - > point，那么就有创建一个点，或者根据(x, y)来寻求一个点的需求，如果用Python的语法表达，是这个样子：dict((x, y) : point)然而在JAVA中却变得不容易，骨钩了一下，有这么一些方法：使用嵌套MAPMap<Integer, Map<Integer, V>> map = //...// ...map.get(2).get(5);这种方法将水平的KEY切换成了垂直KEY，我们要找寻XY坐标系中(x, y)对应的点，其实可以先找x点的那条垂直线，然后找出这条垂直线上y高度的那个点。但是要取得这个双KEY的VALUE，得有2次GET，实例代码没有做第一次GET的NULL判断，有隐患！并且感觉不是很直观。写一个pair key的包装类public class Key {    private final int x;    private final int y;    public Key(int x, int y) {        this.x = x;        this.y = y;    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (!(o instanceof Key)) return false;        Key key = (Key) o;        return x == key.x && y == key.y;    }    @Override    public int hashCode() {        int result = x;        result = 31 * result + y;        return result;    }}以这种方法提前包装好一个类，类中有x和y两个属性，同时提供equals方法用于“点”的比较，提供hashCode用于使用在计算对象在散列表中的位置。为什么要覆盖hashCode方法？请参见链接写完这个pair类之后，就好用了：Map<Key, V> map = //...map.get(new Key(2, 5));这种方法以更多的代码为代价来实现pair key的map，pair class的编写中，不能忘记覆盖equals和hashcode方法，增加了代码量，感觉不是很好用。GOOGLE的HashBasedTable类库这种方法感觉才是最直观，最好用的import com.google.common.collect.HashBasedTable;import com.google.common.collect.Table;// 创建Table<Long, Long, Point> plane = HashBasedTable.create();// 新增plane.put(1L, 2L, pointA);plane.put(1L, 3L, pointB);plane.put(1L, 4L, pointC);// 获取Point pointA = plane.get(1L, 2L);Point pointB = plane.get(1L, 2L);惊叹，好用。在JAVA语言里，写成这样的代码，可称之为艺术。无限维度的KEY有两种方法可以实现无线维度的KEY，第一种和本文的第二种方法一样，先写一个CLASS，里面有无限个属性，然后作为MAP的KEY。第二种，如果类型一样，可以这样子实现：Map<List<Integer>, V> map = //...但是这种方法易出错、不易读，并且性能很低。总结要实现map的key是两个绑定的属性，或者称之为pair key，个人认为首先使用google的HashBasedTable类库，其次的方法是编写对应的class。可是，这些总感觉不是那么的方便，python那种{tuple : value}的方法，咋就那么艺术呢！本文翻译自：链接 中的一个答案。本文地址：http://crazyant.net/1703.html ","['java', '怎样', '创建', '两个', 'key', 'key', 'pair', 'map', 'xy', '坐标系', '一个', '刻度', '一个', '刻度', '对应', '图上', '一个点', 'pair', 'point', '那么', '创建', '一个点', '或者', '根据', '寻求', '一个点', '需求', '如果', 'python', '语法', '表达', '这个', '样子', 'dict', 'point', '然而', 'java', '变得', '容易', '骨钩', '一下', '这么', '一些', '方法', '使用', '嵌套', 'mapmap', 'integer', 'map', 'integer', 'map', '...', '...', 'map', 'get', 'get', '这种', '方法', '水平', 'key', '切换', '垂直', 'key', '我们', '找寻', 'xy', '坐标系', '对应', '其实', '可以', '先找', '那条', '垂直线', '然后', '找出', '垂直线', '高度', '那个', '但是', '取得', '这个', 'key', 'value', 'get', '实例', '代码', '没有', '第一次', 'get', 'null', '判断', '隐患', '并且', '感觉', '不是', '直观', '一个', 'pair', 'key', '包装', 'public', 'class', 'key', 'private', 'final', 'int', 'private', 'final', 'int', 'public', 'key', 'int', 'int', 'this', 'this', 'override', 'public', 'boolean', 'equals', 'object', 'if', 'this', 'return', 'true', 'if', 'instanceof', 'key', 'return', 'false', 'key', 'key', 'key', 'return', 'key', '&&', 'key', 'override', 'public', 'int', 'hashcode', 'int', 'result', 'result', '31', 'result', 'return', 'result', '这种', '方法', '提前', '包装', '一个', '类中', '两个', '属性', '同时', '提供', 'equals', '方法', '用于', '比较', '提供', 'hashcode', '用于', '使用', '计算', '对象', '列表', '位置', '为什么', '覆盖', 'hashcode', '方法', '参见', '链接', '这个', 'pair', '之后', 'map', 'key', 'map', '...', 'map', 'get', 'new', 'key', '这种', '方法', '代码', '代价', '实现', 'pair', 'key', 'map', 'pair', 'class', '编写', '不能', '忘记', '覆盖', 'equals', 'hashcode', '方法', '增加', '代码', '感觉', '不是', 'google', 'hashbasedtable', '类库', '这种', '方法', '感觉', '直观', '最好', 'import', 'com', 'google', 'common', 'collect', 'hashbasedtable', 'import', 'com', 'google', 'common', 'collect', 'table', '创建', 'table', 'long', 'long', 'point', 'plane', 'hashbasedtable', 'create', '新增', 'plane', 'put', '1l', '2l', 'pointa', 'plane', 'put', '1l', '3l', 'pointb', 'plane', 'put', '1l', '4l', 'pointc', '获取', 'point', 'pointa', 'plane', 'get', '1l', '2l', 'point', 'pointb', 'plane', 'get', '1l', '2l', '惊叹', '好用', 'java', '语言', '写成', '这样', '代码', '称之为', '艺术', '无限', '维度', 'key', '两种', '方法', '可以', '实现', '无线', '维度', 'key', '第一种', '本文', '第二种', '方法', '一样', '先写', '一个', 'class', '里面', '无限', '属性', '然后', '作为', 'map', 'key', '第二种', '如果', '类型', '一样', '可以', '样子', '实现', 'map', 'list', 'integer', 'map', '...', '但是', '这种', '方法', '出错', '不易', '并且', '性能', '总结', '实现', 'map', 'key', '两个', '绑定', '属性', '或者', '称之为', 'pair', 'key', '个人', '认为', '首先', '使用', 'google', 'hashbasedtable', '类库', '其次', '方法', '编写', '对应', 'class', '可是', '这些', '感觉', '不是', '那么', '方便', 'python', '那种', 'tuple', 'value', '方法', '那么', '艺术', '本文', '翻译', '链接', '一个', '答案', '本文', '地址', 'http', 'crazyant', 'net', '1703', 'html']","[[-0.24123694 -0.11352187  0.26496173  0.14240782  0.30166133 -0.37636206
  -0.14508683  0.49159675 -0.05545173 -0.09658028 -0.04406524 -0.38460771
  -0.1558536   0.57248635  0.17423329 -0.10910442 -0.14630047 -0.01133247
  -0.08825688 -0.54238378 -0.02870853  0.26477372 -0.03917936 -0.17720291
   0.07289717 -0.50426984 -0.31321895  0.05215805 -0.24555338 -0.07905801
   0.19128954  0.00701653  0.0022878  -0.13702299 -0.16300385  0.34538162
  -0.19333812 -0.27666714  0.09567655 -0.7729901  -0.15831131 -0.61601363
  -0.07481565 -0.02279782 -0.14373957 -0.2169521  -0.24949278  0.3962753
  -0.19398278  0.47398908  0.17012969 -0.28554269 -0.12580341 -0.20184015
   0.01582902  0.40805037  0.17846557 -0.09130718  0.1154077  -0.13825809
   0.08203384  0.25734391  0.02230038  0.09284995 -0.39414556  0.03413492
   0.0549394  -0.02617573 -0.30202842  0.4580112   0.11519397 -0.19592452
   0.40599342 -0.33817816  0.57844167  0.25837066  0.16387284 -0.15488591
  -0.32009258 -0.15636272 -0.01513772  0.04133482 -0.1137226   0.38234441
  -0.35685906  0.21913323 -0.29837382  0.45291832  0.50755944  0.16104402
   0.26297293  0.11324488  0.37752507  0.19433238  0.20298417  0.36804179
   0.12227758 -0.32551139 -0.02571336 -0.12699609]]"
1707,Python使用list字段模式或者dict字段模式读取文件的方法,"Python用于处理文本数据绝对是个利器，极为简单的读取、分割、过滤、转换支持，使得开发者不需要考虑繁杂的流文件处理过程（相对于JAVA来说的，嘻嘻）。博主自己工作中，一些复杂的文本数据处理计算，包括在HADOOP上编写Streaming程序，均是用Python完成。而在文本处理的过程中，将文件加载内存中是第一步，这就涉及到怎样将文件中的某一列映射到具体的变量的过程，最最愚笨的方法，就是按照字段的下标进行引用，比如这样子：# fields是读取了一行，并且按照分隔符分割之后的列表user_id = fields[0]user_name = fields[1]user_type = fields[2]如果按照这种方式读取，一旦文件有顺序、增减列的变动，代码的维护是个噩梦，这种代码一定要杜绝。本文推荐两种优雅的方式来读取数据，都是先配置字段模式，然后按照模式读取，而模式则有字典模式和列表模式两种形式；读取文件，按照分隔符分割成字段数据列表首先读取文件，按照分隔符分割每一行的数据，返回字段列表，以便后续处理。代码如下：def read_file_data(filepath):    '''根据路径按行读取文件, 参数filepath：文件的绝对路径    @param filepath: 读取文件的路径    @return: 按\t分割后的每行的数据列表    '''    fin = open(filepath, 'r')    for line in fin:        try:            line = line[:-1]            if not line: continue        except:            continue                try:            fields = line.split(""\t"")        except:            continue        # 抛出当前行的分割列表        yield fields    fin.close()使用yield关键字，每次抛出单个行的分割数据，这样在调度程序中可以用for fields in read_file_data(fpath)的方式读取每一行。映射到模型之方法1：使用配置好的字典模式，装配读取的数据列表这种方法配置一个{“字段名”: 字段位置}的字典作为数据模式，然后按照该模式装配读取的列表数据，最后实现用字典的方式访问数据。所使用的函数：@staticmethoddef map_fields_dict_schema(fields, dict_schema):    """"""根据字段的模式，返回模式和数据值的对应值；例如 fields为['a','b','c'],schema为{'name':0, 'age':1}，那么就返回{'name':'a','age':'b'}    @param fields: 包含有数据的数组，一般是通过对一个Line String通过按照\t分割得到    @param dict_schema: 一个词典，key是字段名称，value是字段的位置；    @return: 词典，key是字段名称，value是字段值    """"""    pdict = {}    for fstr, findex in dict_schema.iteritems():        pdict[fstr] = str(fields[int(findex)])    return pdict有了该方法和之前的方法，可以用以下的方式读取数据：# coding:utf8""""""@author: www.crazyant.net测试使用字典模式加载数据列表优点：对于多列文件，只通过配置需要读取的字段，就能读取对应列的数据缺点：如果字段较多，每个字段的位置配置，较为麻烦""""""import file_utilimport pprint# 配置好的要读取的字典模式，可以只配置自己关心的列的位置dict_schema = {""userid"":0, ""username"":1, ""usertype"":2}for fields in file_util.FileUtil.read_file_data(""userfile.txt""):    # 将字段列表，按照字典模式进行映射    dict_fields = file_util.FileUtil.map_fields_dict_schema(fields, dict_schema)    pprint.pprint(dict_fields)输出结果：{'userid': '1', 'username': 'name1', 'usertype': '0'}{'userid': '2', 'username': 'name2', 'usertype': '1'}{'userid': '3', 'username': 'name3', 'usertype': '2'}{'userid': '4', 'username': 'name4', 'usertype': '3'}{'userid': '5', 'username': 'name5', 'usertype': '4'}{'userid': '6', 'username': 'name6', 'usertype': '5'}{'userid': '7', 'username': 'name7', 'usertype': '6'}{'userid': '8', 'username': 'name8', 'usertype': '7'}{'userid': '9', 'username': 'name9', 'usertype': '8'}{'userid': '10', 'username': 'name10', 'usertype': '9'}{'userid': '11', 'username': 'name11', 'usertype': '10'}{'userid': '12', 'username': 'name12', 'usertype': '11'}映射到模型之方法2：使用配置好的列表模式，装配读取的数据列表如果需要读取文件所有列，或者前面的一些列，那么配置字典模式优点复杂，因为需要给每个字段配置索引位置，并且这些位置是从0开始完后数的，属于低级劳动，需要消灭。列表模式应命运而生，先将配置好的列表模式转换成字典模式，然后按字典加载就可以实现。转换模式，以及用按列表模式读取的代码：@staticmethoddef transform_list_to_dict(para_list):    """"""把['a', 'b']转换成{'a':0, 'b':1}的形式    @param para_list: 列表，里面是每个列对应的字段名    @return: 字典，里面是字段名和位置的映射    """"""    res_dict = {}    idx = 0    while idx < len(para_list):        res_dict[str(para_list[idx]).strip()] = idx        idx += 1    return res_dict@staticmethoddef map_fields_list_schema(fields, list_schema):    """"""根据字段的模式，返回模式和数据值的对应值；例如 fields为['a','b','c'],schema为{'name', 'age'}，那么就返回{'name':'a','age':'b'}    @param fields: 包含有数据的数组，一般是通过对一个Line String通过按照\t分割得到    @param list_schema: 列名称的列表list    @return: 词典，key是字段名称，value是字段值    """"""    dict_schema = FileUtil.transform_list_to_dict(list_schema)    return FileUtil.map_fields_dict_schema(fields, dict_schema)使用的时候，可以用列表的形式配置模式，不需要配置索引更加简洁：# coding:utf8""""""@author: www.crazyant.net测试使用列表模式加载数据列表优点：如果读取所有列，用列表模式只需要按顺序写出各个列的字段名就可以缺点：不能够只读取关心的字段，需要全部读取""""""import file_utilimport pprint# 配置好的要读取的列表模式，只能配置前面的列，或者所有咧list_schema = [""userid"", ""username"", ""usertype""]for fields in file_util.FileUtil.read_file_data(""userfile.txt""):    # 将字段列表，按照字典模式进行映射    dict_fields = file_util.FileUtil.map_fields_list_schema(fields, list_schema)    pprint.pprint(dict_fields) 运行结果和字典模式的完全一样。file_util.py全部代码以下是file_util.py中的全部代码，可以放在自己的公用类库中使用# -*- encoding:utf8 -*-'''@author: www.crazyant.net@version: 2014-12-5'''class FileUtil(object):    '''文件、路径常用操作方法    '''    @staticmethod    def read_file_data(filepath):        '''根据路径按行读取文件, 参数filepath：文件的绝对路径        @param filepath: 读取文件的路径        @return: 按\t分割后的每行的数据列表        '''        fin = open(filepath, 'r')        for line in fin:            try:                line = line[:-1]                if not line: continue            except:                continue                        try:                fields = line.split(""\t"")            except:                continue            # 抛出当前行的分割列表            yield fields        fin.close()        @staticmethod    def transform_list_to_dict(para_list):        """"""把['a', 'b']转换成{'a':0, 'b':1}的形式        @param para_list: 列表，里面是每个列对应的字段名        @return: 字典，里面是字段名和位置的映射        """"""        res_dict = {}        idx = 0        while idx < len(para_list):            res_dict[str(para_list[idx]).strip()] = idx            idx += 1        return res_dict        @staticmethod    def map_fields_list_schema(fields, list_schema):        """"""根据字段的模式，返回模式和数据值的对应值；例如 fields为['a','b','c'],schema为{'name', 'age'}，那么就返回{'name':'a','age':'b'}        @param fields: 包含有数据的数组，一般是通过对一个Line String通过按照\t分割得到        @param list_schema: 列名称的列表list        @return: 词典，key是字段名称，value是字段值        """"""        dict_schema = FileUtil.transform_list_to_dict(list_schema)        return FileUtil.map_fields_dict_schema(fields, dict_schema)    @staticmethoddef map_fields_dict_schema(fields, dict_schema):    """"""根据字段的模式，返回模式和数据值的对应值；例如 fields为['a','b','c'],schema为{'name':0, 'age':1}，那么就返回{'name':'a','age':'b'}    @param fields: 包含有数据的数组，一般是通过对一个Line String通过按照\t分割得到    @param dict_schema: 一个词典，key是字段名称，value是字段的位置；    @return: 词典，key是字段名称，value是字段值    """"""    pdict = {}    for fstr, findex in dict_schema.iteritems():        pdict[fstr] = str(fields[int(findex)])    return pdict    本文地址：http://crazyant.net/1707.html ","['python', '使用', 'list', '字段', '模式', '或者', 'dict', '字段', '模式', '读取', '文件', '方法', 'python', '用于', '处理', '文本', '数据', '绝对', '利器', '极为', '简单', '读取', '分割', '过滤', '转换', '支持', '使得', '开发者', '需要', '考虑', '繁杂', '文件', '处理过程', '相对', 'java', '来说', '嘻嘻', '博主', '自己', '工作', '一些', '复杂', '文本', '数据处理', '计算', '包括', 'hadoop', '编写', 'streaming', '程序', 'python', '完成', '文本处理', '过程', '文件', '加载', '内存', '中是', '第一步', '涉及', '怎样', '文件', '一列', '映射', '具体', '变量', '过程', '最最', '愚笨', '方法', '就是', '按照', '字段', '下标', '进行', '引用', '比如', '样子', 'fields', '读取', '一行', '并且', '按照', '分隔符', '分割', '之后', '列表', 'user', 'id', 'fields', 'user', 'name', 'fields', 'user', 'type', 'fields', '如果', '按照', '这种', '方式', '读取', '一旦', '文件', '顺序', '增减', '变动', '代码', '维护', '噩梦', '这种', '代码', '一定', '杜绝', '本文', '推荐', '两种', '优雅', '方式', '读取数据', '配置', '模式', '然后', '按照', '模式', '读取', '模式', '字典', '模式', '列表', '模式', '两种', '形式', '读取', '文件', '按照', '分隔符', '分割', '成字段', '数据', '列表', '首先', '读取', '文件', '按照', '分隔符', '分割', '一行', '数据', '返回', '列表', '以便', '后续', '处理', '代码', '如下', 'def', 'read', 'file', 'data', 'filepath', '根据', '路径', '按行', '读取', '文件', '参数', 'filepath', '文件', '绝对路径', 'param', 'filepath', '读取', '文件', '路径', 'return', '分割', '每行', '数据', '列表', 'fin', 'open', 'filepath', 'for', 'line', 'in', 'fin', 'try', 'line', 'line', 'if', 'not', 'line', 'continue', 'except', 'continue', 'try', 'fields', 'line', 'split', 'except', 'continue', '抛出', '当前', '分割', '列表', 'yield', 'fields', 'fin', 'close', '使用', 'yield', '关键字', '每次', '抛出', '单个', '分割', '数据', '这样', '调度', '程序', '可以', 'for', 'fields', 'in', 'read', 'file', 'data', 'fpath', '方式', '读取', '一行', '映射', '模型', '方法', '使用', '配置', '字典', '模式', '装配', '读取', '数据', '列表', '这种', '方法', '配置', '一个', '字段名', '位置', '字典', '作为', '数据', '模式', '然后', '按照', '模式', '装配', '读取', '列表', '数据', '最后', '实现', '字典', '方式', '访问', '数据', '使用', '函数', 'staticmethoddef', 'map', 'fields', 'dict', 'schema', 'fields', 'dict', 'schema', '根据', '字段', '模式', '返回', '模式', '数据', '对应', '例如', 'fields', 'schema', 'name', 'age', '那么', '返回', 'name', 'age', 'param', 'fields', '包含', '数据', '数组', '一般', '通过', '一个', 'line', 'string', '通过', '按照', '分割', '得到', 'param', 'dict', 'schema', '一个', '词典', 'key', '字段名', 'value', '位置', 'return', '词典', 'key', '字段名', 'value', '段值', 'pdict', 'for', 'fstr', 'findex', 'in', 'dict', 'schema', 'iteritems', 'pdict', 'fstr', 'str', 'fields', 'int', 'findex', 'return', 'pdict', '方法', '之前', '方法', '可以', '以下', '方式', '读取数据', 'coding', 'utf8', 'author', 'www', 'crazyant', 'net', '测试', '使用', '字典', '模式', '加载', '数据', '列表', '优点', '对于', '多列', '文件', '通过', '配置', '需要', '读取', '读取', '对应', '数据', '缺点', '如果', '字段', '每个', '字段', '位置', '配置', '较为', '麻烦', 'import', 'file', 'utilimport', 'pprint', '配置', '读取', '字典', '模式', '可以', '配置', '自己', '关心', '位置', 'dict', 'schema', 'userid', 'username', 'usertype', 'for', 'fields', 'in', 'file', 'util', 'fileutil', 'read', 'file', 'data', 'userfile', 'txt', '列表', '按照', '字典', '模式', '进行', '映射', 'dict', 'fields', 'file', 'util', 'fileutil', 'map', 'fields', 'dict', 'schema', 'fields', 'dict', 'schema', 'pprint', 'pprint', 'dict', 'fields', '输出', '结果', 'userid', 'username', 'name1', 'usertype', 'userid', 'username', 'name2', 'usertype', 'userid', 'username', 'name3', 'usertype', 'userid', 'username', 'name4', 'usertype', 'userid', 'username', 'name5', 'usertype', 'userid', 'username', 'name6', 'usertype', 'userid', 'username', 'name7', 'usertype', 'userid', 'username', 'name8', 'usertype', 'userid', 'username', 'name9', 'usertype', 'userid', '10', 'username', 'name10', 'usertype', 'userid', '11', 'username', 'name11', 'usertype', '10', 'userid', '12', 'username', 'name12', 'usertype', '11', '映射', '模型', '方法', '使用', '配置', '列表', '模式', '装配', '读取', '数据', '列表', '如果', '需要', '读取', '文件', '所有', '或者', '前面', '一些', '那么', '配置', '字典', '模式', '优点', '复杂', '因为', '需要', '每个', '配置', '索引', '位置', '并且', '这些', '位置', '是从', '开始', '完后', '属于', '低级', '劳动', '需要', '消灭', '列表', '模式', '命运', '而生', '配置', '列表', '模式', '转换成', '字典', '模式', '然后', '字典', '加载', '可以', '实现', '转换', '模式', '以及', '列表', '模式', '读取', '代码', 'staticmethoddef', 'transform', 'list', 'to', 'dict', 'para', 'list', '转换成', '形式', 'param', 'para', 'list', '列表', '里面', '每个', '对应', '字段名', 'return', '字典', '里面', '字段名', '位置', '映射', 'res', 'dict', 'idx', 'while', 'idx', 'len', 'para', 'list', 'res', 'dict', 'str', 'para', 'list', 'idx', 'strip', 'idx', 'idx', 'return', 'res', 'dict', 'staticmethoddef', 'map', 'fields', 'list', 'schema', 'fields', 'list', 'schema', '根据', '字段', '模式', '返回', '模式', '数据', '对应', '例如', 'fields', 'schema', 'name', 'age', '那么', '返回', 'name', 'age', 'param', 'fields', '包含', '数据', '数组', '一般', '通过', '一个', 'line', 'string', '通过', '按照', '分割', '得到', 'param', 'list', 'schema', '名称', '列表', 'list', 'return', '词典', 'key', '字段名', 'value', '段值', 'dict', 'schema', 'fileutil', 'transform', 'list', 'to', 'dict', 'list', 'schema', 'return', 'fileutil', 'map', 'fields', 'dict', 'schema', 'fields', 'dict', 'schema', '使用', '时候', '可以', '列表', '形式', '配置', '模式', '需要', '配置', '索引', '更加', '简洁', 'coding', 'utf8', 'author', 'www', 'crazyant', 'net', '测试', '使用', '列表', '模式', '加载', '数据', '列表', '优点', '如果', '读取', '所有', '列表', '模式', '需要', '顺序', '写出', '各个', '字段名', '可以', '缺点', '能够', '读取', '关心', '需要', '全部', '读取', 'import', 'file', 'utilimport', 'pprint', '配置', '读取', '列表', '模式', '只能', '配置', '前面', '或者', '所有', 'list', 'schema', 'userid', 'username', 'usertype', 'for', 'fields', 'in', 'file', 'util', 'fileutil', 'read', 'file', 'data', 'userfile', 'txt', '列表', '按照', '字典', '模式', '进行', '映射', 'dict', 'fields', 'file', 'util', 'fileutil', 'map', 'fields', 'list', 'schema', 'fields', 'list', 'schema', 'pprint', 'pprint', 'dict', 'fields', '运行', '结果', '字典', '模式', '完全', '一样', 'file', 'util', 'py', '全部', '代码', '以下', 'file', 'util', 'py', '全部', '代码', '可以', '放在', '自己', '公用', '类库', '使用', 'encoding', 'utf8', 'author', 'www', 'crazyant', 'net', 'version', '2014', '12', 'class', 'fileutil', 'object', '文件', '路径', '常用', '操作方法', 'staticmethod', 'def', 'read', 'file', 'data', 'filepath', '根据', '路径', '按行', '读取', '文件', '参数', 'filepath', '文件', '绝对路径', 'param', 'filepath', '读取', '文件', '路径', 'return', '分割', '每行', '数据', '列表', 'fin', 'open', 'filepath', 'for', 'line', 'in', 'fin', 'try', 'line', 'line', 'if', 'not', 'line', 'continue', 'except', 'continue', 'try', 'fields', 'line', 'split', 'except', 'continue', '抛出', '当前', '分割', '列表', 'yield', 'fields', 'fin', 'close', 'staticmethod', 'def', 'transform', 'list', 'to', 'dict', 'para', 'list', '转换成', '形式', 'param', 'para', 'list', '列表', '里面', '每个', '对应', '字段名', 'return', '字典', '里面', '字段名', '位置', '映射', 'res', 'dict', 'idx', 'while', 'idx', 'len', 'para', 'list', 'res', 'dict', 'str', 'para', 'list', 'idx', 'strip', 'idx', 'idx', 'return', 'res', 'dict', 'staticmethod', 'def', 'map', 'fields', 'list', 'schema', 'fields', 'list', 'schema', '根据', '字段', '模式', '返回', '模式', '数据', '对应', '例如', 'fields', 'schema', 'name', 'age', '那么', '返回', 'name', 'age', 'param', 'fields', '包含', '数据', '数组', '一般', '通过', '一个', 'line', 'string', '通过', '按照', '分割', '得到', 'param', 'list', 'schema', '名称', '列表', 'list', 'return', '词典', 'key', '字段名', 'value', '段值', 'dict', 'schema', 'fileutil', 'transform', 'list', 'to', 'dict', 'list', 'schema', 'return', 'fileutil', 'map', 'fields', 'dict', 'schema', 'fields', 'dict', 'schema', 'staticmethoddef', 'map', 'fields', 'dict', 'schema', 'fields', 'dict', 'schema', '根据', '字段', '模式', '返回', '模式', '数据', '对应', '例如', 'fields', 'schema', 'name', 'age', '那么', '返回', 'name', 'age', 'param', 'fields', '包含', '数据', '数组', '一般', '通过', '一个', 'line', 'string', '通过', '按照', '分割', '得到', 'param', 'dict', 'schema', '一个', '词典', 'key', '字段名', 'value', '位置', 'return', '词典', 'key', '字段名', 'value', '段值', 'pdict', 'for', 'fstr', 'findex', 'in', 'dict', 'schema', 'iteritems', 'pdict', 'fstr', 'str', 'fields', 'int', 'findex', 'return', 'pdict', '本文', '地址', 'http', 'crazyant', 'net', '1707', 'html']","[[-0.24794592 -0.12921379  0.26679256  0.13096791  0.32996524 -0.39334331
  -0.15743174  0.51777637 -0.05022403 -0.11457471 -0.03889441 -0.39107542
  -0.18579564  0.60651801  0.18477617 -0.1152187  -0.15340336 -0.00547706
  -0.10038403 -0.58422042 -0.03985614  0.27040054 -0.0282781  -0.19726059
   0.09526614 -0.54427738 -0.32777259  0.05492525 -0.26326239 -0.0789775
   0.19667689 -0.00959683  0.0020688  -0.15175128 -0.16984016  0.34714542
  -0.21100903 -0.29570053  0.10531456 -0.81838713 -0.17659022 -0.65968181
  -0.07656141 -0.01603833 -0.1526637  -0.230584   -0.23320124  0.4139719
  -0.21987933  0.50988756  0.19525324 -0.29858629 -0.15421971 -0.19027971
   0.00488603  0.42082322  0.18889776 -0.10120333  0.11814473 -0.15578058
   0.08786573  0.28237509  0.0207868   0.09992026 -0.41950578  0.03751595
   0.06215038 -0.03661321 -0.33361513  0.47256505  0.12797593 -0.20905938
   0.42169459 -0.34813476  0.60684992  0.26034999  0.14439346 -0.16232867
  -0.35835602 -0.13508436 -0.00269597  0.03828202 -0.12142764  0.39435362
  -0.35691873  0.22844131 -0.30930546  0.46677316  0.5218433   0.16305975
   0.28917628  0.12606627  0.39599083  0.20770231  0.21682765  0.37082815
   0.13753653 -0.35187878 -0.06639282 -0.14002864]]"
1712,做设计就像创世界,最近读了本都市YY小说《重生之小说巨匠》，小说前部分、中部分都写的挺好的，结尾感觉有点弱势，作者很取巧的将金庸、莎士比亚、哈利波特等经典人物书籍引入，通过书籍的简单介绍和造成的世界轰动衬托出主人公很牛逼的效果，而其中作者对怎样写小说的思考很有趣。作者提到，小说题材无限制，你可以创立一个完全虚幻的世界，在这里世界里你就是神，你可以定义任何东西，比如生物除了人还有妖精、比如天上有2个月亮、比如植物也会说话，但是你要保证创立的世界的完备性，如果你定义这个世界每天只有23小时，那么在小说的任何地方，你都不能忘记缺失的这一个小时。创立的世界要符合逻辑，要自己圆的通所有的关系和逻辑。做设计也是一样，设计的目的是为了解决某个问题或者实现新的功能，问题和新的功能往往有核心的需求，实现了核心的需求相当于已经达到了目标。但是一个问题的解决、一个系统的运行，往往不只是几个核心的功能，也需要包括额外的设置、衍生关系等逻辑。比如为了实现系统的灵活性，引入了灵活的配置功能，同时把配置数据使用到了核心模型之中，那么一定还要记得配置的修改会导致核心模型数据的变化，（配置、核心模型、配置和核心模型的关联）这三者的设计思考缺一不可。一生二、二生三、三生万物。系统的完好运行是一种平衡状态，需要任何一方的协作完成。如果想要打破这种平衡，就会引入一个新的变量，就像平静的湖水中扔进了一个石头，从石头落点开始，水的涟漪不断扩散，引入的这个变量会导致系统各个组件受到影响，它们的交互关系，它们的影响逻辑都会随之改变。从变量本身出发，思考它会影响到哪些模块，这种方法经常会导致缺失考虑，改成从整体上浏览整个系统任何一个模块，每个模块都思考引入这个变量会导致的变化，才能做到完备考虑。又例如战场的将帅正在指挥战斗的进行，如果要想出一队奇兵改变战局，那么战场上所有的分队都要接收到消息并调整自己的战斗策略，不然奇兵会变成孤军深入没有响应配合，对战局的影响也就没有达到奇的目的。平衡是落后的现状，也是改变的目标。要让系统更加灵活、拥有更完备的功能，必须打破原有的平衡状态。这个过程是痛苦的，会引入各种各样的问题，但是解决问题、全盘思考、克服困难本身就是一种乐趣和成长，也只有跨越了这些绊脚石之后，才会体会到成就感和生活的意义。设计的目的就是创建一个完备的世界，这个世界任何逻辑都是相通圆满的。,"['设计', '世界', '最近', '都市', 'yy', '小说', '重生', '小说', '巨匠', '小说', '部分', '部分', '结尾', '感觉', '有点', '弱势', '作者', '取巧', '金庸', '莎士比亚', '哈利波', '特等', '经典', '人物', '书籍', '引入', '通过', '书籍', '简单', '介绍', '造成', '世界', '轰动', '衬托出', '主人公', '效果', '其中', '作者', '怎样', '小说', '思考', '有趣', '作者', '提到', '小说', '题材', '限制', '可以', '创立', '一个', '完全', '虚幻', '世界', '这里', '世界', '就是', '可以', '定义', '任何', '东西', '比如', '生物', '除了', '还有', '妖精', '比如', '天上', '月亮', '比如', '植物', '说话', '但是', '保证', '创立', '世界', '完备', '如果', '定义', '这个', '世界', '每天', '只有', '23', '小时', '那么', '小说', '任何', '地方', '不能', '忘记', '缺失', '一个', '小时', '创立', '世界', '符合', '逻辑', '自己', '所有', '关系', '逻辑', '设计', '一样', '设计', '目的', '为了', '解决', '某个', '问题', '或者', '实现', '功能', '问题', '功能', '往往', '核心', '需求', '实现', '核心', '需求', '相当于', '已经', '达到', '目标', '但是', '一个', '问题', '解决', '一个', '系统', '运行', '往往', '只是', '几个', '核心', '功能', '需要', '包括', '额外', '设置', '衍生', '关系', '逻辑', '比如', '为了', '实现', '系统', '灵活性', '引入', '灵活', '配置', '功能', '同时', '配置', '数据', '使用', '核心', '模型', '之中', '那么', '一定', '还要', '记得', '配置', '修改', '导致', '核心', '模型', '数据', '变化', '配置', '核心', '模型', '配置', '核心', '模型', '关联', '三者', '设计', '思考', '缺一不可', '一生', '二生', '三生', '万物', '系统', '完好', '运行', '一种', '平衡', '状态', '需要', '任何一方', '协作', '完成', '如果', '想要', '打破', '这种', '平衡', '引入', '一个', '变量', '平静', '湖水', '扔进', '一个', '石头', '石头', '落点', '开始', '涟漪', '不断', '扩散', '引入', '这个', '变量', '导致系统', '各个', '组件', '受到', '影响', '它们', '交互', '关系', '它们', '影响', '逻辑', '随之', '改变', '变量', '本身', '出发', '思考', '它会', '影响', '哪些', '模块', '这种', '方法', '经常', '导致', '缺失', '考虑', '改成', '整体', '浏览', '整个', '系统', '任何', '一个', '模块', '每个', '模块', '思考', '引入', '这个', '变量', '导致', '变化', '才能', '做到', '完备', '考虑', '例如', '战场', '将帅', '正在', '指挥', '战斗', '进行', '如果', '一队', '奇兵', '改变', '战局', '那么', '战场', '所有', '分队', '接收', '消息', '调整', '自己', '战斗', '策略', '不然', '奇兵', '变成', '孤军深入', '没有响应', '配合', '战局', '影响', '没有', '达到', '目的', '平衡', '落后', '现状', '改变', '目标', '系统', '更加', '灵活', '拥有', '完备', '功能', '必须', '打破', '原有', '平衡', '状态', '这个', '过程', '痛苦', '引入', '各种各样', '问题', '但是', '解决问题', '全盘', '思考', '克服困难', '本身', '就是', '一种', '乐趣', '成长', '只有', '跨越', '这些', '绊脚石', '之后', '体会', '成就感', '生活', '意义', '设计', '目的', '就是', '创建', '一个', '完备', '世界', '这个', '世界', '任何', '逻辑', '相通', '圆满']","[[-0.23275261 -0.13010825  0.19447515  0.15054668  0.28007306 -0.30524381
  -0.18806957  0.44816268  0.00778709  0.00486327 -0.05799693 -0.29119487
  -0.18097984  0.56664433  0.14088265 -0.09282393 -0.14930144 -0.00718817
  -0.10925605 -0.41269131  0.04110521  0.21521287  0.0189853  -0.05360071
   0.12768027 -0.52555597 -0.25300892  0.08828591 -0.18656774 -0.05072387
   0.2453883   0.02169984 -0.02060504 -0.13651624 -0.07746004  0.30205634
  -0.10910705 -0.18936549  0.11591041 -0.71860173 -0.17501593 -0.53853723
  -0.0325237  -0.08205329 -0.16443915 -0.1139511  -0.24301803  0.45545781
  -0.17406173  0.35078384  0.20950638 -0.24307148 -0.11426672 -0.22096288
   0.08802219  0.35658224  0.25149676 -0.04703074  0.08100783 -0.07723112
   0.02155589  0.28758914  0.02318443  0.08335223 -0.36220776 -0.02911246
   0.04016756 -0.02004463 -0.21710994  0.40855904  0.14589075 -0.2475198
   0.37079874 -0.30112811  0.53469395  0.12300092  0.19919075 -0.11615155
  -0.24608017 -0.21267191 -0.08629253 -0.01920683 -0.04632959  0.29122256
  -0.35566521  0.19178483 -0.26712292  0.3646422   0.41628819  0.10909063
   0.30652014  0.11341526  0.33584529  0.17454529  0.16987732  0.34404809
   0.08961095 -0.27945194 -0.03700228 -0.07628401]]"
1722,《Spring in action》3rd中SpringPizza项目的运行方法,"《Spring in action》3rd中SpringPizza项目和其他的不同，使用gradle编译的，尝试了好久都没能run起来，最后按照一篇文章的做法，将其转换成maven项目，然后就执行成功了。1、下载代码下载地址：http://www.manning.com/walls4/sia3-code.zip，解压代码2、在\sia3-code\SpringPizza目录下建立pom.xml文件，把项目变成maven编译pom.xml文件内容如下：<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd""><modelVersion>4.0.0</modelVersion><groupId>com.yogesh</groupId><artifactId>SpringPizza</artifactId><packaging>war</packaging><version>1.0-SNAPSHOT</version><name>spring-web-flow Maven Webapp</name><url>http://maven.apache.org</url><properties><spring.version>3.0.5.RELEASE</spring.version></properties><dependencies><dependency><groupId>org.springframework.webflow</groupId><artifactId>spring-webflow</artifactId><version>2.3.2.RELEASE</version></dependency><dependency><groupId>org.springframework.webflow</groupId><artifactId>spring-binding</artifactId><version>2.3.2.RELEASE</version></dependency><dependency><groupId>jstl</groupId><artifactId>jstl</artifactId><version>1.2</version></dependency><dependency><groupId>commons-lang</groupId><artifactId>commons-lang</artifactId><version>2.6</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-beans</artifactId><version>3.2.4.RELEASE</version></dependency><dependency><groupId>org.tuckey</groupId><artifactId>urlrewritefilter</artifactId><version>3.1.0</version></dependency><dependency><groupId>log4j</groupId><artifactId>log4j</artifactId><version>1.2.7</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-aspects</artifactId><version>2.0-m2</version></dependency></dependencies><build><finalName>SpringPizza</finalName><plugins><plugin><artifactId>maven-compiler-plugin</artifactId><version>2.3.2</version><configuration><source>1.6</source><target>1.6</target></configuration></plugin></plugins></build></project>3、使用maven项目的方式，导入SpringPizza  导入后发现/SpringPizza/src/test/java/com/springinaction/pizza/flow/PizzaFlowTest.java单测报错，半天没搞定，先删除，对运行项目没有影响；4、把项目转换成web形式并且添加maven依赖到编译路径5、编译安装项目6、把编译的项目添加到Server中 7、启动tomcat，访问首页地址是：http://localhost:8080/SpringPizza/pizza这样就可以结合代码和执行，来仔细研究web flow的代码了。《Spring in action》3rd真是本好书，带我进入了深入理解Spring的大门，感谢作者。  ","['spring', 'in', 'action', '3rd', 'springpizza', '项目', '运行', '方法', 'spring', 'in', 'action', '3rd', 'springpizza', '项目', '其他', '不同', '使用', 'gradle', '编译', '尝试', '好久', '没能', 'run', '起来', '最后', '按照', '一篇', '文章', '做法', '转换成', 'maven', '项目', '然后', '执行', '成功', '下载', '代码', '下载', '地址', 'http', 'www', 'manning', 'com', 'walls4', 'sia3', 'code', 'zip', '解压', '代码', 'sia3', 'code', 'springpizza', '目录', '建立', 'pom', 'xml', '文件', '项目', '变成', 'maven', '编译', 'pom', 'xml', '文件', '内容', '如下', 'project', 'xmlns', 'http', 'maven', 'apache', 'org', 'pom', '4.0', 'xmlns', 'xsi', 'http', 'www', 'w3', 'org', '2001', 'xmlschema', 'instance', 'xsi', 'schemalocation', 'http', 'maven', 'apache', 'org', 'pom', '4.0', 'http', 'maven', 'apache', 'org', 'maven', 'v4', 'xsd', 'modelversion', '4.0', 'modelversion', 'groupid', 'com', 'yogesh', 'groupid', 'artifactid', 'springpizza', 'artifactid', 'packaging', 'war', 'packaging', 'version', '1.0', 'snapshot', 'version', 'name', 'spring', 'web', 'flow', 'maven', 'webapp', 'name', 'url', 'http', 'maven', 'apache', 'org', 'url', 'properties', 'spring', 'version', '3.0', 'release', 'spring', 'version', 'properties', 'dependencies', 'dependency', 'groupid', 'org', 'springframework', 'webflow', 'groupid', 'artifactid', 'spring', 'webflow', 'artifactid', 'version', '2.3', 'release', 'version', 'dependency', 'dependency', 'groupid', 'org', 'springframework', 'webflow', 'groupid', 'artifactid', 'spring', 'binding', 'artifactid', 'version', '2.3', 'release', 'version', 'dependency', 'dependency', 'groupid', 'jstl', 'groupid', 'artifactid', 'jstl', 'artifactid', 'version', '1.2', 'version', 'dependency', 'dependency', 'groupid', 'commons', 'lang', 'groupid', 'artifactid', 'commons', 'lang', 'artifactid', 'version', '2.6', 'version', 'dependency', 'dependency', 'groupid', 'org', 'springframework', 'groupid', 'artifactid', 'spring', 'beans', 'artifactid', 'version', '3.2', 'release', 'version', 'dependency', 'dependency', 'groupid', 'org', 'tuckey', 'groupid', 'artifactid', 'urlrewritefilter', 'artifactid', 'version', '3.1', 'version', 'dependency', 'dependency', 'groupid', 'log4j', 'groupid', 'artifactid', 'log4j', 'artifactid', 'version', '1.2', 'version', 'dependency', 'dependency', 'groupid', 'org', 'springframework', 'groupid', 'artifactid', 'spring', 'aspects', 'artifactid', 'version', '2.0', 'm2', 'version', 'dependency', 'dependencies', 'build', 'finalname', 'springpizza', 'finalname', 'plugins', 'plugin', 'artifactid', 'maven', 'compiler', 'plugin', 'artifactid', 'version', '2.3', 'version', 'configuration', 'source', '1.6', 'source', 'target', '1.6', 'target', 'configuration', 'plugin', 'plugins', 'build', 'project', '使用', 'maven', '项目', '方式', '导入', 'springpizza', '导入', '发现', 'springpizza', 'src', 'test', 'java', 'com', 'springinaction', 'pizza', 'flow', 'pizzaflowtest', 'java', '测报', '半天', '搞定', '删除', '运行', '项目', '没有', '影响', '项目', '转换成', 'web', '形式', '并且', '添加', 'maven', '依赖', '编译', '路径', '编译', '安装', '项目', '编译', '项目', '添加', 'server', '启动', 'tomcat', '访问', '首页', '地址', 'http', 'localhost', '8080', 'springpizza', 'pizza', '这样', '可以', '结合', '代码', '执行', '仔细', '研究', 'web', 'flow', '代码', 'spring', 'in', 'action', '3rd', '真是', '好书', '进入', '深入', '理解', 'spring', '大门', '感谢', '作者']","[[-0.31268638 -0.04756003  0.3252085   0.33723385  0.15944108 -0.41249316
  -0.04242446  0.51048869 -0.13523808 -0.14849613 -0.06793144 -0.47963078
  -0.00351778  0.51687301  0.16664405 -0.1725824  -0.07848804 -0.05126831
   0.02591965 -0.47814097 -0.05035157  0.38063077 -0.1453401  -0.24836133
  -0.04815297 -0.40464708 -0.36389375  0.00768715 -0.19278409 -0.09686911
   0.14933144  0.06309175 -0.00091277 -0.08410036 -0.22325949  0.46649175
  -0.21701589 -0.34390426  0.04538748 -0.72608432 -0.02822495 -0.48804506
  -0.0759497   0.0037421  -0.12631053 -0.27814191 -0.40729062  0.36904961
  -0.05632447  0.41325947 -0.00955426 -0.35319731 -0.05250304 -0.2615794
  -0.03578478  0.47555257  0.12107077 -0.09112045  0.15722511 -0.12053994
   0.18983407  0.14761384  0.00862174  0.04362983 -0.37793632  0.11545558
  -0.02444731  0.0436672  -0.27567334  0.44884526 -0.0580278  -0.11300975
   0.44203702 -0.37532433  0.52756218  0.38643033  0.27346699 -0.24932297
  -0.25106873 -0.17546378 -0.06711258  0.04240609 -0.13645131  0.48912409
  -0.29455668  0.20635663 -0.27000997  0.54095766  0.57427369  0.22680573
   0.14601582  0.13126764  0.3296148   0.21342951  0.20564532  0.48850666
   0.07711044 -0.23399934  0.2399392  -0.11922231]]"
1735,读书破万卷，代码如有神,IT技术领域的书籍普遍非常的厚，一本《JAVA编程思想》竟然多达800页，拿在手里很沉，只能在办公桌子上看。然而现在的工作普遍非常忙，白天忙着开发、开会，晚上回家累的想看电影、玩游戏，根本没有一整块的时间可以拿出来啃这种大部头书籍。能用来看书的时间只有地铁上、公交上、厕所里，碎片时间较多，可是书这么厚的话，地铁上、公交上、厕所里拿着太累了，不可行。有人说可以看电子书，我试了手机上看、Kindle上看，要么是字迹不清晰，要么排版错乱难以阅读，没有一个好办法。其实解决办法很简单，把书撕开，每个章节单独阅读，有如下好处：物尽其用，大部分大部头的书往往买了没办法看，就摆在那里垫桌子，浪费money；克服恐惧心理，大部头的书看上去让人害怕，就像一座高山，如果把它撕开成小章节，首先心理上不会恐惧，就像一个个小目标一样，一章章看完后，惊讶的发现自己看完了大部头；轻便易携带，拆开成小章节之后，往往只有几十页纸，折叠一下塞到小包里，任何时候都能拿出来，还不占地方；按章节进行阅读，因为章节较小，我们可以按章节进行阅读，一边读不懂，可以读第二遍，每个章节彻底弄懂后，再去看下一章，容易管理自己的进度；这么多好处，还等什么呢。撕开的《JAVA编程思想第四版》撕开的《疯狂JAVA讲义》 这真是一种好办法，化整为零、逐个击破，大部头的书往往更加经典，终于有办法可以使用碎片时间学习这些知识了。最近在看JAVA方面的书籍，找了一个书单列举如下，用这种阅读方法，再厚的书都能看完：《Spring in Action》 3th《Effective Java》2th《JAVA编程思想》4th《疯狂JAVA讲义》 3rd《重构：改善既有代码的设计》《代码整洁之道》《Java并发编程实战》《大型网站技术架构 核心原理与案例分析》《大型网站系统与Java中间件实践》《代码大全》（第二版）《程序员修炼之道:从小工到专家》《Java程序员修炼之道》《设计模式：可复用面向对象软件的基础》《深入理解Java虚拟机：JVM高级特性与最佳实践（第2版）》《数据结构与算法分析：Java语言描述（第2版）》《Java常用算法手册（含盘）》一起学习吧，i reading，i happy，let's begin reading。,"['读书', '万卷', '代码', '有神', 'it', '技术', '领域', '书籍', '普遍', '非常', '一本', 'java', '编程', '思想', '竟然', '多达', '800', '手里', '很沉', '只能', '办公桌', '子上', '然而', '现在', '工作', '普遍', '非常', '白天', '开发', '开会', '晚上', '回家', '电影', '玩游戏', '根本', '没有', '一整块', '时间', '可以', '出来', '这种', '大部头', '书籍', '用来', '看书', '时间', '只有', '地铁', '公交', '厕所', '碎片', '时间', '可是', '这么', '的话', '地铁', '公交', '厕所', '太累', '可行', '有人', '可以', '电子书', '我试', '手机', 'kindle', '要么', '字迹', '清晰', '要么', '排版', '错乱', '难以', '阅读', '没有', '一个', '办法', '其实', '解决办法', '简单', '撕开', '每个', '章节', '单独', '阅读', '如下', '好处', '物尽其用', '大部分', '大部头', '往往', '办法', '摆在', '那里', '桌子', '浪费', 'money', '克服', '恐惧心理', '大部头', '看上去', '害怕', '一座', '高山', '如果', '撕开', '成小', '章节', '首先', '心理', '不会', '恐惧', '一个个', '目标', '一样', '一章', '章看', '完后', '惊讶', '发现自己', '大部头', '轻便', '携带', '拆开', '成小', '章节', '之后', '往往', '只有', '几十页', '折叠', '一下', '塞到', '小包', '任何', '时候', '出来', '地方', '章节', '进行', '阅读', '因为', '章节', '我们', '可以', '章节', '进行', '阅读', '一边', '可以', '第二遍', '每个', '章节', '彻底', '弄懂', '一章', '容易', '管理', '自己', '进度', '这么', '好处', '什么', '撕开', 'java', '编程', '思想', '第四版', '撕开', '疯狂', 'java', '讲义', '真是', '一种', '办法', '化整为零', '逐个', '击破', '大部头', '往往', '更加', '经典', '终于', '办法', '可以', '使用', '碎片', '时间', '学习', '这些', '知识', '最近', 'java', '方面', '书籍', '一个', '书单', '列举如下', '这种', '阅读', '方法', '再厚', 'spring', 'in', 'action', '3th', 'effective', 'java', '2th', 'java', '编程', '思想', '4th', '疯狂', 'java', '讲义', '3rd', '重构', '改善', '既有', '代码', '设计', '代码', '整洁', '之道', 'java', '并发', '编程', '实战', '大型', '网站', '技术', '架构', '核心', '原理', '案例', '分析', '大型', '网站', '系统', 'java', '中间件', '实践', '代码', '大全', '第二', '程序员', '修炼', '之道', '小工', '专家', 'java', '程序员', '修炼', '之道', '设计模式', '复用', '面向对象', '软件', '基础', '深入', '理解', 'java', '虚拟机', 'jvm', '高级', '特性', '最佳', '实践', '数据结构', '算法', '分析', 'java', '语言', '描述', 'java', '常用', '算法', '手册', '含盘', '一起', '学习', 'reading', 'happy', 'let', 'begin', 'reading']","[[-0.26537069 -0.07223058  0.20706166  0.21099588  0.22651708 -0.29532017
  -0.12329896  0.4178909  -0.05154333 -0.03685626 -0.05406759 -0.31511823
  -0.07836201  0.48463761  0.14807656 -0.10215336 -0.11381724 -0.03781228
  -0.07113434 -0.3868736   0.00972504  0.26717376 -0.02908808 -0.10949466
   0.06011818 -0.42533588 -0.2593951   0.05444293 -0.15372482 -0.07115461
   0.21522585  0.03340596 -0.01933749 -0.10705623 -0.09916649  0.33679287
  -0.12602962 -0.2154705   0.09207877 -0.66812916 -0.11213785 -0.43080251
  -0.04421372 -0.05475877 -0.14414855 -0.13929941 -0.27654448  0.39221465
  -0.13425647  0.31831674  0.11285648 -0.26994178 -0.10119409 -0.23159474
   0.06891393  0.35991934  0.18596711 -0.04423344  0.10107824 -0.06476645
   0.05786218  0.21323728  0.03777135  0.05993    -0.34577737  0.01364956
   0.015885    0.01710851 -0.21414077  0.38307419  0.05695504 -0.17468403
   0.36083235 -0.30099229  0.44657894  0.17565076  0.19631017 -0.14600162
  -0.2343964  -0.19014363 -0.08437621 -0.02705408 -0.04709963  0.33389023
  -0.28084635  0.17649072 -0.2377812   0.36342336  0.41046584  0.14719948
   0.21764473  0.10390723  0.3103287   0.18083027  0.16413594  0.34646434
   0.08268313 -0.21373111  0.07981594 -0.0823956 ]]"
1741,数据库并发控制机制的理解,隔离级别相当于数据库实现的一套现有的机制，我们直接可以复用；但对于特殊需求，我们可以自己使用锁机制来实现，其实我们自己就可以使用锁机制，实现一套隔离级别；锁机制只是隔离性级别的一种实现；我的感触是，类似封装了函数，数据库隔离性级别，是帮我们实现了几个线程的并发控制方法。但是一些特殊的并发控制，我们可以自己使用锁机制来实现；1、如果事务A设置为read uncommitted，那么事务B做了update还未提交，事务A能够读取到事务B更新的数据，事务B如果回滚，事务A则看到事务B回滚后的数据；2、如果事务A设置为read committed，那么事务B做了update并且没有提交，事务A是读取不到事务B更新的数据的；3、如果事务A设置为repeatable read，那么事务B做了update并提交，事务A仍然读取不到，事务B即使多次commit，事务A全都读取不到；4、如果事务A设置为serializable，如果事务B已经开始运行并做了更新，那么事务A的任何操作得一直等待；如果B没做更新，则A还是能读取的；以上四种级别，事务A如果正在更新一条数据，事务B如果要更新同一条数据，则会等待直到超时，因为事务A更新这条数据时加上了排它锁；,"['数据库', '并发', '控制', '机制', '理解', '隔离', '级别', '相当于', '数据库', '实现', '一套', '现有', '机制', '我们', '直接', '可以', '复用', '对于', '特殊', '需求', '我们', '可以', '自己', '使用', '机制', '实现', '其实', '我们', '自己', '可以', '使用', '机制', '实现', '一套', '隔离', '级别', '机制', '只是', '隔离', '级别', '一种', '实现', '感触', '类似', '封装', '函数', '数据库', '隔离', '级别', '我们', '实现', '几个', '线程', '并发', '控制', '方法', '但是', '一些', '特殊', '并发', '控制', '我们', '可以', '自己', '使用', '机制', '实现', '如果', '事务', '设置', 'read', 'uncommitted', '那么', '事务', 'update', '提交', '事务', '能够', '读取', '事务', '更新', '数据', '事务', '如果', '回滚', '事务', '看到', '事务', '回滚', '数据', '如果', '事务', '设置', 'read', 'committed', '那么', '事务', 'update', '并且', '没有', '提交', '事务', '读取', '不到', '事务', '更新', '数据', '如果', '事务', '设置', 'repeatable', 'read', '那么', '事务', 'update', '提交', '事务', '仍然', '读取', '不到', '事务', '即使', '多次', 'commit', '事务', '全都', '读取', '不到', '如果', '事务', '设置', 'serializable', '如果', '事务', '已经', '开始运行', '更新', '那么', '事务', '任何', '操作', '一直', '等待', '如果', '更新', '还是', '读取', '以上', '四种', '级别', '事务', '如果', '正在', '更新', '一条', '数据', '事务', '如果', '更新', '一条', '数据', '等待', '直到', '超时', '因为', '事务', '更新', '数据', '加上']","[[-0.26020491 -0.16064649  0.20058755  0.15968851  0.33573959 -0.33133871
  -0.23582889  0.51181503  0.02551708  0.03135741 -0.07067621 -0.30376604
  -0.22167069  0.65741192  0.15768845 -0.09658884 -0.17751753 -0.00710734
  -0.14525945 -0.45861677  0.06336713  0.22827998  0.04484878 -0.03397464
   0.16591337 -0.61700094 -0.28315875  0.11512397 -0.20620339 -0.05634206
   0.29929992  0.0217975  -0.03664619 -0.16712102 -0.06881381  0.33869732
  -0.1116     -0.19136317  0.14063638 -0.82423325 -0.21076751 -0.61570989
  -0.02549295 -0.1080818  -0.19888885 -0.0990587  -0.26763955  0.54108762
  -0.21214641  0.38319065  0.26416214 -0.26800382 -0.13797662 -0.25425208
   0.12075671  0.39299204  0.31357044 -0.04252745  0.08747588 -0.07847366
   0.00341745  0.34052066  0.03341573  0.09526046 -0.41157067 -0.05249576
   0.05069091 -0.02649624 -0.23797748  0.46361767  0.19330547 -0.30102029
   0.41537304 -0.33657452  0.60672821  0.10038947  0.2284157  -0.11003331
  -0.27750124 -0.25495889 -0.10912009 -0.03545037 -0.03473487  0.30753924
  -0.4121209   0.21855064 -0.30012631  0.39000205  0.45144635  0.11011672
   0.38002438  0.12599853  0.38602966  0.20107638  0.18746906  0.38019846
   0.09722059 -0.31788146 -0.06644156 -0.08081795]]"
1763,有了事务为什么还需要乐观锁和悲观锁,为什么有了事务这东西，还需要乐观锁悲观锁？事务是粗粒度的概念、乐观锁悲观锁可以更细粒度的控制；比如抢票，假设余票只有1张；隔离级别可以保证事务A和事务B不能读到对方的数据，也不能更新对方正在更新的数据，但是事务A和事务B都认为还有1张余票，于是出票，并更新为0；事务解决了并发问题，已经不存在并发问题了；但是事务B读取的是过时数据，依据过时数据做了业务处理；所以需要乐观锁或者悲观锁，来记录一个信息：当前已经读取的数据，是不是已经过时了！事务有这么几种实现方式：锁协议、MVCC、时间戳排序协议、有效性检查协议，锁协议是事务的一种实现方式，事务 = 用锁封装的一个函数，可以重用而已，但是这几个事务的函数覆盖面太粗粒度了，所以有时候我们还得借助于锁来进行细粒度控制；事务不能保证每个操作结果正确，售票时超卖还是会发生。事务保证整个操作的成一个组，要么全做要么全不做 但是不能保证多个事务同时读取同一个数据数据对象被加上排它锁时，其他的事务不能对它读取和修改；加了共享锁的数据对象可以被其他事务读取，但不能修改事务可以用锁实现，可以保证一致性和隔离性，但是锁用来保证并发性；隔离性和并发性有点类似，但是隔离性只是保证不会出现相互读取中间数据，却无法解决并发的问题,"['事务', '为什么', '需要', '乐观', '悲观', '为什么', '事务', '东西', '需要', '乐观', '悲观', '事务', '粗粒度', '概念', '乐观', '悲观', '可以', '细粒度', '控制', '比如', '抢票', '假设', '余票', '只有', '隔离', '级别', '可以', '保证', '事务', '事务', '不能', '对方', '数据', '不能', '更新', '对方', '正在', '更新', '数据', '但是', '事务', '事务', '认为', '还有', '张余票', '于是', '出票', '更新', '事务', '解决', '并发', '问题', '已经', '存在', '并发', '问题', '但是', '事务', '读取', '过时', '数据', '依据', '过时', '数据', '业务', '处理', '所以', '需要', '乐观', '或者', '悲观', '记录', '一个', '信息', '当前', '已经', '读取', '数据', '是不是', '已经', '过时', '事务', '这么', '几种', '实现', '方式', '协议', 'mvcc', '时间', '排序', '协议', '有效性', '检查', '协议', '协议', '事务', '一种', '实现', '方式', '事务', '用锁', '封装', '一个', '函数', '可以', '重用', '而已', '但是', '几个', '事务', '函数', '覆盖面', '粗粒度', '所以', '有时候', '我们', '借助于', '锁来', '进行', '细粒度', '控制', '事务', '不能', '保证', '每个', '操作', '结果', '正确', '售票', '时超卖', '还是', '发生', '事务', '保证', '整个', '操作', '一个组', '要么', '全做', '要么', '全不做', '但是', '不能', '保证', '多个', '事务', '同时', '读取', '同一个', '数据', '数据', '对象', '加上', '排它', '其他', '事务', '不能', '读取', '修改', '共享', '数据', '对象', '可以', '其他', '事务', '读取', '不能', '修改', '事务', '可以', '用锁', '实现', '可以', '保证', '一致性', '隔离', '但是', '用来', '保证', '并发', '隔离', '并发', '有点', '类似', '但是', '隔离', '只是', '保证', '不会', '出现', '相互', '读取', '中间', '数据', '无法', '解决', '并发', '问题']","[[-0.24588837 -0.14986546  0.19455031  0.15296355  0.31469787 -0.31770352
  -0.22081453  0.48445167  0.02266673  0.021417   -0.06614577 -0.29343823
  -0.20966141  0.62036294  0.14949199 -0.09215011 -0.16836919 -0.00500144
  -0.13363806 -0.43955323  0.05549968  0.21701027  0.03745069 -0.03865468
   0.15276607 -0.57993446 -0.26827709  0.10616815 -0.19767189 -0.05102705
   0.27596156  0.01894669 -0.03104929 -0.15662219 -0.07056686  0.32004205
  -0.10679971 -0.18501626  0.13196617 -0.77612461 -0.19885448 -0.58518443
  -0.0292441  -0.09870628 -0.18382205 -0.10268298 -0.25301877  0.50801441
  -0.19558539  0.36935043  0.24640025 -0.25502321 -0.12844395 -0.23856001
   0.10952172  0.37472075  0.29026983 -0.04321258  0.08314369 -0.07633073
   0.00792223  0.32182159  0.0296983   0.09045657 -0.38694866 -0.04429686
   0.04824575 -0.0267074  -0.22685959  0.44074012  0.17971239 -0.2813439
   0.39473244 -0.31880563  0.57587587  0.1047823   0.21442026 -0.11080807
  -0.26217741 -0.23732696 -0.10008014 -0.02987387 -0.03796687  0.29442947
  -0.38929393  0.20446013 -0.28592857  0.37494292  0.4350718   0.10660378
   0.35265955  0.12121735  0.36385642  0.18952578  0.17973971  0.36257561
   0.09212197 -0.3018095  -0.05952547 -0.07658627]]"
1777,《解忧杂货店》- 解答心中已经有结论的疑问,《解忧杂货店》看完后感觉非常的温情，围绕一个孤儿院相关的人，叙述了各自不同的悲剧喜剧故事，情节离奇又前后吻合，第一次体验了东野圭吾的严密逻辑。每个人都有烦恼，相对于局中人来说，问题都难以解决，比如他们的遭遇：父母生意失败跑路、男朋友快离世却坚持让自己参加奥运会、太缺钱以至于很想去酒店坐台、继承鲜鱼店和成为歌手梦想的冲突；他们很幸运，能有一个杂货店的老头和未来的人，给了他们最直击人心痛快淋漓的解答。但是对现实中的我们来说，没有人会有这种机遇，会遇到各种抉择、烦恼、困苦，但是我想说，其实大部分的选择，不同的道路都有其理由，毕竟人生没有什么绝对的对与错，对大部分的事情来说，自己往往都会有倾向的答案，然后收集不同的资料、看法，修正自己的答案甚至重新选择；有时候向他人的询问，往往是验证自己的答案，或者想听到相反的想法从而从反面印证自己的答案；不能做一个笨的人，要做一个深入思考的人，就像雄志一样，不要敷衍不要抱怨不要应付，要沉下心来，忘记自己，深入的思考，探究问题的答案和解决方法。 ,"['解忧', '杂货店', '解答', '心中', '已经', '结论', '疑问', '解忧', '杂货店', '完后', '感觉', '非常', '温情', '围绕', '一个', '孤儿院', '相关', '叙述', '各自', '不同', '悲剧', '喜剧', '故事', '情节', '离奇', '前后', '吻合', '第一次', '体验', '东野', '严密', '逻辑', '每个', '烦恼', '相对', '局中人', '来说', '问题', '难以解决', '比如', '他们', '遭遇', '父母', '生意', '失败', '男朋友', '离世', '坚持', '自己', '参加', '奥运会', '缺钱', '以至于', '酒店', '继承', '鲜鱼', '成为', '歌手', '梦想', '冲突', '他们', '幸运', '一个', '杂货店', '老头', '未来', '他们', '最直击', '人心', '痛快淋漓', '解答', '但是', '现实', '我们', '来说', '没有', '人会', '这种', '机遇', '遇到', '各种', '抉择', '烦恼', '困苦', '但是', '其实', '大部分', '选择', '不同', '道路', '理由', '毕竟', '人生', '没有', '什么', '绝对', '大部分', '事情', '来说', '自己', '往往', '倾向', '答案', '然后', '收集', '不同', '资料', '看法', '修正', '自己', '答案', '甚至', '重新', '选择', '有时候', '他人', '询问', '往往', '验证', '自己', '答案', '或者', '听到', '相反', '想法', '从而', '反面', '印证', '自己', '答案', '不能', '一个', '一个', '深入', '思考', '雄志', '一样', '不要', '敷衍', '不要', '抱怨', '不要', '应付', '沉下', '心来', '忘记', '自己', '深入', '思考', '探究', '问题', '答案', '解决', '方法']","[[-0.22292886 -0.12645349  0.1857151   0.14975327  0.26286442 -0.29499508
  -0.182096    0.4287283   0.0072489   0.00647624 -0.05643379 -0.2790412
  -0.17520021  0.54576351  0.13229211 -0.09093644 -0.14024173 -0.00940001
  -0.09855953 -0.38841799  0.0424432   0.20830091  0.01992607 -0.05322896
   0.12092951 -0.50266419 -0.2411566   0.08452037 -0.17579172 -0.04726286
   0.23921945  0.02633989 -0.01941247 -0.13117008 -0.0735822   0.29143555
  -0.10199941 -0.17876069  0.1062846  -0.68320222 -0.16333686 -0.51562153
  -0.02861527 -0.07937823 -0.1589183  -0.10706771 -0.23887662  0.43984912
  -0.15880318  0.33370022  0.19908393 -0.22903601 -0.10334061 -0.2136796
   0.0837762   0.34001626  0.24240558 -0.04205792  0.07742104 -0.06965903
   0.02037093  0.27581437  0.02119201  0.08144059 -0.34533642 -0.02975404
   0.03952927 -0.019904   -0.19971142  0.39409429  0.13821153 -0.23868623
   0.35541216 -0.29078703  0.51877958  0.11642689  0.19822698 -0.11485672
  -0.22944877 -0.21003612 -0.08947383 -0.01905566 -0.04442157  0.2801047
  -0.34299449  0.18069746 -0.25819548  0.3538172   0.39857995  0.10572232
   0.29243085  0.10805919  0.31867425  0.16443399  0.16237972  0.33301953
   0.08641022 -0.26543727 -0.02519683 -0.06704074]]"
1782,Java怎样单测void类型的方法？,"Java的Sevice层会有很多void类型的方法，比如save*、update*，这类方法只是做一些更新，不会有返回值，其单测不能根据方法的返回值来编写，只能采用特殊方法；本方法环境：Mockito、testng被测试的方法：@Override    public void updateRuleName(Long ruleId, String newRuleName, Long ucId) {        Assert.notNull(ruleId, ""规则ID不能为Null"");        Assert.notNull(newRuleName, ""规则名称不能为Null"");        Assert.notNull(ucId, ""操作人的UCID不能为Null"");                String cleanNewRuleName = StringUtils.trim(newRuleName);        if (StringUtils.isBlank(cleanNewRuleName)) {            throw new IllegalArgumentException(""新的规则名称不能为空"");        }                // 查询规则对象        Rule rule = queryRuleById(ruleId);        if (null == rule) {            throw new IllegalDataException(""没有查到该规则"");        }                rule.setRuleId(ruleId);        rule.setRuleName(cleanNewRuleName);        rule.setUpdateUcid(ucId);        rule.setUpdateTime(new Date());                ruleDao.updateSelective(rule);    }测试的方法： @Test    public void testUpdateRuleName() {        Long ruleId = 1L;        String newRuleName = ""newRuleName"";        Long ucId = 123L;                List<Rule> rules = new ArrayList<Rule>();        Rule rule = new Rule();        rule.setRuleStatus((byte) DBValueSetting.RULE_STATUS_TAKE_EFFECT);        rules.add(rule);                // 查询规则对象        Map<String, Object> params = new HashMap<String, Object>();        params.put(""ruleId"", ruleId);        Mockito.when(ruleDao.queryRulesByCondition(params)).thenReturn(rules);                Mockito.doAnswer(new Answer<Object>() {            public Object answer(InvocationOnMock invocation) {                // 断点2：这里随后执行                Rule rule = (Rule) invocation.getArguments()[0];                Assert.assertTrue(rule.getRuleName().equals(""newRuleName""));                return null;            }        }).when(ruleDao).updateSelective(Mockito.any(Rule.class));                // 断点1：先执行到这里        ruleService.updateRuleName(ruleId, newRuleName, ucId);    }如注释所示，如果加了两个断点的话，执行的过程中，会先执行最后的调用行，端点1执行的过程中，会执行到端点2的stub，这时候在断点2可以获取到方法执行的入参，对入参进行Assert校验，即可实现目的；new Anwer是个接口，其中只有一个方法，用于设置方法调用的代理执行入口public interface Answer<T> {    /**     * @param invocation the invocation on the mock.     *     * @return the value to be returned     *     * @throws Throwable the throwable to be thrown     */    T answer(InvocationOnMock invocation) throws Throwable;}当代码执行到“ruleDao.updateSelective(rule);”的时候，会触发针对mock对象调用的拦截器，在拦截器中，会创建一个动态代理，动态代理的invocation就是new Answer中覆盖的方法；使用拦截、代理两种方法，实现了对mock对象方法的入参、出参的设定和获取，使用这种方式，就可以校验VOID方法内部的执行类调用的情况；  ","['java', '怎样', '单测', 'void', '类型', '方法', 'java', 'sevice', '层会', '很多', 'void', '类型', '方法', '比如', 'save', 'update', '方法', '只是', '一些', '更新', '不会', '返回值', '单测', '不能', '根据', '方法', '返回值', '编写', '只能', '采用', '特殊', '方法', '方法', '环境', 'mockito', 'testng', '测试', '方法', 'override', 'public', 'void', 'updaterulename', 'long', 'ruleid', 'string', 'newrulename', 'long', 'ucid', 'assert', 'notnull', 'ruleid', '规则', 'id', '不能', 'null', 'assert', 'notnull', 'newrulename', '规则', '名称', '不能', 'null', 'assert', 'notnull', 'ucid', '操作', 'ucid', '不能', 'null', 'string', 'cleannewrulename', 'stringutils', 'trim', 'newrulename', 'if', 'stringutils', 'isblank', 'cleannewrulename', 'throw', 'new', 'illegalargumentexception', '规则', '名称', '不能', '为空', '查询', '规则', '对象', 'rule', 'rule', 'queryrulebyid', 'ruleid', 'if', 'null', 'rule', 'throw', 'new', 'illegaldataexception', '没有', '查到', '规则', 'rule', 'setruleid', 'ruleid', 'rule', 'setrulename', 'cleannewrulename', 'rule', 'setupdateucid', 'ucid', 'rule', 'setupdatetime', 'new', 'date', 'ruledao', 'updateselective', 'rule', '测试', '方法', 'test', 'public', 'void', 'testupdaterulename', 'long', 'ruleid', '1l', 'string', 'newrulename', 'newrulename', 'long', 'ucid', '123l', 'list', 'rule', 'rules', 'new', 'arraylist', 'rule', 'rule', 'rule', 'new', 'rule', 'rule', 'setrulestatus', 'byte', 'dbvaluesetting', 'rule', 'status', 'take', 'effect', 'rules', 'add', 'rule', '查询', '规则', '对象', 'map', 'string', 'object', 'params', 'new', 'hashmap', 'string', 'object', 'params', 'put', 'ruleid', 'ruleid', 'mockito', 'when', 'ruledao', 'queryrulesbycondition', 'params', 'thenreturn', 'rules', 'mockito', 'doanswer', 'new', 'answer', 'object', 'public', 'object', 'answer', 'invocationonmock', 'invocation', '断点', '这里', '随后', '执行', 'rule', 'rule', 'rule', 'invocation', 'getarguments', 'assert', 'asserttrue', 'rule', 'getrulename', 'equals', 'newrulename', 'return', 'null', 'when', 'ruledao', 'updateselective', 'mockito', 'any', 'rule', 'class', '断点', '执行', '这里', 'ruleservice', 'updaterulename', 'ruleid', 'newrulename', 'ucid', '注释', '所示', '如果', '两个', '断点', '的话', '执行', '过程', '会先', '执行', '最后', '调用', '端点', '执行', '过程', '执行', '端点', 'stub', '这时候', '断点', '可以', '获取', '方法', '执行', '对入', '进行', 'assert', '校验', '即可', '实现', '目的', 'new', 'anwer', '接口', '其中', '只有', '一个', '方法', '用于', '设置', '方法', '调用', '代理', '执行', '入口', 'public', 'interface', 'answer', 'param', 'invocation', 'the', 'invocation', 'on', 'the', 'mock', 'return', 'the', 'value', 'to', 'be', 'returned', 'throws', 'throwable', 'the', 'throwable', 'to', 'be', 'thrown', 'answer', 'invocationonmock', 'invocation', 'throws', 'throwable', '代码执行', 'ruledao', 'updateselective', 'rule', '时候', '触发', '针对', 'mock', '对象', '调用', '拦截器', '拦截器', '创建', '一个', '动态', '代理', '动态', '代理', 'invocation', '就是', 'new', 'answer', '覆盖', '方法', '使用', '拦截', '代理', '两种', '方法', '实现', 'mock', '对象', '方法', '出参', '设定', '获取', '使用', '这种', '方式', '可以', '校验', 'void', '方法', '内部', '执行', '调用', '情况']","[[-2.12392032e-01 -1.04575061e-01  2.26897471e-01  1.01911083e-01
   2.92819942e-01 -3.25203565e-01 -1.38522025e-01  4.43204418e-01
  -4.85839490e-02 -8.99667838e-02 -2.90163317e-02 -3.35131513e-01
  -1.53841590e-01  5.21034799e-01  1.68640926e-01 -8.93815830e-02
  -1.33011789e-01 -8.76396872e-03 -9.26424747e-02 -5.13704569e-01
  -3.13192724e-02  2.31155090e-01 -1.95361537e-02 -1.50871339e-01
   8.16253097e-02 -4.64125204e-01 -2.72392811e-01  4.27336758e-02
  -2.27516795e-01 -7.00106100e-02  1.73026300e-01 -2.27604975e-02
   1.79636246e-04 -1.33118455e-01 -1.32778062e-01  3.07198561e-01
  -1.80734566e-01 -2.47264155e-01  9.46200995e-02 -7.12171968e-01
  -1.57440303e-01 -5.65271469e-01 -7.61726820e-02 -8.92120978e-03
  -1.38589053e-01 -1.89430311e-01 -1.96048185e-01  3.53158029e-01
  -2.05426181e-01  4.38580620e-01  1.73591293e-01 -2.52515904e-01
  -1.48005693e-01 -1.63555456e-01  2.48647639e-02  3.64778074e-01
   1.66352712e-01 -7.96197039e-02  1.02459946e-01 -1.30985280e-01
   6.40528438e-02  2.38357538e-01  2.69352507e-02  9.09275013e-02
  -3.67836919e-01  2.18348316e-02  5.93839648e-02 -4.12591997e-02
  -2.89175225e-01  4.07826485e-01  1.19206777e-01 -1.77262765e-01
   3.59554086e-01 -2.99468319e-01  5.20037592e-01  2.20361761e-01
   1.16921679e-01 -1.26447218e-01 -3.21375454e-01 -1.17312001e-01
  -2.34552539e-03  2.97973499e-02 -9.07955938e-02  3.28932164e-01
  -3.12701873e-01  2.06511436e-01 -2.65779945e-01  3.91780545e-01
   4.41422932e-01  1.36402722e-01  2.52593240e-01  1.03921787e-01
   3.53456646e-01  1.87441501e-01  1.82930064e-01  3.05290441e-01
   1.23033895e-01 -3.07010060e-01 -7.05461168e-02 -1.23360510e-01]]"
1784,使用javap命令或者eclipse的Bytecode visualizer插件阅读java字节码文件,"阅读java的class文件，最常用的方法是jdk自带的javap命令，但是在eclipse有Bytecode visualizer插件，也可以很好地实现阅读；直接阅读class文件，能够了解一下代码如何执行的内幕，以下面这个代码为例package test;import java.util.List;public class Test {public void test() {String a = ""x"" + ""y"" + 1;String b = ""xy1"";System.out.println(a == b);}public static void main(String[] args) {Test t = new Test();t.test();}}test()方法很多人都知道返回true，但是为什么会这样呢？很多人可能说不清楚。我们分别用两种方法阅读一下它们的字节码；该文件首先需要被编译，得到了Test.class文件1、使用javap命令阅读进入Test.class目录，然后使用javap -v Test.class > out将字节码文件读取后存入out文件，然后用notepad++打开out文件：test()函数的样子：从字节码可以看到，编译器已经自动的将变量a的值合并在一起，成为了xy1，因此相当于xy1两个字符串的比较，两者都处于常量区，因此相等；2、使用eclipse的Bytecode visualizer插件阅读安装好插件之后，首先将其配置一下，以显示最大化的字节码信息然后打开eclipse的Navigator窗口，找到编译好的Test.class，右键，用字节码方式打开，就会看到更易读的字节码同时在编辑器的右侧，能够自动查看该段代码的流程图，非常方便； 使用这两种方式，就能够查看代码编译后的内幕，对一些奇怪的语法现象，就能够自己找出为什么了但是在测试的过程中，自己写了个print(List<String> strs)的方法，使用Javap命令和Byte visualizer两者，输出的字节码中，前者带着泛型信息，后者进行了泛型擦除，两者不同，很是奇怪；","['使用', 'javap', '命令', '或者', 'eclipse', 'bytecode', 'visualizer', '插件', '阅读', 'java', '字节', '文件', '阅读', 'java', 'class', '文件', '常用', '方法', 'jdk', '自带', 'javap', '命令', '但是', 'eclipse', 'bytecode', 'visualizer', '插件', '可以', '实现', '阅读', '直接', '阅读', 'class', '文件', '能够', '了解', '一下', '代码', '如何', '执行', '内幕', '下面', '这个', '代码', '为例', 'package', 'test', 'import', 'java', 'util', 'list', 'public', 'class', 'test', 'public', 'void', 'test', 'string', 'string', 'xy1', 'system', 'out', 'println', 'public', 'static', 'void', 'main', 'string', 'args', 'test', 'new', 'test', 'test', 'test', '方法', '很多', '知道', '返回', 'true', '但是', '为什么', '这样', '很多', '可能', '说不清楚', '我们', '分别', '两种', '方法', '阅读', '一下', '它们', '字节', '文件', '首先', '需要', '编译', '得到', 'test', 'class', '文件', '使用', 'javap', '命令', '阅读', '进入', 'test', 'class', '目录', '然后', '使用', 'javap', 'test', 'class', 'out', '字节', '文件', '读取', '存入', 'out', '文件', '然后', 'notepad', '++', '打开', 'out', '文件', 'test', '函数', '样子', '字节', '可以', '看到', '编译器', '已经', '自动', '变量', '合并', '一起', '成为', 'xy1', '因此', '相当于', 'xy1', '两个', '字符串', '比较', '两者', '处于', '常量', '因此', '相等', '使用', 'eclipse', 'bytecode', 'visualizer', '插件', '阅读', '安装', '插件', '之后', '首先', '配置', '一下', '显示', '最大化', '字节', '信息', '然后', '打开', 'eclipse', 'navigator', '窗口', '找到', '编译', 'test', 'class', '右键', '字节', '方式', '打开', '看到', '易读', '字节', '同时', '编辑器', '右侧', '能够', '自动', '查看', '该段', '代码', '流程图', '非常', '方便', '使用', '两种', '方式', '能够', '查看', '代码', '编译', '内幕', '一些', '奇怪', '语法', '现象', '能够', '自己', '找出', '为什么', '但是', '测试', '过程', '自己', 'print', 'list', 'string', 'strs', '方法', '使用', 'javap', '命令', 'byte', 'visualizer', '两者', '输出', '字节', '码中', '前者', '泛型', '信息', '后者', '进行', '泛型', '擦除', '两者', '不同', '奇怪']","[[-0.27439441 -0.13431652  0.25305188  0.16845219  0.32307322 -0.37719173
  -0.1761032   0.5293635  -0.03793907 -0.06683488 -0.05550862 -0.38564928
  -0.17655826  0.6215478   0.17596849 -0.11385568 -0.15740691 -0.01211998
  -0.102508   -0.54056915 -0.00152191  0.28052844 -0.0192525  -0.14111621
   0.10549739 -0.56260971 -0.3149454   0.07077281 -0.24039667 -0.07870912
   0.23510259  0.01126289 -0.01497648 -0.15436116 -0.14335698  0.37663503
  -0.17998993 -0.26995059  0.11900167 -0.83284522 -0.1723218  -0.62894625
  -0.05915716 -0.04577752 -0.17279606 -0.18995935 -0.2687492   0.4683694
  -0.19895789  0.46137389  0.20557353 -0.3065175  -0.14058834 -0.22845864
   0.05159028  0.43647202  0.22570621 -0.08066096  0.12349756 -0.12634043
   0.06977783  0.29227561  0.03493177  0.09361889 -0.42578175  0.01022173
   0.04770445 -0.01950105 -0.29699885  0.47515052  0.13941027 -0.23010662
   0.43383123 -0.35417415  0.6090626   0.23043195  0.19068236 -0.15721984
  -0.33362556 -0.18780907 -0.05141576  0.00592654 -0.08974964  0.38557939
  -0.38116097  0.22769089 -0.31176769  0.45869639  0.51364137  0.15608738
   0.30725811  0.13166156  0.39721564  0.21781469  0.20955443  0.39391953
   0.12209472 -0.33029611 -0.02468391 -0.12793743]]"
1789,Python中文转拼音代码(支持全拼和首字母缩写),"本文的代码，从https://github.com/cleverdeng/pinyin.py升级得来，针对原文的代码，做了以下升级：1、可以传入参数firstcode：如果为true，只取汉子的第一个拼音字母；如果为false，则会输出全部拼音；2、修复：如果为英文字母，则直接输出；3、修复：如果分隔符为空字符串，仍然能正常输出；4、升级：可以指定词典的文件路径代码很简单，直接读取了一个词典（字符和英文的映射），然后挨个替换中文中的拼音即可；#!/usr/bin/env python# -*- coding:utf-8 -*-""""""原版代码：https://github.com/cleverdeng/pinyin.py新增功能：    1、可以传入参数firstcode：如果为true，只取汉子的第一个拼音字母；如果为false，则会输出全部拼音；    2、修复：如果为英文字母，则直接输出；    3、修复：如果分隔符为空字符串，仍然能正常输出；    4、升级：可以指定词典的文件路径""""""__version__ = '0.9'__all__ = [""PinYin""]import os.pathclass PinYin(object):    def __init__(self):        self.word_dict = {}    def load_word(self, dict_file):        self.dict_file = dict_file         if not os.path.exists(self.dict_file):            raise IOError(""NotFoundFile"")        with file(self.dict_file) as f_obj:            for f_line in f_obj.readlines():                try:                    line = f_line.split('    ')                    self.word_dict[line[0]] = line[1]                except:                    line = f_line.split('   ')                    self.word_dict[line[0]] = line[1]    def hanzi2pinyin(self, string="""", firstcode=False):        result = []        if not isinstance(string, unicode):            string = string.decode(""utf-8"")                for char in string:            key = '%X' % ord(char)            value = self.word_dict.get(key, char)            outpinyin = str(value).split()[0][:-1].lower()            if not outpinyin:                outpinyin = char            if firstcode:                result.append(outpinyin[0])            else:                 result.append(outpinyin)        return result    def hanzi2pinyin_split(self, string="""", split="""", firstcode=False):        """"""提取中文的拼音        @param string:要提取的中文        @param split:分隔符        @param firstcode: 提取的是全拼还是首字母？如果为true表示提取首字母，默认为False提取全拼          """"""        result = self.hanzi2pinyin(string=string, firstcode=firstcode)        return split.join(result)if __name__ == ""__main__"":    test = PinYin()    test.load_word('word.data')    string = ""Java程序性能优化-让你的Java程序更快更稳定""    print ""in: %s"" % string    print ""out: %s"" % str(test.hanzi2pinyin(string=string))    print ""out: %s"" % test.hanzi2pinyin_split(string=string, split="""", firstcode=True)    print ""out: %s"" % test.hanzi2pinyin_split(string=string, split="""", firstcode=False)实例中main函数的代码输出结果代码使用方法：如果需要其他的提取，可以修改一下代码实现；代码（包含词典）打包下载：","['python', '中文', '拼音', '代码', '支持', '全拼', '首字母', '缩写', '本文', '代码', 'https', 'github', 'com', 'cleverdeng', 'pinyin', 'py', '升级', '得来', '针对', '原文', '代码', '以下', '升级', '可以', '传入', '参数', 'firstcode', '如果', 'true', '只取', '汉子', '第一个', '拼音字母', '如果', 'false', '输出', '全部', '拼音', '修复', '如果', '英文字母', '直接', '输出', '修复', '如果', '分隔符', '为空', '字符串', '仍然', '正常', '输出', '升级', '可以', '指定', '词典', '文件', '路径', '代码', '简单', '直接', '读取', '一个', '词典', '字符', '英文', '映射', '然后', '挨个', '替换', '中文', '拼音', '即可', 'usr', 'bin', 'env', 'python', 'coding', 'utf', '原版', '代码', 'https', 'github', 'com', 'cleverdeng', 'pinyin', 'py', '新增', '功能', '可以', '传入', '参数', 'firstcode', '如果', 'true', '只取', '汉子', '第一个', '拼音字母', '如果', 'false', '输出', '全部', '拼音', '修复', '如果', '英文字母', '直接', '输出', '修复', '如果', '分隔符', '为空', '字符串', '仍然', '正常', '输出', '升级', '可以', '指定', '词典', '文件', '路径', '__', 'version', '__', '0.9', '__', 'all', '__', 'pinyin', 'import', 'os', 'pathclass', 'pinyin', 'object', 'def', '__', 'init', '__', 'self', 'self', 'word', 'dict', 'def', 'load', 'word', 'self', 'dict', 'file', 'self', 'dict', 'file', 'dict', 'file', 'if', 'not', 'os', 'path', 'exists', 'self', 'dict', 'file', 'raise', 'ioerror', 'notfoundfile', 'with', 'file', 'self', 'dict', 'file', 'as', 'obj', 'for', 'line', 'in', 'obj', 'readlines', 'try', 'line', 'line', 'split', 'self', 'word', 'dict', 'line', 'line', 'except', 'line', 'line', 'split', 'self', 'word', 'dict', 'line', 'line', 'def', 'hanzi2pinyin', 'self', 'string', 'firstcode', 'false', 'result', 'if', 'not', 'isinstance', 'string', 'unicode', 'string', 'string', 'decode', 'utf', 'for', 'char', 'in', 'string', 'key', 'ord', 'char', 'value', 'self', 'word', 'dict', 'get', 'key', 'char', 'outpinyin', 'str', 'value', 'split', 'lower', 'if', 'not', 'outpinyin', 'outpinyin', 'char', 'if', 'firstcode', 'result', 'append', 'outpinyin', 'else', 'result', 'append', 'outpinyin', 'return', 'result', 'def', 'hanzi2pinyin', 'split', 'self', 'string', 'split', 'firstcode', 'false', '提取', '中文', '拼音', 'param', 'string', '提取', '中文', 'param', 'split', '分隔符', 'param', 'firstcode', '提取', '全拼', '还是', '首字母', '如果', 'true', '表示', '提取', '首字母', '默认', 'false', '提取', '全拼', 'result', 'self', 'hanzi2pinyin', 'string', 'string', 'firstcode', 'firstcode', 'return', 'split', 'join', 'result', 'if', '__', 'name', '__', '__', 'main', '__', 'test', 'pinyin', 'test', 'load', 'word', 'word', 'data', 'string', 'java', '程序', '性能', '优化', 'java', '程序', '更快', '稳定', 'print', 'in', 'string', 'print', 'out', 'str', 'test', 'hanzi2pinyin', 'string', 'string', 'print', 'out', 'test', 'hanzi2pinyin', 'split', 'string', 'string', 'split', 'firstcode', 'true', 'print', 'out', 'test', 'hanzi2pinyin', 'split', 'string', 'string', 'split', 'firstcode', 'false', '实例', 'main', '函数', '代码', '输出', '结果', '代码', '使用', '方法', '如果', '需要', '其他', '提取', '可以', '修改', '一下', '代码', '实现', '代码', '包含', '词典', '打包', '下载']","[[-0.18315804 -0.12885442  0.28146998  0.06182853  0.319579   -0.42563502
  -0.0936669   0.5052699  -0.12917101 -0.22990712  0.00155237 -0.43751621
  -0.19953702  0.54246319  0.19962723 -0.11569279 -0.12616118  0.0222227
  -0.06021418 -0.6909303  -0.15216683  0.28960894 -0.04922963 -0.3337539
   0.04657084 -0.45531358 -0.33082035 -0.00791019 -0.33197364 -0.08874275
   0.12618319 -0.06164831  0.08496934 -0.17305578 -0.25752284  0.33212104
  -0.3237932  -0.37662773  0.0738573  -0.78211783 -0.1430561  -0.6927448
  -0.12719499  0.08997716 -0.10368958 -0.32558427 -0.14172338  0.25194014
  -0.23969769  0.61879856  0.14837173 -0.31157255 -0.20011163 -0.09049384
  -0.09107733  0.42900708  0.07846465 -0.15638574  0.16409213 -0.2453062
   0.16454877  0.23578519  0.03205024  0.13366253 -0.4398656   0.10856896
   0.06636903 -0.08101382 -0.44122624  0.46292355  0.06245686 -0.11779237
   0.40097914 -0.35428287  0.6237038   0.35994023  0.01601547 -0.15674638
  -0.46263456  0.00984278  0.09315146  0.10592211 -0.21949289  0.43454188
  -0.30011183  0.22038457 -0.30348984  0.49124643  0.54095035  0.16185319
   0.19938044  0.09967801  0.37992197  0.20743792  0.23168782  0.32545649
   0.21933636 -0.36838675 -0.14665844 -0.18238663]]"
1810,Java堆溢出OutOfMemoryError之代码实例和原因分析,"本文演示了编写代码使得出现""java.lang.OutOfMemoryError: Java heap space""异常，分析GC日志得出OOM的原因，同时对堆转储文件进行分析，以查看把Heap塞满的罪魁祸首；实例代码这段代码来自《深入理解Java虚拟机-JVM高级特性与最佳实践》一书：package jvmtest;import java.util.ArrayList;import java.util.List;/** * VM Args：-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError *  * @author zzm */public class HeapOOM {        static class OOMObject {    }        public static void main(String[] args) {        List<OOMObject> list = new ArrayList<OOMObject>();                while (true) {            list.add(new OOMObject());        }    }}在eclipse运行该代码时，需要设置堆size的最小值和最大值，同时使用-XX:+PrintGCDetails参数开启GC日志打印，使用-XX:+HeapDumpOnOutOfMemoryError参数当OOM时转储堆数据-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError然后点运行，会出现以下的GC日志、异常、堆信息、转储信息[GC[DefNew: 7640K->1024K(9216K), 0.0164901 secs] 7640K->4593K(19456K), 0.0166075 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] [GC[DefNew: 9216K->1024K(9216K), 0.0190825 secs] 12785K->10510K(19456K), 0.0191593 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] [GC[DefNew: 9216K->9216K(9216K), 0.0000369 secs][Tenured: 9486K->5704K(10240K), 0.0520898 secs] 18702K->14129K(19456K), [Perm : 148K->148K(12288K)], 0.0522306 secs] [Times: user=0.06 sys=0.00, real=0.05 secs] [Full GC[Tenured: 5704K->5704K(10240K), 0.0435436 secs] 14616K->14616K(19456K), [Perm : 148K->148K(12288K)], 0.0436766 secs] [Times: user=0.03 sys=0.00, real=0.04 secs] [Full GC[Tenured: 5704K->5695K(10240K), 0.0499650 secs] 14616K->14606K(19456K), [Perm : 148K->147K(12288K)], 0.0500832 secs] [Times: user=0.06 sys=0.00, real=0.05 secs] java.lang.OutOfMemoryError: Java heap spaceDumping heap to java_pid12428.hprof ...Heap dump file created [29715028 bytes in 0.335 secs]Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap spaceat java.util.Arrays.copyOf(Arrays.java:2245)at java.util.Arrays.copyOf(Arrays.java:2219)at java.util.ArrayList.grow(ArrayList.java:242)at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:216)at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:208)at java.util.ArrayList.add(ArrayList.java:440)at jvmtest.HeapOOM.main(HeapOOM.java:20)Heap def new generation   total 9216K, used 8921K [0x33640000, 0x34040000, 0x34040000)  eden space 8192K, 100% used [0x33640000, 0x33e40000, 0x33e40000)  from space 1024K,  71% used [0x33e40000, 0x33ef6600, 0x33f40000)  to   space 1024K,   0% used [0x33f40000, 0x33f40000, 0x34040000) tenured generation   total 10240K, used 5695K [0x34040000, 0x34a40000, 0x34a40000)   the space 10240K,  55% used [0x34040000, 0x345cfc28, 0x345cfe00, 0x34a40000) compacting perm gen  total 12288K, used 150K [0x34a40000, 0x35640000, 0x38a40000)   the space 12288K,   1% used [0x34a40000, 0x34a658c8, 0x34a65a00, 0x35640000)    ro space 10240K,  44% used [0x38a40000, 0x38eb73f0, 0x38eb7400, 0x39440000)    rw space 12288K,  52% used [0x39440000, 0x39a8dd28, 0x39a8de00, 0x3a040000)GC日志分析从图中可以看出，发生了3次GC和2次FULL GC，当两次FULL GC完成后，仍然发现没有空间，于是抛出了OOM异常；首先贴一下GC和FULL GC的日志格式：还有jvm heap的内存结构在正常运行状况下：新的对象都在eden上创建如果eden的大小达到了阈值，就会触发GC，运行“标记-复制”算法，将Eden中有效的对象复制到Survivor中，并清除eden中无效的对象如果eden的大小再次达到阈值，就会触发GC，将对象从eden对象复制到survivor，如果survivor中的对象达到了年龄限制，就会复制到old区；如果young区向old区复制对象的时候，发现old区的空间无法满足，就会触发FULL GC，如果FULL GC之后，仍然无法承载Young区要晋升的对象大小，那么就会抛出OOM；从Heap开头的日志可以看到eden区已经占用了100%，from survivor区也占用了71%无法承载来自eden的对象，eden+from survivor区对象之和为8192K+1024K*71%=8919.04K，但是old区只剩下10240*(1-55%)=的空间4608K的空间；新的对象无法在100%占用率的eden区创建，eden+survivor的对象又不能复制到old区，所以OOM；注意：本文的代码很特殊，每个HeapOOM对象都没有被释放，正常情况下，eden很多无用对象是会被清除掉的，晋升到OLD的大小也不等于eden+survivor的大小之和；堆转储文件分析由于加上了-XX:+HeapDumpOnOutOfMemoryError参数，所以OOM时，自动生成了一个java_pid12464.hprof的堆转储文件，给eclipse安装Memory Analyzer插件后，直接可以用该插件打开；打开后如下图所示可以看到main函数线程占用了13.9MB几乎所有的Heap空间，在饼图上右键 >  list objects > with outgoing references，可以查看该部分包含了那些对象：打开后发现，一个Obejct数组中包含了1215488个元素，每个元素都是HeapOOM对象，每个元素（引用类型）为8byte，这就是让堆OOM的罪魁祸首；结论使用JVM参数-XX:+PrintGCDetails可以打印GC日志使用JVM参数-XX:+HeapDumpOnOutOfMemoryError可以在OOM时打印堆转储文件使用eclipse插件Memory Analyzer可以分析对转储文件OOM的原因，是Old区在FULL GC之后的剩余空间，仍然无法承载Young区要晋升的对象大小本文地址：http://crazyant.net/1810.html，转载请注明","['java', '溢出', 'outofmemoryerror', '代码', '实例', '原因', '分析', '本文', '演示', '编写', '代码', '使得', '出现', 'java', 'lang', 'outofmemoryerror', 'java', 'heap', 'space', '异常', '分析', 'gc', '日志', '得出', 'oom', '原因', '同时', '对堆', '转储', '文件', '进行', '分析', '查看', 'heap', '塞满', '罪魁祸首', '实例', '代码', '代码', '来自', '深入', '理解', 'java', '虚拟机', 'jvm', '高级', '特性', '最佳', '实践', '一书', 'package', 'jvmtest', 'import', 'java', 'util', 'arraylist', 'import', 'java', 'util', 'list', 'vm', 'args', 'xms20m', 'xmx20m', 'xx', 'heapdumponoutofmemoryerror', 'author', 'zzm', 'public', 'class', 'heapoom', 'static', 'class', 'oomobject', 'public', 'static', 'void', 'main', 'string', 'args', 'list', 'oomobject', 'list', 'new', 'arraylist', 'oomobject', 'while', 'true', 'list', 'add', 'new', 'oomobject', 'eclipse', '运行', '代码', '需要', '设置', 'size', '最小值', '最大值', '同时', '使用', 'xx', 'printgcdetails', '参数', '开启', 'gc', '日志', '打印', '使用', 'xx', 'heapdumponoutofmemoryerror', '参数', 'oom', '转储', '数据', 'verbose', 'gc', 'xms20m', 'xmx20m', 'xmn10m', 'xx', 'printgcdetails', 'xx', 'survivorratio', 'xx', 'heapdumponoutofmemoryerror', '然后', '运行', '出现', '以下', 'gc', '日志', '异常', '信息', '转储', '信息', 'gc', 'defnew', '7640k', '1024k', '9216k', '0.0164901', 'secs', '7640k', '4593k', '19456k', '0.0166075', 'secs', 'times', 'user', '0.02', 'sys', '0.00', 'real', '0.02', 'secs', 'gc', 'defnew', '9216k', '1024k', '9216k', '0.0190825', 'secs', '12785k', '10510k', '19456k', '0.0191593', 'secs', 'times', 'user', '0.02', 'sys', '0.00', 'real', '0.02', 'secs', 'gc', 'defnew', '9216k', '9216k', '9216k', '0.0000369', 'secs', 'tenured', '9486k', '5704k', '10240k', '0.0520898', 'secs', '18702k', '14129k', '19456k', 'perm', '148k', '148k', '12288k', '0.0522306', 'secs', 'times', 'user', '0.06', 'sys', '0.00', 'real', '0.05', 'secs', 'full', 'gc', 'tenured', '5704k', '5704k', '10240k', '0.0435436', 'secs', '14616k', '14616k', '19456k', 'perm', '148k', '148k', '12288k', '0.0436766', 'secs', 'times', 'user', '0.03', 'sys', '0.00', 'real', '0.04', 'secs', 'full', 'gc', 'tenured', '5704k', '5695k', '10240k', '0.0499650', 'secs', '14616k', '14606k', '19456k', 'perm', '148k', '147k', '12288k', '0.0500832', 'secs', 'times', 'user', '0.06', 'sys', '0.00', 'real', '0.05', 'secs', 'java', 'lang', 'outofmemoryerror', 'java', 'heap', 'spacedumping', 'heap', 'to', 'java', 'pid12428', 'hprof', '...', 'heap', 'dump', 'file', 'created', '29715028', 'bytes', 'in', '0.335', 'secs', 'exception', 'in', 'thread', 'main', 'java', 'lang', 'outofmemoryerror', 'java', 'heap', 'spaceat', 'java', 'util', 'arrays', 'copyof', 'arrays', 'java', '2245', 'at', 'java', 'util', 'arrays', 'copyof', 'arrays', 'java', '2219', 'at', 'java', 'util', 'arraylist', 'grow', 'arraylist', 'java', '242', 'at', 'java', 'util', 'arraylist', 'ensureexplicitcapacity', 'arraylist', 'java', '216', 'at', 'java', 'util', 'arraylist', 'ensurecapacityinternal', 'arraylist', 'java', '208', 'at', 'java', 'util', 'arraylist', 'add', 'arraylist', 'java', '440', 'at', 'jvmtest', 'heapoom', 'main', 'heapoom', 'java', '20', 'heap', 'def', 'new', 'generation', 'total', '9216k', 'used', '8921k', '0x33640000', '0x34040000', '0x34040000', 'eden', 'space', '8192k', '100%', 'used', '0x33640000', '0x33e40000', '0x33e40000', 'from', 'space', '1024k', '71%', 'used', '0x33e40000', '0x33ef6600', '0x33f40000', 'to', 'space', '1024k', '0%', 'used', '0x33f40000', '0x33f40000', '0x34040000', 'tenured', 'generation', 'total', '10240k', 'used', '5695k', '0x34040000', '0x34a40000', '0x34a40000', 'the', 'space', '10240k', '55%', 'used', '0x34040000', '0x345cfc28', '0x345cfe00', '0x34a40000', 'compacting', 'perm', 'gen', 'total', '12288k', 'used', '150k', '0x34a40000', '0x35640000', '0x38a40000', 'the', 'space', '12288k', '1%', 'used', '0x34a40000', '0x34a658c8', '0x34a65a00', '0x35640000', 'ro', 'space', '10240k', '44%', 'used', '0x38a40000', '0x38eb73f0', '0x38eb7400', '0x39440000', 'rw', 'space', '12288k', '52%', 'used', '0x39440000', '0x39a8dd28', '0x39a8de00', '0x3a040000', 'gc', '日志', '分析', '从图', '可以', '看出', '发生', 'gc', 'full', 'gc', '两次', 'full', 'gc', '完成', '仍然', '发现', '没有', '空间', '于是', '抛出', 'oom', '异常', '首先', '一下', 'gc', 'full', 'gc', '日志', '格式', '还有', 'jvm', 'heap', '内存', '结构', '正常', '运行状况', '对象', 'eden', '创建', '如果', 'eden', '大小', '达到', '阈值', '触发', 'gc', '运行', '标记', '复制', '算法', 'eden', '有效', '对象', '复制到', 'survivor', '清除', 'eden', '无效', '对象', '如果', 'eden', '大小', '再次', '达到', '阈值', '触发', 'gc', '对象', 'eden', '对象', '复制到', 'survivor', '如果', 'survivor', '对象', '达到', '年龄', '限制', '复制到', 'old', '如果', 'young', 'old', '复制', '对象', '时候', '发现', 'old', '空间', '无法', '满足', '触发', 'full', 'gc', '如果', 'full', 'gc', '之后', '仍然', '无法', '承载', 'young', '区要', '晋升', '对象', '大小', '那么', '抛出', 'oom', 'heap', '开头', '日志', '可以', '看到', 'eden', '已经', '占用', '100%', 'from', 'survivor', '占用', '71%', '无法', '承载', '来自', 'eden', '对象', 'eden', 'from', 'survivor', '对象', '8192k', '1024k', '71%', '8919.04', '但是', 'old', '剩下', '10240', '55%', '空间', '4608k', '空间', '对象', '无法', '100%', '占用率', 'eden', '创建', 'eden', 'survivor', '对象', '不能', '复制到', 'old', '所以', 'oom', '注意', '本文', '代码', '特殊', '每个', 'heapoom', '对象', '没有', '释放', '正常', '情况', 'eden', '很多', '无用', '对象', '清除', '晋升', 'old', '大小', '等于', 'eden', 'survivor', '大小', '转储', '文件', '分析', '由于', '加上', 'xx', 'heapdumponoutofmemoryerror', '参数', '所以', 'oom', '自动', '生成', '一个', 'java', 'pid12464', 'hprof', '转储', '文件', 'eclipse', '安装', 'memory', 'analyzer', '插件', '直接', '可以', '用该', '插件', '打开', '打开', '如下', '所示', '可以', '看到', 'main', '函数', '线程', '占用', '13.9', 'mb', '几乎', '所有', 'heap', '空间', '图上', '右键', 'list', 'objects', 'with', 'outgoing', 'references', '可以', '查看', '部分', '包含', '那些', '对象', '打开', '发现', '一个', 'obejct', '数组', '包含', '1215488', '元素', '每个', '元素', 'heapoom', '对象', '每个', '元素', '引用', '类型', '8byte', '就是', 'oom', '罪魁祸首', '结论', '使用', 'jvm', '参数', 'xx', 'printgcdetails', '可以', '打印', 'gc', '日志', '使用', 'jvm', '参数', 'xx', 'heapdumponoutofmemoryerror', '可以', 'oom', '打印', '转储', '文件', '使用', 'eclipse', '插件', 'memory', 'analyzer', '可以', '分析', '转储', '文件', 'oom', '原因', 'old', 'full', 'gc', '之后', '剩余', '空间', '仍然', '无法', '承载', 'young', '区要', '晋升', '对象', '大小', '本文', '地址', 'http', 'crazyant', 'net', '1810', 'html', '转载', '注明']","[[-0.25848069 -0.07281771  0.23267754  0.19885856  0.23414988 -0.32817119
  -0.1069605   0.43732158 -0.073067   -0.08384259 -0.04551604 -0.35120607
  -0.08004823  0.49287814  0.15838075 -0.11036235 -0.11512639 -0.02917917
  -0.06139594 -0.44421806 -0.02045063  0.27914569 -0.04907238 -0.15910147
   0.04095094 -0.42447497 -0.28430772  0.0422909  -0.18181773 -0.08034056
   0.1856769   0.02350187 -0.00408643 -0.11226444 -0.13820024  0.34566145
  -0.163488   -0.25095096  0.08368239 -0.68538103 -0.11015275 -0.47636556
  -0.06584498 -0.03186847 -0.13390119 -0.188061   -0.26896617  0.36669779
  -0.14225913  0.37356043  0.10132908 -0.28524615 -0.10540413 -0.21318721
   0.03262017  0.38490048  0.15784921 -0.06806771  0.11561912 -0.09954876
   0.08559832  0.20622622  0.03117324  0.06756535 -0.35806532  0.04109265
   0.02052704  0.00942395 -0.24945981  0.40059697  0.04983674 -0.15708002
   0.37224776 -0.31259505  0.47107153  0.23371335  0.17321043 -0.16100318
  -0.26408155 -0.15743836 -0.05135327  0.00403204 -0.07961524  0.36734878
  -0.28642925  0.18497729 -0.25060977  0.40346615  0.45193134  0.16439472
   0.20397134  0.10614219  0.32391777  0.18821794  0.17711898  0.35647822
   0.10059807 -0.2405099   0.06457761 -0.10578329]]"
1835,想要加悲观锁可是数据行还不存在怎么办？,"两个并发事务想要对同一个KEY的数据进行更新，但是如果这个KEY的数据行还不存在的话，那么select .. for update当然不能锁住这行记录，想当然的想到，可不可以先insert一下，然后在悲观锁呢？那么引入了一个新的问题，如果两个并发事务同时insert的话，就会插入重复的数据，如果insert的unique key重复的话，第二个线程会报错的，有没有更优雅的方法？答案是MySQL innodb的INSERT ... ON DUPLICATE KEY UPDATE语法；用法见官网文档：https://dev.mysql.com/doc/refman/5.7/en/insert-on-duplicate.htmlIf you specify ON DUPLICATE KEY UPDATE, and a row is inserted that would cause a duplicate value in a UNIQUEindex or PRIMARY KEY, MySQL performs an UPDATE of the old row. For example, if column a is declared as UNIQUEand contains the value 1, the following two statements have similar effect:INSERT INTO table (a,b,c) VALUES (1,2,3)  ON DUPLICATE KEY UPDATE c=c+1;UPDATE table SET c=c+1 WHERE a=1;使用ON DUPLICATE KEY UPDATE语法，第二条insert语句，会自动变成Update语句，而不会导致重复插入数据的BUG；做个简单的测试：CREATE TABLE `tcc` (  `idx` INT(11),  `typeid` INT(11),  `value1` INT(11),  `value2` INT(11),  UNIQUE KEY(idx, typeid)) ENGINE=INNODB DEFAULT CHARSET=utf8;-- 第一条SQL的执行，会新增一条数据，本SQL多次执行，效果相同，因为后续的操作，变成了UPDATEINSERT INTO tcc (idx, typeid, value1) VALUES (1,2,3) ON DUPLICATE KEY UPDATE value1=3;-- 第二条SQL直接进行UPDATE，把新列的值update进去INSERT INTO tcc (idx, typeid, value2) VALUES (1,2,4) ON DUPLICATE KEY UPDATE value2=4;产出结果只有一条：""idx"" ""typeid"" ""value1"" ""value2""""1"" ""2"" ""3"" ""4""有了这个利器，那么代码中就可以直接insert.. on duplicate key update，这个SQL的执行能保证数据库中会存在记录，然后加上悲观锁，来保证不同的事务不会出现更新冲突情况；本文地址：http://crazyant.net/1835.html","['想要', '悲观', '可是', '数据', '存在', '怎么办', '两个', '并发', '事务', '想要', '同一个', 'key', '数据', '进行', '更新', '但是', '如果', '这个', 'key', '数据', '存在', '的话', '那么', 'select', '..', 'for', 'update', '当然', '不能', '锁住', '记录', '想当然', '想到', '可不可以', 'insert', '一下', '然后', '悲观', '那么', '引入', '一个', '问题', '如果', '两个', '并发', '事务', '同时', 'insert', '的话', '插入', '重复', '数据', '如果', 'insert', 'unique', 'key', '重复', '的话', '第二个', '线程', '报错', '有没有', '优雅', '方法', '答案', 'mysql', 'innodb', 'insert', '...', 'on', 'duplicate', 'key', 'update', '语法', '用法', '官网', '文档', 'https', 'dev', 'mysql', 'com', 'doc', 'refman', '5.7', 'en', 'insert', 'on', 'duplicate', 'htmlif', 'you', 'specify', 'on', 'duplicate', 'key', 'update', 'and', 'row', 'is', 'inserted', 'that', 'would', 'cause', 'duplicate', 'value', 'in', 'uniqueindex', 'or', 'primary', 'key', 'mysql', 'performs', 'an', 'update', 'of', 'the', 'old', 'row', 'for', 'example', 'if', 'column', 'is', 'declared', 'as', 'uniqueand', 'contains', 'the', 'value', 'the', 'following', 'two', 'statements', 'have', 'similar', 'effect', 'insert', 'into', 'table', 'values', 'on', 'duplicate', 'key', 'update', 'update', 'table', 'set', 'where', '使用', 'on', 'duplicate', 'key', 'update', '语法', '第二条', 'insert', '语句', '自动', '变成', 'update', '语句', '不会', '导致', '重复', '插入', '数据', 'bug', '做个', '简单', '测试', 'create', 'table', 'tcc', 'idx', 'int', '11', 'typeid', 'int', '11', 'value1', 'int', '11', 'value2', 'int', '11', 'unique', 'key', 'idx', 'typeid', 'engine', 'innodb', 'default', 'charset', 'utf8', '--', '第一条', 'sql', '执行', '新增', '一条', '数据', 'sql', '多次', '执行', '效果', '相同', '因为', '后续', '操作', '变成', 'updateinsert', 'into', 'tcc', 'idx', 'typeid', 'value1', 'values', 'on', 'duplicate', 'key', 'update', 'value1', '--', '第二条', 'sql', '直接', '进行', 'update', '新列', 'update', '进去', 'insert', 'into', 'tcc', 'idx', 'typeid', 'value2', 'values', 'on', 'duplicate', 'key', 'update', 'value2', '产出', '结果', '只有', '一条', 'idx', 'typeid', 'value1', 'value2', '这个', '利器', '那么', '代码', '可以', '直接', 'insert', '..', 'on', 'duplicate', 'key', 'update', '这个', 'sql', '执行', '保证', '数据库', '存在', '记录', '然后', '加上', '悲观', '保证', '不同', '事务', '不会', '出现', '更新', '冲突', '情况', '本文', '地址', 'http', 'crazyant', 'net', '1835', 'html']","[[-0.22822127 -0.11145456  0.24450325  0.12556114  0.28802564 -0.36576591
  -0.14098874  0.48304567 -0.04729426 -0.09964358 -0.04598848 -0.35969386
  -0.15705594  0.55194877  0.15875115 -0.10207927 -0.12945747 -0.00198333
  -0.07580235 -0.51429577 -0.02665302  0.24796029 -0.04651768 -0.18800491
   0.07365092 -0.49283316 -0.31180239  0.05207812 -0.23498937 -0.07364659
   0.17762787  0.0178939  -0.00565253 -0.12853639 -0.15725546  0.32935158
  -0.18476842 -0.26163844  0.08773598 -0.73492235 -0.14473545 -0.60385063
  -0.06431738 -0.02119942 -0.13133784 -0.21612643 -0.23717348  0.38031246
  -0.18188487  0.45739673  0.15963189 -0.26508438 -0.12140708 -0.18391732
  -0.00373828  0.38084714  0.1746428  -0.08498124  0.10502865 -0.13570259
   0.08442009  0.24314881  0.01057081  0.0867173  -0.36689594  0.03586689
   0.06130941 -0.03166597 -0.28959181  0.43361887  0.11678194 -0.18402337
   0.37938803 -0.32306798  0.5619635   0.2581325   0.15433109 -0.15914738
  -0.30842883 -0.13754957 -0.00899879  0.05126168 -0.10778893  0.37208224
  -0.34303552  0.21158728 -0.28474843  0.44170392  0.49128904  0.15718806
   0.25753924  0.10929417  0.36300984  0.17932238  0.19474593  0.3534359
   0.11400951 -0.32101262 -0.0259777  -0.11819749]]"
1858,通过JVM堆栈分析出现大量线程的原因,"最近收到线上Tomcat线程数目超出的报警，于是想要分析下问题的原因：首先进入线上，使用ps -aux命令，查看jvm进程，可以得到运行tomcat的jdk的地址：/home/work/app/.jdk/bin/java于是就知道了jdk的jstack、jps等命令的目录，然后找到jvm进程/home/work/app/.jdk/bin/jps29145 Jps208 Bootstrap得到了jvm的tomcat进程是208；把堆栈导出，下载到本地：jstack -l 208 > log.txt下载后，发现线程堆栈中，有大量的这样的日志：""pool-103-thread-1"" prio=10 tid=0x00007f038001e000 nid=0x759d waiting on condition [0x00007f022e5e4000]   java.lang.Thread.State: WAITING (parking)at sun.misc.Unsafe.park(Native Method)- parking to wait for  <0x00000000912fab28> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)at java.lang.Thread.run(Thread.java:662)""pool-102-thread-1"" prio=10 tid=0x00007f0380011000 nid=0x71ed waiting on condition [0x00007f022e6e5000]   java.lang.Thread.State: WAITING (parking)at sun.misc.Unsafe.park(Native Method)- parking to wait for  <0x00000000912fa170> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)at java.lang.Thread.run(Thread.java:662)可以看到，线程处于WAITING状态，阻塞在试图从任务队列中取任务(LinkedBlockingQueue.take)，这个任务队列指的是ThreadPoolExecutor的线程池启动的线程任务队列；也就是说，这些线程都是空闲状态，在等着任务的到来呢！补充下LinkedBlockingQueue的知识：并发库中的BlockingQueue是一个比较好玩的类，顾名思义，就是阻塞队列。该类主要提供了两个方法put()和take()，前者将一个对象放到队列尾部，如果队列已经满了，就等待直到有空闲节点；后者从head取一个对象，如果没有对象，就等待直到有可取的对象。 定位到问题就简单了，查找代码，发现有个位置启动了线程池提交了任务，但是任务执行完返回后，线程池没有关闭导致的；问题总结：1、使用ExecutorService提交的线程任务，也要记得关闭；2、启动新线程的时候，最好给线程起个名字，这样线程堆栈的问题排查更加容易； 文章地址：http://crazyant.net/1858.html，转载请注明来源","['通过', 'jvm', '堆栈', '分析', '出现', '大量', '线程', '原因', '最近', '收到', '线上', 'tomcat', '线程', '数目', '超出', '报警', '于是', '想要', '分析', '问题', '原因', '首先', '进入', '线上', '使用', 'ps', 'aux', '命令', '查看', 'jvm', '进程', '可以', '得到', '运行', 'tomcat', 'jdk', '地址', 'home', 'work', 'app', 'jdk', 'bin', 'java', '于是', '知道', 'jdk', 'jstack', 'jps', '命令', '目录', '然后', '找到', 'jvm', '进程', 'home', 'work', 'app', 'jdk', 'bin', 'jps29145', 'jps208', 'bootstrap', '得到', 'jvm', 'tomcat', '进程', '208', '堆栈', '导出', '下载', '本地', 'jstack', '208', 'log', 'txt', '下载', '发现', '线程', '堆栈', '大量', '这样', '日志', 'pool', '103', 'thread', 'prio', '10', 'tid', '0x00007f038001e000', 'nid', '0x759d', 'waiting', 'on', 'condition', '0x00007f022e5e4000', 'java', 'lang', 'thread', 'state', 'waiting', 'parking', 'at', 'sun', 'misc', 'unsafe', 'park', 'native', 'method', 'parking', 'to', 'wait', 'for', '0x00000000912fab28', 'java', 'util', 'concurrent', 'locks', 'abstractqueuedsynchronizer', 'conditionobject', 'at', 'java', 'util', 'concurrent', 'locks', 'locksupport', 'park', 'locksupport', 'java', '156', 'at', 'java', 'util', 'concurrent', 'locks', 'abstractqueuedsynchronizer', 'conditionobject', 'await', 'abstractqueuedsynchronizer', 'java', '1987', 'at', 'java', 'util', 'concurrent', 'linkedblockingqueue', 'take', 'linkedblockingqueue', 'java', '399', 'at', 'java', 'util', 'concurrent', 'threadpoolexecutor', 'gettask', 'threadpoolexecutor', 'java', '947', 'at', 'java', 'util', 'concurrent', 'threadpoolexecutor', 'worker', 'run', 'threadpoolexecutor', 'java', '907', 'at', 'java', 'lang', 'thread', 'run', 'thread', 'java', '662', 'pool', '102', 'thread', 'prio', '10', 'tid', '0x00007f0380011000', 'nid', '0x71ed', 'waiting', 'on', 'condition', '0x00007f022e6e5000', 'java', 'lang', 'thread', 'state', 'waiting', 'parking', 'at', 'sun', 'misc', 'unsafe', 'park', 'native', 'method', 'parking', 'to', 'wait', 'for', '0x00000000912fa170', 'java', 'util', 'concurrent', 'locks', 'abstractqueuedsynchronizer', 'conditionobject', 'at', 'java', 'util', 'concurrent', 'locks', 'locksupport', 'park', 'locksupport', 'java', '156', 'at', 'java', 'util', 'concurrent', 'locks', 'abstractqueuedsynchronizer', 'conditionobject', 'await', 'abstractqueuedsynchronizer', 'java', '1987', 'at', 'java', 'util', 'concurrent', 'linkedblockingqueue', 'take', 'linkedblockingqueue', 'java', '399', 'at', 'java', 'util', 'concurrent', 'threadpoolexecutor', 'gettask', 'threadpoolexecutor', 'java', '947', 'at', 'java', 'util', 'concurrent', 'threadpoolexecutor', 'worker', 'run', 'threadpoolexecutor', 'java', '907', 'at', 'java', 'lang', 'thread', 'run', 'thread', 'java', '662', '可以', '看到', '线程', '处于', 'waiting', '状态', '阻塞', '试图', '任务', '队列', '中取', '任务', 'linkedblockingqueue', 'take', '这个', '任务', '队列', 'threadpoolexecutor', '线程', '启动', '线程', '任务', '队列', '也就是说', '这些', '线程', '空闲', '状态', '任务', '到来', '补充', 'linkedblockingqueue', '知识', '并发', '库中', 'blockingqueue', '一个', '比较', '好玩', '顾名思义', '就是', '阻塞', '队列', '该类', '主要', '提供', '两个', '方法', 'put', 'take', '前者', '一个', '对象', '放到', '队列', '尾部', '如果', '队列', '已经', '等待', '直到', '空闲', '节点', '后者', 'head', '一个', '对象', '如果', '没有', '对象', '等待', '直到', '可取', '对象', '定位', '问题', '简单', '查找', '代码', '发现', '有个', '位置', '启动', '线程', '提交', '任务', '但是', '任务', '执行', '返回', '线程', '没有', '关闭', '导致', '问题', '总结', '使用', 'executorservice', '提交', '线程', '任务', '记得', '关闭', '启动', '线程', '时候', '最好', '线程', '起个', '名字', '这样', '线程', '堆栈', '问题', '排查', '更加', '容易', '文章', '地址', 'http', 'crazyant', 'net', '1858', 'html', '转载', '注明', '来源']","[[-0.36280916 -0.0229598   0.28366835  0.32072246  0.21702356 -0.37116477
  -0.075181    0.48811304 -0.13669037 -0.10897531 -0.05876995 -0.43008614
   0.01415808  0.50846181  0.19563737 -0.14551295 -0.10508513 -0.07107538
  -0.04261904 -0.46855698 -0.03495628  0.39138913 -0.09624388 -0.21002251
  -0.01065447 -0.41457533 -0.33929232  0.02456551 -0.16310957 -0.11364329
   0.21825498  0.05080646 -0.0151776  -0.10544913 -0.16417736  0.45425453
  -0.1883042  -0.30966624  0.08682668 -0.77705627 -0.07031748 -0.43417893
  -0.08112093 -0.0370907  -0.15056737 -0.22369227 -0.38320717  0.40371183
  -0.12219194  0.37320032  0.02495001 -0.3708408  -0.10809692 -0.29243263
   0.04892397  0.45985002  0.14248331 -0.06512136  0.15186412 -0.08183089
   0.12892988  0.18084999  0.05148538  0.04871647 -0.41118023  0.07776768
  -0.00393693  0.05512977 -0.27337379  0.45097284 -0.03539392 -0.12722881
   0.43752331 -0.37243253  0.46223363  0.30372191  0.23003993 -0.21544799
  -0.27792632 -0.20104103 -0.08651594 -0.02756122 -0.0784374   0.47561565
  -0.27058542  0.20239714 -0.26430253  0.46717875  0.52044074  0.23236829
   0.16846046  0.11858418  0.3530183   0.22888149  0.20054368  0.43631517
   0.10315692 -0.2058266   0.21706385 -0.12194323]]"
1861,Java线程死亡的几种情况,"Java线程会议如下三种方式结束，结束后就处于死亡状态1、run()或者call()方法执行完成，线程正常结束；2、线程抛出一个未捕获的Exception或Error；3、直接调用该线程的stop()方法来结束该线程； 注意：当主线程结束时，其他线程不受任何影响，并不会随之结束。一旦子线程启动起来后，它就拥有和主线程相同的地位，不会受到主线程结束的影响。为了测试某个线程是否已经死亡，可以调用线程对象的isAlive()方法，当线程处于就绪、运行、阻塞三种状态时，该方法将返回true；当线程处于新建、死亡两种状态时，该方法就返回false。如下对线程死亡情况的1和2进行测试。主线程的代码如下：public class ThreadTest {    public static void main(String[] args) throws InterruptedException {        Thread t = new Thread(new RunTask());        t.start();                while (true) {            Thread.sleep(1000);            System.out.println(""主线程：子线程状态为"" + t.isAlive());        }    }}测试1：线程正常结束后，isAlive()返回False编写线程正常结束的线程执行代码：public class RunTask implements Runnable {        @Override    public void run() {        for (int idx = 1; idx <= 10; idx++) {            System.out.println(""子线程：我还活着"" + idx);                        try {                Thread.sleep(3000);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}两个线程的输出结果如下所示，显示子线程正常执行结束后，使用Thread.isAlive()就返回False了。主线程：子线程状态为true主线程：子线程状态为true子线程：我还活着8主线程：子线程状态为true主线程：子线程状态为true主线程：子线程状态为true子线程：我还活着9主线程：子线程状态为true主线程：子线程状态为true主线程：子线程状态为true子线程：我还活着10主线程：子线程状态为true主线程：子线程状态为true主线程：子线程状态为true主线程：子线程状态为false主线程：子线程状态为false主线程：子线程状态为false主线程：子线程状态为false主线程：子线程状态为false测试2：子线程抛出异常之后，线程的isAlive()返回False修改子线程的代码，加入异常抛出：public class RunTask implements Runnable {        @Override    public void run() {        for (int idx = 1; idx <= 10; idx++) {            System.out.println(""子线程：我还活着"" + idx);                        try {                Thread.sleep(3000);            } catch (InterruptedException e) {                e.printStackTrace();            }                        if (idx == 5) {                throw new RuntimeException(""i am die"");            }        }    }}再次执行，观察输出：主线程：子线程状态为true主线程：子线程状态为true主线程：子线程状态为true子线程：我还活着4主线程：子线程状态为true主线程：子线程状态为true主线程：子线程状态为true子线程：我还活着5主线程：子线程状态为true主线程：子线程状态为true主线程：子线程状态为trueException in thread ""Thread-0"" java.lang.RuntimeException: i am dieat RunTask.run(RunTask.java:15)at java.lang.Thread.run(Thread.java:662)主线程：子线程状态为false主线程：子线程状态为false主线程：子线程状态为false可以看到，抛出异常后，子线程直接终止，变成了Flase状态； 总结：线程正常结束后或者线程抛出了未捕获的异常，线程变成死亡状态，使用isAlive()函数返回False。本文地址：http://crazyant.net/1861.html，转载请注明来源","['java', '线程', '死亡', '几种', '情况', 'java', '线程', '会议', '如下', '三种', '方式', '结束', '结束', '处于', '死亡', '状态', 'run', '或者', 'call', '方法', '执行', '完成', '线程', '正常', '结束', '线程', '抛出', '一个', '捕获', 'exception', 'error', '直接', '调用', '线程', 'stop', '方法', '结束', '线程', '注意', '主线', '结束', '其他', '线程', '任何', '影响', '不会', '随之', '结束', '一旦', '线程', '启动', '起来', '拥有', '主线', '相同', '地位', '不会', '受到', '主线', '结束', '影响', '为了', '测试', '某个', '线程', '是否', '已经', '死亡', '可以', '调用', '线程', '对象', 'isalive', '方法', '线程', '处于', '就绪', '运行', '阻塞', '三种', '状态', '方法', '返回', 'true', '线程', '处于', '新建', '死亡', '两种', '状态', '方法', '返回', 'false', '如下', '线程', '死亡', '情况', '进行', '测试', '主线', '代码', '如下', 'public', 'class', 'threadtest', 'public', 'static', 'void', 'main', 'string', 'args', 'throws', 'interruptedexception', 'thread', 'new', 'thread', 'new', 'runtask', 'start', 'while', 'true', 'thread', 'sleep', '1000', 'system', 'out', 'println', '主线', '线程', '状态', 'isalive', '测试', '线程', '正常', '结束', 'isalive', '返回', 'false', '编写', '线程', '正常', '结束', '线程', '执行', '代码', 'public', 'class', 'runtask', 'implements', 'runnable', 'override', 'public', 'void', 'run', 'for', 'int', 'idx', 'idx', '10', 'idx', '++', 'system', 'out', 'println', '线程', '活着', 'idx', 'try', 'thread', 'sleep', '3000', 'catch', 'interruptedexception', 'printstacktrace', '两个', '线程', '输出', '结果', '如下', '所示', '显示', '线程', '正常', '执行', '结束', '使用', 'thread', 'isalive', '返回', 'false', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '线程', '活着', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '线程', '活着', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '线程', '活着', '10', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'false', '主线', '线程', '状态', 'false', '主线', '线程', '状态', 'false', '主线', '线程', '状态', 'false', '主线', '线程', '状态', 'false', '测试', '线程', '抛出', '异常', '之后', '线程', 'isalive', '返回', 'false', '修改', '线程', '代码', '加入', '异常', '抛出', 'public', 'class', 'runtask', 'implements', 'runnable', 'override', 'public', 'void', 'run', 'for', 'int', 'idx', 'idx', '10', 'idx', '++', 'system', 'out', 'println', '线程', '活着', 'idx', 'try', 'thread', 'sleep', '3000', 'catch', 'interruptedexception', 'printstacktrace', 'if', 'idx', 'throw', 'new', 'runtimeexception', 'am', 'die', '再次', '执行', '观察', '输出', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '线程', '活着', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '线程', '活着', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'true', '主线', '线程', '状态', 'trueexception', 'in', 'thread', 'thread', 'java', 'lang', 'runtimeexception', 'am', 'dieat', 'runtask', 'run', 'runtask', 'java', '15', 'at', 'java', 'lang', 'thread', 'run', 'thread', 'java', '662', '主线', '线程', '状态', 'false', '主线', '线程', '状态', 'false', '主线', '线程', '状态', 'false', '可以', '看到', '抛出', '异常', '线程', '直接', '终止', '变成', 'flase', '状态', '总结', '线程', '正常', '结束', '或者', '线程', '抛出', '捕获', '异常', '线程', '变成', '死亡', '状态', '使用', 'isalive', '函数', '返回', 'false', '本文', '地址', 'http', 'crazyant', 'net', '1861', 'html', '转载', '注明', '来源']","[[-0.29998242 -0.13564375  0.29815419  0.1683666   0.34215873 -0.43760487
  -0.16730241  0.55326322 -0.05286053 -0.08796527 -0.04499502 -0.44333719
  -0.1834228   0.66100906  0.20492589 -0.13740733 -0.17687654 -0.0022759
  -0.09789832 -0.59800532 -0.01375756  0.3103287  -0.02964589 -0.16686859
   0.09522868 -0.5961199  -0.35036994  0.0552876  -0.26270223 -0.09093344
   0.24192118  0.00122849  0.0040284  -0.16018175 -0.17497712  0.4004488
  -0.20309937 -0.29670938  0.11379134 -0.90747936 -0.18533671 -0.70379718
  -0.0919502  -0.05449269 -0.18002808 -0.24209684 -0.31346686  0.47567451
  -0.2134781   0.52440125  0.19364634 -0.33588329 -0.1496324  -0.2575813
   0.02408356  0.46861273  0.21836525 -0.10478509  0.13653417 -0.15093937
   0.09582133  0.3113645   0.01855192  0.09571077 -0.46132359  0.03276423
   0.06715033 -0.0296864  -0.33495068  0.5168487   0.1251678  -0.23081433
   0.47200326 -0.37821421  0.65222309  0.27736612  0.19368487 -0.18752242
  -0.36065109 -0.20077151 -0.02534461  0.01414295 -0.13394327  0.44296469
  -0.40821909  0.24928794 -0.33438824  0.50398055  0.57180865  0.18530461
   0.32292887  0.13553753  0.42186589  0.21557724  0.24397849  0.43434614
   0.1575927  -0.37705024 -0.02507898 -0.14849279]]"
1886,将Maven工程打包成可执行JAR包的方法,"如果项目中有需要后台执行的任务，但是主要的逻辑都在Java代码中，那么我采用的方式是单独建立一个maven模块打成jar包，然后在linux后台通过命令执行Jar包的Main函数：java -classpath backtask.jar ""net.crazyant.RunWebService""于是就有个前提，得将maven模块打包成jar包，原本很简单的事情，却出现了很多问题。原始打包方式：使用maven-assembly-pluginPOM配置片段为：<build>    <plugins>        <plugin>            <groupId>org.apache.maven.plugins</groupId>            <artifactId>maven-jar-plugin</artifactId>        </plugin>           <plugin>            <artifactId>maven-assembly-plugin</artifactId>            <version>2.2.1</version>            <configuration>                <finalName>mdm-v3-backtasks</finalName>                <descriptorRefs>                    <descriptorRef>jar-with-dependencies</descriptorRef>                </descriptorRefs>            </configuration>            <executions>                <execution>                    <phase>package</phase>                    <goals>                        <goal>single</goal>                    </goals>                </execution>            </executions>        </plugin>        <plugin>            <groupId>org.apache.maven.plugins</groupId>            <artifactId>maven-resources-plugin</artifactId>            <version>2.6</version>            <configuration>                <encoding>UTF-8</encoding>            </configuration>        </plugin>     </plugins></build>这种打包方式，可以生成/target/mdm-v3-backtasks-1.0.0.2.jar的Jar包，在有些工程中是没有问题的，但是我的新工程打包后，却在运行时出现了如下问题：Exception in thread ""main"" org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [http://www.springframework.org/schema/context]Offending resource: class path resource [applicationContext-backtasks.xml]        at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68)        at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85)        at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:80)        at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.error(BeanDefinitionParserDelegate.java:318)        at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1435)        at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1428)        at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:195)        at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:139)        at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:108)        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493)        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390)        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:243)        at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127)        at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93)        at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130)        at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451)        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)网上搜了很多文章，发现首先大家都支持的，是maven-assembly-plugin插件，替换成maven-shade-plugin插件。但是替换成maven-shade-plugin之后，仍然遇到了很多问题：使用maven-shade-plugin逐步解决问题使用maven-shade-plugin插件，并没有一下子就把问题解决了，也经过了很多步骤：1、修改spring.xml的schema编写方式原始的声明是这样的：<?xml version=""1.0"" encoding=""UTF-8""?><beans xmlns=""http://www.springframework.org/schema/beans""    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:context=""http://www.springframework.org/schema/context""    xsi:schemaLocation=""            http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans.xsd            http://www.springframework.org/schema/context            http://www.springframework.org/schema/context/spring-context.xsd"">作如下修改，把xsd的版本加上：<?xml version=""1.0"" encoding=""UTF-8""?><beans xmlns=""http://www.springframework.org/schema/beans""    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:context=""http://www.springframework.org/schema/context""    xsi:schemaLocation=""            http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd            http://www.springframework.org/schema/context            http://www.springframework.org/schema/context/spring-context-3.0.xsd"">2、引入maven-shade-plugin插件的打包方式遇到的问题将原来的maven-assembly-plugin替换成新的打包方式：<build><finalName>mdm-v3-backtasks</finalName><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-jar-plugin</artifactId></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-shade-plugin</artifactId><version>2.4.2</version><executions><execution><phase>package</phase><goals><goal>shade</goal></goals></execution></executions></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-resources-plugin</artifactId><version>2.6</version><configuration><encoding>UTF-8</encoding></configuration></plugin></plugins></build>然后就报了下面的错：Exception in thread ""main"" java.lang.SecurityException: Invalid signature file digest for Manifest main attributes        at sun.security.util.SignatureFileVerifier.processImpl(SignatureFileVerifier.java:286)        at sun.security.util.SignatureFileVerifier.process(SignatureFileVerifier.java:239)        at java.util.jar.JarVerifier.processEntry(JarVerifier.java:317)        at java.util.jar.JarVerifier.update(JarVerifier.java:228)        at java.util.jar.JarFile.initializeVerifier(JarFile.java:348)        at java.util.jar.JarFile.getInputStream(JarFile.java:415)        at sun.misc.URLClassPath$JarLoader$2.getInputStream(URLClassPath.java:775)        at sun.misc.Resource.cachedInputStream(Resource.java:77)        at sun.misc.Resource.getByteBuffer(Resource.java:160)        at java.net.URLClassLoader.defineClass(URLClassLoader.java:436)        at java.net.URLClassLoader.access$100(URLClassLoader.java:71)        at java.net.URLClassLoader$1.run(URLClassLoader.java:361)        at java.net.URLClassLoader$1.run(URLClassLoader.java:355)        at java.security.AccessController.doPrivileged(Native Method)        at java.net.URLClassLoader.findClass(URLClassLoader.java:354)        at java.lang.ClassLoader.loadClass(ClassLoader.java:425)        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)        at java.lang.ClassLoader.loadClass(ClassLoader.java:358)        at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:482)在http://zhentao-li.blogspot.com/2012/06/maven-shade-plugin-invalid-signature.html找到了解决方法：You need to add the following to pom.xml:        <configuration>          <filters>            <filter>              <artifact>*:*</artifact>              <excludes>                <exclude>META-INF/*.SF</exclude>                <exclude>META-INF/*.DSA</exclude>                <exclude>META-INF/*.RSA</exclude>              </excludes>            </filter>          </filters>        </configuration>于是加入以上的filter，新的POM内容为：<build><finalName>mdm-v3-backtasks</finalName><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-jar-plugin</artifactId></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-shade-plugin</artifactId><version>2.4.2</version><executions><execution><phase>package</phase><goals><goal>shade</goal></goals><configuration><filters><filter><artifact>*:*</artifact><excludes><exclude>META-INF/*.SF</exclude><exclude>META-INF/*.DSA</exclude><exclude>META-INF/*.RSA</exclude></excludes></filter></filters></configuration></execution></executions></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-resources-plugin</artifactId><version>2.6</version><configuration><encoding>UTF-8</encoding></configuration></plugin></plugins></build>修改后提交，不幸的是，又爆出了下面的错误：Exception in thread ""main"" org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [http://www.springframework.org/schema/context]Offending resource: class path resource [applicationContext-backtasks.xml]        at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68)        at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85)        at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:80)        at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.error(BeanDefinitionParserDelegate.java:318)        at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1435)        at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1428)        at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:195)        at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:139)        at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:108)        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493)        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390)        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:243)        at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127)        at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93)        at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130)        at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451)        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)最后在http://robert-reiz.com/2011/11/14/832/页面找到了答案：这是因为项目中包含了很多的Spring Jar，不同的Spring Jar会有相同的文件名称，他们相互冲突，为了避免元数据文件的相互覆盖，应该合并他们，如果使用maven shade plugin的话，可以在POM中加上下面的信息来解决：<transformer implementation=""org.apache.maven.plugins.shade.resource.AppendingTransformer"">  <resource>META-INF/spring.handlers</resource></transformer><transformer implementation=""org.apache.maven.plugins.shade.resource.AppendingTransformer"">  <resource>META-INF/spring.schemas</resource></transformer>对该问题，官方的解释位于：http://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html在“Merging Content of Specific Files with AppendingTransformer and XmlAppendingTransformer”小节，解释为：很多的JAR包含了相同的文件名称，为了避免相互覆盖，可以将他们合并到单个文件中。一个很好的例子，就是spring-context包和plexus-spring包，他俩都有META-INF/spring.handlers文件，这个文件被Spring用来处理XML Schema namespaces，通过如下所示的merge方法，可以解决这个问题问题终于找到了，原来在这里，看下官方贴出来的POM：<project>  ...  <build>    <plugins>      <plugin>        <groupId>org.apache.maven.plugins</groupId>        <artifactId>maven-shade-plugin</artifactId>        <version>2.4.2</version>        <executions>          <execution>            <phase>package</phase>            <goals>              <goal>shade</goal>            </goals>            <configuration>              <transformers>                <transformer implementation=""org.apache.maven.plugins.shade.resource.AppendingTransformer"">                  <resource>META-INF/spring.handlers</resource>                </transformer>                <transformer implementation=""org.apache.maven.plugins.shade.resource.AppendingTransformer"">                  <resource>META-INF/spring.schemas</resource>                </transformer>              </transformers>            </configuration>          </execution>        </executions>      </plugin>    </plugins>  </build>  ...</project>最终的解决方案最终的POM文件如下所示：<build><finalName>mdm-v3-backtasks</finalName><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-jar-plugin</artifactId></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-shade-plugin</artifactId><version>2.4.2</version><executions><execution><phase>package</phase><goals><goal>shade</goal></goals><configuration><transformers><transformerimplementation=""org.apache.maven.plugins.shade.resource.AppendingTransformer""><resource>META-INF/spring.handlers</resource></transformer><transformerimplementation=""org.apache.maven.plugins.shade.resource.AppendingTransformer""><resource>META-INF/spring.schemas</resource></transformer></transformers><filters><filter><artifact>*:*</artifact><excludes><exclude>META-INF/*.SF</exclude><exclude>META-INF/*.DSA</exclude><exclude>META-INF/*.RSA</exclude></excludes></filter></filters></configuration></execution></executions></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-resources-plugin</artifactId><version>2.6</version><configuration><encoding>UTF-8</encoding></configuration></plugin></plugins></build>使用本POM配置，打包、运行均成功没有出错。参考链接：官方：http://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html安全问题：http://zhentao-li.blogspot.com/2012/06/maven-shade-plugin-invalid-signature.htmlContext问题：http://robert-reiz.com/2011/11/14/832/ 本文地址：http://crazyant.net/1886.html，转载请注明来源 ","['maven', '工程', '打包', '成可', '执行', 'jar', '方法', '如果', '项目', '中有', '需要', '后台', '执行', '任务', '但是', '主要', '逻辑', 'java', '代码', '那么', '采用', '方式', '单独', '建立', '一个', 'maven', '模块', '打成', 'jar', '然后', 'linux', '后台', '通过', '命令', '执行', 'jar', 'main', '函数', 'java', 'classpath', 'backtask', 'jar', 'net', 'crazyant', 'runwebservice', '于是', '前提', 'maven', '模块', '打包', 'jar', '原本', '简单', '事情', '出现', '很多', '问题', '原始', '打包', '方式', '使用', 'maven', 'assembly', 'pluginpom', '配置', '片段', 'build', 'plugins', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'jar', 'plugin', 'artifactid', 'plugin', 'plugin', 'artifactid', 'maven', 'assembly', 'plugin', 'artifactid', 'version', '2.2', 'version', 'configuration', 'finalname', 'mdm', 'v3', 'backtasks', 'finalname', 'descriptorrefs', 'descriptorref', 'jar', 'with', 'dependencies', 'descriptorref', 'descriptorrefs', 'configuration', 'executions', 'execution', 'phase', 'package', 'phase', 'goals', 'goal', 'single', 'goal', 'goals', 'execution', 'executions', 'plugin', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'resources', 'plugin', 'artifactid', 'version', '2.6', 'version', 'configuration', 'encoding', 'utf', 'encoding', 'configuration', 'plugin', 'plugins', 'build', '这种', '打包', '方式', '可以', '生成', 'target', 'mdm', 'v3', 'backtasks', '1.0', '0.2', 'jar', 'jar', '有些', '工程', '中是', '没有', '问题', '但是', '工程', '打包', '运行', '出现', '如下', '问题', 'exception', 'in', 'thread', 'main', 'org', 'springframework', 'beans', 'factory', 'parsing', 'beandefinitionparsingexception', 'configuration', 'problem', 'unable', 'to', 'locate', 'spring', 'namespacehandler', 'for', 'xml', 'schema', 'namespace', 'http', 'www', 'springframework', 'org', 'schema', 'context', 'offending', 'resource', 'class', 'path', 'resource', 'applicationcontext', 'backtasks', 'xml', 'at', 'org', 'springframework', 'beans', 'factory', 'parsing', 'failfastproblemreporter', 'error', 'failfastproblemreporter', 'java', '68', 'at', 'org', 'springframework', 'beans', 'factory', 'parsing', 'readercontext', 'error', 'readercontext', 'java', '85', 'at', 'org', 'springframework', 'beans', 'factory', 'parsing', 'readercontext', 'error', 'readercontext', 'java', '80', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'beandefinitionparserdelegate', 'error', 'beandefinitionparserdelegate', 'java', '318', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'beandefinitionparserdelegate', 'parsecustomelement', 'beandefinitionparserdelegate', 'java', '1435', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'beandefinitionparserdelegate', 'parsecustomelement', 'beandefinitionparserdelegate', 'java', '1428', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'defaultbeandefinitiondocumentreader', 'parsebeandefinitions', 'defaultbeandefinitiondocumentreader', 'java', '195', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'defaultbeandefinitiondocumentreader', 'doregisterbeandefinitions', 'defaultbeandefinitiondocumentreader', 'java', '139', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'defaultbeandefinitiondocumentreader', 'registerbeandefinitions', 'defaultbeandefinitiondocumentreader', 'java', '108', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'xmlbeandefinitionreader', 'registerbeandefinitions', 'xmlbeandefinitionreader', 'java', '493', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'xmlbeandefinitionreader', 'doloadbeandefinitions', 'xmlbeandefinitionreader', 'java', '390', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'xmlbeandefinitionreader', 'loadbeandefinitions', 'xmlbeandefinitionreader', 'java', '334', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'xmlbeandefinitionreader', 'loadbeandefinitions', 'xmlbeandefinitionreader', 'java', '302', 'at', 'org', 'springframework', 'beans', 'factory', 'support', 'abstractbeandefinitionreader', 'loadbeandefinitions', 'abstractbeandefinitionreader', 'java', '174', 'at', 'org', 'springframework', 'beans', 'factory', 'support', 'abstractbeandefinitionreader', 'loadbeandefinitions', 'abstractbeandefinitionreader', 'java', '209', 'at', 'org', 'springframework', 'beans', 'factory', 'support', 'abstractbeandefinitionreader', 'loadbeandefinitions', 'abstractbeandefinitionreader', 'java', '180', 'at', 'org', 'springframework', 'beans', 'factory', 'support', 'abstractbeandefinitionreader', 'loadbeandefinitions', 'abstractbeandefinitionreader', 'java', '243', 'at', 'org', 'springframework', 'context', 'support', 'abstractxmlapplicationcontext', 'loadbeandefinitions', 'abstractxmlapplicationcontext', 'java', '127', 'at', 'org', 'springframework', 'context', 'support', 'abstractxmlapplicationcontext', 'loadbeandefinitions', 'abstractxmlapplicationcontext', 'java', '93', 'at', 'org', 'springframework', 'context', 'support', 'abstractrefreshableapplicationcontext', 'refreshbeanfactory', 'abstractrefreshableapplicationcontext', 'java', '130', 'at', 'org', 'springframework', 'context', 'support', 'abstractapplicationcontext', 'obtainfreshbeanfactory', 'abstractapplicationcontext', 'java', '537', 'at', 'org', 'springframework', 'context', 'support', 'abstractapplicationcontext', 'refresh', 'abstractapplicationcontext', 'java', '451', 'at', 'org', 'springframework', 'context', 'support', 'classpathxmlapplicationcontext', 'init', 'classpathxmlapplicationcontext', 'java', '139', 'at', 'org', 'springframework', 'context', 'support', 'classpathxmlapplicationcontext', 'init', 'classpathxmlapplicationcontext', 'java', '83', '网上', '很多', '文章', '发现', '首先', '大家', '支持', 'maven', 'assembly', 'plugin', '插件', '替换成', 'maven', 'shade', 'plugin', '插件', '但是', '替换成', 'maven', 'shade', 'plugin', '之后', '仍然', '遇到', '很多', '问题', '使用', 'maven', 'shade', 'plugin', '逐步', '解决问题', '使用', 'maven', 'shade', 'plugin', '插件', '没有', '一下子', '问题', '解决', '经过', '很多', '步骤', '修改', 'spring', 'xml', 'schema', '编写', '方式', '原始', '声明', '这样', 'xml', 'version', '1.0', 'encoding', 'utf', 'beans', 'xmlns', 'http', 'www', 'springframework', 'org', 'schema', 'beans', 'xmlns', 'xsi', 'http', 'www', 'w3', 'org', '2001', 'xmlschema', 'instance', 'xmlns', 'context', 'http', 'www', 'springframework', 'org', 'schema', 'context', 'xsi', 'schemalocation', 'http', 'www', 'springframework', 'org', 'schema', 'beans', 'http', 'www', 'springframework', 'org', 'schema', 'beans', 'spring', 'beans', 'xsd', 'http', 'www', 'springframework', 'org', 'schema', 'context', 'http', 'www', 'springframework', 'org', 'schema', 'context', 'spring', 'context', 'xsd', '如下', '修改', 'xsd', '版本', '加上', 'xml', 'version', '1.0', 'encoding', 'utf', 'beans', 'xmlns', 'http', 'www', 'springframework', 'org', 'schema', 'beans', 'xmlns', 'xsi', 'http', 'www', 'w3', 'org', '2001', 'xmlschema', 'instance', 'xmlns', 'context', 'http', 'www', 'springframework', 'org', 'schema', 'context', 'xsi', 'schemalocation', 'http', 'www', 'springframework', 'org', 'schema', 'beans', 'http', 'www', 'springframework', 'org', 'schema', 'beans', 'spring', 'beans', '3.0', 'xsd', 'http', 'www', 'springframework', 'org', 'schema', 'context', 'http', 'www', 'springframework', 'org', 'schema', 'context', 'spring', 'context', '3.0', 'xsd', '引入', 'maven', 'shade', 'plugin', '插件', '打包', '方式', '遇到', '问题', '原来', 'maven', 'assembly', 'plugin', '替换成', '打包', '方式', 'build', 'finalname', 'mdm', 'v3', 'backtasks', 'finalname', 'plugins', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'jar', 'plugin', 'artifactid', 'plugin', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'shade', 'plugin', 'artifactid', 'version', '2.4', 'version', 'executions', 'execution', 'phase', 'package', 'phase', 'goals', 'goal', 'shade', 'goal', 'goals', 'execution', 'executions', 'plugin', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'resources', 'plugin', 'artifactid', 'version', '2.6', 'version', 'configuration', 'encoding', 'utf', 'encoding', 'configuration', 'plugin', 'plugins', 'build', '然后', '下面', 'exception', 'in', 'thread', 'main', 'java', 'lang', 'securityexception', 'invalid', 'signature', 'file', 'digest', 'for', 'manifest', 'main', 'attributes', 'at', 'sun', 'security', 'util', 'signaturefileverifier', 'processimpl', 'signaturefileverifier', 'java', '286', 'at', 'sun', 'security', 'util', 'signaturefileverifier', 'process', 'signaturefileverifier', 'java', '239', 'at', 'java', 'util', 'jar', 'jarverifier', 'processentry', 'jarverifier', 'java', '317', 'at', 'java', 'util', 'jar', 'jarverifier', 'update', 'jarverifier', 'java', '228', 'at', 'java', 'util', 'jar', 'jarfile', 'initializeverifier', 'jarfile', 'java', '348', 'at', 'java', 'util', 'jar', 'jarfile', 'getinputstream', 'jarfile', 'java', '415', 'at', 'sun', 'misc', 'urlclasspath', 'jarloader', 'getinputstream', 'urlclasspath', 'java', '775', 'at', 'sun', 'misc', 'resource', 'cachedinputstream', 'resource', 'java', '77', 'at', 'sun', 'misc', 'resource', 'getbytebuffer', 'resource', 'java', '160', 'at', 'java', 'net', 'urlclassloader', 'defineclass', 'urlclassloader', 'java', '436', 'at', 'java', 'net', 'urlclassloader', 'access', '100', 'urlclassloader', 'java', '71', 'at', 'java', 'net', 'urlclassloader', 'run', 'urlclassloader', 'java', '361', 'at', 'java', 'net', 'urlclassloader', 'run', 'urlclassloader', 'java', '355', 'at', 'java', 'security', 'accesscontroller', 'doprivileged', 'native', 'method', 'at', 'java', 'net', 'urlclassloader', 'findclass', 'urlclassloader', 'java', '354', 'at', 'java', 'lang', 'classloader', 'loadclass', 'classloader', 'java', '425', 'at', 'sun', 'misc', 'launcher', 'appclassloader', 'loadclass', 'launcher', 'java', '308', 'at', 'java', 'lang', 'classloader', 'loadclass', 'classloader', 'java', '358', 'at', 'sun', 'launcher', 'launcherhelper', 'checkandloadmain', 'launcherhelper', 'java', '482', 'http', 'zhentao', 'li', 'blogspot', 'com', '2012', '06', 'maven', 'shade', 'plugin', 'invalid', 'signature', 'html', '找到', '解决', '方法', 'you', 'need', 'to', 'add', 'the', 'following', 'to', 'pom', 'xml', 'configuration', 'filters', 'filter', 'artifact', 'artifact', 'excludes', 'exclude', 'meta', 'inf', 'sf', 'exclude', 'exclude', 'meta', 'inf', 'dsa', 'exclude', 'exclude', 'meta', 'inf', 'rsa', 'exclude', 'excludes', 'filter', 'filters', 'configuration', '于是', '加入', '以上', 'filter', 'pom', '内容', 'build', 'finalname', 'mdm', 'v3', 'backtasks', 'finalname', 'plugins', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'jar', 'plugin', 'artifactid', 'plugin', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'shade', 'plugin', 'artifactid', 'version', '2.4', 'version', 'executions', 'execution', 'phase', 'package', 'phase', 'goals', 'goal', 'shade', 'goal', 'goals', 'configuration', 'filters', 'filter', 'artifact', 'artifact', 'excludes', 'exclude', 'meta', 'inf', 'sf', 'exclude', 'exclude', 'meta', 'inf', 'dsa', 'exclude', 'exclude', 'meta', 'inf', 'rsa', 'exclude', 'excludes', 'filter', 'filters', 'configuration', 'execution', 'executions', 'plugin', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'resources', 'plugin', 'artifactid', 'version', '2.6', 'version', 'configuration', 'encoding', 'utf', 'encoding', 'configuration', 'plugin', 'plugins', 'build', '修改', '提交', '不幸', '爆出', '下面', '错误', 'exception', 'in', 'thread', 'main', 'org', 'springframework', 'beans', 'factory', 'parsing', 'beandefinitionparsingexception', 'configuration', 'problem', 'unable', 'to', 'locate', 'spring', 'namespacehandler', 'for', 'xml', 'schema', 'namespace', 'http', 'www', 'springframework', 'org', 'schema', 'context', 'offending', 'resource', 'class', 'path', 'resource', 'applicationcontext', 'backtasks', 'xml', 'at', 'org', 'springframework', 'beans', 'factory', 'parsing', 'failfastproblemreporter', 'error', 'failfastproblemreporter', 'java', '68', 'at', 'org', 'springframework', 'beans', 'factory', 'parsing', 'readercontext', 'error', 'readercontext', 'java', '85', 'at', 'org', 'springframework', 'beans', 'factory', 'parsing', 'readercontext', 'error', 'readercontext', 'java', '80', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'beandefinitionparserdelegate', 'error', 'beandefinitionparserdelegate', 'java', '318', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'beandefinitionparserdelegate', 'parsecustomelement', 'beandefinitionparserdelegate', 'java', '1435', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'beandefinitionparserdelegate', 'parsecustomelement', 'beandefinitionparserdelegate', 'java', '1428', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'defaultbeandefinitiondocumentreader', 'parsebeandefinitions', 'defaultbeandefinitiondocumentreader', 'java', '195', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'defaultbeandefinitiondocumentreader', 'doregisterbeandefinitions', 'defaultbeandefinitiondocumentreader', 'java', '139', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'defaultbeandefinitiondocumentreader', 'registerbeandefinitions', 'defaultbeandefinitiondocumentreader', 'java', '108', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'xmlbeandefinitionreader', 'registerbeandefinitions', 'xmlbeandefinitionreader', 'java', '493', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'xmlbeandefinitionreader', 'doloadbeandefinitions', 'xmlbeandefinitionreader', 'java', '390', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'xmlbeandefinitionreader', 'loadbeandefinitions', 'xmlbeandefinitionreader', 'java', '334', 'at', 'org', 'springframework', 'beans', 'factory', 'xml', 'xmlbeandefinitionreader', 'loadbeandefinitions', 'xmlbeandefinitionreader', 'java', '302', 'at', 'org', 'springframework', 'beans', 'factory', 'support', 'abstractbeandefinitionreader', 'loadbeandefinitions', 'abstractbeandefinitionreader', 'java', '174', 'at', 'org', 'springframework', 'beans', 'factory', 'support', 'abstractbeandefinitionreader', 'loadbeandefinitions', 'abstractbeandefinitionreader', 'java', '209', 'at', 'org', 'springframework', 'beans', 'factory', 'support', 'abstractbeandefinitionreader', 'loadbeandefinitions', 'abstractbeandefinitionreader', 'java', '180', 'at', 'org', 'springframework', 'beans', 'factory', 'support', 'abstractbeandefinitionreader', 'loadbeandefinitions', 'abstractbeandefinitionreader', 'java', '243', 'at', 'org', 'springframework', 'context', 'support', 'abstractxmlapplicationcontext', 'loadbeandefinitions', 'abstractxmlapplicationcontext', 'java', '127', 'at', 'org', 'springframework', 'context', 'support', 'abstractxmlapplicationcontext', 'loadbeandefinitions', 'abstractxmlapplicationcontext', 'java', '93', 'at', 'org', 'springframework', 'context', 'support', 'abstractrefreshableapplicationcontext', 'refreshbeanfactory', 'abstractrefreshableapplicationcontext', 'java', '130', 'at', 'org', 'springframework', 'context', 'support', 'abstractapplicationcontext', 'obtainfreshbeanfactory', 'abstractapplicationcontext', 'java', '537', 'at', 'org', 'springframework', 'context', 'support', 'abstractapplicationcontext', 'refresh', 'abstractapplicationcontext', 'java', '451', 'at', 'org', 'springframework', 'context', 'support', 'classpathxmlapplicationcontext', 'init', 'classpathxmlapplicationcontext', 'java', '139', 'at', 'org', 'springframework', 'context', 'support', 'classpathxmlapplicationcontext', 'init', 'classpathxmlapplicationcontext', 'java', '83', '最后', 'http', 'robert', 'reiz', 'com', '2011', '11', '14', '832', '页面', '找到', '答案', '是因为', '项目', '包含', '很多', 'spring', 'jar', '不同', 'spring', 'jar', '相同', '文件名称', '他们', '相互', '冲突', '为了', '避免', '数据文件', '相互', '覆盖', '应该', '合并', '他们', '如果', '使用', 'maven', 'shade', 'plugin', '的话', '可以', 'pom', '加上', '下面', '信息', '解决', 'transformer', 'implementation', 'org', 'apache', 'maven', 'plugins', 'shade', 'resource', 'appendingtransformer', 'resource', 'meta', 'inf', 'spring', 'handlers', 'resource', 'transformer', 'transformer', 'implementation', 'org', 'apache', 'maven', 'plugins', 'shade', 'resource', 'appendingtransformer', 'resource', 'meta', 'inf', 'spring', 'schemas', 'resource', 'transformer', '问题', '官方', '解释', '位于', 'http', 'maven', 'apache', 'org', 'plugins', 'maven', 'shade', 'plugin', 'examples', 'resource', 'transformers', 'html', 'merging', 'content', 'of', 'specific', 'files', 'with', 'appendingtransformer', 'and', 'xmlappendingtransformer', '小节', '解释', '很多', 'jar', '包含', '相同', '文件名称', '为了', '避免', '相互', '覆盖', '可以', '他们', '合并', '单个', '文件', '一个', '例子', '就是', 'spring', 'context', 'plexus', 'spring', '他俩', 'meta', 'inf', 'spring', 'handlers', '文件', '这个', '文件', 'spring', '用来', '处理', 'xml', 'schema', 'namespaces', '通过', '如下', '所示', 'merge', '方法', '可以', '解决', '这个', '问题', '问题', '终于', '找到', '原来', '这里', '官方', '贴出来', 'pom', 'project', '...', 'build', 'plugins', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'shade', 'plugin', 'artifactid', 'version', '2.4', 'version', 'executions', 'execution', 'phase', 'package', 'phase', 'goals', 'goal', 'shade', 'goal', 'goals', 'configuration', 'transformers', 'transformer', 'implementation', 'org', 'apache', 'maven', 'plugins', 'shade', 'resource', 'appendingtransformer', 'resource', 'meta', 'inf', 'spring', 'handlers', 'resource', 'transformer', 'transformer', 'implementation', 'org', 'apache', 'maven', 'plugins', 'shade', 'resource', 'appendingtransformer', 'resource', 'meta', 'inf', 'spring', 'schemas', 'resource', 'transformer', 'transformers', 'configuration', 'execution', 'executions', 'plugin', 'plugins', 'build', '...', 'project', '最终', '解决方案', '最终', 'pom', '文件', '如下', '所示', 'build', 'finalname', 'mdm', 'v3', 'backtasks', 'finalname', 'plugins', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'jar', 'plugin', 'artifactid', 'plugin', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'shade', 'plugin', 'artifactid', 'version', '2.4', 'version', 'executions', 'execution', 'phase', 'package', 'phase', 'goals', 'goal', 'shade', 'goal', 'goals', 'configuration', 'transformers', 'transformerimplementation', 'org', 'apache', 'maven', 'plugins', 'shade', 'resource', 'appendingtransformer', 'resource', 'meta', 'inf', 'spring', 'handlers', 'resource', 'transformer', 'transformerimplementation', 'org', 'apache', 'maven', 'plugins', 'shade', 'resource', 'appendingtransformer', 'resource', 'meta', 'inf', 'spring', 'schemas', 'resource', 'transformer', 'transformers', 'filters', 'filter', 'artifact', 'artifact', 'excludes', 'exclude', 'meta', 'inf', 'sf', 'exclude', 'exclude', 'meta', 'inf', 'dsa', 'exclude', 'exclude', 'meta', 'inf', 'rsa', 'exclude', 'excludes', 'filter', 'filters', 'configuration', 'execution', 'executions', 'plugin', 'plugin', 'groupid', 'org', 'apache', 'maven', 'plugins', 'groupid', 'artifactid', 'maven', 'resources', 'plugin', 'artifactid', 'version', '2.6', 'version', 'configuration', 'encoding', 'utf', 'encoding', 'configuration', 'plugin', 'plugins', 'build', '使用', 'pom', '配置', '打包', '运行', '成功', '没有', '出错', '参考', '链接', '官方', 'http', 'maven', 'apache', 'org', 'plugins', 'maven', 'shade', 'plugin', 'examples', 'resource', 'transformers', 'html', '安全', '问题', 'http', 'zhentao', 'li', 'blogspot', 'com', '2012', '06', 'maven', 'shade', 'plugin', 'invalid', 'signature', 'htmlcontext', '问题', 'http', 'robert', 'reiz', 'com', '2011', '11', '14', '832', '本文', '地址', 'http', 'crazyant', 'net', '1886', 'html', '转载', '注明', '来源']","[[-0.38501592  0.02739123  0.34781362  0.42243821  0.13187784 -0.40696136
   0.00657798  0.5009023  -0.20350757 -0.17930719 -0.06222444 -0.51044359
   0.11859729  0.46281966  0.20217421 -0.18345996 -0.05610621 -0.10356171
   0.03063132 -0.48349267 -0.07811679  0.4661759  -0.19290381 -0.29427529
  -0.11679279 -0.32670814 -0.38968287 -0.01671342 -0.1557909  -0.12897841
   0.15322168  0.07680862 -0.01432487 -0.06004577 -0.23047081  0.52697633
  -0.23393018 -0.38432147  0.03775985 -0.74273246  0.01315996 -0.38381486
  -0.09931091  0.01447041 -0.12034778 -0.29489188 -0.46156119  0.34544838
  -0.04159151  0.38902809 -0.10190471 -0.41420453 -0.0643433  -0.30585569
  -0.01425626  0.51677562  0.07050963 -0.07814704  0.18102452 -0.09440536
   0.21396469  0.08856462  0.03562692  0.02607462 -0.39722417  0.15473366
  -0.04065287  0.09442342 -0.28229028  0.45448769 -0.14332011 -0.05049655
   0.46116202 -0.40183389  0.43655019  0.43212942  0.27867692 -0.28076033
  -0.25901739 -0.18111085 -0.08227988  0.00731334 -0.11918215  0.55449197
  -0.22427934  0.20600373 -0.25885011  0.54763158  0.58997232  0.28143231
   0.07163246  0.11974777  0.33423643  0.24561655  0.20212134  0.49798084
   0.07661114 -0.16911599  0.37010516 -0.1346851 ]]"
1890,Python使用unittest实现简单的单元测试实例,"如果项目复杂，进行单元测试是保证降低出错率的好方法，Python提供的unittest可以很方便的实现单元测试，从而可以替换掉繁琐杂乱的main函数测试的方法，将测试用例、测试方法进行统一的管理和维护。本文给出一个实例，很简单，看一下就明白了。首先给出一个要测试的Python模块，代码如下：# coding:utf8'''日期常用类@author: www.crazyant.net'''def get_date_year_month(pm_date):    """"""获取参数pm_date对应的年份和月份    """"""    if not pm_date:        raise Exception(""get_curr_year_month: pm_date can not be None"")        # get date's yyyymmddHHMMSS pattern    str_date = str(pm_date).replace(""-"", """").replace("" "", """").replace("":"", """")        year = str_date[:4]    month = str_date[4:6]    return year, month然后就可以编写测试脚本，代码如下：# coding: utf8""""""测试date_service.py@author: peishuaishuai""""""import unittestfrom service import date_serviceclass DateServiceTest(unittest.TestCase):    """"""    test clean_tb_async_src_acct.py    """"""        def setup(self):        """"""在这里做资源的初始化 """"""        pass        def tearDown(self):        """"""在这里做资源的释放 """"""        pass        def test_get_date_year_month_1(self):        """""" 测试方法1，测试方法应该以test_开头 """"""                pm_date = ""2015-11-25 14:40:52""        year, month = date_service.get_date_year_month(pm_date)        self.assertEqual(year, ""2015"", ""year not equal"")        self.assertEqual(month, ""11"", ""month not equal"")        def test_get_date_year_month_2(self):        """""" 测试方法1，测试方法应该以test_开头 """"""        pm_date = ""20161225144052""        year, month = date_service.get_date_year_month(pm_date)        self.assertEqual(year, ""2016"", ""year not equal"")        self.assertEqual(month, ""12"", ""month not equal"")# test mainif __name__ == ""__main__"":    unittest.main()运行这个test_date_service.py，就会打印出如下信息：..----------------------------------------------------------------------Ran 2 tests in 0.000sOK这里的每一个点，就代表运行成功了一个测试，最后会给出运行成功了全部的多少个测试以及测试的时间。之前的很多时间，我一直不知道写单测有什么用，因为单测只是把写好的程序运行了一遍，并没有创建新的逻辑，我心里在疑惑“我已经将程序按照我的想法写好了，它就会按照我的设计来运行，为什么要用单测重新走一遍呢？”，后来出了一个事情，代码出了BUG，我调试了好久，才发现问题出在""obja.equals(objb)""，因为obja和objb一个是Long一个是Integer，所以即使数值相同，也不会相等。从那一刻，我发现单测做的事情，其实就是“验证程序是否按照我的想法在运行”，这才是它的终极目的，但是，这却是很关键的事情，设计往往没有错，但是写出来的代码却经常并不是按照我们所想的去运行的。单测，就是验证代码是不是按照我们想象的在运行，这也是单测这个技术的意义所在。本文地址：http://crazyant.net/1890.html，转载请注明来源。","['python', '使用', 'unittest', '实现', '简单', '单元测试', '实例', '如果', '项目', '复杂', '进行', '单元测试', '保证', '降低', '出错率', '方法', 'python', '提供', 'unittest', '可以', '方便', '实现', '单元测试', '从而', '可以', '替换', '繁琐', '杂乱', 'main', '函数', '测试', '方法', '测试用例', '测试方法', '进行', '统一', '管理', '维护', '本文', '给出', '一个', '实例', '简单', '一下', '明白', '首先', '给出', '一个', '测试', 'python', '模块', '代码', '如下', 'coding', 'utf8', '日期', '常用', 'author', 'www', 'crazyant', 'net', 'def', 'get', 'date', 'year', 'month', 'pm', 'date', '获取', '参数', 'pm', 'date', '对应', '年份', '月份', 'if', 'not', 'pm', 'date', 'raise', 'exception', 'get', 'curr', 'year', 'month', 'pm', 'date', 'can', 'not', 'be', 'none', 'get', 'date', 'yyyymmddhhmmss', 'pattern', 'str', 'date', 'str', 'pm', 'date', 'replace', 'replace', 'replace', 'year', 'str', 'date', 'month', 'str', 'date', 'return', 'year', 'month', '然后', '可以', '编写', '测试', '脚本', '代码', '如下', 'coding', 'utf8', '测试', 'date', 'service', 'py', 'author', 'peishuaishuai', 'import', 'unittestfrom', 'service', 'import', 'date', 'serviceclass', 'dateservicetest', 'unittest', 'testcase', 'test', 'clean', 'tb', 'async', 'src', 'acct', 'py', 'def', 'setup', 'self', '这里', '资源', '初始化', 'pass', 'def', 'teardown', 'self', '这里', '资源', '释放', 'pass', 'def', 'test', 'get', 'date', 'year', 'month', 'self', '测试方法', '测试方法', '应该', 'test', '开头', 'pm', 'date', '2015', '11', '25', '14', '40', '52', 'year', 'month', 'date', 'service', 'get', 'date', 'year', 'month', 'pm', 'date', 'self', 'assertequal', 'year', '2015', 'year', 'not', 'equal', 'self', 'assertequal', 'month', '11', 'month', 'not', 'equal', 'def', 'test', 'get', 'date', 'year', 'month', 'self', '测试方法', '测试方法', '应该', 'test', '开头', 'pm', 'date', '20161225144052', 'year', 'month', 'date', 'service', 'get', 'date', 'year', 'month', 'pm', 'date', 'self', 'assertequal', 'year', '2016', 'year', 'not', 'equal', 'self', 'assertequal', 'month', '12', 'month', 'not', 'equal', 'test', 'mainif', '__', 'name', '__', '__', 'main', '__', 'unittest', 'main', '运行', '这个', 'test', 'date', 'service', 'py', '打印', '如下', '信息', '..----------------------------------------------------------------------', 'ran', 'tests', 'in', '0.000', 'sok', '这里', '一个点', '代表', '运行', '成功', '一个', '测试', '最后', '给出', '运行', '成功', '全部', '多少', '测试', '以及', '测试', '时间', '之前', '很多', '时间', '一直', '知道', '单测', '什么', '因为', '单测', '只是', '程序运行', '一遍', '没有', '创建', '逻辑', '心里', '疑惑', '已经', '程序', '按照', '想法', '按照', '设计', '运行', '为什么', '要用', '单测', '重新', '走一遍', '后来', '一个', '事情', '代码', 'bug', '调试', '好久', '发现', '问题', 'obja', 'equals', 'objb', '因为', 'obja', 'objb', '一个', 'long', '一个', 'integer', '所以', '即使', '数值', '相同', '不会', '相等', '那一刻', '发现', '单测', '事情', '其实', '就是', '验证', '程序', '是否', '按照', '想法', '运行', '这才', '终极', '目的', '但是', '却是', '关键', '事情', '设计', '往往', '没有', '但是', '出来', '代码', '经常', '不是', '按照', '我们', '所想', '运行', '单测', '就是', '验证', '代码', '是不是', '按照', '我们', '想象', '运行', '单测', '这个', '技术', '意义', '所在', '本文', '地址', 'http', 'crazyant', 'net', '1890', 'html', '转载', '注明', '来源']","[[-0.21357774 -0.12858288  0.24907018  0.13127508  0.28179003 -0.39877929
  -0.12068473  0.50205103 -0.07304666 -0.13768428 -0.0376986  -0.39563734
  -0.18344569  0.55834967  0.16015768 -0.12291721 -0.13161857  0.01542112
  -0.05389068 -0.55519902 -0.0664499   0.26878886 -0.04287187 -0.23430021
   0.06668882 -0.48053685 -0.31153468  0.03359592 -0.26468457 -0.07699363
   0.17394182  0.00547311  0.04976211 -0.15346888 -0.20177053  0.33628096
  -0.23565041 -0.29921547  0.08809104 -0.74468779 -0.13728999 -0.62096988
  -0.08080238  0.01584058 -0.12169131 -0.25471581 -0.20981959  0.34660595
  -0.1694445   0.49727696  0.1500946  -0.28850231 -0.13101179 -0.16173797
  -0.0331126   0.41361169  0.14874389 -0.11214507  0.13561828 -0.17541699
   0.13022383  0.25255243  0.02294482  0.10949063 -0.40624658  0.05698751
   0.04128315 -0.03900139 -0.33532111  0.44777853  0.07722492 -0.16811239
   0.4008639  -0.33954638  0.60387576  0.286743    0.12652343 -0.1626806
  -0.35172207 -0.09809317 -0.00153583  0.06367833 -0.16087486  0.39737922
  -0.33963139  0.19483352 -0.29426258  0.467121    0.51404598  0.14815077
   0.22500481  0.11428035  0.35797994  0.18678915  0.21212706  0.36356292
   0.15687032 -0.31692179 -0.05316467 -0.1301539 ]]"
1895,Bash Shell怎样检查文件是否存在？,"在类Unix系统的Bash环境下，怎样检查文件是否存在呢？Shell中的test命令，可以用来检测文件的类型或者比较数值是否相等，该命令也能用来检查文件是否存在。可以用如下的命令来进行检查：test -e filename[ -e filename ] test -f filename[ -f filename ]下面的命令，则使用Shell的条件表达式，判断/etc/hosts文件是否存在：[ -f /etc/hosts ] && echo ""Found"" || echo ""Not found""该组合命令会输出以下内容：Found更常见的用法，则是将test命令放置在if..else..fi条件判断的条件表达式，然后在其中写上不同的分支逻辑#!/bin/bashfile=""/etc/hosts""if [ -f ""$file"" ]thenecho ""$file found.""elseecho ""$file not found.""fi检测文件属性的相关操作符如果文件存在，并且具有相应的属性，如下的操作符都会返回true：       -b FILE              FILE exists and is block special       -c FILE              FILE exists and is character special       -d FILE              FILE exists and is a directory       -e FILE              FILE exists       -f FILE              FILE exists and is a regular file       -g FILE              FILE exists and is set-group-ID       -G FILE              FILE exists and is owned by the effective group ID       -h FILE              FILE exists and is a symbolic link (same as -L)       -k FILE              FILE exists and has its sticky bit set       -L FILE              FILE exists and is a symbolic link (same as -h)       -O FILE              FILE exists and is owned by the effective user ID       -p FILE              FILE exists and is a named pipe       -r FILE              FILE exists and read permission is granted       -s FILE              FILE exists and has a size greater than zero       -S FILE              FILE exists and is a socket       -t FD  file descriptor FD is opened on a terminal       -u FILE              FILE exists and its set-user-ID bit is set       -w FILE              FILE exists and write permission is granted       -x FILE              FILE exists and execute (or search) permission is granted以上命令，从man test复制而来。使用上述符号的方法一模一样：if [ operator FileName ]then     echo ""FileName - Found, take some action here""else   echo ""FileName - Not found, take some action here""fi文章翻译自：http://www.cyberciti.biz/faq/unix-linux-test-existence-of-file-in-bash/本文地址：http://crazyant.net/1895.html，转载请注明来源。","['bash', 'shell', '怎样', '检查', '文件', '是否', '存在', 'unix', '系统', 'bash', '环境', '怎样', '检查', '文件', '是否', '存在', 'shell', 'test', '命令', '可以', '用来', '检测', '文件', '类型', '或者', '比较', '数值', '是否', '相等', '命令', '用来', '检查', '文件', '是否', '存在', '可以', '如下', '命令', '进行', '检查', 'test', 'filename', 'filename', 'test', 'filename', 'filename', '下面', '命令', '使用', 'shell', '条件', '表达式', '判断', 'etc', 'hosts', '文件', '是否', '存在', 'etc', 'hosts', '&&', 'echo', 'found', 'echo', 'not', 'found', '组合', '命令', '输出', '以下内容', 'found', '常见', '用法', 'test', '命令', '放置', 'if', '..', 'else', '..', 'fi', '条件', '判断', '条件', '表达式', '然后', '其中', '不同', '分支', '逻辑', 'bin', 'bashfile', 'etc', 'hosts', 'if', 'file', 'thenecho', 'file', 'found', 'elseecho', 'file', 'not', 'found', 'fi', '检测', '文件属性', '相关', '操作符', '如果', '文件', '存在', '并且', '具有', '相应', '属性', '如下', '操作符', '返回', 'true', 'file', 'file', 'exists', 'and', 'is', 'block', 'special', 'file', 'file', 'exists', 'and', 'is', 'character', 'special', 'file', 'file', 'exists', 'and', 'is', 'directory', 'file', 'file', 'exists', 'file', 'file', 'exists', 'and', 'is', 'regular', 'file', 'file', 'file', 'exists', 'and', 'is', 'set', 'group', 'id', 'file', 'file', 'exists', 'and', 'is', 'owned', 'by', 'the', 'effective', 'group', 'id', 'file', 'file', 'exists', 'and', 'is', 'symbolic', 'link', 'same', 'as', 'file', 'file', 'exists', 'and', 'has', 'its', 'sticky', 'bit', 'set', 'file', 'file', 'exists', 'and', 'is', 'symbolic', 'link', 'same', 'as', 'file', 'file', 'exists', 'and', 'is', 'owned', 'by', 'the', 'effective', 'user', 'id', 'file', 'file', 'exists', 'and', 'is', 'named', 'pipe', 'file', 'file', 'exists', 'and', 'read', 'permission', 'is', 'granted', 'file', 'file', 'exists', 'and', 'has', 'size', 'greater', 'than', 'zero', 'file', 'file', 'exists', 'and', 'is', 'socket', 'fd', 'file', 'descriptor', 'fd', 'is', 'opened', 'on', 'terminal', 'file', 'file', 'exists', 'and', 'its', 'set', 'user', 'id', 'bit', 'is', 'set', 'file', 'file', 'exists', 'and', 'write', 'permission', 'is', 'granted', 'file', 'file', 'exists', 'and', 'execute', 'or', 'search', 'permission', 'is', 'granted', '以上', '命令', 'man', 'test', '复制', '使用', '上述', '符号', '方法', '一模一样', 'if', 'operator', 'filename', 'then', 'echo', 'filename', 'found', 'take', 'some', 'action', 'here', 'else', 'echo', 'filename', 'not', 'found', 'take', 'some', 'action', 'here', 'fi', '文章', '翻译', 'http', 'www', 'cyberciti', 'biz', 'faq', 'unix', 'linux', 'test', 'existence', 'of', 'file', 'in', 'bash', '本文', '地址', 'http', 'crazyant', 'net', '1895', 'html', '转载', '注明', '来源']","[[-0.22963236 -0.11833962  0.30709638  0.12220864  0.28411838 -0.41783326
  -0.0746279   0.49777318 -0.12546894 -0.24382698 -0.01446788 -0.4414112
  -0.14352928  0.50218691  0.15976641 -0.11526395 -0.10308046  0.00149582
  -0.02455488 -0.63771312 -0.14655083  0.31104509 -0.10793229 -0.36063464
   0.03051658 -0.43991309 -0.37278555  0.00767967 -0.31525426 -0.11735102
   0.08158895 -0.01124879  0.02127369 -0.12518292 -0.26702108  0.34589414
  -0.30307115 -0.38151353  0.04338009 -0.74313321 -0.10942068 -0.66402541
  -0.10104257  0.06820016 -0.09748695 -0.34908087 -0.1910691   0.2644097
  -0.18900553  0.59560803  0.10523069 -0.3013041  -0.14945173 -0.11339854
  -0.13063514  0.39962168  0.05485884 -0.15336876  0.16305256 -0.2380312
   0.17532297  0.19910266  0.0034417   0.09016862 -0.3970473   0.12281832
   0.05456244 -0.03113254 -0.39286911  0.46051345  0.0801202  -0.09315047
   0.40472426 -0.34039018  0.59489082  0.42008426  0.07720227 -0.2165142
  -0.41733865 -0.02363863  0.0957805   0.10410476 -0.19843319  0.47252507
  -0.30737108  0.21286133 -0.302496    0.53997949  0.5557847   0.20863396
   0.17355663  0.11406991  0.38300609  0.20764105  0.228462    0.36398567
   0.16142305 -0.36400494 -0.04830105 -0.19158827]]"
1898,使用PHPUnit编写PHP单元测试的方法,"局限于Java的testng在eclipse中非常强大的手动单测方法这个框框，我试图一直给eclipse安装PHP的测试框架，却发现一直出问题，最后才发觉，PHPUnit的单测思想是直接的脚本测试PHP文件，避免手工的操作。测试本来就应该自动化，不是吗？所以我接受了PHPUnit的命令行测试方法，而不是在eclipse中手动的右键运行测试。PHPUnit官网：https://phpunit.de/使用方法在文档中很明确，加以补充：1、将PHP的安装目录，加入到Windows的PATH环境变量中2、任意的建立一个PHP的二进制文件可执行目录，比如c:\bin3、将c:\bin加入到Windows的PATH环境变量中4、下载 https://phar.phpunit.de/phpunit.phar 并将文件保存到 C:\bin\phpunit.phar5、打开命令行（例如，按 Windows+R » 输入 cmd » ENTER)6、建立外包覆批处理脚本（最后得到 C:\bin\phpunit.cmd）：C:\Users\username> cd C:\binC:\bin> echo @php ""%~dp0phpunit.phar"" %* > phpunit.cmdC:\bin> exit7、新开一个命令行窗口，确认一下可以在任意路径下执行 PHPUnit：C:\Users\username> phpunit --versionPHPUnit x.y.z by Sebastian Bergmann and contributors.如果在任意命令行下，执行phpunit不会报错，就说明安装成功了。做一下测试，编写一个文件，注意下面的namespace和引入PHPUnit的方法：<?phpnamespace mytest;/** * test PHPUnit *  * @author www.crazyant.net *         */class MyTestClass extends \PHPUnit_Framework_TestCase {    /**     * Testing the answer to “do you love unit tests?”     */    public function testDoYouLoveUnitTests() {        $love = true;        $this->assertTrue($love);    }}  这个文件放置在C:\tmp\test_phpunit.php然后打开命令行，执行以下命令，即可完成测试：C:\tmp>cd c:\tmpC:\tmp>phpunit test_phpunit.phpPHPUnit 5.1.3 by Sebastian Bergmann and contributors../ 1 (100%)Time: 106 ms, Memory: 9.50MbOK (1 test, 1 assertion)C:\tmp>既然命令行可以执行测试，那么当然很方便的将测试命令都写到一个自动化的.bat或者.bash文件中，每次开发完成，执行全量的自动测试即可。PHPUnit官网地址：https://phpunit.de/documentation.html 本文地址：http://crazyant.net/1898.html，转载请注明来源。","['使用', 'phpunit', '编写', 'php', '单元测试', '方法', '局限于', 'java', 'testng', 'eclipse', '非常', '强大', '手动', '单测', '方法', '这个', '框框', '试图', '一直', 'eclipse', '安装', 'php', '测试', '框架', '发现', '一直', '问题', '最后', '发觉', 'phpunit', '单测', '思想', '直接', '脚本', '测试', 'php', '文件', '避免', '手工', '操作', '测试', '本来', '应该', '自动化', '不是', '所以', '接受', 'phpunit', '命令行', '测试方法', '不是', 'eclipse', '手动', '右键', '运行', '测试', 'phpunit', '官网', 'https', 'phpunit', 'de', '使用', '方法', '文档', '明确', '加以', '补充', 'php', '安装', '目录', '加入', 'windows', 'path', '环境变量', '任意', '建立', '一个', 'php', '二进制', '文件', '执行', '目录', '比如', 'bin3', 'bin', '加入', 'windows', 'path', '环境变量', '下载', 'https', 'phar', 'phpunit', 'de', 'phpunit', 'phar', '文件', '保存', 'bin', 'phpunit', 'phar5', '打开', '命令行', '例如', 'windows', '输入', 'cmd', 'enter', '建立', '包覆', '批处理', '脚本', '最后', '得到', 'bin', 'phpunit', 'cmd', 'users', 'username', 'cd', 'binc', 'bin', 'echo', 'php', 'dp0phpunit', 'phar', 'phpunit', 'cmdc', 'bin', 'exit7', '新开', '一个', '命令行', '窗口', '确认', '一下', '可以', '任意', '路径', '执行', 'phpunit', 'users', 'username', 'phpunit', '--', 'versionphpunit', 'by', 'sebastian', 'bergmann', 'and', 'contributors', '如果', '任意', '命令行', '执行', 'phpunit', '不会', '报错', '说明', '安装', '成功', '一下', '测试', '编写', '一个', '文件', '注意', '下面', 'namespace', '引入', 'phpunit', '方法', 'phpnamespace', 'mytest', 'test', 'phpunit', 'author', 'www', 'crazyant', 'net', 'class', 'mytestclass', 'extends', 'phpunit', 'framework', 'testcase', 'testing', 'the', 'answer', 'to', 'do', 'you', 'love', 'unit', 'tests', 'public', 'function', 'testdoyouloveunittests', 'love', 'true', 'this', 'asserttrue', 'love', '这个', '文件', '放置', 'tmp', 'test', 'phpunit', 'php', '然后', '打开', '命令行', '执行', '以下', '命令', '即可', '完成', '测试', 'tmp', 'cd', 'tmpc', 'tmp', 'phpunit', 'test', 'phpunit', 'phpphpunit', '5.1', 'by', 'sebastian', 'bergmann', 'and', 'contributors', '..', '100%', 'time', '106', 'ms', 'memory', '9.50', 'mbok', 'test', 'assertion', 'tmp', '既然', '命令行', '可以', '执行', '测试', '那么', '当然', '方便', '测试', '命令', '一个', '自动化', 'bat', '或者', 'bash', '文件', '每次', '开发', '完成', '执行', '全量', '自动测试', '即可', 'phpunit', '官网', '地址', 'https', 'phpunit', 'de', 'documentation', 'html', '本文', '地址', 'http', 'crazyant', 'net', '1898', 'html', '转载', '注明', '来源']","[[-0.24781382 -0.12728053  0.23061278  0.20636377  0.23274881 -0.35943283
  -0.13532987  0.47769748 -0.03402301 -0.0649042  -0.06970046 -0.3585673
  -0.14200916  0.54144233  0.12114937 -0.12133953 -0.13297119  0.00395132
  -0.04821718 -0.42651911  0.00848004  0.25734755 -0.04932275 -0.14578619
   0.0623693  -0.48100602 -0.30101213  0.06924429 -0.20449982 -0.07443242
   0.19395134  0.06725887 -0.00410431 -0.12187864 -0.15889398  0.34585334
  -0.15577754 -0.23400616  0.0868157  -0.68782479 -0.11772427 -0.53813572
  -0.03269318 -0.05109412 -0.136768   -0.19614921 -0.28667049  0.42432077
  -0.09727988  0.38083201  0.1378583  -0.27693429 -0.05491352 -0.22759649
   0.01903354  0.39372777  0.18908229 -0.07775874  0.12152172 -0.11261697
   0.09459133  0.24314779  0.01911955  0.073123   -0.35451983  0.02537143
   0.00964534  0.01538192 -0.22695543  0.41957134  0.09808286 -0.19288678
   0.39751871 -0.31499874  0.55287637  0.23905224  0.22780963 -0.17495928
  -0.24023388 -0.19661734 -0.07623019  0.02188813 -0.09825549  0.36578444
  -0.36294458  0.18094463 -0.27884466  0.45060691  0.48989567  0.15230207
   0.2384096   0.11817204  0.32790379  0.17542702  0.19023865  0.4039177
   0.08720829 -0.25758965  0.06908385 -0.10328221]]"
1901,MySQL导入导出数据时遇到Tab符号和换行符号怎么办？,"在做ETL（下载、转换、导入）开发的时候，经常会遇到从MySQL中导出数据，经过计算后再导入到MySQL的场景。那么有一个很难绕过的问题，如果源MySQL的字段中，包含了\t、\n特殊字符，该怎么办？因为导出文件时，默认是按照\t分割字段、\n分割行，现在字段中出现了\t和\n，这不是乱了吗？同时导入文件时，load data可以指定fields和lines的分隔符，默认情况都是\t和\n，可是现在字段中有\t和\n，这不乱了吗？最直观想到的办法，是导出的时候，在select语句中，使用mysql的replace函数，将\t和\n替换成普通字符串，使用程序处理，load到库里之后，在使用replace替换。但是如果数据量很大的话，替换\t和\n很不现实。其实，这个问题真的是个问题吗？答案是：根本不用考虑\t和\n1）MySQL的select导出时，会自动把\t和\n转义成\\t和\\n；2）在shell、Python的代码中，按行读取，程序遇到\\n，会自动略过的；3）在shell、Python的代码中，按\t分割，程序遇到\\t，会自动略过的；4）load data导入数据的时候，遇到了\\t和\\n，也当成普通字符处理；做一个测试就知道了：1、准备好数据库、数据表、测试数据CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET utf8 */use test;set names utf8;CREATE TABLE `table_from` (  `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',  `name` VARCHAR(500) DEFAULT NULL COMMENT '名称',  `remark` VARCHAR(500) DEFAULT NULL COMMENT '备注',  KEY `id` (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT '导入测试的来源表';CREATE TABLE `table_to` (  `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',  `name` VARCHAR(500) DEFAULT NULL COMMENT '名称',  `remark` VARCHAR(500) DEFAULT NULL COMMENT '备注',  KEY `id` (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT '导入测试的目的表';truncate table table_from;truncate table table_to;insert into table_from values(1,'name1','我们都是屌丝程序员');insert into table_from values(2,'name2','我们都是屌丝程序员\n');insert into table_from values(3,'name3','我们都是\t屌丝程序员');insert into table_from values(4,'name4','我们都是\t屌丝程序员\n');2、执行导出数据：mysql -h127.0.0.1 -uroot -p123456 -P3306 -e ""use test; set names utf8; select * from table_from;"" > /tmp/dump_table_from.txt查看一下/tmp/dump_table_from.txtmore /tmp/dump_table_from.txt id      name    remark1       name1   我们都是屌丝程序员2       name2   我们都是屌丝程序员\n3       name3   我们都是\t屌丝程序员4       name4   我们都是\t屌丝程序员\n发现导出的数据中，出现了\t和\n，但是这俩字符是直接显示出来了，而不是变成了真正的TAB和换行。我们用vim打开：vim /tmp/dump_table_from.txt输入\t搜索，发现只匹配到了隐藏的真正的TAB；输入\\t搜索，才搜到了直接显示出来的\t；搜索\n和\\n，效果相同；这就说明，导出的文件中，字段中如果包含了\t和\n，会自动变成\\t和\\n的；2、使用程序处理使用Python写一个测试程序，看能不能正常按行读取和按tab分割：打开Python命令行：>>> for row in open(""/tmp/dump_table_from.txt""):...     print ""#""+row+""#""                       ...     print ""#"".join(str(row).split(""\t""))      ... #id     name    remark#id#name#remark#1      name1   我们都是屌丝程序员#1#name1#我们都是屌丝程序员#2      name2   我们都是屌丝程序员\n#2#name2#我们都是屌丝程序员\n#3      name3   我们都是\t屌丝程序员#3#name3#我们都是\t屌丝程序员#4      name4   我们都是\t屌丝程序员\n#4#name4#我们都是\t屌丝程序员\n>>>可以看到，程序会正常的按\n分割行，按\t分割字段，并没有按照字段内部出现的\t和\n分割，因为他们都是\\t和\\n。3、直接将文件导入到一个新表执行导入：mysql -h127.0.0.1 -uroot -p123456 -P3306 -e ""use test; set names utf8; load data local infile '/tmp/dump_table_from.txt' into table table_to fields terminated by'\t' lines terminated by'\n' ignore 0 lines (id,name,remark)"";执行命令没有异常，打开目标表，看下结果，发现跟源表一模一样；最终结论：1、使用select导出MySQL数据的时候，字段里的\t和\n，会自动的替换成\\t和\\n；2、在使用shell、Python读取文件的时候，如果遇到了\\n，不会作为行分隔符；使用split('\t')函数分割的时候，如果遇到了\\t，会略过；3、使用load data向MySQL导入数据的时候，里面的\\t和\\n，不会作为字段分隔符和行分隔符； 本文地址：http://crazyant.net/1901.html，转载请注明来源。","['mysql', '导入', '导出', '数据', '遇到', 'tab', '符号', '换行符', '怎么办', 'etl', '下载', '转换', '导入', '开发', '时候', '经常', '遇到', 'mysql', '导出', '数据', '经过', '计算', '导入到', 'mysql', '场景', '那么', '一个', '很难', '绕过', '问题', '如果', 'mysql', '包含', '特殊字符', '怎么办', '因为', '导出', '文件', '默认', '按照', '分割', '分割', '现在', '字段', '出现', '不是', '同时', '导入', '文件', 'load', 'data', '可以', '指定', 'fields', 'lines', '分隔符', '默认', '情况', '可是', '现在', '字段', '这不乱', '直观', '想到', '办法', '导出', '时候', 'select', '语句', '使用', 'mysql', 'replace', '函数', '替换成', '普通', '字符串', '使用', '程序处理', 'load', '库里', '之后', '使用', 'replace', '替换', '但是', '如果', '数据量', '很大', '的话', '替换', '现实', '其实', '这个', '问题', '真的', '问题', '答案', '根本', '不用', '考虑', 'n1', 'mysql', 'select', '导出', '自动', '转义', 'shell', 'python', '代码', '按行', '读取', '程序', '遇到', '自动', '略过', 'shell', 'python', '代码', '分割', '程序', '遇到', '自动', '略过', 'load', 'data', '导入', '数据', '时候', '遇到', '当成', '普通', '字符', '处理', '一个', '测试', '知道', '准备', '数据库', '数据表', '测试数据', 'create', 'database', 'test', '40100', 'default', 'character', 'set', 'utf8', 'use', 'test', 'set', 'names', 'utf8', 'create', 'table', 'table', 'from', 'id', 'int', '11', 'not', 'null', 'auto', 'increment', 'comment', 'id', 'name', 'varchar', '500', 'default', 'null', 'comment', '名称', 'remark', 'varchar', '500', 'default', 'null', 'comment', '备注', 'key', 'id', 'id', 'engine', 'innodb', 'default', 'charset', 'utf8', 'comment', '导入', '测试', '来源', 'create', 'table', 'table', 'to', 'id', 'int', '11', 'not', 'null', 'auto', 'increment', 'comment', 'id', 'name', 'varchar', '500', 'default', 'null', 'comment', '名称', 'remark', 'varchar', '500', 'default', 'null', 'comment', '备注', 'key', 'id', 'id', 'engine', 'innodb', 'default', 'charset', 'utf8', 'comment', '导入', '测试', '目的', 'truncate', 'table', 'table', 'from', 'truncate', 'table', 'table', 'to', 'insert', 'into', 'table', 'from', 'values', 'name1', '我们', '屌丝', '程序员', 'insert', 'into', 'table', 'from', 'values', 'name2', '我们', '屌丝', '程序员', 'insert', 'into', 'table', 'from', 'values', 'name3', '我们', '屌丝', '程序员', 'insert', 'into', 'table', 'from', 'values', 'name4', '我们', '屌丝', '程序员', '执行', '导出', '数据', 'mysql', 'h127.0', '0.1', 'uroot', 'p123456', 'p3306', 'use', 'test', 'set', 'names', 'utf8', 'select', 'from', 'table', 'from', 'tmp', 'dump', 'table', 'from', 'txt', '查看', '一下', 'tmp', 'dump', 'table', 'from', 'txtmore', 'tmp', 'dump', 'table', 'from', 'txt', 'id', 'name', 'remark1', 'name1', '我们', '屌丝', '程序员', 'name2', '我们', '屌丝', '程序员', 'n3', 'name3', '我们', '屌丝', '程序员', 'name4', '我们', '屌丝', '程序员', '发现', '导出', '数据', '出现', '但是', '字符', '直接', '显示', '出来', '不是', '变成', '真正', 'tab', '换行', '我们', 'vim', '打开', 'vim', 'tmp', 'dump', 'table', 'from', 'txt', '输入', '搜索', '发现', '匹配', '隐藏', '真正', 'tab', '输入', '搜索', '搜到', '直接', '显示', '出来', '搜索', '效果', '相同', '说明', '导出', '文件', '字段', '如果', '包含', '自动', '变成', '使用', '程序处理', '使用', 'python', '一个', '测试程序', '看能', '不能', '正常', '按行', '读取', 'tab', '分割', '打开', 'python', '命令行', 'for', 'row', 'in', 'open', 'tmp', 'dump', 'table', 'from', 'txt', '...', 'print', 'row', '...', 'print', 'join', 'str', 'row', 'split', '...', 'id', 'name', 'remark', 'id', 'name', 'remark', 'name1', '我们', '屌丝', '程序员', 'name1', '我们', '屌丝', '程序员', 'name2', '我们', '屌丝', '程序员', 'name2', '我们', '屌丝', '程序员', 'name3', '我们', '屌丝', '程序员', 'name3', '我们', '屌丝', '程序员', 'name4', '我们', '屌丝', '程序员', 'name4', '我们', '屌丝', '程序员', '可以', '看到', '程序', '正常', '分割', '分割', '没有', '按照', '内部', '出现', '分割', '因为', '他们', '直接', '文件', '导入到', '一个', '新表', '执行', '导入', 'mysql', 'h127.0', '0.1', 'uroot', 'p123456', 'p3306', 'use', 'test', 'set', 'names', 'utf8', 'load', 'data', 'local', 'infile', 'tmp', 'dump', 'table', 'from', 'txt', 'into', 'table', 'table', 'to', 'fields', 'terminated', 'by', 'lines', 'terminated', 'by', 'ignore', 'lines', 'id', 'name', 'remark', '执行命令', '没有', '异常', '打开', '目标', '结果', '发现', '跟源表', '一模一样', '最终', '结论', '使用', 'select', '导出', 'mysql', '数据', '时候', '字段', '自动', '替换成', '使用', 'shell', 'python', '读取', '文件', '时候', '如果', '遇到', '不会', '作为', '分隔符', '使用', 'split', '函数', '分割', '时候', '如果', '遇到', '略过', '使用', 'load', 'data', 'mysql', '导入', '数据', '时候', '里面', '不会', '作为', '分隔符', '和行', '分隔符', '本文', '地址', 'http', 'crazyant', 'net', '1901', 'html', '转载', '注明', '来源']","[[-0.22943811 -0.1198631   0.23497097  0.1274889   0.30575634 -0.36136811
  -0.15450991  0.4978124  -0.0410674  -0.09174232 -0.04747009 -0.35549978
  -0.17154192  0.56641715  0.15834471 -0.09994886 -0.12777875 -0.00093548
  -0.08568691 -0.51743695 -0.02215285  0.248128   -0.03660647 -0.17881638
   0.08813067 -0.51113164 -0.3093162   0.06051795 -0.23784964 -0.07352213
   0.1933064   0.02126298 -0.01294902 -0.13563574 -0.14882433  0.33618032
  -0.18493715 -0.25622681  0.09272809 -0.75359645 -0.15383997 -0.60870986
  -0.06088701 -0.02222329 -0.14431557 -0.20283601 -0.22839214  0.39834674
  -0.19030715  0.45758686  0.17580256 -0.26909786 -0.13132294 -0.18230849
   0.0075171   0.38745349  0.18671681 -0.08030999  0.10523194 -0.13236921
   0.08076494  0.25352203  0.01754243  0.09459198 -0.37816145  0.0240762
   0.06281496 -0.033757   -0.29525541  0.43949895  0.13188467 -0.19957251
   0.38341079 -0.32983006  0.56750564  0.24329361  0.15372782 -0.1522605
  -0.32462538 -0.14087663 -0.01515559  0.04463172 -0.10064809  0.36716811
  -0.34815858  0.21737317 -0.28453253  0.43594006  0.4896998   0.14985214
   0.27672868  0.10793114  0.37139797  0.18984793  0.19497161  0.3520696
   0.11560936 -0.32474712 -0.04429062 -0.11689758]]"
1922,数据处理中提升性能的方法-引入并发但是避免同步,"背景只要存在数据库，就会有后台批量处理数据的需求，比如数据表备份、定期清理、数据替换、数据迁移，对于批量处理来说，往往会涉及大量的查询、过滤、归类、聚合计算，在批量脚本中直接查询数据库往往性能太低，甚至会因为一个大型的SQL导致数据库锁表出现线上事故，因此一般采用先导出到文件，在文件上计算然后再导入，比如：1、使用mysql -e ""select * from table"" > output.txt的方式，执行SQL，将结果导出到文件中；2、针对文件，使用各种方式进行聚合、过滤、替换等计算，最后产出成需要使用的格式；3、发布产出的文件，或者使用load data命令导入到数据库；由于只是一次性的批量查询数据库导出到文件，然后针对文件进行计算，而不是每次都查询数据库，大量节省了网络的IO耗费，从而提升处理的速度。然而得到了导出的文件之后，如果文件过大，或者计算逻辑复杂比如大量的调用了耗费CPU的正则匹配、聚合计算，那么单线程的处理会耗费大量的时间，这时候就可以引入并发处理，使得机器的CPU、内存、IO、网络等资源全部充分利用起来，大幅度降低处理时间。引入多线程，拆分输入文件为多个，每个小文件启动一个处理线程HADOOP的MAP-REDUCE的做法，是先将文件split成小分片文件，然后针对每个分片做计算，最后将每个分片的结果聚合在一起，然而由于HADOOP的调度、集群稳定性等各种原因，对于MB大小级别的文件处理，会发现速度非常慢，有时候甚至比单机单线程处理速度还慢，将单机单线程改成多线程，往往会发现令人惊讶的效果提升。直观的做法，是使用主线程读取输入的单个大文件，然后将读取的结果分配给子线程处理，然后主线程做整合，这种方式因为多线程共用了单个文件的IO，需要加入对文件的同步机制，最后会发现性能瓶颈在这单个文件的读取同步之上。可以将大文件分片成小文件，然后每个文件分配给单个线程单独处理，避免线程间的资源同步，每个线程会享用单独的CPU核、内存单元、文件句柄，处理速度能达到最快。使用这种方式，可以用以下的步骤进行：1、使用SHELL，将输入文件拆分成预定线程数目的份数，存放到一个目录中；2、以输入文件的目录路径作为参数，编程语言JAVA/PYTHON读取该目录的所有文件，对于每个文件启动一个处理线程，进行处理；3、SHELL将输出目录的所有文件，使用cat file* > output_file的方式，得到最终的计算结果## 将输入文件拆分成多个小文件，启动多线程进行处理，输出结果文件#function run_multi_task(){# 开启多个异步线程SPLITS_COUNT=20# 输入文件总数source_file_lines_count=`cat ${input_file} | wc -l`# 计算出拆分的文件个数split_file_lines_count=$(( $source_file_lines_count / $SPLITS_COUNT ))# 进行文件拆分split -l $split_file_lines_count -a 3 -d ${input_file} ${input_dir}/inputFile_# 执行JAVA程序$JAVA_CMD -classpath $jar_path ""net.crazyant.BackTaskMain"" ""${input_dir}"" ""${output_dir}"" ""${output_err_dir}""# 合并文件cat ${output_dir}/* > ${output_file}}run_multi_task这里注意，拆分文件的时候，不能使用split按照大小进行拆分，因为会把输入文件中的行截断；对应的JAVA程序，则是通过读取文件夹中文件列表的方法，每个文件单独启动一个线程：public class BackTaskMain {    public static void main(String[] args) {        String inputDataDir = args[1];        String outputDataDir = args[2];        String errDataDir = args[3];                File inputDir = new File(inputDataDir);        File[] inputFiles = inputDir.listFiles();                // 记录开启的线程        List<Thread> threads = new ArrayList<Thread>();        for (File inputFile : inputFiles) {            if (inputFile.getName().equals(""."") || inputFile.getName().equals("".."")) {                continue;            }                        // 针对每个inputFile，生成对应的outputFile和errFile            String outputSrcLiceFpath = outputDataDir + ""/"" + inputFile.getName() + "".out"";            String errorOutputFpath = errDataDir + ""/"" + inputFile.getName() + "".err"";                        // 创建Runnable            BackRzInterface backRzInterface = new BackRzInterface();            backRzInterface.setInputFilePath(inputFile.getAbsolutePath());            backRzInterface.setOutputFilePath(outputSrcLiceFpath);            backRzInterface.setErrorOutputFpath(errorOutputFpath);                        // 创建Thread，启动线程            Thread singleRunThread = new Thread(backRzInterface);            threads.add(singleRunThread);            singleRunThread.start();        }                for (Thread thread : threads) {            try {                // 使用thread.join()，等待所有的线程执行完毕                thread.join();                System.out.println(thread.getName() + "" has over"");            } catch (InterruptedException e) {                e.printStackTrace();            }        }        System.out.println(""proccess all over"");    }}通过这种方式，将大文件拆分成小文件，启动多个线程，每个线程处理一个小文件，最终将每个小文件的结果聚合，就得到了最终产出，性能上却大幅提升。若有依赖的资源，可以按线程先复制、拆分、克隆，防止依赖的资源成为性能瓶颈在上面的代码中，BackRzInterface是每个线程启动时要使用的Runnable对象，可以看到用的是每次new的方式创建：// 创建RunnableBackRzInterface backRzInterface = new BackRzInterface();这样每个处理线程依赖的BackRzInterface都是独立的，对这个Runnable代码的使用不会存在同步问题。如果多线程处理中需要使用外部资源，最好想办法使得每个线程单独使用自己独占的资源，相互之间若不会存在冲突，可以实现最大化并发处理。其他一些例子，比如：多线程用到了字典文件，那么方法是首先将字典文件复制多份，每个线程使用自己独占的字典，避免并发同步访问字典；多线程若需要统一ID发号，可以提前计算出每个输入文件的行数，然后依次生成第一个线程需要的ID范围、第二个线程需要的ID范围，这些不同的ID范围也可以分别生成不同的文件，这样每个线程会使用各自独立的ID资源，避免了多个线程单时刻访问单个ID发号服务，使得发号成为性能瓶颈的可能；多线程如果依赖相同的Service，如果可以每次new对象就每次new，如果Bean都是在Spring中管理，则将Service加上@Scope(""prototype"")，或者将对象每次clone一下得到一个新对象，保证最终每个线程使用自己独占的对象。尽量使用函数式编程的思想，每个函数都不要产生副作用，不要修改入参，结果只能通过return返回，避免增加代码同步冲突的可能；通过以上这些类似的方法，每次将可能需要同步访问的共享资源，通过复制、分片等手段得到不同份，每个线程单独访问自己那一份，避免同步访问，最终实现性能最优。避免同步的终极方法：使用多进程进行实现资源隔离如果将文件拆分成了多份，依赖的ID、词典等资源也相应提供了多份，但是发现代码中存在无法解决的代码级别同步，该怎么办呢？相对于想尽办法解决代码中的同步问题来说，多线程和多进程之间的性能差别微乎其微，我们都知道线程会使用进程的资源，所以导致了线程之间存在竞争进程资源，但是对于进程来说，CPU、内存等硬件资源是完全隔离的，这时候将程序运行在多进程而不是多线程，反而能更好的提升性能。对于一些支持多线程不好的语言，比如PHP，直接用这种多进程计算的方法，速度并不比支持多线程的JAVA、PYTHON语言差：# 要拆分的文件数，也就是要启动的多进程数SPLITS_COUNT=20input_splits_dir=""${input_dir}_splits""output_splits_dir=""${output_dir}_splits""# 输入文件行数source_file_lines_count=`cat ${input_file} | wc -l`# 每个文件拆分的行数=总行数除以要拆分的文件个数（也就是对应进程的个数）split_file_lines_count=$(( $source_file_lines_count / ${SPLITS_COUNT} ))# 执行拆分，注意这里使用-l进行行级别拆分更好split -l $split_file_lines_count -a 3 -d ${input_file} ${input_splits_dir}/inputfile_process_idx=1for fname in $(ls ${input_splits_dir}); doinput_fpath=${input_splits_dir}/$fnameouput_fpath=${output_splits_dir}/$fname# 后台执行所有进程php ""/php/main.php"" ""${input_fpath}"" ""${ouput_fpath}"" &(( process_idx++ ))done# 等待所有后台进程执行结束wait# 合并文件cat $output_splits_dir/* > ${output_file}上述代码中，使用shell的&符号，可以在后台同时启动多个进程，使用wait语法，可以实现多线程的Thread.join特性，等待所有的进程执行结束。总结对于输入文件的大小、计算的复杂度处于单机和集群计算之间的数据处理，使用并发处理最为合适，但是并发的同步处理却会降低多线程的性能，这时可以借助于输入文件复制拆分、依赖资源复制拆分切片等方法，实现每个线程处理自己的独占资源，从而最大化提升计算速度。而对于一些无法避免的代码同步冲突逻辑，可以退化为多进程处理数据，借助于SHELL的后台进程支持，实现进程级别的资源独占，最终大幅提升处理性能。 ","['数据处理', '提升', '性能', '方法', '引入', '并发', '但是', '避免', '同步', '背景', '只要', '存在', '数据库', '后台', '批量', '处理', '数据', '需求', '比如', '数据表', '备份', '定期', '清理', '数据', '替换', '数据', '迁移', '对于', '批量', '处理', '来说', '往往', '涉及', '大量', '查询', '过滤', '归类', '聚合', '计算', '批量', '脚本', '直接', '查询数据库', '往往', '性能', '太低', '甚至', '因为', '一个', '大型', 'sql', '导致', '数据库', '锁表', '出现', '线上', '事故', '因此', '一般', '采用', '先导', '文件', '文件', '计算', '然后', '导入', '比如', '使用', 'mysql', 'select', 'from', 'table', 'output', 'txt', '方式', '执行', 'sql', '结果', '导出', '文件', '针对', '文件', '使用', '各种', '方式', '进行', '聚合', '过滤', '替换', '计算', '最后', '产出', '需要', '使用', '格式', '发布', '产出', '文件', '或者', '使用', 'load', 'data', '命令', '导入到', '数据库', '由于', '只是', '一次性', '批量', '查询数据库', '导出', '文件', '然后', '针对', '文件', '进行', '计算', '不是', '每次', '查询数据库', '大量', '节省', '网络', 'io', '耗费', '从而', '提升', '处理', '速度', '然而', '得到', '导出', '文件', '之后', '如果', '文件', '过大', '或者', '计算', '逻辑', '复杂', '比如', '大量', '调用', '耗费', 'cpu', '正则', '匹配', '聚合', '计算', '那么', '单线程', '处理', '耗费', '大量', '时间', '这时候', '可以', '引入', '并发', '处理', '使得', '机器', 'cpu', '内存', 'io', '网络', '资源', '全部', '充分利用', '起来', '大幅度降低', '处理', '时间', '引入', '多线程', '拆分', '输入', '文件', '多个', '每个', '文件', '启动', '一个', '处理', '线程', 'hadoop', 'map', 'reduce', '做法', '文件', 'split', '成小', '分片', '文件', '然后', '针对', '每个', '分片', '计算', '最后', '每个', '分片', '结果', '聚合', '一起', '然而', '由于', 'hadoop', '调度', '集群', '稳定性', '各种', '原因', '对于', 'mb', '大小', '级别', '文件', '处理', '发现', '速度', '非常', '有时候', '甚至', '单机', '单线程', '处理速度', '还慢', '单机', '单线程', '改成', '多线程', '往往', '发现', '令人', '惊讶', '效果', '提升', '直观', '做法', '使用', '主线', '读取', '输入', '单个', '文件', '然后', '读取', '结果', '分配', '给子', '线程', '处理', '然后', '主线', '程做', '整合', '这种', '方式', '因为', '多线程', '共用', '单个', '文件', 'io', '需要', '加入', '文件', '同步', '机制', '最后', '发现', '性能', '瓶颈', '单个', '文件', '读取', '同步', '之上', '可以', '文件', '分片', '成小', '文件', '然后', '每个', '文件', '分配', '单个', '线程', '单独', '处理', '避免', '线程', '资源', '同步', '每个', '线程', '享用', '单独', 'cpu', '内存', '单元', '文件', '句柄', '处理速度', '达到', '最快', '使用', '这种', '方式', '可以', '以下', '步骤', '进行', '使用', 'shell', '输入', '文件', '分成', '预定', '线程', '数目', '份数', '存放', '一个', '目录', '输入', '文件', '目录', '路径', '作为', '参数', '编程语言', 'java', 'python', '读取', '目录', '所有', '文件', '对于', '每个', '文件', '启动', '一个', '处理', '线程', '进行', '处理', 'shell', '输出', '目录', '所有', '文件', '使用', 'cat', 'file', 'output', 'file', '方式', '得到', '最终', '计算结果', '##', '输入', '文件', '分成', '多个', '文件', '启动', '多线程', '进行', '处理', '输出', '结果', '文件', 'function', 'run', 'multi', 'task', '开启', '多个', '异步', '线程', 'splits', 'count', '20', '输入', '文件', '总数', 'source', 'file', 'lines', 'count', 'cat', 'input', 'file', 'wc', '计算', '拆分', '文件', '个数', 'split', 'file', 'lines', 'count', 'source', 'file', 'lines', 'count', 'splits', 'count', '进行', '文件', '拆分', 'split', 'split', 'file', 'lines', 'count', 'input', 'file', 'input', 'dir', 'inputfile', '_#', '执行', 'java', '程序', 'java', 'cmd', 'classpath', 'jar', 'path', 'net', 'crazyant', 'backtaskmain', 'input', 'dir', 'output', 'dir', 'output', 'err', 'dir', '合并', '文件', 'cat', 'output', 'dir', 'output', 'file', 'run', 'multi', 'task', '这里', '注意', '拆分', '文件', '时候', '不能', '使用', 'split', '按照', '大小', '进行', '拆分', '因为', '输入', '文件', '截断', '对应', 'java', '程序', '通过', '读取', '文件夹', '文件', '列表', '方法', '每个', '文件', '单独', '启动', '一个', '线程', 'public', 'class', 'backtaskmain', 'public', 'static', 'void', 'main', 'string', 'args', 'string', 'inputdatadir', 'args', 'string', 'outputdatadir', 'args', 'string', 'errdatadir', 'args', 'file', 'inputdir', 'new', 'file', 'inputdatadir', 'file', 'inputfiles', 'inputdir', 'listfiles', '记录', '开启', '线程', 'list', 'thread', 'threads', 'new', 'arraylist', 'thread', 'for', 'file', 'inputfile', 'inputfiles', 'if', 'inputfile', 'getname', 'equals', 'inputfile', 'getname', 'equals', '..', 'continue', '针对', '每个', 'inputfile', '生成', '对应', 'outputfile', 'errfile', 'string', 'outputsrclicefpath', 'outputdatadir', 'inputfile', 'getname', 'out', 'string', 'erroroutputfpath', 'errdatadir', 'inputfile', 'getname', 'err', '创建', 'runnable', 'backrzinterface', 'backrzinterface', 'new', 'backrzinterface', 'backrzinterface', 'setinputfilepath', 'inputfile', 'getabsolutepath', 'backrzinterface', 'setoutputfilepath', 'outputsrclicefpath', 'backrzinterface', 'seterroroutputfpath', 'erroroutputfpath', '创建', 'thread', '启动', '线程', 'thread', 'singlerunthread', 'new', 'thread', 'backrzinterface', 'threads', 'add', 'singlerunthread', 'singlerunthread', 'start', 'for', 'thread', 'thread', 'threads', 'try', '使用', 'thread', 'join', '等待', '所有', '线程', '执行', '完毕', 'thread', 'join', 'system', 'out', 'println', 'thread', 'getname', 'has', 'over', 'catch', 'interruptedexception', 'printstacktrace', 'system', 'out', 'println', 'proccess', 'all', 'over', '通过', '这种', '方式', '文件', '分成', '文件', '启动', '多个', '线程', '每个', '线程', '处理', '一个', '文件', '最终', '每个', '文件', '结果', '聚合', '得到', '最终', '产出', '性能', '大幅', '提升', '若有', '依赖', '资源', '可以', '线程', '复制', '拆分', '克隆', '防止', '依赖', '资源', '成为', '性能', '瓶颈', '上面', '代码', 'backrzinterface', '每个', '线程', '启动', '时要', '使用', 'runnable', '对象', '可以', '看到', '每次', 'new', '方式', '创建', '创建', 'runnablebackrzinterface', 'backrzinterface', 'new', 'backrzinterface', '这样', '每个', '处理', '线程', '依赖', 'backrzinterface', '独立', '这个', 'runnable', '代码', '使用', '不会', '存在', '同步', '问题', '如果', '多线程', '处理', '需要', '使用', '外部', '资源', '最好', '办法', '使得', '每个', '线程', '单独', '使用', '自己', '独占', '资源', '相互之间', '不会', '存在', '冲突', '可以', '实现', '最大化', '并发', '处理', '其他', '一些', '例子', '比如', '多线程', '用到', '字典', '文件', '那么', '方法', '首先', '字典', '文件', '复制', '多份', '每个', '线程', '使用', '自己', '独占', '字典', '避免', '并发', '同步', '访问', '字典', '多线程', '需要', '统一', 'id', '发号', '可以', '提前', '计算', '每个', '输入', '文件', '行数', '然后', '依次', '生成', '第一个', '线程', '需要', 'id', '范围', '第二个', '线程', '需要', 'id', '范围', '这些', '不同', 'id', '范围', '可以', '分别', '生成', '不同', '文件', '这样', '每个', '线程', '使用', '各自', '独立', 'id', '资源', '避免', '多个', '线程', '时刻', '访问', '单个', 'id', '发号', '服务', '使得', '发号', '成为', '性能', '瓶颈', '可能', '多线程', '如果', '依赖', '相同', 'service', '如果', '可以', '每次', 'new', '对象', '每次', 'new', '如果', 'bean', 'spring', '管理', 'service', '加上', 'scope', 'prototype', '或者', '对象', '每次', 'clone', '一下', '得到', '一个', '对象', '保证', '最终', '每个', '线程', '使用', '自己', '独占', '对象', '尽量', '使用', '函数', '编程', '思想', '每个', '函数', '不要', '产生', '副作用', '不要', '修改', '入参', '结果', '只能', '通过', 'return', '返回', '避免', '增加', '代码', '同步', '冲突', '可能', '通过', '以上', '这些', '类似', '方法', '每次', '可能', '需要', '同步', '访问', '共享资源', '通过', '复制', '分片', '手段', '得到', '不同', '每个', '线程', '单独', '访问', '自己', '一份', '避免', '同步', '访问', '最终', '实现', '性能', '最优', '避免', '同步', '终极', '方法', '使用', '进程', '进行', '实现', '资源', '隔离', '如果', '文件', '分成', '多份', '依赖', 'id', '词典', '资源', '相应', '提供', '多份', '但是', '发现', '代码', '存在', '无法', '解决', '代码', '级别', '同步', '怎么办', '相对', '想尽办法', '解决', '代码', '同步', '问题', '来说', '多线程', '进程', '之间', '性能', '差别', '微乎其微', '我们', '知道', '线程', '使用', '进程', '资源', '所以', '导致', '线程', '之间', '存在', '竞争', '进程', '资源', '但是', '对于', '进程', '来说', 'cpu', '内存', '硬件资源', '完全', '隔离', '这时候', '程序运行', '进程', '不是', '多线程', '反而', '更好', '提升', '性能', '对于', '一些', '支持', '多线程', '不好', '语言', '比如', 'php', '直接', '这种', '进程', '计算', '方法', '速度', '并不比', '支持', '多线程', 'java', 'python', '语言', '拆分', '文件', '就是', '启动', '进程', 'splits', 'count', '20input', 'splits', 'dir', 'input', 'dir', 'splits', 'output', 'splits', 'dir', 'output', 'dir', 'splits', '输入', '文件', '行数', 'source', 'file', 'lines', 'count', 'cat', 'input', 'file', 'wc', '每个', '文件', '拆分', '行数', '总行', '除以', '拆分', '文件', '个数', '就是', '对应', '进程', '个数', 'split', 'file', 'lines', 'count', 'source', 'file', 'lines', 'count', 'splits', 'count', '执行', '拆分', '注意', '这里', '使用', '进行', '级别', '拆分', '更好', 'split', 'split', 'file', 'lines', 'count', 'input', 'file', 'input', 'splits', 'dir', 'inputfile', 'process', 'idx', '1for', 'fname', 'in', 'ls', 'input', 'splits', 'dir', 'doinput', 'fpath', 'input', 'splits', 'dir', 'fnameouput', 'fpath', 'output', 'splits', 'dir', 'fname', '后台', '执行', '所有', '进程', 'php', 'php', 'main', 'php', 'input', 'fpath', 'ouput', 'fpath', 'process', 'idx', '++', 'done', '等待', '所有', '后台', '进程', '执行', '结束', 'wait', '合并', '文件', 'cat', 'output', 'splits', 'dir', 'output', 'file', '上述', '代码', '使用', 'shell', '符号', '可以', '后台', '同时', '启动', '多个', '进程', '使用', 'wait', '语法', '可以', '实现', '多线程', 'thread', 'join', '特性', '等待', '所有', '进程', '执行', '结束', '总结', '对于', '输入', '文件', '大小', '计算', '复杂度', '处于', '单机', '集群', '计算', '之间', '数据处理', '使用', '并发', '处理', '最为', '合适', '但是', '并发', '同步', '处理', '却会', '降低', '多线程', '性能', '这时', '可以', '借助于', '输入', '文件', '复制', '拆分', '依赖', '资源', '复制', '拆分', '切片', '方法', '实现', '每个', '线程', '处理', '自己', '独占', '资源', '从而', '最大化', '提升', '计算速度', '对于', '一些', '无法', '避免', '代码', '同步', '冲突', '逻辑', '可以', '退化', '进程', '处理', '数据', '借助于', 'shell', '后台', '进程', '支持', '实现', '进程', '级别', '资源', '独占', '最终', '大幅', '提升', '处理', '性能']","[[-2.64356780e-01 -1.43702240e-01  2.30898148e-01  1.57599966e-01
   3.10444223e-01 -3.56181069e-01 -1.86206684e-01  5.03680274e-01
  -1.55450733e-02 -4.40688138e-02 -5.44919556e-02 -3.44605395e-01
  -1.89914048e-01  6.07715527e-01  1.59886191e-01 -1.11263733e-01
  -1.57459898e-01 -3.85929497e-03 -1.08671429e-01 -4.95675870e-01
   1.43850789e-02  2.53955073e-01 -5.83454592e-04 -1.11339223e-01
   1.24946073e-01 -5.64669010e-01 -2.96928820e-01  8.01246324e-02
  -2.26434189e-01 -6.71742364e-02  2.41320599e-01  1.24748572e-02
  -1.68438440e-02 -1.53134392e-01 -1.20818025e-01  3.47131951e-01
  -1.55425948e-01 -2.43109462e-01  1.18100267e-01 -7.95998602e-01
  -1.79909475e-01 -6.09377769e-01 -4.57957543e-02 -6.62104185e-02
  -1.72220833e-01 -1.66486084e-01 -2.53243251e-01  4.71627228e-01
  -1.91463047e-01  4.27210292e-01  2.16052632e-01 -2.84108971e-01
  -1.33747239e-01 -2.22327992e-01  5.58673334e-02  4.00588772e-01
   2.39371790e-01 -7.76113900e-02  1.09957903e-01 -1.20365530e-01
   5.37981817e-02  3.00465513e-01  2.86224187e-02  8.75103906e-02
  -4.05567973e-01 -1.93602880e-03  4.94377575e-02 -2.17475402e-02
  -2.73378555e-01  4.55876602e-01  1.47472668e-01 -2.40478344e-01
   4.12685693e-01 -3.34978685e-01  5.91435749e-01  1.92957980e-01
   1.90146086e-01 -1.43859096e-01 -3.03150657e-01 -1.90609183e-01
  -5.82575413e-02 -2.45394071e-03 -7.88322661e-02  3.52725339e-01
  -3.76576331e-01  2.10043896e-01 -2.99737550e-01  4.28622993e-01
   4.81287062e-01  1.36671042e-01  3.17763214e-01  1.25615402e-01
   3.72510916e-01  2.01214649e-01  1.98659223e-01  3.80545486e-01
   1.14092136e-01 -3.19189046e-01 -4.36773789e-02 -1.12269652e-01]]"
1931,Log4j将不同Package的日志输出到不同的文件的方法,"随着项目规模的越来越大，会不断的引入新的模块，不同的模块都会打印自己的日志，最后就造成日志根本没法查看，比如我自己的项目中，就存在以下这些日志：接收外界消息的日志、对外发送消息的日志；后台常驻线程的处理日志；外部接口访问的参数、返回结果等接口日志；Service访问数据库产生的SQL日志；这其中，消息日志和后台线程的日志数据量非常庞大，如果所有日志打印在一个文件中，使用tail -f log.log文件，会发现日志在快速的滚动，根本无法查看甚至定位某一个具体的SQL或者Service访问日志。解决方法就是可以将不同的日志加以分类输出，这样相互的日志不影响，尤其重要的接口访问日志，能够很方便的定位和排查问题。步骤1：在log4j.properties中配置先贴一下我自己所有的log4j.properties配置：log4j.rootLogger=INFO, console, filelog4j.appender.console=net.czt.log.AsyncConsoleAppenderlog4j.appender.console.layout=org.apache.log4j.PatternLayoutlog4j.appender.console.layout.ConversionPattern=%d [%t] %-5p crazyant-web %-17c{2} (%13F:%L) %X{USER_ID}|%X{USER_IP}|%X{SERVER_ADDRESS}|%X{SERVER_NAME}|%X{REQUEST_URI}|%X{SESSION_ID} - %m%nlog4j.appender.console.bufferSize=10000log4j.appender.console.encoding=UTF-8log4j.appender.file=org.apache.log4j.RollingFileAppenderlog4j.appender.file.file=/home/work/apache-tomcat-6.0.39/logs/crazyant.loglog4j.appender.file.MaxBackupIndex=5log4j.appender.file.MaxFileSize=1GBlog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=[%-5p] crazyant-web %d{yyyy-MM-dd HH:mm:ss,SSS} %X{USER_ID}|%X{USER_IP}|%X{SERVER_ADDRESS}|%X{SERVER_NAME}|%X{REQUEST_URI}|%X{SESSION_ID} method:%l%n%m%nlog4j.appender.file.bufferSize=10000log4j.appender.file.encoding=UTF-8log4j.logger.net.czt.crazyant.msg=DEBUG, messagelog4j.additivity.net.czt.crazyant.msg=falselog4j.appender.message=org.apache.log4j.RollingFileAppenderlog4j.appender.message.File=/home/work/apache-tomcat-6.0.39/logs/crazyant_message.loglog4j.appender.message.Append=truelog4j.appender.message.MaxFileSize=1GBlog4j.appender.message.MaxBackupIndex=5log4j.appender.message.layout=org.apache.log4j.PatternLayoutlog4j.appender.message.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%-5p][%c{1}] [%t] - %m%nlog4j.appender.message.encoding=UTF-8log4j.logger.net.czt.crazyant.async.service=DEBUG, asynclog4j.additivity.net.czt.crazyant.async.service=falselog4j.appender.async=org.apache.log4j.RollingFileAppenderlog4j.appender.async.File=/home/work/apache-tomcat-6.0.39/logs/crazyant_async.loglog4j.appender.async.Append=truelog4j.appender.async.MaxFileSize=1GBlog4j.appender.async.MaxBackupIndex=5log4j.appender.async.layout=org.apache.log4j.PatternLayoutlog4j.appender.async.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%-5p][%c{1}] [%t] - %m%nlog4j.appender.async.encoding=UTF-8log4j.logger.net.czt.orm.mybatis.SqlMonitorManager=DEBUG, showsqllog4j.additivity.net.czt.orm.mybatis.SqlMonitorManager=falselog4j.logger.net.czt.transaction.interceptor.SmartTransactionInterceptor=DEBUG, showsqllog4j.additivity.net.czt.transaction.interceptor.SmartTransactionInterceptor=falselog4j.appender.showsql=org.apache.log4j.RollingFileAppenderlog4j.appender.showsql.File=/home/work/apache-tomcat-6.0.39/logs/crazyant_sql.loglog4j.appender.showsql.Append=truelog4j.appender.showsql.MaxFileSize=1GBlog4j.appender.showsql.MaxBackupIndex=5log4j.appender.showsql.layout=org.apache.log4j.PatternLayoutlog4j.appender.showsql.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%-5p][%c{1}] [%t] - %m%nlog4j.appender.showsql.encoding=UTF-8log4j.logger.net.czt.crazyant.service=DEBUG, servicelog4j.additivity.net.czt.crazyant.service=falselog4j.appender.service=org.apache.log4j.RollingFileAppenderlog4j.appender.service.File=/home/work/apache-tomcat-6.0.39/logs/crazyant_service.loglog4j.appender.service.Append=truelog4j.appender.service.MaxFileSize=1GBlog4j.appender.service.MaxBackupIndex=5log4j.appender.service.layout=org.apache.log4j.PatternLayoutlog4j.appender.service.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%-5p][%c{1}] [%t] - %m%nlog4j.appender.service.encoding=UTF-8 在配置文件的下方，可以方便的看到，我将message(消息)、async(后端线程)、showsql(数据库日志)、service(接口调用)分别输出到了不同的日志文件。其中的一些解释：log4j.rootLogger=INFO, console, filelog4j有一个rootLogger和普通Logger的概念，默认情况下我们只需要一个rootLogger，就是所有的日志只会输出到这一个日志文件中。 看一下普通Logger的配置（以接口日志service为例）：log4j.logger.net.czt.crazyant.service=DEBUG, service这句中的""net.czt.crazyant.service""，表示该普通logger日志配置生效的package的完全路径其中色service，表示该普通logger的名字log4j.additivity.net.czt.crazyant.service=false其中的""net.czt.crazyant.service""，和上面的相同，表示该配置项针对的package该句配置的意思，是不要将该package的日志输出到rootLogger日志中，只输出到自己配置的日志就行了；log4j.appender.service=org.apache.log4j.RollingFileAppender，以及该配置段下面的配置项这里的""service""字符串，和上面的第一个配置项的""service""相同，表示对该普通Logger的配置；下方的配置项和rootLogger相同，表示每天输出文件、编码UTF8、分片规则、每行的输出模式等等我自己遇到的问题，是上面的log4j.properties配置好以后，发现各个日志文件创建了，但是里面都没有内容，这是为啥呢？来看下面第二个注意的地方；步骤2、输出日志时需要设定日志对象对应的具体Class什么意思呢？上面的配置项中，有一个""net.czt.crazyant.service""的package字符串，那么我们自己想一下，log4j是怎样将不同package中的logger日志输出到不同文件呢，想一下会有两种方法：采用intercepter或者aop的方式，log4j自己检测日志输出，检测到日志产生于哪个package，就将其输出到对应文件中；由用户传一个Class参数，log4j获取该Class对应的Package，以此为准，来定位不同的日志文件；看一下代码，显然log4j用的是后一种简单直接的方式：import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;public class MyClassImpl implements MyClass {    /**     * loger     */    private static final Log logger = LogFactory.getLog(MyClassImpl.class);        /**     * my func     */    public void myfunc() {        logger.info(""call method myfunc."");    }}在logger = LogFactory.getLog(MyClassImpl.class)中，传入了使用该logger的Class参数，而该Class被反射取到的package地址，就是log4j用来输出日志的package地址。这种做法也有强大的地方，方便逻辑上的日志归类，比如很多代码不属于一个package，但是它们逻辑上属于一起的，举个例子，消息的处理不只是接口调用Service这个package，可能还会调用发送msg的操作，如果想把msg的package中一些日志也输出到Service，那么在这个msg的logger初始化的时候，传入一个Serivice的Class就行了。或者对于某一类的所有日志来说，它们所有的logger对象，都来自封装好的单个对象实例即可，而这个单个对象实例传入的参数只有一个，用于标识这个逻辑归类即可。总结在Log4j.properties中，支持package或者具体class的日志单独输出，但是也需要代码中logger初始化的时候，能和日志配置中的package对应上。 原创文章，转载请注明地址：http://crazyant.net/1931.html","['log4j', '不同', 'package', '日志', '输出', '不同', '文件', '方法', '随着', '项目', '规模', '越来越', '不断', '引入', '模块', '不同', '模块', '打印', '自己', '日志', '最后', '造成', '日志', '根本', '没法', '查看', '比如', '自己', '项目', '存在', '以下', '这些', '日志', '接收', '外界', '消息', '日志', '对外', '发送', '消息', '日志', '后台', '常驻', '线程', '处理', '日志', '外部', '接口', '访问', '参数', '返回', '结果', '接口', '日志', 'service', '访问', '数据库', '产生', 'sql', '日志', '其中', '消息日志', '后台', '线程', '日志', '数据量', '非常', '庞大', '如果', '所有', '日志', '打印', '一个', '文件', '使用', 'tail', 'log', 'log', '文件', '发现', '日志', '快速', '滚动', '根本无法', '查看', '甚至', '定位', '一个', '具体', 'sql', '或者', 'service', '访问', '日志', '解决', '方法', '就是', '可以', '不同', '日志', '加以', '分类', '输出', '这样', '相互', '日志', '影响', '尤其', '重要', '接口', '访问', '日志', '能够', '方便', '定位', '排查', '问题', '步骤', 'log4j', 'properties', '配置', '先贴', '一下', '自己', '所有', 'log4j', 'properties', '配置', 'log4j', 'rootlogger', 'info', 'console', 'filelog4j', 'appender', 'console', 'net', 'czt', 'log', 'asyncconsoleappenderlog4j', 'appender', 'console', 'layout', 'org', 'apache', 'log4j', 'patternlayoutlog4j', 'appender', 'console', 'layout', 'conversionpattern', '%-', '5p', 'crazyant', 'web', '%-', '17c', '13f', 'user', 'id', 'user', 'ip', 'server', 'address', 'server', 'name', 'request', 'uri', 'session', 'id', 'm%', 'nlog4j', 'appender', 'console', 'buffersize', '10000log4j', 'appender', 'console', 'encoding', 'utf', '8log4j', 'appender', 'file', 'org', 'apache', 'log4j', 'rollingfileappenderlog4j', 'appender', 'file', 'file', 'home', 'work', 'apache', 'tomcat', '6.0', '39', 'logs', 'crazyant', 'loglog4j', 'appender', 'file', 'maxbackupindex', '5log4j', 'appender', 'file', 'maxfilesize', '1gblog4j', 'appender', 'file', 'layout', 'org', 'apache', 'log4j', 'patternlayoutlog4j', 'appender', 'file', 'layout', 'conversionpattern', '%-', '5p', 'crazyant', 'web', 'yyyy', 'mm', 'dd', 'hh', 'mm', 'ss', 'sss', 'user', 'id', 'user', 'ip', 'server', 'address', 'server', 'name', 'request', 'uri', 'session', 'id', 'method', 'l%', 'n%', 'm%', 'nlog4j', 'appender', 'file', 'buffersize', '10000log4j', 'appender', 'file', 'encoding', 'utf', '8log4j', 'logger', 'net', 'czt', 'crazyant', 'msg', 'debug', 'messagelog4j', 'additivity', 'net', 'czt', 'crazyant', 'msg', 'falselog4j', 'appender', 'message', 'org', 'apache', 'log4j', 'rollingfileappenderlog4j', 'appender', 'message', 'file', 'home', 'work', 'apache', 'tomcat', '6.0', '39', 'logs', 'crazyant', 'message', 'loglog4j', 'appender', 'message', 'append', 'truelog4j', 'appender', 'message', 'maxfilesize', '1gblog4j', 'appender', 'message', 'maxbackupindex', '5log4j', 'appender', 'message', 'layout', 'org', 'apache', 'log4j', 'patternlayoutlog4j', 'appender', 'message', 'layout', 'conversionpattern', 'yyyy', 'mm', 'dd', 'hh', 'mm', 'ss', '%-', '5p', 'm%', 'nlog4j', 'appender', 'message', 'encoding', 'utf', '8log4j', 'logger', 'net', 'czt', 'crazyant', 'async', 'service', 'debug', 'asynclog4j', 'additivity', 'net', 'czt', 'crazyant', 'async', 'service', 'falselog4j', 'appender', 'async', 'org', 'apache', 'log4j', 'rollingfileappenderlog4j', 'appender', 'async', 'file', 'home', 'work', 'apache', 'tomcat', '6.0', '39', 'logs', 'crazyant', 'async', 'loglog4j', 'appender', 'async', 'append', 'truelog4j', 'appender', 'async', 'maxfilesize', '1gblog4j', 'appender', 'async', 'maxbackupindex', '5log4j', 'appender', 'async', 'layout', 'org', 'apache', 'log4j', 'patternlayoutlog4j', 'appender', 'async', 'layout', 'conversionpattern', 'yyyy', 'mm', 'dd', 'hh', 'mm', 'ss', '%-', '5p', 'm%', 'nlog4j', 'appender', 'async', 'encoding', 'utf', '8log4j', 'logger', 'net', 'czt', 'orm', 'mybatis', 'sqlmonitormanager', 'debug', 'showsqllog4j', 'additivity', 'net', 'czt', 'orm', 'mybatis', 'sqlmonitormanager', 'falselog4j', 'logger', 'net', 'czt', 'transaction', 'interceptor', 'smarttransactioninterceptor', 'debug', 'showsqllog4j', 'additivity', 'net', 'czt', 'transaction', 'interceptor', 'smarttransactioninterceptor', 'falselog4j', 'appender', 'showsql', 'org', 'apache', 'log4j', 'rollingfileappenderlog4j', 'appender', 'showsql', 'file', 'home', 'work', 'apache', 'tomcat', '6.0', '39', 'logs', 'crazyant', 'sql', 'loglog4j', 'appender', 'showsql', 'append', 'truelog4j', 'appender', 'showsql', 'maxfilesize', '1gblog4j', 'appender', 'showsql', 'maxbackupindex', '5log4j', 'appender', 'showsql', 'layout', 'org', 'apache', 'log4j', 'patternlayoutlog4j', 'appender', 'showsql', 'layout', 'conversionpattern', 'yyyy', 'mm', 'dd', 'hh', 'mm', 'ss', '%-', '5p', 'm%', 'nlog4j', 'appender', 'showsql', 'encoding', 'utf', '8log4j', 'logger', 'net', 'czt', 'crazyant', 'service', 'debug', 'servicelog4j', 'additivity', 'net', 'czt', 'crazyant', 'service', 'falselog4j', 'appender', 'service', 'org', 'apache', 'log4j', 'rollingfileappenderlog4j', 'appender', 'service', 'file', 'home', 'work', 'apache', 'tomcat', '6.0', '39', 'logs', 'crazyant', 'service', 'loglog4j', 'appender', 'service', 'append', 'truelog4j', 'appender', 'service', 'maxfilesize', '1gblog4j', 'appender', 'service', 'maxbackupindex', '5log4j', 'appender', 'service', 'layout', 'org', 'apache', 'log4j', 'patternlayoutlog4j', 'appender', 'service', 'layout', 'conversionpattern', 'yyyy', 'mm', 'dd', 'hh', 'mm', 'ss', '%-', '5p', 'm%', 'nlog4j', 'appender', 'service', 'encoding', 'utf', '配置文件', '下方', '可以', '方便', '看到', 'message', '消息', 'async', '端线', 'showsql', '数据库', '日志', 'service', '接口', '调用', '分别', '输出', '不同', '日志', '文件', '其中', '一些', '解释', 'log4j', 'rootlogger', 'info', 'console', 'filelog4j', '一个', 'rootlogger', '普通', 'logger', '概念', '默认', '情况', '我们', '需要', '一个', 'rootlogger', '就是', '所有', '日志', '只会', '输出', '一个', '日志', '文件', '一下', '普通', 'logger', '配置', '接口', '日志', 'service', '为例', 'log4j', 'logger', 'net', 'czt', 'crazyant', 'service', 'debug', 'service', '这句', 'net', 'czt', 'crazyant', 'service', '表示', '普通', 'logger', '日志', '配置', '生效', 'package', '完全', '路径', '其中', 'service', '表示', '普通', 'logger', '名字', 'log4j', 'additivity', 'net', 'czt', 'crazyant', 'service', 'false', '其中', 'net', 'czt', 'crazyant', 'service', '上面', '相同', '表示', '配置', '针对', 'package', '该句', '配置', '意思', '不要', 'package', '日志', '输出', 'rootlogger', '日志', '输出', '自己', '配置', '日志', '就行了', 'log4j', 'appender', 'service', 'org', 'apache', 'log4j', 'rollingfileappender', '以及', '配置', '下面', '配置', '这里', 'service', '字符串', '上面', '第一个', '配置', 'service', '相同', '表示', '普通', 'logger', '配置', '下方', '配置', 'rootlogger', '相同', '表示', '每天', '输出', '文件', '编码', 'utf8', '分片', '规则', '每行', '输出', '模式', '等等', '自己', '遇到', '问题', '上面', 'log4j', 'properties', '配置', '以后', '发现', '各个', '日志', '文件创建', '但是', '里面', '没有', '内容', '这是', '为啥', '来看', '下面', '第二个', '注意', '地方', '步骤', '输出', '日志', '需要', '设定', '日志', '对象', '对应', '具体', 'class', '什么', '意思', '上面', '配置', '项中', '一个', 'net', 'czt', 'crazyant', 'service', 'package', '字符串', '那么', '我们', '自己', '一下', 'log4j', '怎样', '不同', 'package', 'logger', '日志', '输出', '不同', '文件', '一下', '两种', '方法', '采用', 'intercepter', '或者', 'aop', '方式', 'log4j', '自己', '检测', '日志', '输出', '检测', '日志', '产生', '哪个', 'package', '输出', '对应', '文件', '用户', '一个', 'class', '参数', 'log4j', '获取', 'class', '对应', 'package', '以此为准', '定位', '不同', '日志', '文件', '一下', '代码', '显然', 'log4j', '一种', '简单', '直接', '方式', 'import', 'org', 'apache', 'commons', 'logging', 'log', 'import', 'org', 'apache', 'commons', 'logging', 'logfactory', 'public', 'class', 'myclassimpl', 'implements', 'myclass', 'loger', 'private', 'static', 'final', 'log', 'logger', 'logfactory', 'getlog', 'myclassimpl', 'class', 'my', 'func', 'public', 'void', 'myfunc', 'logger', 'info', 'call', 'method', 'myfunc', 'logger', 'logfactory', 'getlog', 'myclassimpl', 'class', '传入', '使用', 'logger', 'class', '参数', 'class', '反射', '取到', 'package', '地址', '就是', 'log4j', '用来', '输出', '日志', 'package', '地址', '这种', '做法', '强大', '地方', '方便', '逻辑', '日志', '归类', '比如', '很多', '代码', '属于', '一个', 'package', '但是', '它们', '逻辑', '属于', '一起', '举个', '例子', '消息', '处理', '只是', '接口', '调用', 'service', '这个', 'package', '可能', '还会', '调用', '发送', 'msg', '操作', '如果', 'msg', 'package', '一些', '日志', '输出', 'service', '那么', '这个', 'msg', 'logger', '初始化', '时候', '传入', '一个', 'serivice', 'class', '就行了', '或者', '对于', '一类', '所有', '日志', '来说', '它们', '所有', 'logger', '对象', '来自', '封装', '单个', '对象', '实例', '即可', '这个', '单个', '对象', '实例', '传入', '参数', '只有', '一个', '用于', '标识', '这个', '逻辑', '归类', '即可', '总结', 'log4j', 'properties', '支持', 'package', '或者', '具体', 'class', '日志', '单独', '输出', '但是', '需要', '代码', 'logger', '初始化', '时候', '日志', '配置', 'package', '对应', '原创', '文章', '转载', '注明', '地址', 'http', 'crazyant', 'net', '1931', 'html']","[[-0.26852087 -0.0923845   0.26252493  0.2254467   0.21298609 -0.38589675
  -0.09743504  0.48700803 -0.06349195 -0.10219663 -0.05972719 -0.40068006
  -0.0980647   0.53270916  0.13679692 -0.14372892 -0.11631879 -0.0088739
  -0.02671277 -0.4518302  -0.01319428  0.29020351 -0.08653226 -0.18800787
   0.02637037 -0.4596346  -0.31797831  0.04265402 -0.20264978 -0.08662594
   0.17686164  0.06073663  0.00937787 -0.10780502 -0.1821408   0.36718951
  -0.17003654 -0.2751403   0.07499556 -0.69781909 -0.10020358 -0.53126485
  -0.05064106 -0.04273364 -0.12638214 -0.22783425 -0.30890246  0.39984535
  -0.08669157  0.40895194  0.0930796  -0.29515776 -0.06215251 -0.23533647
  -0.0100947   0.41320761  0.1630067  -0.09056297  0.13346925 -0.13489988
   0.12363998  0.22129218  0.01208545  0.06299701 -0.36697369  0.06433496
   0.01072038  0.01571275 -0.25295264  0.43069551  0.04962382 -0.16594305
   0.40729907 -0.33227218  0.55373763  0.29545856  0.22706687 -0.2099631
  -0.23870333 -0.17325166 -0.06317078  0.03905645 -0.11944055  0.41147267
  -0.33774404  0.18413126 -0.28004961  0.48228792  0.51660093  0.17736094
   0.20442115  0.1227803   0.32792345  0.17660445  0.19455487  0.42188534
   0.09663684 -0.2586215   0.10947398 -0.10919227]]"
1946,MAC环境堪比Visio的画图神器,Windows下使用Visio画框图、流程图非常方便，切换到MAC后，一直苦恼找不到一个可以替代的画图工具。经同事推荐，才发现一个神器：OmniGraffle可以直接从官方网站下载最新的软件包：https://www.omnigroup.com/omnigraffle       从网上找了几个可以使用的许可证序列号，分享给大家：Omnigraffle Pro 6 Name: mojado Serial: JYFE-JRJN-GSOT-GRAG-EVJI-TEFE-VJI Name: mojado@live.com Serial: IZAH-IRLI-EFDI-XAEM-JBJJ-JEFJ-BJJ Name: mojado@gnu.org Serial: EMIP-OSMG-CSJU-ZZBL-INXY-TEFI-NXY Name: Magic Mike  Serial: LGEO-AVRN-TPGY-BZKR-WEQT-ZEB本文链接：http://crazyant.net/1946.html,"['mac', '环境', '堪比', 'visio', '画图', '神器', 'windows', '使用', 'visio', '框图', '流程图', '非常', '方便', '切换', 'mac', '一直', '苦恼', '不到', '一个', '可以', '替代', '画图', '工具', '同事', '推荐', '发现', '一个', '神器', 'omnigraffle', '可以', '直接', '官方网站', '下载', '最新', '软件包', 'https', 'www', 'omnigroup', 'com', 'omnigraffle', '网上', '几个', '可以', '使用', '许可证', '序列号', '分享', '大家', 'omnigraffle', 'pro', 'name', 'mojado', 'serial', 'jyfe', 'jrjn', 'gsot', 'grag', 'evji', 'tefe', 'vji', 'name', 'mojado', 'live', 'com', 'serial', 'izah', 'irli', 'efdi', 'xaem', 'jbjj', 'jefj', 'bjj', 'name', 'mojado', 'gnu', 'org', 'serial', 'emip', 'osmg', 'csju', 'zzbl', 'inxy', 'tefi', 'nxy', 'name', 'magic', 'mike', 'serial', 'lgeo', 'avrn', 'tpgy', 'bzkr', 'weqt', 'zeb', '本文', '链接', 'http', 'crazyant', 'net', '1946', 'html']","[[-0.24582335 -0.12774187  0.28831665  0.32141985  0.16967152 -0.46570049
  -0.09592314  0.56298365 -0.08096127 -0.13016593 -0.09905031 -0.4698096
  -0.12475515  0.58832309  0.10481722 -0.17631201 -0.12421837  0.03362691
   0.02595069 -0.46079322 -0.03541505  0.32446848 -0.12950584 -0.27398784
  -0.02125167 -0.45340087 -0.38857429  0.07345726 -0.22358087 -0.08146984
   0.17204259  0.15092248  0.04725292 -0.12402562 -0.27167217  0.42144642
  -0.21496152 -0.29921934  0.05149347 -0.70142407 -0.05528976 -0.57966255
  -0.04815164 -0.00197078 -0.10861935 -0.3217083  -0.37418623  0.41477944
   0.02449525  0.42335596  0.04260165 -0.35751829  0.02633648 -0.2563792
  -0.05523623  0.50048304  0.15720886 -0.12196648  0.17214678 -0.14848481
   0.20429713  0.20609631  0.00782449  0.100289   -0.3748227   0.09608642
  -0.05520209  0.06620664 -0.26020483  0.47028381  0.02217159 -0.15052158
   0.47365287 -0.36804743  0.62923201  0.38682131  0.29587644 -0.26036984
  -0.2407128  -0.20363057 -0.10583158  0.05980675 -0.17386375  0.48132874
  -0.41061205  0.17587697 -0.31114175  0.59406211  0.63505275  0.21423629
   0.16865883  0.1304036   0.32775045  0.16994923  0.23153007  0.52301162
   0.09446543 -0.23184567  0.20825877 -0.12194069]]"
1957,工程师的月亮和六便士,《月亮和六便士》是英国作家威廉·萨默塞特·毛姆的三大长篇力作之一，完成于1919年。作品以法国印象摄画家保罗·高更的生平为素材．描述了一个原本平凡的伦敦证券经纪人思特里克兰德，突然着了艺术的魔，抛妻弃子，绝弃了旁人看来优裕美满的生活，奔赴南太平洋的塔希提岛，用圆笔谱写出自己光解灿烂的生命，把生命的价值全部注入绚烂的画布的故事。贫穷的纠缠，病魔的折磨他毫不在意，只是后悔从来没有光顾过他的意识。作品表现了天才、个性与物质文明以及现代婚姻、家庭生活之间的矛盾，有着广阔的生命视角，用散发着消毒水味道的手术刀对皮囊包裹下的人性进行了犀利地解剖，混合着看客讪笑的幽默和残忍的目光。六便士是当时英国货币的最小单位，有个朋友跟毛姆开玩笑说，人们在仰望月亮时常常忘了脚下的六便士，毛姆觉得这说法挺有意思，就起了这个书名，甚是开玩笑的语气。月亮代表高高在上的理想，六便士则是现实的代表。工程师的六便士和月亮软件开发者或者成为工程师，属于工程技术人员，做的是再也具体不过的事情：确认需求、开发、测试、上线、运维，都是一件件的实事，同时关心的也都是六便士的事情：职称和薪资，对于工程师来说，眼中很容易的全是六便士，对于我们来说，有月亮吗？有梦想吗？有追求吗？如果工程师也有月亮，也有远方，也有梦想，也有追求，那它是什么？思特里克兰德开始的时候，是一位伦敦证券经纪人，拿着并不低的薪水，有着大房子、漂亮的老婆和两个孩子，生活水平处于社会的中层，只要他努力打拼，生活会更优越，然而对他来说，这些都是物质意义上的六便士，难以满足自己精神上对艺术的追求。而令人佩服的是，他会突然地放弃所有，放弃温暖舒适的的房子、放弃每月宽裕的薪资、放弃温柔体贴的老婆和天伦之乐的家庭，从物质生活中脱离，完全投入到自己的精神追求中去，即使混沌潦倒、即使受尽挫折，但他并没有感到后悔和不适，反而一步步的靠近自己的月亮最终拥抱自己的月亮。对应到原著，六便士代表的是物质的追求，而月亮代表的是精神追求。精神追求会带来比物质追求完全无法比拟的满足。如果将月亮定义为精神追求，工程师应该追寻的是什么呢？也许是规划完架构、实现功能、圆满交付所带来的成就感、也许是别人认同的满足感、也许是在各方利益和谐协调带来的认同感；如果将月亮定义为理想追求，工程师的目标是什么呢？也许是做出人们需要和依赖的产品、也许是成为领域不可替代不可或缺的大牛、也许是团队前进的精神领袖，但这些好像都不是理想，困惑~我该怎样选择现实的压力让人们不得不面对六便士，一直低头走路，忘记了抬头看月亮。人们因为房贷、买车计划、育儿目标，不断的将头埋得更低，更加关注金钱和现实，变成一个物质机器，日复一日、年复一年，最终回过头来，发现自己有了房子、有了车子、孩子长大了，可是自己呢？几十年都在埋头苦干，就像车轮压过一条条公路，最终是在原地转圈圈，自己的精神领域，好像一直那么的贫乏。在人生的路上，不只有物质的追求，不只是追求高高的薪资、大大的房子、漂亮的车子、优越的地位，更能带来满足、更能带来成就感、更能让自己老不后悔的，是精神的追求。对于佛陀来说，放弃了一切物质，哪怕身上衣不遮体，但是精神修为达到了圆满，这才是终极的追求和自我实现。对于这个精彩的、未知的世界的探索和精神上的修炼领悟，才是在低头看着六便士的同时，需要抬头追求的月亮。看书、健身、沉思、音乐、冥想、交流、修炼。不要做物质的奴隶，要做精神的主人。,"['工程师', '月亮', '六便士', '月亮', '六便士', '英国', '作家', '威廉', '萨默塞特', '毛姆', '大长篇', '力作', '之一', '完成', '1919', '作品', '法国', '印象', '画家', '保罗', '生平', '素材', '描述', '一个', '原本', '平凡', '伦敦', '证券', '经纪人', '特里', '兰德', '突然', '艺术', '抛妻', '弃子', '绝弃', '旁人', '看来', '优裕', '美满', '生活', '奔赴', '南太平洋', '塔希提', '圆笔', '谱写', '自己', '光解', '灿烂', '生命', '生命', '价值', '全部', '注入', '绚烂', '画布', '故事', '贫穷', '纠缠', '病魔', '折磨', '毫不在意', '只是', '后悔', '从来', '没有', '光顾', '意识', '作品', '表现', '天才', '个性', '物质文明', '以及', '现代', '婚姻', '家庭', '生活', '之间', '矛盾', '有着', '广阔', '生命', '视角', '散发', '消毒水', '味道', '手术刀', '皮囊', '包裹', '人性', '进行', '犀利', '解剖', '混合', '看客', '讪笑', '幽默', '残忍', '目光', '六便士', '当时', '英国', '货币', '最小', '单位', '有个', '朋友', '毛姆', '开玩笑', '人们', '仰望', '月亮', '常常', '脚下', '六便士', '毛姆', '觉得', '说法', '有意思', '这个', '书名', '开玩笑', '语气', '月亮代表', '高高在上', '理想', '六便士', '现实', '代表', '工程师', '六便士', '月亮', '软件', '开发者', '或者', '成为', '工程师', '属于', '工程', '技术人员', '再也', '具体', '不过', '事情', '确认', '需求', '开发', '测试', '上线', '运维', '一件件', '实事', '同时', '关心', '六便士', '事情', '职称', '薪资', '对于', '工程师', '来说', '眼中', '容易', '全是', '六便士', '对于', '我们', '来说', '月亮', '梦想', '追求', '如果', '工程师', '月亮', '远方', '梦想', '追求', '什么', '特里', '兰德', '开始', '时候', '一位', '伦敦', '证券', '经纪人', '薪水', '有着', '大房子', '漂亮', '老婆', '两个', '孩子', '生活', '水平', '处于', '社会', '中层', '只要', '努力', '打拼', '生活', '更优越', '然而', '来说', '这些', '物质', '意义', '六便士', '难以', '满足', '自己', '精神', '艺术', '追求', '令人', '佩服', '他会', '突然', '放弃', '所有', '放弃', '温暖', '舒适', '房子', '放弃', '每月', '宽裕', '薪资', '放弃', '温柔体贴', '老婆', '天伦之乐', '家庭', '物质', '生活', '脱离', '完全', '投入', '自己', '精神', '追求', '即使', '混沌', '潦倒', '即使', '受尽', '挫折', '没有', '感到', '后悔', '不适', '反而', '一步步', '靠近', '自己', '月亮', '最终', '拥抱', '自己', '月亮', '对应', '原著', '六便士', '代表', '物质', '追求', '月亮代表', '精神', '追求', '精神', '追求', '带来', '物质', '追求', '完全', '无法比拟', '满足', '如果', '月亮', '定义', '精神', '追求', '工程师', '应该', '追寻', '什么', '也许', '规划', '架构', '实现', '功能', '圆满', '交付', '带来', '成就感', '也许', '别人', '认同', '满足感', '也许', '各方', '利益', '和谐', '协调', '带来', '认同感', '如果', '月亮', '定义', '理想', '追求', '工程师', '目标', '什么', '也许', '做出', '人们', '需要', '依赖', '产品', '也许', '成为', '领域', '不可', '替代', '不可或缺', '大牛', '也许', '团队', '前进', '精神领袖', '这些', '好像', '不是', '理想', '困惑', '我该', '怎样', '选择', '现实', '压力', '人们', '不得不', '面对', '六便士', '一直', '低头', '走路', '忘记', '抬头', '月亮', '人们', '因为', '房贷', '买车', '计划', '育儿', '目标', '不断', '更加', '关注', '金钱', '现实', '变成', '一个', '物质', '机器', '日复一日', '年复一年', '最终', '回过头来', '发现自己', '房子', '车子', '孩子', '长大', '可是', '自己', '几十年', '埋头苦干', '车轮', '一条条', '公路', '最终', '原地', '转圈圈', '自己', '精神', '领域', '好像', '一直', '那么', '贫乏', '人生', '路上', '只有', '物质', '追求', '只是', '追求', '高高的', '薪资', '大大的', '房子', '漂亮', '车子', '优越', '地位', '更能', '带来', '满足', '更能', '带来', '成就感', '更能', '自己', '后悔', '精神', '追求', '对于', '佛陀', '来说', '放弃', '一切', '物质', '哪怕', '身上', '遮体', '但是', '精神', '修为', '达到', '圆满', '这才', '终极', '追求', '自我实现', '对于', '这个', '精彩', '未知', '世界', '探索', '精神', '修炼', '领悟', '低头', '看着', '六便士', '同时', '需要', '抬头', '追求', '月亮', '看书', '健身', '沉思', '音乐', '冥想', '交流', '修炼', '不要', '物质', '奴隶', '精神', '主人']","[[-0.18673945 -0.09278469  0.16911082  0.11881505  0.21498204 -0.25700542
  -0.12966159  0.35421404 -0.00984345 -0.02239973 -0.04163031 -0.25254263
  -0.12836196  0.4381763   0.11183381 -0.07922645 -0.10853349 -0.01068928
  -0.07094976 -0.33956962  0.01542164  0.18145957 -0.00139195 -0.07322411
   0.08116917 -0.39826911 -0.20796287  0.0542783  -0.1534947  -0.04446047
   0.17838153  0.01549448 -0.01197132 -0.10257182 -0.07863837  0.24241366
  -0.10100499 -0.16693308  0.08059552 -0.56249449 -0.12359776 -0.43021518
  -0.03358755 -0.05416548 -0.12100723 -0.11212166 -0.19741086  0.33671292
  -0.1365732   0.29713488  0.1439584  -0.19361178 -0.0881315  -0.16911892
   0.04272349  0.28313211  0.1771529  -0.04461969  0.07020555 -0.06840128
   0.03167826  0.2117889   0.01318913  0.06241297 -0.28283456 -0.00677761
   0.03582203 -0.01778381 -0.18064085  0.32564846  0.09879415 -0.18052722
   0.29311945 -0.24125434  0.42425566  0.12786847  0.15215911 -0.10569942
  -0.19884762 -0.15211768 -0.05285434  0.00116844 -0.05204068  0.25044241
  -0.27095062  0.15459626 -0.21314021  0.30768437  0.34054132  0.10013038
   0.22205691  0.09019943  0.2671879   0.13694847  0.13804528  0.27511976
   0.07730142 -0.22603686 -0.01158212 -0.06277926]]"
1961,MAC挂载NTFS移动硬盘进行读写操作,"NTFS是Windows NT File System (NTFS)的意思，是Windows特有的文件系统，所以MAC并没有直接提供支持读写，当插入NTFS的移动硬盘时，只能读取文件不能写入文件。有两种方法可以解决这个问题，方法1就是把移动硬盘转换成FAT32格式，但是这样就能存储小于4GB的文件了，方法2如下所以，需要执行几个命令执行挂载。步骤1：查看自己的磁盘地址ls -l /Volumes/然后会看到自己的移动硬盘名称，假设名字叫做“移动硬盘2016”那么自己的移动硬盘的地址就是/Volumes/移动硬盘2016步骤2：查看移动硬盘的信息diskutil info /Volumes/移动硬盘2016会输出磁盘的详细信息查找关键字Device Node有一行会是这样：Device Node:              /dev/disk2s13、将影动硬盘退出（为的是重新挂载）执行命令hdiutil eject /Volumes/移动硬盘2016""disk2"" unmounted.""disk2"" ejected.4、创建一个自己要挂载的目录mkdir /Users/baidu/myMobileDisk5、执行磁盘挂载sudo mount_ntfs -o rw,nobrowse /dev/disk2s1 /Users/baidu/myMobileDisk然后提示输入密码，输入之后命令结束。这时候发现已经能打开/Users/baidu/myMobileDisk进行文件读写了。","['mac', '挂载', 'ntfs', '移动硬盘', '进行', '读写操作', 'ntfs', 'windows', 'nt', 'file', 'system', 'ntfs', '意思', 'windows', '特有', '文件系统', '所以', 'mac', '没有', '直接', '提供', '支持', '读写', '插入', 'ntfs', '移动硬盘', '只能', '读取', '文件', '不能', '写入', '文件', '两种', '方法', '可以', '解决', '这个', '问题', '方法', '就是', '移动硬盘', '转换成', 'fat32', '格式', '但是', '这样', '存储', '小于', '4gb', '文件', '方法', '如下', '所以', '需要', '执行', '几个', '命令', '执行', '挂载', '步骤', '查看', '自己', '磁盘', '地址', 'ls', 'volumes', '然后', '看到', '自己', '移动硬盘', '名称', '假设', '名字', '叫做', '移动硬盘', '2016', '那么', '自己', '移动硬盘', '地址', '就是', 'volumes', '移动硬盘', '2016', '步骤', '查看', '移动硬盘', '信息', 'diskutil', 'info', 'volumes', '移动硬盘', '2016', '输出', '磁盘', '详细信息', '查找', '关键字', 'device', 'node', '一行', '这样', 'device', 'node', 'dev', 'disk2s13', '影动', '硬盘', '退出', '为的是', '重新', '挂载', '执行命令', 'hdiutil', 'eject', 'volumes', '移动硬盘', '2016', 'disk2', 'unmounted', 'disk2', 'ejected.4', '创建', '一个', '自己', '挂载', '目录', 'mkdir', 'users', 'baidu', 'mymobiledisk5', '执行', '磁盘', '挂载', 'sudo', 'mount', 'ntfs', 'rw', 'nobrowse', 'dev', 'disk2s1', 'users', 'baidu', 'mymobiledisk', '然后', '提示', '输入', '密码', '输入', '之后', '命令', '结束', '这时候', '发现', '已经', '打开', 'users', 'baidu', 'mymobiledisk', '进行', '文件', '读写']","[[-0.23515658 -0.13433567  0.18926658  0.16135386  0.25586888 -0.30778788
  -0.17284974  0.44696263  0.00302927 -0.01005694 -0.06358838 -0.29271946
  -0.17274791  0.54578081  0.12500599 -0.10124931 -0.14134454  0.00216328
  -0.08564594 -0.39456391  0.03559293  0.21551089  0.00675519 -0.0726558
   0.11273708 -0.50288475 -0.25625872  0.08309115 -0.18332808 -0.05294186
   0.22678398  0.03796752 -0.01894119 -0.13414557 -0.09471031  0.30647521
  -0.11538353 -0.19048669  0.10798152 -0.68390223 -0.1543184  -0.51908343
  -0.02217954 -0.07442291 -0.15532362 -0.12651514 -0.24593682  0.44256256
  -0.13903697  0.33763236  0.19212181 -0.24598648 -0.08820277 -0.21692473
   0.06801322  0.35333761  0.23334022 -0.05515391  0.09199933 -0.08417429
   0.04119909  0.27119605  0.02287122  0.07623035 -0.34842264 -0.01841102
   0.02700293 -0.00601285 -0.20717376  0.3962848   0.13427249 -0.22775716
   0.36571139 -0.29248224  0.52645633  0.14567579  0.20486653 -0.12620849
  -0.23301273 -0.20219437 -0.08626575 -0.01041391 -0.0556695   0.29728873
  -0.35163084  0.17669738 -0.26124404  0.37762096  0.42060155  0.1135444
   0.28812765  0.11507743  0.31837355  0.16987698  0.16811847  0.35276371
   0.08589016 -0.26023306 -0.00816312 -0.08040935]]"
1964,"Stay hungry, Stay foolish",即使穷尽一生的精力，我们又能探索到世界的多少精彩？要永远保持饥饿，不要停止永远追寻和追求的步伐，去探索现实世界和精神世界的未知领域；要永远保持傻逼，对一切保持敬畏、卑微、虚心，只有从山脚出发往上攀登，才能领略到沿途的美丽风景； 这两句话，有两种翻译：1、中式翻译：求知若渴，虚心若愚这是典型的受儒家价值观影响而导致的翻译错误，在中国文化里，知识很重要，虚心是一种美德；2、西式翻译：永不知足，我行我素然而在西方文化里则完全不同，它鼓励冒险，张扬个性。纵观乔布斯的人生哲学，这两句话应该理解为：“永不知足，我行我素”。只有这样才能理解西方文化的精髓和乔布斯一生的追求。  文章来自：http://crazyant.net/1964.html,"['stay', 'hungry', 'stay', 'foolish', '即使', '穷尽', '一生', '精力', '我们', '探索', '世界', '多少', '精彩', '永远', '保持', '饥饿', '不要', '停止', '永远', '追寻', '追求', '步伐', '探索', '现实', '世界', '精神', '世界', '未知领域', '永远', '保持', '一切', '保持', '敬畏', '卑微', '虚心', '只有', '山脚', '出发', '攀登', '才能', '领略到', '沿途', '美丽', '风景', '两句话', '两种', '翻译', '中式', '翻译', '求知若渴', '虚心', '若愚', '典型', '儒家', '价值观', '影响', '导致', '翻译', '错误', '中国', '文化', '知识', '重要', '虚心', '一种', '美德', '西式', '翻译', '永不', '知足', '我行我素', '然而', '西方', '文化', '完全', '不同', '鼓励', '冒险', '张扬', '个性', '纵观', '乔布斯', '人生哲学', '两句话', '应该', '理解', '永不', '知足', '我行我素', '只有', '这样', '才能', '理解', '西方', '文化', '精髓', '乔布斯', '一生', '追求', '文章', '来自', 'http', 'crazyant', 'net', '1964', 'html']","[[-1.85611264e-01 -8.33847773e-02  1.92330533e-01  1.76498927e-01
   1.49323509e-01 -2.94853400e-01 -8.13457152e-02  3.58857868e-01
  -3.49780966e-02 -6.10483373e-02 -5.65856496e-02 -2.95979113e-01
  -9.00717773e-02  4.05474124e-01  8.36842826e-02 -1.05655189e-01
  -9.43961855e-02  2.20107982e-04 -1.14818570e-02 -3.08399583e-01
   1.62158936e-03  2.01284999e-01 -6.02574916e-02 -1.35383727e-01
   2.11330977e-02 -3.42094869e-01 -2.37899267e-01  4.81998480e-02
  -1.43862105e-01 -5.73169441e-02  1.37281442e-01  7.25203749e-02
   9.09701470e-03 -8.12543146e-02 -1.35324161e-01  2.61658756e-01
  -1.14440139e-01 -1.81896604e-01  4.94144139e-02 -4.99896979e-01
  -6.91899749e-02 -4.03104612e-01 -3.18148254e-02 -3.58907431e-02
  -8.94582520e-02 -1.74508690e-01 -2.42826899e-01  3.08149558e-01
  -4.17274996e-02  2.87243051e-01  6.87296503e-02 -2.10921767e-01
  -1.42509762e-02 -1.80514508e-01 -1.04815482e-02  3.04830637e-01
   1.30330015e-01 -6.56499464e-02  9.20712361e-02 -8.46461069e-02
   9.07038689e-02  1.70306135e-01  1.84751931e-03  5.37312300e-02
  -2.56992791e-01  3.38109338e-02 -4.98814045e-03  2.14145990e-02
  -1.64861350e-01  3.18406096e-01  4.86589967e-02 -1.33364328e-01
   3.07656164e-01 -2.39322219e-01  4.22630492e-01  2.11267485e-01
   1.91253570e-01 -1.60376378e-01 -1.56557730e-01 -1.51281557e-01
  -6.64762307e-02  2.84988149e-02 -8.90565765e-02  2.96820509e-01
  -2.76765397e-01  1.29333859e-01 -2.12028767e-01  3.72252201e-01
   3.91415845e-01  1.31652984e-01  1.51846248e-01  9.39740594e-02
   2.39680718e-01  1.15525981e-01  1.45197653e-01  3.26035278e-01
   6.31288624e-02 -1.87005085e-01  9.94786787e-02 -7.13601274e-02]]"
1973,如此重要但是经常被忽视的代码架构！,软件开发的生命周期，大致都是一样的流程：需求分析，产出概念模型概要设计，包括系统边界设计、内部架构设计、设计决策详细设计，包括代码架构，业务逻辑实现开发代码单元测试、连通测试部署上线系统运维这样的流程，开发代码这个步骤，其实是个分界点，它实现了前面的设计，同时开发好的代码会最终的进行测试和运行。正常情况下，概念模型、边界交互设计、数据流设计、系统内部架构设计、设计决策等等，都会产出成文档，供各方阅读和实施，然而，经常情况下大家却忽视了，如何在代码架构中表达这些设计意图。经常会看到一些系统的设计非常的清晰和高大上，但是去阅读代码的时候，却发现一团乱麻。如果涉及系统的交接、文档过时，就会发现这又变成了一个糟糕的系统。其实在代码中如果承载了这些意图，岂不是最好的体现。代码架构在规范化模型架构中的位置对应到系统实现过程中，对于需求分析的产出，会得到领域模型，对于边界模型的设计会产出系统上下文交互、接口设计，然而由于内部模型和代码模型因为限于系统的内部，只要它实现了边界模型，就不用关系怎么实现，最后导致了这部分关注不多，导致混乱。架构明显的编程风格无论怎么努力，模型设计和代码实现之间，会存在差异，只不过是多和少的差别。模型的设计产出的是文档，但是文档只能表达主模型的一部分内容或者投影，无法全部表达，文档同时也存在维护代价过高，从而导致容易过时的问题。采用架构明显的编码风格进行编程就是在源代码中嵌入关于系统架构模型的线索，一种设计意图。也就是说，在程序可以运行这样一个最低要求之上，还遵循了模型嵌入代码原理。这里目的是为了嵌入模型，目的也是能否在代码中表达领域模型？能否表达设计模型呢?对于领域模型，表达设计意图的标准方法就是，把对领域中类型和关系的理解，映射到程序中的类结构。而在代码中表达模块模块试图类型和运行时视图类型，主要是通过在模块的命名中，加入通用的模式命名来实现的，比如：*Manager*Service*Factory*Filter*Builder*Agent*Proxy*Repository*StatusManager*RuleEngine*Facade可以看到，这些词语来源于设计模式、分析模式、通用包名次，通过这些名次的约定，再和团队成员约定一个通用完善的代码架构，即可通过代码表达设计意图。一个通用完善的代码架构大量的书籍资料，都会提供概念模型、系统交互设计等设计，然而对于代码架构，并没有一个很规范通用的标准，这也导致了大家写出来的代码各种各样，包命名和依赖混乱不堪，代码简直无法阅读。而组织良好的包划分、关系依赖设计，是让代码变得能阅读，并且能表达设计意图的第一步。这个模型每个部分的说明，在图中都有注释。而主要的一个划分的方法，就是技术实现和业务逻辑的区别。业务逻辑是我们提供的系统的实现目标，但是这也是很容易变化的部分，如果能封装到一个模块，隔离变化，交给对业务理解透彻的同学实现，会有很好的效果。而对外提供接口、代码粘合、保存数据到DB、调用第三方资源、实现dto/model/entiry的转换，这些代码因为不涉及业务逻辑，谁都能写，因为不包含业务逻辑，那么变化的频率也会降低。business的输入，是来自manager获取或者整合好的业务对象，business通过各种逻辑处理和转换，给出业务结果，然后由manager对外进行分发。 文中引用资源：架构明显的编码风格，来自书籍《恰如其分的软件架构》代码架构图的划分，是对infoq的《架构漫谈》作者kevin提供的文章《从架构的角度看如何写好代码》中架构的改进和注释本文地址：http://crazyant.net/1973.html,"['如此', '重要', '但是', '经常', '被忽视', '代码', '架构', '软件开发', '生命周期', '大致', '一样', '流程', '需求', '分析', '产出', '概念模型', '概要', '设计', '包括', '系统', '边界', '设计', '内部', '架构设计', '设计', '决策', '详细', '设计', '包括', '代码', '架构', '业务', '逻辑', '实现', '开发', '代码', '单元测试', '连通', '测试', '部署', '上线', '系统', '运维', '这样', '流程', '开发', '代码', '这个', '步骤', '其实', '分界点', '实现', '前面', '设计', '同时', '开发', '代码', '最终', '进行', '测试', '运行', '正常', '情况', '概念模型', '边界', '交互', '设计', '数据流', '设计', '系统', '内部', '架构设计', '设计', '决策', '等等', '产出', '文档', '各方', '阅读', '实施', '然而', '经常', '情况', '大家', '忽视', '如何', '代码', '架构', '表达', '这些', '设计', '意图', '经常', '看到', '一些', '系统', '设计', '非常', '清晰', '高大', '但是', '阅读', '代码', '时候', '发现', '一团乱麻', '如果', '涉及', '系统', '交接', '文档', '过时', '发现', '变成', '一个', '糟糕', '系统', '其实', '代码', '如果', '承载', '这些', '意图', '不是', '最好', '体现', '代码', '架构', '规范化', '模型', '架构', '位置', '对应', '系统', '实现', '过程', '对于', '需求', '分析', '产出', '得到', '领域', '模型', '对于', '边界', '模型', '设计', '产出', '系统', '上下文', '交互', '接口', '设计', '然而', '由于', '内部', '模型', '代码', '模型', '因为', '限于', '系统', '内部', '只要', '实现', '边界', '模型', '不用', '关系', '怎么', '实现', '最后', '导致', '这部分', '关注', '导致', '混乱', '架构', '明显', '编程', '风格', '无论', '怎么', '努力', '模型', '设计', '代码', '实现', '之间', '存在', '差异', '只不过', '差别', '模型', '设计', '产出', '文档', '但是', '文档', '只能', '表达', '主模型', '一部分', '内容', '或者', '投影', '无法', '全部', '表达', '文档', '同时', '存在', '维护', '代价', '过高', '从而', '导致', '容易', '过时', '问题', '采用', '架构', '明显', '编码', '风格', '进行', '编程', '就是', '源代码', '嵌入', '关于', '系统', '架构', '模型', '线索', '一种', '设计', '意图', '也就是说', '程序', '可以', '运行', '这样', '一个', '最低', '要求', '之上', '遵循', '模型', '嵌入', '代码', '原理', '这里', '目的', '为了', '嵌入', '模型', '目的', '能否', '代码', '表达', '领域', '模型', '能否', '表达', '设计', '模型', '对于', '领域', '模型', '表达', '设计', '意图', '标准', '方法', '就是', '领域', '类型', '关系', '理解', '映射', '程序', '结构', '代码', '表达', '模块', '模块', '试图', '类型', '运行', '视图', '类型', '主要', '通过', '模块', '命名', '加入', '通用', '模式', '命名', '实现', '比如', 'manager', 'service', 'factory', 'filter', 'builder', 'agent', 'proxy', 'repository', 'statusmanager', 'ruleengine', 'facade', '可以', '看到', '这些', '词语', '来源于', '设计模式', '分析', '模式', '通用', '名次', '通过', '这些', '名次', '约定', '团队', '成员', '约定', '一个', '通用', '完善', '代码', '架构', '即可', '通过', '代码', '表达', '设计', '意图', '一个', '通用', '完善', '代码', '架构', '大量', '书籍', '资料', '提供', '概念模型', '系统', '交互', '设计', '设计', '然而', '对于', '代码', '架构', '没有', '一个', '规范', '通用', '标准', '导致', '大家', '出来', '代码', '各种各样', '命名', '依赖', '混乱', '不堪', '代码', '简直', '无法', '阅读', '组织', '良好', '划分', '关系', '依赖', '设计', '代码', '变得', '阅读', '并且', '表达', '设计', '意图', '第一步', '这个', '模型', '每个', '部分', '说明', '注释', '主要', '一个', '划分', '方法', '就是', '技术', '实现', '业务', '逻辑', '区别', '业务', '逻辑', '我们', '提供', '系统', '实现目标', '但是', '容易', '变化', '部分', '如果', '封装', '一个', '模块', '隔离', '变化', '交给', '业务', '理解', '透彻', '同学', '实现', '效果', '对外', '提供', '接口', '代码', '粘合', '保存', '数据', 'db', '调用', '第三方', '资源', '实现', 'dto', 'model', 'entiry', '转换', '这些', '代码', '因为', '涉及', '业务', '逻辑', '因为', '包含', '业务', '逻辑', '那么', '变化', '频率', '降低', 'business', '输入', '来自', 'manager', '获取', '或者', '整合', '业务', '对象', 'business', '通过', '各种', '逻辑', '处理', '转换', '给出', '业务', '结果', '然后', 'manager', '对外', '进行', '分发', '文中', '引用', '资源', '架构', '明显', '编码', '风格', '来自', '书籍', '恰如其分', '软件架构', '代码', '架构图', '划分', 'infoq', '架构', '漫谈', '作者', 'kevin', '提供', '文章', '架构', '角度看', '如何', '代码', '架构', '改进', '注释', '本文', '地址', 'http', 'crazyant', 'net', '1973', 'html']","[[-0.24993093 -0.13453763  0.2168931   0.18206568  0.27869431 -0.33854271
  -0.18534858  0.48271949 -0.00235928 -0.01229012 -0.06889965 -0.32895469
  -0.17576629  0.59305489  0.13805    -0.108748   -0.15120013 -0.00530896
  -0.09372932 -0.42979891  0.03723143  0.23851115 -0.00146504 -0.08098638
   0.11535121 -0.53883519 -0.28030431  0.09104695 -0.19510245 -0.05648857
   0.24905841  0.04286689 -0.01545674 -0.13938489 -0.10323957  0.33168301
  -0.12411125 -0.21183861  0.1136825  -0.74772958 -0.16437263 -0.56146393
  -0.03363624 -0.08177677 -0.16662649 -0.14325232 -0.27397334  0.47345962
  -0.1555643   0.37236555  0.19676661 -0.26922116 -0.0995105  -0.23948716
   0.07540561  0.38846206  0.24973005 -0.05638119  0.09550518 -0.08431755
   0.04274509  0.29082212  0.02454187  0.08577569 -0.37983848 -0.01623584
   0.0317143  -0.00822317 -0.22880125  0.43483271  0.13567067 -0.24788335
   0.40019706 -0.32542809  0.57007951  0.16098907  0.22452784 -0.14236181
  -0.25204384 -0.22405257 -0.09691425 -0.0121212  -0.06161008  0.32966767
  -0.37795963  0.1982942  -0.28445447  0.4094417   0.45830451  0.12926768
   0.30225997  0.12162285  0.35105698  0.18273345  0.18446474  0.38238084
   0.09248013 -0.28379004  0.00208102 -0.08179311]]"
1980,Tomcat内存分析相关方法(jmap和mat),"Linux环境命令行首先，根据进程命令，获取运行的tomcat的进程IDps aux | grep tomcat | grep java | grep bsc在第二列可以看到进程ID然后使用jmap可以查看内存占比：/home/work/bsc/java/jdk-1.7-7u60/bin/jmap -heap 7840输出的结果包括了内存各个部分的占比：[work@xxxx.com logs]$ /home/work/bsc/java/jdk-1.7-7u60/bin/jmap -heap 10433Attaching to process ID 10433, please wait...Debugger attached successfully.Server compiler detected.JVM version is 24.60-b09using parallel threads in the new generation.using thread-local object allocation.Concurrent Mark-Sweep GCHeap Configuration:   MinHeapFreeRatio = 40   MaxHeapFreeRatio = 70   MaxHeapSize      = 8388608000 (8000.0MB)   NewSize          = 1048576000 (1000.0MB)   MaxNewSize       = 1048576000 (1000.0MB)   OldSize          = 5439488 (5.1875MB)   NewRatio         = 2   SurvivorRatio    = 8   PermSize         = 134217728 (128.0MB)   MaxPermSize      = 268435456 (256.0MB)   G1HeapRegionSize = 0 (0.0MB)Heap Usage:New Generation (Eden + 1 Survivor Space):   capacity = 943718400 (900.0MB)   used     = 393328672 (375.1074523925781MB)   free     = 550389728 (524.8925476074219MB)   41.67860582139757% usedEden Space:   capacity = 838860800 (800.0MB)   used     = 288471072 (275.1074523925781MB)   free     = 550389728 (524.8925476074219MB)   34.388431549072266% usedFrom Space:   capacity = 104857600 (100.0MB)   used     = 104857600 (100.0MB)   free     = 0 (0.0MB)   100.0% usedTo Space:   capacity = 104857600 (100.0MB)   used     = 0 (0.0MB)   free     = 104857600 (100.0MB)   0.0% usedconcurrent mark-sweep generation:   capacity = 1288736768 (1229.03515625MB)   used     = 706435104 (673.7090148925781MB)   free     = 582301664 (555.3261413574219MB)   54.816089797478334% usedPerm Generation:   capacity = 134217728 (128.0MB)   used     = 65034240 (62.021484375MB)   free     = 69183488 (65.978515625MB)   48.45428466796875% used27139 interned Strings occupying 3055832 bytes.如上可以清楚的看到内存配置信息、年轻代（包括eden、from、to）、老年代、永久代各自的内存信息和占比。使用Eclipse的memory analysis tool工具进行详细分析首先，使用命令将内存dump到文件：/home/work/bsc/java/jdk-1.7-7u60/bin/jmap -dump:format=b,file=/home/work/tmp/bsc.bin 10433MAT(Memory Analyzer Tool)工具是eclipse的一个插件，使用起来非常方便，尤其是在分析大内存的dump文件时，可以非常直观的看到各个对象在堆空间中所占用的内存大小、类实例数量、对象引用关系、利用OQL对象查询，以及可以很方便的找出对象GC Roots的相关信息，当然最吸引人的还是能够快速为开发人员生成内存泄露报表，方便定位问题和分析问题。MAT工具的下载地址为： http://www.eclipse.org/mat/downloads.phpMAT插件的下载地址为： http://download.eclipse.org/mat/1.3/update-site/ 然后就可以查看内存中的数据，点击饼图，也可以看下占比最大的对象是什么，从而分析程序的行为。本文地址：http://crazyant.net/1980.html","['tomcat', '内存', '分析', '相关', '方法', 'jmap', 'mat', 'linux', '环境', '命令行', '首先', '根据', '进程', '命令', '获取', '运行', 'tomcat', '进程', 'idps', 'aux', 'grep', 'tomcat', 'grep', 'java', 'grep', 'bsc', '第二列', '可以', '看到', '进程', 'id', '然后', '使用', 'jmap', '可以', '查看', '内存', 'home', 'work', 'bsc', 'java', 'jdk', '1.7', '7u60', 'bin', 'jmap', 'heap', '7840', '输出', '结果', '包括', '内存', '各个', '部分', 'work', 'xxxx', 'com', 'logs', 'home', 'work', 'bsc', 'java', 'jdk', '1.7', '7u60', 'bin', 'jmap', 'heap', '10433attaching', 'to', 'process', 'id', '10433', 'please', 'wait', '...', 'debugger', 'attached', 'successfully', 'server', 'compiler', 'detected', 'jvm', 'version', 'is', '24.60', 'b09using', 'parallel', 'threads', 'in', 'the', 'new', 'generation', 'using', 'thread', 'local', 'object', 'allocation', 'concurrent', 'mark', 'sweep', 'gcheap', 'configuration', 'minheapfreeratio', '40', 'maxheapfreeratio', '70', 'maxheapsize', '8388608000', '8000.0', 'mb', 'newsize', '1048576000', '1000.0', 'mb', 'maxnewsize', '1048576000', '1000.0', 'mb', 'oldsize', '5439488', '5.1875', 'mb', 'newratio', 'survivorratio', 'permsize', '134217728', '128.0', 'mb', 'maxpermsize', '268435456', '256.0', 'mb', 'g1heapregionsize', '0.0', 'mb', 'heap', 'usage', 'new', 'generation', 'eden', 'survivor', 'space', 'capacity', '943718400', '900.0', 'mb', 'used', '393328672', '375.1074523925781', 'mb', 'free', '550389728', '524.8925476074219', 'mb', '41.67860582139757%', 'usededen', 'space', 'capacity', '838860800', '800.0', 'mb', 'used', '288471072', '275.1074523925781', 'mb', 'free', '550389728', '524.8925476074219', 'mb', '34.388431549072266%', 'usedfrom', 'space', 'capacity', '104857600', '100.0', 'mb', 'used', '104857600', '100.0', 'mb', 'free', '0.0', 'mb', '100.0%', 'usedto', 'space', 'capacity', '104857600', '100.0', 'mb', 'used', '0.0', 'mb', 'free', '104857600', '100.0', 'mb', '0.0%', 'usedconcurrent', 'mark', 'sweep', 'generation', 'capacity', '1288736768', '1229.03515625', 'mb', 'used', '706435104', '673.7090148925781', 'mb', 'free', '582301664', '555.3261413574219', 'mb', '54.816089797478334%', 'usedperm', 'generation', 'capacity', '134217728', '128.0', 'mb', 'used', '65034240', '62.021484375', 'mb', 'free', '69183488', '65.978515625', 'mb', '48.45428466796875%', 'used27139', 'interned', 'strings', 'occupying', '3055832', 'bytes', '如上', '可以', '清楚', '看到', '内存', '配置', '信息', '年轻', '包括', 'eden', 'from', 'to', '年代', '永久', '各自', '内存', '信息', '使用', 'eclipse', 'memory', 'analysis', 'tool', '工具', '进行', '详细分析', '首先', '使用', '命令', '内存', 'dump', '文件', 'home', 'work', 'bsc', 'java', 'jdk', '1.7', '7u60', 'bin', 'jmap', 'dump', 'format', 'file', 'home', 'work', 'tmp', 'bsc', 'bin', '10433mat', 'memory', 'analyzer', 'tool', '工具', 'eclipse', '一个', '插件', '使用', '起来', '非常', '方便', '尤其', '分析', '内存', 'dump', '文件', '可以', '非常', '直观', '看到', '各个', '对象', '空间', '占用', '内存大小', '实例', '数量', '对象', '引用', '关系', '利用', 'oql', '对象', '查询', '以及', '可以', '方便', '找出', '对象', 'gc', 'roots', '相关', '信息', '当然', '吸引', '还是', '能够', '快速', '开发人员', '生成', '内存', '泄露', '报表', '方便', '定位问题', '分析', '问题', 'mat', '工具', '下载', '地址', 'http', 'www', 'eclipse', 'org', 'mat', 'downloads', 'phpmat', '插件', '下载', '地址', 'http', 'download', 'eclipse', 'org', 'mat', '1.3', 'update', 'site', '然后', '可以', '查看', '内存', '数据', '点击', '可以', '看下', '最大', '对象', '什么', '从而', '分析程序', '行为', '本文', '地址', 'http', 'crazyant', 'net', '1980', 'html']","[[-2.48914846e-01 -9.80723445e-02  2.40885601e-01  2.05186143e-01
   2.28601017e-01 -3.56110552e-01 -1.15083117e-01  4.60200582e-01
  -6.02589394e-02 -8.46374430e-02 -6.14295475e-02 -3.67956714e-01
  -1.08245766e-01  5.17617477e-01  1.36851299e-01 -1.19755965e-01
  -1.20220464e-01 -1.16662951e-02 -4.16422398e-02 -4.36989710e-01
  -1.39834913e-02  2.70961921e-01 -6.31559700e-02 -1.71747508e-01
   4.14395894e-02 -4.44989759e-01 -3.01723135e-01  5.31822769e-02
  -1.95960214e-01 -7.65137602e-02  1.80226978e-01  5.24434425e-02
  -6.09606074e-04 -1.11229938e-01 -1.58856906e-01  3.45671518e-01
  -1.67095561e-01 -2.49901738e-01  7.74374576e-02 -6.79868680e-01
  -1.03880323e-01 -5.16525671e-01 -5.32993016e-02 -3.41265165e-02
  -1.28975583e-01 -2.08430353e-01 -2.82377693e-01  3.84783476e-01
  -1.10563497e-01  3.87969124e-01  1.05837948e-01 -2.82886772e-01
  -7.29328675e-02 -2.18220452e-01  5.32798079e-03  3.91690342e-01
   1.65487918e-01 -8.08476190e-02  1.17934825e-01 -1.08290907e-01
   1.00940990e-01  2.18189296e-01  1.66732816e-02  7.12320784e-02
  -3.53177882e-01  4.03070292e-02  1.19714121e-02  1.19348089e-02
  -2.41730484e-01  4.09082262e-01  6.76501163e-02 -1.69608046e-01
   3.86714696e-01 -3.18493879e-01  5.20769073e-01  2.56894698e-01
   2.05173767e-01 -1.80756351e-01 -2.53913429e-01 -1.68768677e-01
  -5.87368427e-02  2.66185393e-02 -9.99660913e-02  3.78757585e-01
  -3.25633812e-01  1.82491635e-01 -2.62593028e-01  4.43411920e-01
   4.82112231e-01  1.63639873e-01  2.12093001e-01  1.15171269e-01
   3.25956169e-01  1.75675366e-01  1.85696329e-01  3.84560061e-01
   9.61028103e-02 -2.56214242e-01  7.89434958e-02 -1.04227119e-01]]"
2012,打工者心态、主人公意识、个人公司品牌,作为一个雇员，我们拿工资养活自己，应该秉持着什么样的心态工作呢？打工者心态要不得，他们认为做多少工作就应该发多少工资，发多少工资才会做多少工作，三天敲钟两天敲鱼，没有规划没有激情，对于不属于自己职责范围的事情，必定低头拒绝，更不会积极的包揽一些灰色地带的事情来负责。人生只有一次，时间过去就不会复返，这种心态浪费生命浪费精力，实在要不得。主人公意识最为强大，把公司的事务当做自己的事务，任何事情都想过问以免出现差错，除了做好自己的事情，别人的事情也要督促和激励，做任何事情都是为了公司的利益，每天上班时间8个小时，他工作14个小时也不会觉得累，因为有激情，因为他自认为是公司的主人。但是现实是你并不是公司的主人，公司会在动荡期间把你这个主人给裁掉，那为什么要自欺欺其人做这个公司的主人？其实不论做什么事，我们要秉持的，是个人公司品牌。虽然只有一个人，但是要把自己当成一个公司来看待，这个公司只有自己一个员工，它对外提供的产品是软件开发和软件资讯的服务，自己就是这个公司的主人，自己做的任何事情，都需要以个人公司的品牌为其负责。而这时候所在雇主公司，其实是个人公司的合作公司，个人公司为合作公司提供了自己的产品。一个公司想要持续的活下去，必定一直需要有危机意识，竞争太激烈，淘汰很残酷，如果不比别的公司提供更好的产品、更好的服务、更好的合作，那么被取代是非常必然的事情，个人公司品牌也要秉持危机意识，对事情要积极面对，对苦难要迎难而上，只有比别的公司更好更强，才能活下去。一个公司当然要不断提升、打磨、创新改进它的产品，因此，一个程序员，要不断的学习新技术、深挖现有的技术，这样合作公司在需要外部公司提供服务的时候，我们才能立于优先的境地。一个公司也要注重营销，如果一个公司宣称它对外的广告只是一纸简历，你是不是也会认为合作公司了解它的机会、选中它的机会低的很多。因此个人公司既然成立，我们的目的就是为了销售产品，卖的更高价格，我们也要打好广告，除了那纸简历，我们可以使用博客、演讲、视频课程、写书、社交等各种方式推销自己，进而在下次出售产品的时候，能有更多的知名度；一个公司既然作为独立的个体存在，那么绝对不能滥竽充数，在合作中当然会负责一块具体的事务，搞砸了自己完全负责，因为合作公司当然有机会替换一家其他的员工来做你这个号称个人公司做的事情；一个公司除了销售自己的核心产品，为了抓住用户，经常使用赠品、促销的方式来增加销量，那么个人公司当然也不能只提供自己得软件服务产品，也会提供一些额外的奉送，比如负责合作公司的面试、提供一些技术培训、负责一些预算等事务。人生苦短，要有所为，对于很多事情，往往是因为我们没有一个正确的心态来应对，所以出现很多偏离。正所谓心态决定一切，我们不能有打工者心态，但除了创业也无法真正拥有创业者心态，那么我们可以树立个人公司品牌，随时将创业者合作者的心态融入自己的工作中去，这时候会发现，并不存在以下一些消极想法：为什么要学习，现在的技术够用了！你可是一个公司品牌，合作者公司如果有更多要求，当然会和你解除合作，选用其他产品更新更好的公司；这不是我的事情，不是我的分内之事！公司为了买东西还有赠品呢，买个煎饼果子送个豆浆来提升销量，有什么问题吗？只要我的技术强，去哪里都能去！拜托，你的技术强，可是别人知道吗？去面试的时候，只带上那么两页简历，短短的2到3个小时，你觉得能完全表达你自己吗？就能获得新的职位合作吗？你应该在之前就通过博客、演讲、视频、写书、社交等各种方式，打出了自己的品牌和产品影响力，这样才能赢得合作；从今天起，我就是个人公司的董事长。,"['打工者', '心态', '主人公', '意识', '个人', '公司', '品牌', '作为', '一个', '雇员', '我们', '工资', '养活', '自己', '应该', '秉持着', '什么样', '心态', '工作', '打工者', '心态', '要不得', '他们', '认为', '多少', '工作', '应该', '多少', '工资', '多少', '工资', '多少', '工作', '三天', '敲钟', '两天', '敲鱼', '没有', '规划', '没有', '激情', '对于', '属于', '自己', '职责', '范围', '事情', '必定', '低头', '拒绝', '不会', '积极', '包揽', '一些', '灰色', '地带', '事情', '负责', '人生', '只有', '一次', '时间', '过去', '不会', '复返', '这种', '心态', '浪费', '生命', '浪费', '精力', '实在', '要不得', '主人公', '意识', '最为', '强大', '公司', '事务', '当做', '自己', '事务', '任何', '事情', '过问', '以免', '出现', '差错', '除了', '做好', '自己', '事情', '别人', '事情', '督促', '激励', '任何', '事情', '为了', '公司', '利益', '每天', '上班时间', '小时', '工作', '14', '小时', '不会', '觉得', '因为', '激情', '因为', '认为', '公司', '主人', '但是', '现实', '不是', '公司', '主人', '公司', '动荡', '期间', '这个', '主人', '裁掉', '为什么', '自欺', '欺其人', '这个', '公司', '主人', '其实', '不论', '什么', '我们', '秉持', '个人', '公司', '品牌', '虽然', '只有', '一个', '但是', '自己', '当成', '一个', '公司', '看待', '这个', '公司', '只有', '自己', '一个', '员工', '对外', '提供', '产品', '软件开发', '软件', '资讯', '服务', '自己', '就是', '这个', '公司', '主人', '自己', '任何', '事情', '需要', '个人', '公司', '品牌', '负责', '这时候', '所在', '雇主', '公司', '其实', '个人', '公司', '合作', '公司', '个人', '公司', '合作', '公司', '提供', '自己', '产品', '一个', '公司', '想要', '持续', '活下去', '必定', '一直', '需要', '危机意识', '竞争', '激烈', '淘汰', '残酷', '如果', '不比', '别的', '公司', '提供', '更好', '产品', '更好', '服务', '更好', '合作', '那么', '取代', '非常', '必然', '事情', '个人', '公司', '品牌', '秉持', '危机意识', '事情', '积极', '面对', '苦难', '迎难而上', '只有', '别的', '公司', '更好', '更强', '才能', '活下去', '一个', '公司', '当然', '不断', '提升', '打磨', '创新', '改进', '产品', '因此', '一个', '程序员', '不断', '学习', '技术', '深挖', '现有', '技术', '这样', '合作', '公司', '需要', '外部', '公司', '提供', '服务', '时候', '我们', '才能', '立于', '优先', '境地', '一个', '公司', '注重', '营销', '如果', '一个', '公司', '宣称', '对外', '广告', '只是', '一纸', '简历', '是不是', '认为', '合作', '公司', '了解', '机会', '选中', '机会', '很多', '因此', '个人', '公司', '既然', '成立', '我们', '目的', '就是', '为了', '销售', '产品', '价格', '我们', '广告', '除了', '那纸', '简历', '我们', '可以', '使用', '博客', '演讲', '视频', '课程', '写书', '社交', '各种', '方式', '推销', '自己', '进而', '下次', '出售', '产品', '时候', '知名度', '一个', '公司', '既然', '作为', '独立', '个体', '存在', '那么', '绝对', '不能', '滥竽充数', '合作', '当然', '负责', '一块', '具体', '事务', '搞砸', '自己', '完全', '负责', '因为', '合作', '公司', '当然', '机会', '替换', '一家', '其他', '员工', '这个', '号称', '个人', '公司', '事情', '一个', '公司', '除了', '销售', '自己', '核心', '产品', '为了', '抓住', '用户', '经常', '使用', '赠品', '促销', '方式', '增加', '销量', '那么', '个人', '公司', '当然', '不能', '提供', '自己', '软件', '服务', '产品', '提供', '一些', '额外', '奉送', '比如', '负责', '合作', '公司', '面试', '提供', '一些', '技术培训', '负责', '一些', '预算', '事务', '人生', '苦短', '有所为', '对于', '很多', '事情', '往往', '是因为', '我们', '没有', '一个', '正确', '心态', '应对', '所以', '出现', '很多', '偏离', '所谓', '心态', '决定', '一切', '我们', '不能', '打工者', '心态', '除了', '创业', '无法', '真正', '拥有', '创业者', '心态', '那么', '我们', '可以', '树立', '个人', '公司', '品牌', '随时', '创业者', '合作者', '心态', '融入', '自己', '工作', '这时候', '发现', '存在', '以下', '一些', '消极', '想法', '为什么', '学习', '现在', '技术', '够用', '可是', '一个', '公司', '品牌', '合作者', '公司', '如果', '要求', '当然', '解除', '合作', '选用', '其他', '产品', '更新', '更好', '公司', '不是', '事情', '不是', '分内之事', '公司', '为了', '东西', '还有', '赠品', '买个', '煎饼果子', '送个', '豆浆', '提升', '销量', '什么', '问题', '只要', '技术', '哪里', '拜托', '技术', '可是', '别人', '知道', '面试', '时候', '带上', '那么', '两页', '简历', '短短的', '小时', '觉得', '完全', '表达', '自己', '获得', '职位', '合作', '应该', '之前', '通过', '博客', '演讲', '视频', '写书', '社交', '各种', '方式', '打出', '自己', '品牌', '产品', '影响力', '这样', '才能', '赢得', '合作', '从今天起', '就是', '个人', '公司', '董事长']","[[-0.25880293 -0.13683912  0.22339849  0.16096524  0.30140744 -0.34478091
  -0.19377574  0.48680961  0.00199366 -0.00106931 -0.06183832 -0.32612063
  -0.19344548  0.61550936  0.15256617 -0.10044411 -0.15492721 -0.01605147
  -0.11121927 -0.45377441  0.03274202  0.24177995  0.01795399 -0.07383673
   0.13578664 -0.56942079 -0.27764474  0.09025865 -0.20473589 -0.05706429
   0.26989846  0.02601764 -0.01672038 -0.14337932 -0.08874285  0.32927045
  -0.12028407 -0.21232545  0.11521492 -0.78326527 -0.18589455 -0.59412302
  -0.03835471 -0.08872062 -0.17551787 -0.13125529 -0.27263743  0.48795624
  -0.19166908  0.39315081  0.21822549 -0.25847787 -0.12093027 -0.23853977
   0.08583096  0.38153576  0.26903141 -0.05273919  0.08600089 -0.0785762
   0.02291976  0.31155165  0.02469186  0.09146644 -0.39873823 -0.03043808
   0.05179356 -0.03056729 -0.23248846  0.44953222  0.14910491 -0.27021124
   0.40299382 -0.33072146  0.59097782  0.14234308  0.22051961 -0.1336721
  -0.26607092 -0.23224679 -0.09177305 -0.01530357 -0.05248093  0.32824833
  -0.38808752  0.21384201 -0.29256256  0.40820441  0.45472827  0.1292139
   0.32947176  0.12533189  0.36799703  0.18589801  0.18755731  0.37373419
   0.10377225 -0.31009536 -0.02945532 -0.07436896]]"
2022,Mybatis源码解读-设计模式总结,"虽然我们都知道有26个设计模式，但是大多停留在概念层面，真实开发中很少遇到，Mybatis源码中使用了大量的设计模式，阅读源码并观察设计模式在其中的应用，能够更深入的理解设计模式。Mybatis至少遇到了以下的设计模式的使用：Builder模式，例如SqlSessionFactoryBuilder、XMLConfigBuilder、XMLMapperBuilder、XMLStatementBuilder、CacheBuilder；工厂模式，例如SqlSessionFactory、ObjectFactory、MapperProxyFactory；单例模式，例如ErrorContext和LogFactory；代理模式，Mybatis实现的核心，比如MapperProxy、ConnectionLogger，用的jdk的动态代理；还有executor.loader包使用了cglib或者javassist达到延迟加载的效果；组合模式，例如SqlNode和各个子类ChooseSqlNode等；模板方法模式，例如BaseExecutor和SimpleExecutor，还有BaseTypeHandler和所有的子类例如IntegerTypeHandler；适配器模式，例如Log的Mybatis接口和它对jdbc、log4j等各种日志框架的适配实现；装饰者模式，例如Cache包中的cache.decorators子包中等各个装饰者的实现；迭代器模式，例如迭代器模式PropertyTokenizer；接下来挨个模式进行解读，先介绍模式自身的知识，然后解读在Mybatis中怎样应用了该模式。 1、Builder模式Builder模式的定义是“将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。”，它属于创建类模式，一般来说，如果一个对象的构建比较复杂，超出了构造函数所能包含的范围，就可以使用工厂模式和Builder模式，相对于工厂模式会产出一个完整的产品，Builder应用于更加复杂的对象的构建，甚至只会构建产品的一个部分。在Mybatis环境的初始化过程中，SqlSessionFactoryBuilder会调用XMLConfigBuilder读取所有的MybatisMapConfig.xml和所有的*Mapper.xml文件，构建Mybatis运行的核心对象Configuration对象，然后将该Configuration对象作为参数构建一个SqlSessionFactory对象。其中XMLConfigBuilder在构建Configuration对象时，也会调用XMLMapperBuilder用于读取*Mapper文件，而XMLMapperBuilder会使用XMLStatementBuilder来读取和build所有的SQL语句。在这个过程中，有一个相似的特点，就是这些Builder会读取文件或者配置，然后做大量的XpathParser解析、配置或语法的解析、反射生成对象、存入结果缓存等步骤，这么多的工作都不是一个构造函数所能包括的，因此大量采用了Builder模式来解决。对于builder的具体类，方法都大都用build*开头，比如SqlSessionFactoryBuilder为例，它包含以下方法：即根据不同的输入参数来构建SqlSessionFactory这个工厂对象。2、工厂模式在Mybatis中比如SqlSessionFactory使用的是工厂模式，该工厂没有那么复杂的逻辑，是一个简单工厂模式。简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。SqlSession可以认为是一个Mybatis工作的核心的接口，通过这个接口可以执行执行SQL语句、获取Mappers、管理事务。类似于连接MySQL的Connection对象。可以看到，该Factory的openSession方法重载了很多个，分别支持autoCommit、Executor、Transaction等参数的输入，来构建核心的SqlSession对象。在DefaultSqlSessionFactory的默认工厂实现里，有一个方法可以看出工厂怎么产出一个产品：private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level,boolean autoCommit) {Transaction tx = null;try {final Environment environment = configuration.getEnvironment();final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);final Executor executor = configuration.newExecutor(tx, execType);return new DefaultSqlSession(configuration, executor, autoCommit);} catch (Exception e) {closeTransaction(tx); // may have fetched a connection so lets call// close()throw ExceptionFactory.wrapException(""Error opening session.  Cause: "" + e, e);} finally {ErrorContext.instance().reset();}}这是一个openSession调用的底层方法，该方法先从configuration读取对应的环境配置，然后初始化TransactionFactory获得一个Transaction对象，然后通过Transaction获取一个Executor对象，最后通过configuration、Executor、是否autoCommit三个参数构建了SqlSession。在这里其实也可以看到端倪，SqlSession的执行，其实是委托给对应的Executor来进行的。而对于LogFactory，它的实现代码：public final class LogFactory {private static Constructor<? extends Log> logConstructor;private LogFactory() {// disable construction}public static Log getLog(Class<?> aClass) {return getLog(aClass.getName());}这里有个特别的地方，是Log变量的的类型是Constructor<? extends Log>，也就是说该工厂生产的不只是一个产品，而是具有Log公共接口的一系列产品，比如Log4jImpl、Slf4jImpl等很多具体的Log。 3、单例模式单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。在Mybatis中有两个地方用到单例模式，ErrorContext和LogFactory，其中ErrorContext是用在每个线程范围内的单例，用于记录该线程的执行环境错误信息，而LogFactory则是提供给整个Mybatis使用的日志工厂，用于获得针对项目配置好的日志对象。ErrorContext的单例实现代码：public class ErrorContext {private static final ThreadLocal<ErrorContext> LOCAL = new ThreadLocal<ErrorContext>();private ErrorContext() {}public static ErrorContext instance() {ErrorContext context = LOCAL.get();if (context == null) {context = new ErrorContext();LOCAL.set(context);}return context;}构造函数是private修饰，具有一个static的局部instance变量和一个获取instance变量的方法，在获取实例的方法中，先判断是否为空如果是的话就先创建，然后返回构造好的对象。只是这里有个有趣的地方是，LOCAL的静态实例变量使用了ThreadLocal修饰，也就是说它属于每个线程各自的数据，而在instance()方法中，先获取本线程的该实例，如果没有就创建该线程独有的ErrorContext。 4、代理模式代理模式可以认为是Mybatis的核心使用的模式，正是由于这个模式，我们只需要编写Mapper.java接口，不需要实现，由Mybatis后台帮我们完成具体SQL的执行。代理模式(Proxy Pattern) ：给某一个对象提供一个代 理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。代理模式包含如下角色：Subject: 抽象主题角色Proxy: 代理主题角色RealSubject: 真实主题角色这里有两个步骤，第一个是提前创建一个Proxy，第二个是使用的时候会自动请求Proxy，然后由Proxy来执行具体事务；当我们使用Configuration的getMapper方法时，会调用mapperRegistry.getMapper方法，而该方法又会调用mapperProxyFactory.newInstance(sqlSession)来生成一个具体的代理：/** * @author Lasse Voss */public class MapperProxyFactory<T> {private final Class<T> mapperInterface;private final Map<Method, MapperMethod> methodCache = new ConcurrentHashMap<Method, MapperMethod>();public MapperProxyFactory(Class<T> mapperInterface) {this.mapperInterface = mapperInterface;}public Class<T> getMapperInterface() {return mapperInterface;}public Map<Method, MapperMethod> getMethodCache() {return methodCache;}@SuppressWarnings(""unchecked"")protected T newInstance(MapperProxy<T> mapperProxy) {return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface },mapperProxy);}public T newInstance(SqlSession sqlSession) {final MapperProxy<T> mapperProxy = new MapperProxy<T>(sqlSession, mapperInterface, methodCache);return newInstance(mapperProxy);}}在这里，先通过T newInstance(SqlSession sqlSession)方法会得到一个MapperProxy对象，然后调用T newInstance(MapperProxy<T> mapperProxy)生成代理对象然后返回。而查看MapperProxy的代码，可以看到如下内容：public class MapperProxy<T> implements InvocationHandler, Serializable {@Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {try {if (Object.class.equals(method.getDeclaringClass())) {return method.invoke(this, args);} else if (isDefaultMethod(method)) {return invokeDefaultMethod(proxy, method, args);}} catch (Throwable t) {throw ExceptionUtil.unwrapThrowable(t);}final MapperMethod mapperMethod = cachedMapperMethod(method);return mapperMethod.execute(sqlSession, args);}非常典型的，该MapperProxy类实现了InvocationHandler接口，并且实现了该接口的invoke方法。通过这种方式，我们只需要编写Mapper.java接口类，当真正执行一个Mapper接口的时候，就会转发给MapperProxy.invoke方法，而该方法则会调用后续的sqlSession.cud>executor.execute>prepareStatement等一系列方法，完成SQL的执行和返回。5、组合模式组合模式组合多个对象形成树形结构以表示“整体-部分”的结构层次。组合模式对单个对象(叶子对象)和组合对象(组合对象)具有一致性，它将对象组织到树结构中，可以用来描述整体与部分的关系。同时它也模糊了简单元素(叶子对象)和复杂元素(容器对象)的概念，使得客户能够像处理简单元素一样来处理复杂元素，从而使客户程序能够与复杂元素的内部结构解耦。在使用组合模式中需要注意一点也是组合模式最关键的地方：叶子对象和组合对象实现相同的接口。这就是组合模式能够将叶子节点和对象节点进行一致处理的原因。Mybatis支持动态SQL的强大功能，比如下面的这个SQL：<update id=""update"" parameterType=""org.format.dynamicproxy.mybatis.bean.User"">    UPDATE users    <trim prefix=""SET"" prefixOverrides="","">        <if test=""name != null and name != ''"">            name = #{name}        </if>        <if test=""age != null and age != ''"">            , age = #{age}        </if>        <if test=""birthday != null and birthday != ''"">            , birthday = #{birthday}        </if>    </trim>    where id = ${id}</update>在这里面使用到了trim、if等动态元素，可以根据条件来生成不同情况下的SQL；在DynamicSqlSource.getBoundSql方法里，调用了rootSqlNode.apply(context)方法，apply方法是所有的动态节点都实现的接口：public interface SqlNode {boolean apply(DynamicContext context);}对于实现该SqlSource接口的所有节点，就是整个组合模式树的各个节点：组合模式的简单之处在于，所有的子节点都是同一类节点，可以递归的向下执行，比如对于TextSqlNode，因为它是最底层的叶子节点，所以直接将对应的内容append到SQL语句中：@Overridepublic boolean apply(DynamicContext context) {GenericTokenParser parser = createParser(new BindingTokenParser(context, injectionFilter));context.appendSql(parser.parse(text));return true;}但是对于IfSqlNode，就需要先做判断，如果判断通过，仍然会调用子元素的SqlNode，即contents.apply方法，实现递归的解析。@Overridepublic boolean apply(DynamicContext context) {if (evaluator.evaluateBoolean(test, context.getBindings())) {contents.apply(context);return true;}return false;} 6、模板方法模式模板方法模式是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做基本方法(primitive method)；而将这些基本方法汇总起来的方法叫做模板方法(template method)，这个设计模式的名字就是从此而来。模板类定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。在Mybatis中，sqlSession的SQL执行，都是委托给Executor实现的，Executor包含以下结构：其中的BaseExecutor就采用了模板方法模式，它实现了大部分的SQL执行逻辑，然后把以下几个方法交给子类定制化完成：protected abstract int doUpdate(MappedStatement ms, Object parameter) throws SQLException;protected abstract List<BatchResult> doFlushStatements(boolean isRollback) throws SQLException;protected abstract <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds,ResultHandler resultHandler, BoundSql boundSql) throws SQLException; 该模板方法类有几个子类的具体实现，使用了不同的策略：简单SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。（可以是Statement或PrepareStatement对象）重用ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map<String, Statement>内，供下一次使用。（可以是Statement或PrepareStatement对象）批量BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理的；BatchExecutor相当于维护了多个桶，每个桶里都装了很多属于自己的SQL，就像苹果蓝里装了很多苹果，番茄蓝里装了很多番茄，最后，再统一倒进仓库。（可以是Statement或PrepareStatement对象）比如在SimpleExecutor中这样实现update方法：@Overridepublic int doUpdate(MappedStatement ms, Object parameter) throws SQLException {Statement stmt = null;try {Configuration configuration = ms.getConfiguration();StatementHandler handler = configuration.newStatementHandler(this, ms, parameter, RowBounds.DEFAULT, null,null);stmt = prepareStatement(handler, ms.getStatementLog());return handler.update(stmt);} finally {closeStatement(stmt);}} 7、适配器模式适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。 在Mybatsi的logging包中，有一个Log接口：/** * @author Clinton Begin */public interface Log {boolean isDebugEnabled();boolean isTraceEnabled();void error(String s, Throwable e);void error(String s);void debug(String s);void trace(String s);void warn(String s);}该接口定义了Mybatis直接使用的日志方法，而Log接口具体由谁来实现呢？Mybatis提供了多种日志框架的实现，这些实现都匹配这个Log接口所定义的接口方法，最终实现了所有外部日志框架到Mybatis日志包的适配：比如对于Log4jImpl的实现来说，该实现持有了org.apache.log4j.Logger的实例，然后所有的日志方法，均委托该实例来实现。public class Log4jImpl implements Log {private static final String FQCN = Log4jImpl.class.getName();private Logger log;public Log4jImpl(String clazz) {log = Logger.getLogger(clazz);}@Overridepublic boolean isDebugEnabled() {return log.isDebugEnabled();}@Overridepublic boolean isTraceEnabled() {return log.isTraceEnabled();}@Overridepublic void error(String s, Throwable e) {log.log(FQCN, Level.ERROR, s, e);}@Overridepublic void error(String s) {log.log(FQCN, Level.ERROR, s, null);}@Overridepublic void debug(String s) {log.log(FQCN, Level.DEBUG, s, null);}@Overridepublic void trace(String s) {log.log(FQCN, Level.TRACE, s, null);}@Overridepublic void warn(String s) {log.log(FQCN, Level.WARN, s, null);}} 8、装饰者模式装饰模式(Decorator Pattern) ：动态地给一个对象增加一些额外的职责(Responsibility)，就增加对象功能来说，装饰模式比生成子类实现更为灵活。其别名也可以称为包装器(Wrapper)，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”，它是一种对象结构型模式。 在mybatis中，缓存的功能由根接口Cache（org.apache.ibatis.cache.Cache）定义。整个体系采用装饰器设计模式，数据存储和缓存的基本功能由PerpetualCache（org.apache.ibatis.cache.impl.PerpetualCache）永久缓存实现，然后通过一系列的装饰器来对PerpetualCache永久缓存进行缓存策略等方便的控制。如下图：用于装饰PerpetualCache的标准装饰器共有8个（全部在org.apache.ibatis.cache.decorators包中）：FifoCache：先进先出算法，缓存回收策略LoggingCache：输出缓存命中的日志信息LruCache：最近最少使用算法，缓存回收策略ScheduledCache：调度缓存，负责定时清空缓存SerializedCache：缓存序列化和反序列化存储SoftCache：基于软引用实现的缓存管理策略SynchronizedCache：同步的缓存装饰器，用于防止多线程并发访问WeakCache：基于弱引用实现的缓存管理策略另外，还有一个特殊的装饰器TransactionalCache：事务性的缓存正如大多数持久层框架一样，mybatis缓存同样分为一级缓存和二级缓存一级缓存，又叫本地缓存，是PerpetualCache类型的永久缓存，保存在执行器中（BaseExecutor），而执行器又在SqlSession（DefaultSqlSession）中，所以一级缓存的生命周期与SqlSession是相同的。二级缓存，又叫自定义缓存，实现了Cache接口的类都可以作为二级缓存，所以可配置如encache等的第三方缓存。二级缓存以namespace名称空间为其唯一标识，被保存在Configuration核心配置对象中。二级缓存对象的默认类型为PerpetualCache，如果配置的缓存是默认类型，则mybatis会根据配置自动追加一系列装饰器。Cache对象之间的引用顺序为：SynchronizedCache-->LoggingCache-->SerializedCache-->ScheduledCache-->LruCache-->PerpetualCache9、迭代器模式迭代器（Iterator）模式，又叫做游标（Cursor）模式。GOF给出的定义为：提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。 Java的Iterator就是迭代器模式的接口，只要实现了该接口，就相当于应用了迭代器模式：比如Mybatis的PropertyTokenizer是property包中的重量级类，该类会被reflection包中其他的类频繁的引用到。这个类实现了Iterator接口，在使用时经常被用到的是Iterator接口中的hasNext这个函数。public class PropertyTokenizer implements Iterator<PropertyTokenizer> {private String name;private String indexedName;private String index;private String children;public PropertyTokenizer(String fullname) {int delim = fullname.indexOf('.');if (delim > -1) {name = fullname.substring(0, delim);children = fullname.substring(delim + 1);} else {name = fullname;children = null;}indexedName = name;delim = name.indexOf('[');if (delim > -1) {index = name.substring(delim + 1, name.length() - 1);name = name.substring(0, delim);}}public String getName() {return name;}public String getIndex() {return index;}public String getIndexedName() {return indexedName;}public String getChildren() {return children;}@Overridepublic boolean hasNext() {return children != null;}@Overridepublic PropertyTokenizer next() {return new PropertyTokenizer(children);}@Overridepublic void remove() {throw new UnsupportedOperationException(""Remove is not supported, as it has no meaning in the context of properties."");}}可以看到，这个类传入一个字符串到构造函数，然后提供了iterator方法对解析后的子串进行遍历，是一个很常用的方法类。 参考资料：图说设计模式：http://design-patterns.readthedocs.io/zh_CN/latest/index.html深入浅出Mybatis系列（十）---SQL执行流程分析（源码篇）：http://www.cnblogs.com/dongying/p/4142476.html设计模式读书笔记-----组合模式 http://www.cnblogs.com/chenssy/p/3299719.htmlMybatis3.3.x技术内幕（四）：五鼠闹东京之执行器Executor设计原本 http://blog.csdn.net/wagcy/article/details/32963235mybatis缓存机制详解（一）——Cache https://my.oschina.net/lixin91/blog/620068本文地址：http://crazyant.net/2022.html，转载请注明来源。","['mybatis', '源码', '解读', '设计模式', '总结', '虽然', '我们', '知道', '26', '设计模式', '但是', '大多', '停留', '概念', '层面', '真实', '开发', '很少', '遇到', 'mybatis', '源码', '使用', '大量', '设计模式', '阅读', '源码', '观察', '设计模式', '其中', '应用', '能够', '深入', '理解', '设计模式', 'mybatis', '至少', '遇到', '以下', '设计模式', '使用', 'builder', '模式', '例如', 'sqlsessionfactorybuilder', 'xmlconfigbuilder', 'xmlmapperbuilder', 'xmlstatementbuilder', 'cachebuilder', '工厂', '模式', '例如', 'sqlsessionfactory', 'objectfactory', 'mapperproxyfactory', '单例', '模式', '例如', 'errorcontext', 'logfactory', '代理', '模式', 'mybatis', '实现', '核心', '比如', 'mapperproxy', 'connectionlogger', 'jdk', '动态', '代理', '还有', 'executor', 'loader', '使用', 'cglib', '或者', 'javassist', '达到', '延迟', '加载', '效果', '组合', '模式', '例如', 'sqlnode', '各个', '子类', 'choosesqlnode', '模板', '方法', '模式', '例如', 'baseexecutor', 'simpleexecutor', '还有', 'basetypehandler', '所有', '子类', '例如', 'integertypehandler', '适配器', '模式', '例如', 'log', 'mybatis', '接口', 'jdbc', 'log4j', '各种', '日志', '框架', '适配', '实现', '装饰', '模式', '例如', 'cache', '包中', 'cache', 'decorators', '子包', '中等', '各个', '装饰', '实现', '迭代', '模式', '例如', '迭代', '模式', 'propertytokenizer', '接下来', '挨个', '模式', '进行', '解读', '介绍', '模式', '自身', '知识', '然后', '解读', 'mybatis', '怎样', '应用', '模式', 'builder', '模式', 'builder', '模式', '定义', '一个', '复杂', '对象', '构建', '表示', '分离', '使得', '同样', '构建', '过程', '可以', '创建', '不同', '表示', '属于', '创建', '模式', '一般来说', '如果', '一个', '对象', '构建', '比较复杂', '超出', '构造函数', '包含', '范围', '可以', '使用', '工厂', '模式', 'builder', '模式', '相对', '工厂', '模式', '产出', '一个', '完整', '产品', 'builder', '应用', '更加', '复杂', '对象', '构建', '甚至', '只会', '构建', '产品', '一个', '部分', 'mybatis', '环境', '初始化', '过程', 'sqlsessionfactorybuilder', '调用', 'xmlconfigbuilder', '读取', '所有', 'mybatismapconfig', 'xml', '所有', 'mapper', 'xml', '文件', '构建', 'mybatis', '运行', '核心', '对象', 'configuration', '对象', '然后', 'configuration', '对象', '作为', '参数', '构建', '一个', 'sqlsessionfactory', '对象', '其中', 'xmlconfigbuilder', '构建', 'configuration', '对象', '调用', 'xmlmapperbuilder', '用于', '读取', 'mapper', '文件', 'xmlmapperbuilder', '使用', 'xmlstatementbuilder', '读取', 'build', '所有', 'sql', '语句', '这个', '过程', '一个', '相似', '特点', '就是', '这些', 'builder', '读取', '文件', '或者', '配置', '然后', '大量', 'xpathparser', '解析', '配置', '语法', '解析', '反射', '生成', '对象', '存入', '结果', '缓存', '步骤', '这么', '工作', '不是', '一个', '构造函数', '包括', '因此', '大量', '采用', 'builder', '模式', '解决', '对于', 'builder', '具体', '方法', '大都', 'build', '开头', '比如', 'sqlsessionfactorybuilder', '为例', '包含', '以下', '方法', '根据', '不同', '输入', '参数', '构建', 'sqlsessionfactory', '这个', '工厂', '对象', '工厂', '模式', 'mybatis', '比如', 'sqlsessionfactory', '使用', '工厂', '模式', '工厂', '没有', '那么', '复杂', '逻辑', '一个', '简单', '工厂', '模式', '简单', '工厂', '模式', 'simple', 'factory', 'pattern', '称为', '静态', '工厂', '方法', 'static', 'factory', 'method', '模式', '属于', '创建', '模式', '简单', '工厂', '模式', '可以', '根据', '参数', '不同', '返回', '不同', '实例', '简单', '工厂', '模式', '专门', '定义', '一个', '类来', '负责', '创建', '其他', '实例', '创建', '实例', '通常', '具有', '共同', '父类', 'sqlsession', '可以', '认为', '一个', 'mybatis', '工作', '核心', '接口', '通过', '这个', '接口', '可以', '执行', '执行', 'sql', '语句', '获取', 'mappers', '管理', '事务', '类似', '连接', 'mysql', 'connection', '对象', '可以', '看到', 'factory', 'opensession', '方法', '重载', '很多', '分别', '支持', 'autocommit', 'executor', 'transaction', '参数', '输入', '构建', '核心', 'sqlsession', '对象', 'defaultsqlsessionfactory', '默认', '工厂', '实现', '一个', '方法', '可以', '看出', '工厂', '怎么', '产出', '一个', '产品', 'private', 'sqlsession', 'opensessionfromdatasource', 'executortype', 'exectype', 'transactionisolationlevel', 'level', 'boolean', 'autocommit', 'transaction', 'tx', 'null', 'try', 'final', 'environment', 'environment', 'configuration', 'getenvironment', 'final', 'transactionfactory', 'transactionfactory', 'gettransactionfactoryfromenvironment', 'environment', 'tx', 'transactionfactory', 'newtransaction', 'environment', 'getdatasource', 'level', 'autocommit', 'final', 'executor', 'executor', 'configuration', 'newexecutor', 'tx', 'exectype', 'return', 'new', 'defaultsqlsession', 'configuration', 'executor', 'autocommit', 'catch', 'exception', 'closetransaction', 'tx', 'may', 'have', 'fetched', 'connection', 'so', 'lets', 'call', 'close', 'throw', 'exceptionfactory', 'wrapexception', 'error', 'opening', 'session', 'cause', 'finally', 'errorcontext', 'instance', 'reset', '这是', '一个', 'opensession', '调用', '底层', '方法', '方法', 'configuration', '读取', '对应', '环境', '配置', '然后', '初始化', 'transactionfactory', '获得', '一个', 'transaction', '对象', '然后', '通过', 'transaction', '获取', '一个', 'executor', '对象', '最后', '通过', 'configuration', 'executor', '是否', 'autocommit', '三个', '参数', '构建', 'sqlsession', '这里', '其实', '可以', '看到', '端倪', 'sqlsession', '执行', '其实', '委托', '对应', 'executor', '进行', '对于', 'logfactory', '实现', '代码', 'public', 'final', 'class', 'logfactory', 'private', 'static', 'constructor', 'extends', 'log', 'logconstructor', 'private', 'logfactory', 'disable', 'construction', 'public', 'static', 'log', 'getlog', 'class', 'aclass', 'return', 'getlog', 'aclass', 'getname', '这里', '有个', '特别', '地方', 'log', '变量', '类型', 'constructor', 'extends', 'log', '也就是说', '工厂', '生产', '只是', '一个', '产品', '而是', '具有', 'log', '公共', '接口', '一系列', '产品', '比如', 'log4jimpl', 'slf4jimpl', '很多', '具体', 'log', '单例', '模式', '单例', '模式', 'singleton', 'pattern', '单例', '模式', '确保', '一个', '只有', '一个', '实例', '而且', '自行', '实例', '整个', '系统', '提供', '这个', '实例', '这个', '称为', '单例', '提供', '全局', '访问', '方法', '单例', '模式', '要点', '三个', '一是', '某个', '只能', '一个', '实例', '二是', '必须', '自行', '创建', '这个', '实例', '三是', '必须', '自行', '整个', '系统', '提供', '这个', '实例', '单例', '模式', '一种', '对象', '创建', '模式', '单例', '模式', '又名', '单件', '模式', '单态', '模式', 'mybatis', '中有', '两个', '地方', '用到', '单例', '模式', 'errorcontext', 'logfactory', '其中', 'errorcontext', '每个', '线程', '范围', '单例', '用于', '记录', '线程', '执行', '环境', '错误信息', 'logfactory', '提供', '整个', 'mybatis', '使用', '日志', '工厂', '用于', '获得', '针对', '项目', '配置', '日志', '对象', 'errorcontext', '单例', '实现', '代码', 'public', 'class', 'errorcontext', 'private', 'static', 'final', 'threadlocal', 'errorcontext', 'local', 'new', 'threadlocal', 'errorcontext', 'private', 'errorcontext', 'public', 'static', 'errorcontext', 'instance', 'errorcontext', 'context', 'local', 'get', 'if', 'context', 'null', 'context', 'new', 'errorcontext', 'local', 'set', 'context', 'return', 'context', '构造函数', 'private', '修饰', '具有', '一个', 'static', '局部', 'instance', '变量', '一个', '获取', 'instance', '变量', '方法', '获取', '实例', '方法', '判断', '是否', '为空', '如果', '的话', '创建', '然后', '返回', '构造', '对象', '只是', '这里', '有个', '有趣', '地方', 'local', '静态', '实例', '变量', '使用', 'threadlocal', '修饰', '也就是说', '属于', '每个', '线程', '各自', '数据', 'instance', '方法', '获取', '线程', '实例', '如果', '没有', '创建', '线程', '独有', 'errorcontext', '代理', '模式', '代理', '模式', '可以', '认为', 'mybatis', '核心', '使用', '模式', '正是', '由于', '这个', '模式', '我们', '需要', '编写', 'mapper', 'java', '接口', '需要', '实现', 'mybatis', '后台', '我们', '完成', '具体', 'sql', '执行', '代理', '模式', 'proxy', 'pattern', '一个', '对象', '提供', '一个', '代理', '对象', '控制', '对原', '对象', '引用', '代理', '模式', '叫做', 'proxy', 'surrogate', '一种', '对象', '结构型', '模式', '代理', '模式', '包含', '如下', '角色', 'subject', '抽象', '主题', '角色', 'proxy', '代理', '主题', '角色', 'realsubject', '真实', '主题', '角色', '这里', '两个', '步骤', '第一个', '提前', '创建', '一个', 'proxy', '第二个', '使用', '时候', '自动', '请求', 'proxy', '然后', 'proxy', '执行', '具体', '事务', '我们', '使用', 'configuration', 'getmapper', '方法', '调用', 'mapperregistry', 'getmapper', '方法', '方法', '调用', 'mapperproxyfactory', 'newinstance', 'sqlsession', '生成', '一个', '具体', '代理', 'author', 'lasse', 'voss', 'public', 'class', 'mapperproxyfactory', 'private', 'final', 'class', 'mapperinterface', 'private', 'final', 'map', 'method', 'mappermethod', 'methodcache', 'new', 'concurrenthashmap', 'method', 'mappermethod', 'public', 'mapperproxyfactory', 'class', 'mapperinterface', 'this', 'mapperinterface', 'mapperinterface', 'public', 'class', 'getmapperinterface', 'return', 'mapperinterface', 'public', 'map', 'method', 'mappermethod', 'getmethodcache', 'return', 'methodcache', 'suppresswarnings', 'unchecked', 'protected', 'newinstance', 'mapperproxy', 'mapperproxy', 'return', 'proxy', 'newproxyinstance', 'mapperinterface', 'getclassloader', 'new', 'class', 'mapperinterface', 'mapperproxy', 'public', 'newinstance', 'sqlsession', 'sqlsession', 'final', 'mapperproxy', 'mapperproxy', 'new', 'mapperproxy', 'sqlsession', 'mapperinterface', 'methodcache', 'return', 'newinstance', 'mapperproxy', '这里', '通过', 'newinstance', 'sqlsession', 'sqlsession', '方法', '得到', '一个', 'mapperproxy', '对象', '然后', '调用', 'newinstance', 'mapperproxy', 'mapperproxy', '生成', '代理', '对象', '然后', '返回', '查看', 'mapperproxy', '代码', '可以', '看到', '如下', '内容', 'public', 'class', 'mapperproxy', 'implements', 'invocationhandler', 'serializable', 'overridepublic', 'object', 'invoke', 'object', 'proxy', 'method', 'method', 'object', 'args', 'throws', 'throwable', 'try', 'if', 'object', 'class', 'equals', 'method', 'getdeclaringclass', 'return', 'method', 'invoke', 'this', 'args', 'else', 'if', 'isdefaultmethod', 'method', 'return', 'invokedefaultmethod', 'proxy', 'method', 'args', 'catch', 'throwable', 'throw', 'exceptionutil', 'unwrapthrowable', 'final', 'mappermethod', 'mappermethod', 'cachedmappermethod', 'method', 'return', 'mappermethod', 'execute', 'sqlsession', 'args', '非常', '典型', 'mapperproxy', '实现', 'invocationhandler', '接口', '并且', '实现', '接口', 'invoke', '方法', '通过', '这种', '方式', '我们', '需要', '编写', 'mapper', 'java', '接口类', '真正', '执行', '一个', 'mapper', '接口', '时候', '转发给', 'mapperproxy', 'invoke', '方法', '方法', '调用', '后续', 'sqlsession', 'cud', 'executor', 'execute', 'preparestatement', '一系列', '方法', '完成', 'sql', '执行', '返回', '组合', '模式', '组合', '模式', '组合', '多个', '对象', '形成', '树形', '结构', '表示', '整体', '部分', '结构', '层次', '组合', '模式', '单个', '对象', '叶子', '对象', '组合', '对象', '组合', '对象', '具有', '一致性', '对象', '组织', '树结构', '可以', '用来', '描述', '整体', '部分', '关系', '同时', '模糊', '简单', '元素', '叶子', '对象', '复杂', '元素', '容器', '对象', '概念', '使得', '客户', '能够', '处理', '简单', '元素', '一样', '处理', '复杂', '元素', '从而', '客户程序', '能够', '复杂', '元素', '内部结构', '使用', '组合', '模式', '需要', '注意', '一点', '组合', '模式', '关键', '地方', '叶子', '对象', '组合', '对象', '实现', '相同', '接口', '就是', '组合', '模式', '能够', '叶子', '节点', '对象', '节点', '进行', '一致', '处理', '原因', 'mybatis', '支持', '动态', 'sql', '强大', '功能', '比如', '下面', '这个', 'sql', 'update', 'id', 'update', 'parametertype', 'org', 'format', 'dynamicproxy', 'mybatis', 'bean', 'user', 'update', 'users', 'trim', 'prefix', 'set', 'prefixoverrides', 'if', 'test', 'name', 'null', 'and', 'name', 'name', 'name', 'if', 'if', 'test', 'age', 'null', 'and', 'age', 'age', 'age', 'if', 'if', 'test', 'birthday', 'null', 'and', 'birthday', 'birthday', 'birthday', 'if', 'trim', 'where', 'id', 'id', 'update', '里面', '使用', 'trim', 'if', '动态', '元素', '可以', '根据', '条件', '生成', '不同', '情况', 'sql', 'dynamicsqlsource', 'getboundsql', '方法', '调用', 'rootsqlnode', 'apply', 'context', '方法', 'apply', '方法', '所有', '动态', '节点', '实现', '接口', 'public', 'interface', 'sqlnode', 'boolean', 'apply', 'dynamiccontext', 'context', '对于', '实现', 'sqlsource', '接口', '所有', '节点', '就是', '整个', '组合', '模式', '各个', '节点', '组合', '模式', '简单', '在于', '所有', '节点', '一类', '节点', '可以', '递归', '向下', '执行', '比如', '对于', 'textsqlnode', '因为', '最底层', '叶子', '节点', '所以', '直接', '对应', '内容', 'append', 'sql', '语句', 'overridepublic', 'boolean', 'apply', 'dynamiccontext', 'context', 'generictokenparser', 'parser', 'createparser', 'new', 'bindingtokenparser', 'context', 'injectionfilter', 'context', 'appendsql', 'parser', 'parse', 'text', 'return', 'true', '但是', '对于', 'ifsqlnode', '需要', '判断', '如果', '判断', '通过', '仍然', '调用', '元素', 'sqlnode', 'contents', 'apply', '方法', '实现', '递归', '解析', 'overridepublic', 'boolean', 'apply', 'dynamiccontext', 'context', 'if', 'evaluator', 'evaluateboolean', 'test', 'context', 'getbindings', 'contents', 'apply', 'context', 'return', 'true', 'return', 'false', '模板', '方法', '模式', '模板', '方法', '模式', '所有', '模式', '最为', '常见', '几个', '模式', '之一', '基于', '继承', '代码', '复用', '基本', '技术', '模板', '方法', '模式', '需要', '开发', '抽象类', '具体', '子类', '设计师', '之间', '协作', '一个', '设计师', '负责', '给出', '一个', '算法', '轮廓', '骨架', '一些', '设计师', '负责', '给出', '这个', '算法', '各个', '逻辑', '步骤', '代表', '这些', '具体', '逻辑', '步骤', '方法', '称做', '基本', '方法', 'primitive', 'method', '这些', '基本', '方法', '汇总', '起来', '方法', '叫做', '模板', '方法', 'template', 'method', '这个', '设计模式', '名字', '就是', '从此', '模板', '定义', '一个', '操作', '算法', '骨架', '一些', '步骤', '延迟', '子类', '使得', '子类', '可以', '改变', '一个', '算法', '结构', '即可', '定义', '算法', '某些', '特定', '步骤', 'mybatis', 'sqlsession', 'sql', '执行', '委托', 'executor', '实现', 'executor', '包含', '以下', '结构', '其中', 'baseexecutor', '采用', '模板', '方法', '模式', '实现', '大部分', 'sql', '执行', '逻辑', '然后', '以下', '几个', '方法', '交给', '子类', '定制', '完成', 'protected', 'abstract', 'int', 'doupdate', 'mappedstatement', 'ms', 'object', 'parameter', 'throws', 'sqlexception', 'protected', 'abstract', 'list', 'batchresult', 'doflushstatements', 'boolean', 'isrollback', 'throws', 'sqlexception', 'protected', 'abstract', 'list', 'doquery', 'mappedstatement', 'ms', 'object', 'parameter', 'rowbounds', 'rowbounds', 'resulthandler', 'resulthandler', 'boundsql', 'boundsql', 'throws', 'sqlexception', '模板', '方法', '类有', '几个', '子类', '具体', '实现', '使用', '不同', '策略', '简单', 'simpleexecutor', '执行', '一次', 'update', 'select', '开启', '一个', 'statement', '对象', '立刻', '关闭', 'statement', '对象', '可以', 'statement', 'preparestatement', '对象', '重用', 'reuseexecutor', '执行', 'update', 'select', 'sql', '作为', 'key', '查找', 'statement', '对象', '存在', '使用', '存在', '创建', '完后', '关闭', 'statement', '对象', '而是', '放置', 'map', 'string', 'statement', '供下', '一次', '使用', '可以', 'statement', 'preparestatement', '对象', '批量', 'batchexecutor', '执行', 'update', '没有', 'select', 'jdbc', '批处理', '支持', 'select', '所有', 'sql', '添加', '批处理', 'addbatch', '等待', '统一', '执行', 'executebatch', '缓存', '多个', 'statement', '对象', '每个', 'statement', '对象', 'addbatch', '完毕', '等待', '逐一', '执行', 'executebatch', '批处理', 'batchexecutor', '相当于', '维护', '多个', '每个', '很多', '属于', '自己', 'sql', '苹果', '蓝里装', '很多', '苹果', '番茄', '蓝里装', '很多', '番茄', '最后', '统一', '仓库', '可以', 'statement', 'preparestatement', '对象', '比如', 'simpleexecutor', '这样', '实现', 'update', '方法', 'overridepublic', 'int', 'doupdate', 'mappedstatement', 'ms', 'object', 'parameter', 'throws', 'sqlexception', 'statement', 'stmt', 'null', 'try', 'configuration', 'configuration', 'ms', 'getconfiguration', 'statementhandler', 'handler', 'configuration', 'newstatementhandler', 'this', 'ms', 'parameter', 'rowbounds', 'default', 'null', 'null', 'stmt', 'preparestatement', 'handler', 'ms', 'getstatementlog', 'return', 'handler', 'update', 'stmt', 'finally', 'closestatement', 'stmt', '适配器', '模式', '适配器', '模式', 'adapter', 'pattern', '一个', '接口', '转换成', '客户', '希望', '一个', '接口', '适配器', '模式', '接口', '兼容', '那些', '可以', '一起', '工作', '别名', '包装', 'wrapper', '适配器', '模式', '可以', '作为', '结构型', '模式', '可以', '作为', '对象', '结构型', '模式', 'mybatsi', 'logging', '包中', '一个', 'log', '接口', 'author', 'clinton', 'begin', 'public', 'interface', 'log', 'boolean', 'isdebugenabled', 'boolean', 'istraceenabled', 'void', 'error', 'string', 'throwable', 'void', 'error', 'string', 'void', 'debug', 'string', 'void', 'trace', 'string', 'void', 'warn', 'string', '接口定义', 'mybatis', '直接', '使用', '日志', '方法', 'log', '接口', '具体', '由谁来', '实现', 'mybatis', '提供', '多种', '日志', '框架', '实现', '这些', '实现', '匹配', '这个', 'log', '接口', '定义', '接口', '方法', '最终', '实现', '所有', '外部', '日志', '框架', 'mybatis', '日志', '适配', '比如', '对于', 'log4jimpl', '实现', '来说', '实现', '持有', 'org', 'apache', 'log4j', 'logger', '实例', '然后', '所有', '日志', '方法', '委托', '实例', '实现', 'public', 'class', 'log4jimpl', 'implements', 'log', 'private', 'static', 'final', 'string', 'fqcn', 'log4jimpl', 'class', 'getname', 'private', 'logger', 'log', 'public', 'log4jimpl', 'string', 'clazz', 'log', 'logger', 'getlogger', 'clazz', 'overridepublic', 'boolean', 'isdebugenabled', 'return', 'log', 'isdebugenabled', 'overridepublic', 'boolean', 'istraceenabled', 'return', 'log', 'istraceenabled', 'overridepublic', 'void', 'error', 'string', 'throwable', 'log', 'log', 'fqcn', 'level', 'error', 'overridepublic', 'void', 'error', 'string', 'log', 'log', 'fqcn', 'level', 'error', 'null', 'overridepublic', 'void', 'debug', 'string', 'log', 'log', 'fqcn', 'level', 'debug', 'null', 'overridepublic', 'void', 'trace', 'string', 'log', 'log', 'fqcn', 'level', 'trace', 'null', 'overridepublic', 'void', 'warn', 'string', 'log', 'log', 'fqcn', 'level', 'warn', 'null', '装饰', '模式', '装饰', '模式', 'decorator', 'pattern', '动态', '一个', '对象', '增加', '一些', '额外', '职责', 'responsibility', '增加', '对象', '功能', '来说', '装饰', '模式', '生成', '子类', '实现', '更为', '灵活', '别名', '可以', '称为', '包装', 'wrapper', '适配器', '模式', '别名', '相同', '它们', '适用', '不同', '场合', '根据', '翻译', '不同', '装饰', '模式', '有人', '称之为', '油漆工', '模式', '一种', '对象', '结构型', '模式', 'mybatis', '缓存', '功能', '由根', '接口', 'cache', 'org', 'apache', 'ibatis', 'cache', 'cache', '定义', '整个', '体系', '采用', '装饰', '设计模式', '数据', '存储', '缓存', '基本功能', 'perpetualcache', 'org', 'apache', 'ibatis', 'cache', 'impl', 'perpetualcache', '永久', '缓存', '实现', '然后', '通过', '一系列', '装饰', '器来', 'perpetualcache', '永久', '缓存', '进行', '缓存', '策略', '方便', '控制', '如下', '用于', '装饰', 'perpetualcache', '标准', '装饰', '共有', '全部', 'org', 'apache', 'ibatis', 'cache', 'decorators', '包中', 'fifocache', '先进先出', '算法', '缓存', '回收', '策略', 'loggingcache', '输出', '缓存', '命中', '日志', '信息', 'lrucache', '最近', '最少', '使用', '算法', '缓存', '回收', '策略', 'scheduledcache', '调度', '缓存', '负责', '定时', '清空', '缓存', 'serializedcache', '缓存', '序列化', '序列化', '存储', 'softcache', '基于', '引用', '实现', '缓存', '管理策略', 'synchronizedcache', '同步', '缓存', '装饰', '用于', '防止', '多线程', '并发', '访问', 'weakcache', '基于', '引用', '实现', '缓存', '管理策略', '另外', '还有', '一个', '特殊', '装饰', 'transactionalcache', '事务性', '缓存', '正如', '大多数', '持久', '框架', '一样', 'mybatis', '缓存', '同样', '分为', '一级', '缓存', '二级缓存', '一级', '缓存', '本地', '缓存', 'perpetualcache', '类型', '永久', '缓存', '保存', '执行器', 'baseexecutor', '执行器', 'sqlsession', 'defaultsqlsession', '所以', '一级', '缓存', '生命周期', 'sqlsession', '相同', '二级缓存', '自定义', '缓存', '实现', 'cache', '接口', '可以', '作为', '二级缓存', '所以', '配置', 'encache', '第三方', '缓存', '二级缓存', 'namespace', '名称', '空间', '唯一', '标识', '保存', 'configuration', '核心', '配置', '对象', '二级缓存', '对象', '默认', '类型', 'perpetualcache', '如果', '配置', '缓存', '默认', '类型', 'mybatis', '根据', '配置', '自动', '追加', '一系列', '装饰', 'cache', '对象', '之间', '引用', '顺序', 'synchronizedcache', '--', 'loggingcache', '--', 'serializedcache', '--', 'scheduledcache', '--', 'lrucache', '--', 'perpetualcache9', '迭代', '模式', '迭代', 'iterator', '模式', '叫做', '游标', 'cursor', '模式', 'gof', '给出', '定义', '提供', '一种', '方法', '访问', '一个', '容器', 'container', '对象', '各个', '元素', '暴露', '对象', '内部', '细节', 'java', 'iterator', '就是', '迭代', '模式', '接口', '只要', '实现', '接口', '相当于', '应用', '迭代', '模式', '比如', 'mybatis', 'propertytokenizer', 'property', '包中', '重量级', '该类', 'reflection', '包中', '其他', '频繁', '引用', '这个', '实现', 'iterator', '接口', '使用', '经常', '用到', 'iterator', '接口', 'hasnext', '这个', '函数', 'public', 'class', 'propertytokenizer', 'implements', 'iterator', 'propertytokenizer', 'private', 'string', 'name', 'private', 'string', 'indexedname', 'private', 'string', 'index', 'private', 'string', 'children', 'public', 'propertytokenizer', 'string', 'fullname', 'int', 'delim', 'fullname', 'indexof', 'if', 'delim', 'name', 'fullname', 'substring', 'delim', 'children', 'fullname', 'substring', 'delim', 'else', 'name', 'fullname', 'children', 'null', 'indexedname', 'name', 'delim', 'name', 'indexof', 'if', 'delim', 'index', 'name', 'substring', 'delim', 'name', 'length', 'name', 'name', 'substring', 'delim', 'public', 'string', 'getname', 'return', 'name', 'public', 'string', 'getindex', 'return', 'index', 'public', 'string', 'getindexedname', 'return', 'indexedname', 'public', 'string', 'getchildren', 'return', 'children', 'overridepublic', 'boolean', 'hasnext', 'return', 'children', 'null', 'overridepublic', 'propertytokenizer', 'next', 'return', 'new', 'propertytokenizer', 'children', 'overridepublic', 'void', 'remove', 'throw', 'new', 'unsupportedoperationexception', 'remove', 'is', 'not', 'supported', 'as', 'it', 'has', 'no', 'meaning', 'in', 'the', 'context', 'of', 'properties', '可以', '看到', '这个', '传入', '一个', '字符串', '构造函数', '然后', '提供', 'iterator', '方法', '解析', '子串', '进行', '遍历', '一个', '常用', '方法', '参考资料', '图说', '设计模式', 'http', 'design', 'patterns', 'readthedocs', 'io', 'zh', 'cn', 'latest', 'index', 'html', '深入浅出', 'mybatis', '系列', '---', 'sql', '执行', '流程', '分析', '源码', 'http', 'www', 'cnblogs', 'com', 'dongying', '4142476', 'html', '设计模式', '读书笔记', '-----', '组合', '模式', 'http', 'www', 'cnblogs', 'com', 'chenssy', '3299719', 'htmlmybatis3.3', '技术', '内幕', '五鼠', '东京', '执行器', 'executor', '设计', '原本', 'http', 'blog', 'csdn', 'net', 'wagcy', 'article', 'details', '32963235mybatis', '缓存', '机制', '详解', 'cache', 'https', 'my', 'oschina', 'net', 'lixin91', 'blog', '620068', '本文', '地址', 'http', 'crazyant', 'net', '2022', 'html', '转载', '注明', '来源']","[[-0.23841578 -0.1216054   0.2378443   0.14221346  0.30564285 -0.34959091
  -0.16481337  0.48668669 -0.03035076 -0.06290105 -0.04593431 -0.35192258
  -0.17102768  0.58501577  0.17081106 -0.1053061  -0.15025419 -0.00440634
  -0.1038505  -0.5133715  -0.0035352   0.24602856 -0.01157383 -0.12774293
   0.09785437 -0.52876608 -0.29711211  0.06467136 -0.2287326  -0.06822661
   0.21068631  0.00124289 -0.00859282 -0.14452116 -0.1313072   0.33385688
  -0.16750449 -0.24706551  0.10860839 -0.77207561 -0.17471884 -0.59991019
  -0.06376185 -0.04053852 -0.15940388 -0.17935267 -0.24472821  0.42591383
  -0.19477615  0.43750734  0.19544351 -0.27790726 -0.13195063 -0.20473894
   0.0474259   0.40031298  0.21389054 -0.07341     0.10326483 -0.12012847
   0.05922137  0.27576486  0.02652654  0.09418749 -0.39226493  0.00897852
   0.04904446 -0.02502155 -0.27927221  0.44205429  0.13440842 -0.21956153
   0.39797792 -0.32929819  0.56840376  0.20740469  0.16658733 -0.1375564
  -0.30522272 -0.17333736 -0.0427829   0.01616326 -0.08456448  0.34751606
  -0.36029297  0.21885223 -0.28753345  0.42083018  0.48210537  0.14305202
   0.29377808  0.11864744  0.37394712  0.19784515  0.19452478  0.35965672
   0.11457785 -0.31466955 -0.0470472  -0.11665639]]"
2076,怎样借助Python爬虫给宝宝起个好名字,"2019-03-31更新：代码的python3简化版本：https://github.com/peiss/chinese-name-score/tree/master/chinese-name-score/python3代码的视频讲解（我的付费视频课程中的一节）：https://www.iqiyi.com/v_19rsj1yvy8.html每个人一生中都会遇到一件事情，在事情出现之前不会关心，但是事情一旦来临就发现它极其重要，并且需要在很短的时间内做出重大决定，那就是给自己的新生宝宝起个名字。因为要在孩子出生后两周内起个名字（需要办理出生证明了），估计很多人都像我一样，刚开始是很慌乱的，虽然感觉汉字非常的多随便找个字做名字都行，后来才发现真不是随便的事情，怎么想都发现不合适，于是到处翻词典、网上搜、翻唐诗宋词、诗经、甚至武侠小说，然而想了很久得到的名字，往往却受到家属的意见和反对，比如不顺口、和亲戚重名重音等问题，这样就陷入了重复寻找和否定的循环，越来越混乱。于是我们再次回到网上各种搜索，找到很多网上给出的“男宝宝好听的名字大全”之类的文章，这些文章一下子给出几百上千个名字，看的眼花缭乱没法使用。而有不少的测名字的网站或者APP，输入名字能给出八字或者五格的评分，这样的功能感觉还挺好的能给个参考，然而要么我们需要一个个名字的输入进行测试、要么这些网站或者APP自身的名字很少、要么不能满足我们的需求比如限定字、要么就开始收费，到最后也找不到一个好用的。于是我想做这么一个程序：主要的功能，是给出批量名字提供参考，这些名字是结合宝宝的生辰八字算出来的；自己可以扩充名字库，比如网上发现了一批诗经里的好名字，想看看怎么样，添加进去就能用；可以限定名字的使用字，比如有的家族谱有限定，当前是“国”字辈，名字中必须有“国”字；名字列表可以给出评分，这样倒排后就可以从高分往低分来看名字；通过这种方式可以得到一份符合自己孩子生辰八字、自己的家谱限制、以及自己喜好的名字列表，并且该列表已经给出了分数用于参考，以此为基准我们可以挨个琢磨找出心仪的名字。当然如果有新的想法，随时可以把新的名字添加到词库里面，进行重新计算。程序的代码结构代码介绍：/chinese-name-score 代码根目录/chinese-name-score/main 代码目录/chinese-name-score/main/dicts 词典文件目录/chinese-name-score/main/dicts/names_boys_double.txt 词典文件，男孩的双字名字/chinese-name-score/main/dicts/names_boys_single.txt 词典文件，男孩的单字名字/chinese-name-score/main/dicts/names_girls_single.txt 词典文件，女孩的双字名字/chinese-name-score/main/dicts/names_grils_double.txt 词典文件，女孩的单字名字/chinese-name-score/main/outputs 输出数据目录/chinese-name-score/main/outputs/names_girls_source_wxy.txt 输出的示例文件/chinese-name-score/main/scripts 一些对词典文件做预处理的脚本/chinese-name-score/main/scripts/unique_file_lines.py 设定词典文件，对词典中的名字去重和去空白行/chinese-name-score/main/sys_config.py 程序的系统配置，包含爬取得目标URL、词典文件路径/chinese-name-score/main/user_config.py 程序的用户配置，包括宝宝的年月日时分性别等设定/chinese-name-score/main/get_name_score.py 程序的运行入口使用代码的方法：如果没有限定字，就找到词典文件names_boys_double.txt和names_grils_double.txt，可以在这里添加自己找到的一些名字列表，按行分割添加在最后即可；如果有限定字，就找到词典文件names_boys_single.txt和names_girls_single.txt，在这里添加自己预先中意的单个字列表，按行分割添加在最后即可；打开user_config.py，进行配置，配置项见下一节；运行脚本get_name_score.py在outputs目录中，查看自己的产出文件，可以复制到Excel，进行排序等操作；程序的配置入口程序的配置如下：# coding:GB18030""""""在这里写好配置""""""setting = {}# 限定字，如果配置了该值，则会取用单字字典，否则取用多字字典setting[""limit_world""] = ""国""# 姓setting[""name_prefix""] = ""李""# 性别，取值为 男 或者 女setting[""sex""] = ""男""# 省份setting[""area_province""] = ""北京""# 城市setting[""area_region""] = ""海淀""# 出生的公历年份setting['year'] = ""2017""# 出生的公历月份setting['month'] = ""1""# 出生的公历日子setting['day'] = ""11""# 出生的公历小时setting['hour'] = ""11""# 出生的公历分钟setting['minute'] = ""11""# 结果产出文件名称setting['output_fname'] = ""names_girls_source_xxx.txt""根据配置项setting[""limit_world""]，系统自动来决定选用单字词典还是多字词典：如果设置了该项，比如等于“国”，那么程序会组合所有的单字为名字用于计算，比如国浩和浩国两个名字都会计算；如果不设置该项，保持空字符串，则程序只会读取*_double.txt的双字词典程序的原理这是一个简单的爬虫。大家可以打开http://life.httpcn.com/xingming.asp网站查看，这是一个POST表单，填写需要的参数，点提交，就会打开一个结果页面，结果页面的最下方包含了八字分数和五格分数。如果想得到分数，就需要做两件事情，一是爬虫自动提交表单，获取结果页面；二是从结果页面提取分数；对于第一件事情，很简单，urllib2即可实现（代码在/chinese-name-score/main/get_name_score.py）：    post_data = urllib.urlencode(params)    req = urllib2.urlopen(sys_config.REQUEST_URL, post_data)    content = req.read()这里的params是个参数dict，使用这种方式，就进行了POST带数据的提交，然后从content得到了结果数据。params的参数设定如下：    params = {}        # 日期类型，0表示公历，1表示农历    params['data_type'] = ""0""    params['year'] = ""%s"" % str(user_config.setting[""year""])    params['month'] = ""%s"" % str(user_config.setting[""month""])    params['day'] = ""%s"" % str(user_config.setting[""day""])    params['hour'] = ""%s"" % str(user_config.setting[""hour""])    params['minute'] = ""%s"" % str(user_config.setting[""minute""])    params['pid'] = ""%s"" % str(user_config.setting[""area_province""])    params['cid'] = ""%s"" % str(user_config.setting[""area_region""])    # 喜用五行，0表示自动分析，1表示自定喜用神    params['wxxy'] = ""0""    params['xing'] = ""%s"" % (user_config.setting[""name_prefix""])    params['ming'] = name_postfix    # 表示女，1表示男    if user_config.setting[""sex""] == ""男"":        params['sex'] = ""1""    else:        params['sex'] = ""0""            params['act'] = ""submit""    params['isbz'] = ""1""第二件事情，就是从网页中提取需要的分数，我们可以使用BeautifulSoup4来实现，其语法也很简单：    soup = BeautifulSoup(content, 'html.parser', from_encoding=""GB18030"")    full_name = get_full_name(name_postfix)        # print soup.find(string=re.compile(u""姓名五格评分""))    for node in soup.find_all(""div"", class_=""chaxun_b""):        node_cont = node.get_text()        if u'姓名五格评分' in node_cont:            name_wuge = node.find(string=re.compile(u""姓名五格评分""))            result_data['wuge_score'] = name_wuge.next_sibling.b.get_text()                if u'姓名八字评分' in node_cont:            name_wuge = node.find(string=re.compile(u""姓名八字评分""))            result_data['bazi_score'] = name_wuge.next_sibling.b.get_text()通过该方法，就能对HTML解析，提取八字和五格的分数。运行结果事例1/1287 李国锦姓名八字评分=61.5姓名五格评分=78.6总分=140.12/1287 李国铁姓名八字评分=61姓名五格评分=89.7总分=150.73/1287 李国晶姓名八字评分=21姓名五格评分=81.6总分=102.64/1287 李鸣国姓名八字评分=21姓名五格评分=90.3总分=111.35/1287 李柔国姓名八字评分=64姓名五格评分=78.3总分=142.36/1287 李国经姓名八字评分=21姓名五格评分=89.8总分=110.87/1287 李国蒂姓名八字评分=22姓名五格评分=87.2总分=109.28/1287 李国登姓名八字评分=21姓名五格评分=81.6总分=102.69/1287 李略国姓名八字评分=21姓名五格评分=83.7总分=104.710/1287 李国添姓名八字评分=21姓名五格评分=81.6总分=102.611/1287 李国天姓名八字评分=22姓名五格评分=83.7总分=105.712/1287 李国田姓名八字评分=22姓名五格评分=93.7总分=115.7有了这些分数，我们就可以进行排序，是一个很实用的参考资料。友情提示分数跟很多因素有关，比如出生时刻、已经限定的字、限定字的笔画等因素，这些条件决定了有些名字不会分数高，不要受此影响，找出相对分数高的就可以了；目前程序只能抓取一个网站的内容，地址是http://life.httpcn.com/xingming.asp本列表仅供参考，看过一些文章，历史上很多名人伟人，姓名八字评分都非常低但是都建功立业，名字确实会有些影响但有时候朗朗上口就是最好的；从本列表中选取名字之后，可以在百度、人人网等地方查查，以防有些负面的人重名、或者起这个名字的人太多了烂大街；八字分数是中国传承，五格分数是日本人近代发明的，有时候也可以试试西方的星座起名法，并且奇怪的是八字和五个分数不同网站打分相差很大，更说明了这东西只供参考；本文的代码已上传到github：https://github.com/peiss/chinese-name-score附注：有些朋友不会运行程序，但是想得到宝宝起名结果列表，可以QQ693609645联系我，我帮你运行一份结果，收取少量费用本文地址：http://crazyant.net/2076.html，转载请注明来源。 ","['怎样', '借助', 'python', '爬虫', '宝宝', '起个', '名字', '2019', '03', '31', '更新', '代码', 'python3', '简化', '版本', 'https', 'github', 'com', 'peiss', 'chinese', 'name', 'score', 'tree', 'master', 'chinese', 'name', 'score', 'python3', '代码', '视频', '讲解', '付费', '视频', '课程', '一节', 'https', 'www', 'iqiyi', 'com', '19rsj1yvy8', 'html', '每个', '一生', '遇到', '一件', '事情', '事情', '出现', '之前', '不会', '关心', '但是', '事情', '一旦', '来临', '发现', '极其重要', '并且', '需要', '时间', '做出', '重大', '决定', '就是', '自己', '新生', '宝宝', '起个', '名字', '因为', '孩子', '出生', '两周', '内起个', '名字', '需要', '办理', '出生证明', '估计', '很多', '一样', '开始', '慌乱', '虽然', '感觉', '汉字', '非常', '随便', '找个', '名字', '都行', '后来', '发现', '不是', '随便', '事情', '怎么', '发现', '合适', '于是', '到处', '词典', '网上', '唐诗宋词', '诗经', '甚至', '武侠小说', '然而', '得到', '名字', '往往', '受到', '家属', '意见', '反对', '比如', '顺口', '亲戚', '重名', '重音', '问题', '这样', '陷入', '重复', '寻找', '否定', '循环', '越来越', '混乱', '于是', '我们', '再次', '回到', '网上', '各种', '搜索', '找到', '很多', '网上', '给出', '宝宝', '好听', '名字', '大全', '之类', '文章', '这些', '文章', '一下子', '给出', '几百', '千个', '名字', '眼花缭乱', '没法', '使用', '不少', '名字', '网站', '或者', 'app', '输入', '名字', '给出', '八字', '或者', '五格', '评分', '这样', '功能', '感觉', '参考', '然而', '要么', '我们', '需要', '一个个', '名字', '输入', '进行', '测试', '要么', '这些', '网站', '或者', 'app', '自身', '名字', '很少', '要么', '不能', '满足', '我们', '需求', '比如', '限定', '要么', '开始', '收费', '最后', '不到', '一个', '好用', '于是', '这么', '一个', '程序', '主要', '功能', '给出', '批量', '名字', '提供', '参考', '这些', '名字', '结合', '宝宝', '生辰八字', '出来', '自己', '可以', '扩充', '名字', '比如', '网上', '发现', '一批', '诗经', '名字', '看看', '怎么样', '添加', '进去', '可以', '限定', '名字', '使用', '比如', '家族', '限定', '当前', '字辈', '名字', '必须', '名字', '列表', '可以', '给出', '评分', '这样', '倒排', '可以', '高分', '低分', '来看', '名字', '通过', '这种', '方式', '可以', '得到', '一份', '符合', '自己', '孩子', '生辰八字', '自己', '家谱', '限制', '以及', '自己', '喜好', '名字', '列表', '并且', '列表', '已经', '给出', '分数', '用于', '参考', '以此', '基准', '我们', '可以', '挨个', '琢磨', '找出', '心仪', '名字', '当然', '如果', '想法', '随时', '可以', '名字', '添加', '词库', '里面', '进行', '重新', '计算', '程序', '代码', '结构', '代码', '介绍', 'chinese', 'name', 'score', '代码', '根目录', 'chinese', 'name', 'score', 'main', '代码', '目录', 'chinese', 'name', 'score', 'main', 'dicts', '词典', '文件目录', 'chinese', 'name', 'score', 'main', 'dicts', 'names', 'boys', 'double', 'txt', '词典', '文件', '男孩', '双字', '名字', 'chinese', 'name', 'score', 'main', 'dicts', 'names', 'boys', 'single', 'txt', '词典', '文件', '男孩', '单字', '名字', 'chinese', 'name', 'score', 'main', 'dicts', 'names', 'girls', 'single', 'txt', '词典', '文件', '女孩', '双字', '名字', 'chinese', 'name', 'score', 'main', 'dicts', 'names', 'grils', 'double', 'txt', '词典', '文件', '女孩', '单字', '名字', 'chinese', 'name', 'score', 'main', 'outputs', '输出', '数据', '目录', 'chinese', 'name', 'score', 'main', 'outputs', 'names', 'girls', 'source', 'wxy', 'txt', '输出', '示例', '文件', 'chinese', 'name', 'score', 'main', 'scripts', '一些', '词典', '文件', '预处理', '脚本', 'chinese', 'name', 'score', 'main', 'scripts', 'unique', 'file', 'lines', 'py', '设定', '词典', '文件', '词典', '名字', '空白行', 'chinese', 'name', 'score', 'main', 'sys', 'config', 'py', '程序', '系统配置', '包含', '取得', '目标', 'url', '词典', '文件', '路径', 'chinese', 'name', 'score', 'main', 'user', 'config', 'py', '程序', '用户', '配置', '包括', '宝宝', '年月日时', '性别', '设定', 'chinese', 'name', 'score', 'main', 'get', 'name', 'score', 'py', '程序', '运行', '入口', '使用', '代码', '方法', '如果', '没有', '限定', '找到', '词典', '文件', 'names', 'boys', 'double', 'txt', 'names', 'grils', 'double', 'txt', '可以', '这里', '添加', '自己', '找到', '一些', '名字', '列表', '按行', '分割', '添加', '最后', '即可', '如果', '限定', '找到', '词典', '文件', 'names', 'boys', 'single', 'txt', 'names', 'girls', 'single', 'txt', '这里', '添加', '自己', '预先', '中意', '单个', '列表', '按行', '分割', '添加', '最后', '即可', '打开', 'user', 'config', 'py', '进行', '配置', '配置', '项见', '一节', '运行', '脚本', 'get', 'name', 'score', 'py', 'outputs', '目录', '查看', '自己', '产出', '文件', '可以', '复制到', 'excel', '进行', '排序', '操作', '程序', '配置', '入口', '程序', '配置', '如下', 'coding', 'gb18030', '这里', '配置', 'setting', '限定', '如果', '配置', '该值', '取用', '单字', '字典', '否则', '取用', '多字', '字典', 'setting', 'limit', 'world', 'setting', 'name', 'prefix', '性别', '取值', '或者', 'setting', 'sex', '省份', 'setting', 'area', 'province', '北京', '城市', 'setting', 'area', 'region', '海淀', '出生', '公历', '年份', 'setting', 'year', '2017', '出生', '公历', '月份', 'setting', 'month', '出生', '公历', '日子', 'setting', 'day', '11', '出生', '公历', '小时', 'setting', 'hour', '11', '出生', '公历', '分钟', 'setting', 'minute', '11', '结果', '产出', '文件名称', 'setting', 'output', 'fname', 'names', 'girls', 'source', 'xxx', 'txt', '根据', '配置', 'setting', 'limit', 'world', '系统', '自动', '决定', '选用', '单字', '词典', '还是', '多字', '词典', '如果', '设置', '该项', '比如', '等于', '那么', '程序', '组合', '所有', '单字', '名字', '用于', '计算', '比如', '国浩和浩国', '两个', '名字', '计算', '如果', '设置', '该项', '保持', '字符串', '程序', '只会', '读取', 'double', 'txt', '双字', '词典', '程序', '原理', '这是', '一个', '简单', '爬虫', '大家', '可以', '打开', 'http', 'life', 'httpcn', 'com', 'xingming', 'asp', '网站', '查看', '这是', '一个', 'post', '表单', '填写', '需要', '参数', '提交', '打开', '一个', '结果', '页面', '结果', '页面', '下方', '包含', '八字', '分数', '五格', '分数', '如果', '想得到', '分数', '需要', '两件', '事情', '一是', '爬虫', '自动', '提交', '表单', '获取', '结果', '页面', '是从', '结果', '页面', '提取', '分数', '对于', '第一件', '事情', '简单', 'urllib2', '即可', '实现', '代码', 'chinese', 'name', 'score', 'main', 'get', 'name', 'score', 'py', 'post', 'data', 'urllib', 'urlencode', 'params', 'req', 'urllib2', 'urlopen', 'sys', 'config', 'request', 'url', 'post', 'data', 'content', 'req', 'read', '这里', 'params', '参数', 'dict', '使用', '这种', '方式', '进行', 'post', '数据', '提交', '然后', 'content', '得到', '结果', '数据', 'params', '参数', '设定', '如下', 'params', '日期', '类型', '表示', '公历', '表示', '农历', 'params', 'data', 'type', 'params', 'year', 'str', 'user', 'config', 'setting', 'year', 'params', 'month', 'str', 'user', 'config', 'setting', 'month', 'params', 'day', 'str', 'user', 'config', 'setting', 'day', 'params', 'hour', 'str', 'user', 'config', 'setting', 'hour', 'params', 'minute', 'str', 'user', 'config', 'setting', 'minute', 'params', 'pid', 'str', 'user', 'config', 'setting', 'area', 'province', 'params', 'cid', 'str', 'user', 'config', 'setting', 'area', 'region', '喜用', '五行', '表示', '自动', '分析', '表示', '自定', '喜用', 'params', 'wxxy', 'params', 'xing', 'user', 'config', 'setting', 'name', 'prefix', 'params', 'ming', 'name', 'postfix', '表示', '表示', 'if', 'user', 'config', 'setting', 'sex', 'params', 'sex', 'else', 'params', 'sex', 'params', 'act', 'submit', 'params', 'isbz', '第二件', '事情', '是从', '网页', '提取', '需要', '分数', '我们', '可以', '使用', 'beautifulsoup4', '实现', '语法', '简单', 'soup', 'beautifulsoup', 'content', 'html', 'parser', 'from', 'encoding', 'gb18030', 'full', 'name', 'get', 'full', 'name', 'name', 'postfix', 'print', 'soup', 'find', 'string', 're', 'compile', '姓名', '五格', '评分', 'for', 'node', 'in', 'soup', 'find', 'all', 'div', 'class', 'chaxun', 'node', 'cont', 'node', 'get', 'text', 'if', '姓名', '五格', '评分', 'in', 'node', 'cont', 'name', 'wuge', 'node', 'find', 'string', 're', 'compile', '姓名', '五格', '评分', 'result', 'data', 'wuge', 'score', 'name', 'wuge', 'next', 'sibling', 'get', 'text', 'if', '姓名', '八字', '评分', 'in', 'node', 'cont', 'name', 'wuge', 'node', 'find', 'string', 're', 'compile', '姓名', '八字', '评分', 'result', 'data', 'bazi', 'score', 'name', 'wuge', 'next', 'sibling', 'get', 'text', '通过', '方法', 'html', '解析', '提取', '八字', '五格', '分数', '运行', '结果', '事例', '1287', '李国', '姓名', '八字', '评分', '61.5', '姓名', '五格', '评分', '78.6', '总分', '140.12', '1287', '国铁', '姓名', '八字', '评分', '61', '姓名', '五格', '评分', '89.7', '总分', '150.73', '1287', '李国晶', '姓名', '八字', '评分', '21', '姓名', '五格', '评分', '81.6', '总分', '102.64', '1287', '李鸣国', '姓名', '八字', '评分', '21', '姓名', '五格', '评分', '90.3', '总分', '111.35', '1287', '李柔国', '姓名', '八字', '评分', '64', '姓名', '五格', '评分', '78.3', '总分', '142.36', '1287', '李国经', '姓名', '八字', '评分', '21', '姓名', '五格', '评分', '89.8', '总分', '110.87', '1287', '李国蒂', '姓名', '八字', '评分', '22', '姓名', '五格', '评分', '87.2', '总分', '109.28', '1287', '李国登', '姓名', '八字', '评分', '21', '姓名', '五格', '评分', '81.6', '总分', '102.69', '1287', '李略国', '姓名', '八字', '评分', '21', '姓名', '五格', '评分', '83.7', '总分', '104.710', '1287', '李国添', '姓名', '八字', '评分', '21', '姓名', '五格', '评分', '81.6', '总分', '102.611', '1287', '李国天', '姓名', '八字', '评分', '22', '姓名', '五格', '评分', '83.7', '总分', '105.712', '1287', '李国田', '姓名', '八字', '评分', '22', '姓名', '五格', '评分', '93.7', '总分', '115.7', '这些', '分数', '我们', '可以', '进行', '排序', '一个', '实用', '参考资料', '友情', '提示', '分数', '很多', '因素', '有关', '比如', '出生', '时刻', '已经', '限定', '限定', '笔画', '因素', '这些', '条件', '决定', '有些', '名字', '不会', '分数', '不要', '受此', '影响', '找出', '相对', '分数', '可以', '目前', '程序', '只能', '抓取', '一个', '网站', '内容', '地址', 'http', 'life', 'httpcn', 'com', 'xingming', 'asp', '列表', '仅供参考', '看过', '一些', '文章', '历史', '很多', '名人', '伟人', '姓名', '八字', '评分', '非常低', '但是', '建功立业', '名字', '确实', '有些', '影响', '有时候', '朗朗上口', '就是', '最好', '从本', '列表', '选取', '名字', '之后', '可以', '百度', '人人', '网等', '地方', '查查', '以防', '有些', '负面', '重名', '或者', '这个', '名字', '人太多', '大街', '八字', '分数', '中国', '传承', '五格', '分数', '日本', '近代', '发明', '有时候', '可以', '试试', '西方', '星座', '起名', '并且', '奇怪的是', '八字', '五个', '分数', '不同', '网站', '打分', '相差', '很大', '说明', '东西', '供参考', '本文', '代码', '已上', '传到', 'github', 'https', 'github', 'com', 'peiss', 'chinese', 'name', 'score', '附注', '有些', '朋友', '不会', '运行', '程序', '但是', '想得到', '宝宝', '起名', '结果', '列表', '可以', 'qq693609645', '联系', '运行', '一份', '结果', '收取', '少量', '费用', '本文', '地址', 'http', 'crazyant', 'net', '2076', 'html', '转载', '注明', '来源']","[[-0.22593587 -0.12305312  0.24140966  0.14273446  0.27911117 -0.37176748
  -0.13806431  0.47828822 -0.04791355 -0.09838639 -0.04631513 -0.36233378
  -0.16913353  0.55325554  0.15164219 -0.11247326 -0.13115967  0.00093109
  -0.06977948 -0.50288063 -0.03264987  0.25172917 -0.03493732 -0.18439102
   0.07745858 -0.48837979 -0.30074142  0.05385296 -0.23196357 -0.06844015
   0.18855565  0.01846195  0.0118793  -0.13679141 -0.16173906  0.32324872
  -0.18962764 -0.2635367   0.08838146 -0.73040435 -0.14541516 -0.59200373
  -0.06222088 -0.01796701 -0.1356867  -0.21376073 -0.2321568   0.37998801
  -0.16880285  0.44671633  0.16020774 -0.2715984  -0.1172848  -0.18130594
  -0.00242472  0.3892866   0.17437611 -0.09491074  0.11335074 -0.13272755
   0.09325779  0.25067868  0.01552052  0.09559565 -0.37971886  0.03528764
   0.04493754 -0.02809318 -0.28615458  0.43315768  0.10067541 -0.19018453
   0.38853849 -0.32593056  0.56697837  0.24826459  0.15765032 -0.15614379
  -0.30546471 -0.13557485 -0.02158622  0.04202148 -0.11652469  0.36948545
  -0.34136573  0.19854485 -0.28478664  0.44137087  0.48473929  0.1469072
   0.250404    0.11367167  0.3499034   0.18061168  0.19747318  0.35614736
   0.12228831 -0.30668569 -0.02618172 -0.11470094]]"
2089,Mybatis源码解读-初始化过程详解,"在使用Mybatis时，我们通常将其配置在Spring容器中，当Spring启动的时候会自动加载Mybatis的所有配置文件然后生成注入到Spring中的Bean，本文从实用的角度进行Mybatis源码解读，会关注以下一些方面：Mybatis都有哪些配置文件和配置项Mybatis初始化的源码流程；Mybatis初始化后，产生了哪些对象；Mybatis初始化环境并且执行SQL语句的JAVA代码先看一段初始化Mybatis环境并且执行SQL语句的Java代码：package org.apache.ibatis.session;import java.io.Reader;import org.apache.ibatis.io.Resources;public class MyTest {public static void main(String[] args) throws Exception {// 开始初始化final String resource = ""org/apache/ibatis/builder/MapperConfig.xml"";final Reader reader = Resources.getResourceAsReader(resource);SqlSessionFactory sqlMapper = new SqlSessionFactoryBuilder().build(reader);// 开始执行SQLSqlSession session = sqlMapper.openSession();Integer count = session.selectOne(""org.apache.ibatis.domain.blog.mappers.BlogMapper.selectCountOfPosts"");System.out.println(count);}}这段代码完成了这些事情：1、读取Mybatis的配置文件2、构建SqlSessionFactory3、从SqlSessionFactory中创建一个SqlSession4、使用SqlSession执行一个select语句，参数是Mapper.java的一个方法名5、打印结果在这里前三行代码包括读取配置文件和创建SqlSessionFactory，这就是Mybatis的一次初始化过程。如果查看一下Spring配置Mybatis的文件，就会发现它使用mybatis-spring的包也主要是初始化了这个SqlSessionFactory对象：    <bean id=""sqlSessionFactory"" class=""org.mybatis.spring.SqlSessionFactoryBean"">        <property name=""dataSource"" ref=""dataSource"" />        <property name=""configLocation"" value=""classpath:conf/MapperConfig.xml"" />        <property name=""mapperLocations"">            <list>                <value>classpath*:mapper/*.xml</value>            </list>        </property>    </bean>该Spring配置sqlSessionFactory接收了三个参数，分别是数据源dataSource、Mybatis的主配置文件MapperConfig.xml、mapper.xml文件的扫描路径。可以看出Mybatis的初始化过程就是读取配置文件然后构建出sqlSessionFactory的过程。Mybatis都有哪些配置文件和配置项？上面的Java代码中初始化Mybatis只使用了配置文件MapperConfig.xml，然而在Spring配置文件中构建sqlSessionFactory时也使用了mapper.xml配置文件，其实Mybatis最多也就这两类文件，主配置文件MapperConfig.xml可以通过<mappers>XML元素包含普通的mapper.xml配置文件。主配置文件：MapperConfig.xml一个包含了所有属性的MapperConfig.xml实例：<?xml version=""1.0"" encoding=""UTF-8"" ?><!DOCTYPE configuration    PUBLIC ""-//mybatis.org//DTD Config 3.0//EN""    ""http://mybatis.org/dtd/mybatis-3-config.dtd""><configuration><properties resource=""org/apache/ibatis/databases/blog/blog-derby.properties"" /><settings><setting name=""cacheEnabled"" value=""true"" /><setting name=""lazyLoadingEnabled"" value=""false"" /><setting name=""multipleResultSetsEnabled"" value=""true"" /><setting name=""useColumnLabel"" value=""true"" /><setting name=""useGeneratedKeys"" value=""false"" /><setting name=""defaultExecutorType"" value=""SIMPLE"" /><setting name=""defaultStatementTimeout"" value=""25"" /></settings><typeAliases><typeAlias alias=""Author"" type=""org.apache.ibatis.domain.blog.Author"" /><typeAlias alias=""Blog"" type=""org.apache.ibatis.domain.blog.Blog"" /></typeAliases><typeHandlers><typeHandler javaType=""String"" jdbcType=""VARCHAR""handler=""org.apache.ibatis.builder.CustomStringTypeHandler"" /></typeHandlers><objectFactory type=""org.apache.ibatis.builder.ExampleObjectFactory""><property name=""objectFactoryProperty"" value=""100"" /></objectFactory><plugins><plugin interceptor=""org.apache.ibatis.builder.ExamplePlugin""><property name=""pluginProperty"" value=""100"" /></plugin></plugins><environments default=""development""><environment id=""development""><transactionManager type=""JDBC""><property name="""" value="""" /></transactionManager><dataSource type=""UNPOOLED""><property name=""driver"" value=""${driver}"" /><property name=""url"" value=""${url}"" /><property name=""username"" value=""${username}"" /><property name=""password"" value=""${password}"" /></dataSource></environment></environments><databaseIdProvider type=""DB_VENDOR""><property name=""SQL Server"" value=""sqlserver"" /><property name=""DB2"" value=""db2"" /><property name=""Oracle"" value=""oracle"" /></databaseIdProvider><mappers><mapper resource=""org/apache/ibatis/builder/AuthorMapper.xml"" /><mapper resource=""org/apache/ibatis/builder/BlogMapper.xml"" /></mappers></configuration>主配置文件只有一个XML节点，就是configuration，它包含9种配置项：properties 属性：在这里配置的属性可以在整个配置文件中使用来替换需要动态配置的属性值settings 设置：MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为，比如是否使用缓存和日志记录的方式typeAliases 类型命名：类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。typeHandlers 类型处理器：无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。objectFactory 对象工厂：MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。plugins 插件：MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用，比如增加分页功能、格式化输出最终的SQL等扩展；environments 环境：MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中，比如设置不同的开发、测试、线上配置，在每个配置中可以配置事务管理器和数据源对象；databaseIdProvider 数据库厂商标识：MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。mappers 映射器：MyBatis 的行为已经由上述元素配置完了，通过这里配置的mappers文件，我们可以去查找定义 的SQL 映射语句用于执行；可以看出，前8个配置项用户设定Mybatis运行的一些环境，而第9个mappers映射器才是需要执行的SQL的配置，在正常情况下，我们只需要配置第9个mapper映射器的地址即可，前面的的Mybatis行为配置都有默认值正常情况下不需要设定。包含最终SQL的mapper映射器配置文件虽然我们经常写mapper文件，知道有select/insert/update/delete四种元素，还有sql/resultmap等配置项，就感觉配置项好多好多，但其实mapper总共也就8种配置，我们常用的6种就包含在内：cache – 给定命名空间的缓存配置。cache-ref – 其他命名空间缓存配置的引用。resultMap – 是最复杂也是最强大的元素，用于实现数据库表列和Java Bean的属性名的映射配置；sql – 可被其他语句引用的可重用语句块。insert – 映射插入语句update – 映射更新语句delete – 映射删除语句select – 映射查询语句正常情况下，我们很少使用Mybatis提供的cache机制而是使用外部的Redis等缓存，所以这里的1和2的cache配置几乎不会使用，主要也就是我们平时使用的6种配置。以上就是Mybatis所有提供给我们配置的地方，改变Mybatis行为的有8个配置项，每个XML配置文件刚好也最多有8个配置项，总共有16个配置项。Mybatis初始化的源码流程阅读Mybatis源码最好的方式，就是从源码中的单测作为入口，然后DEBUG一步步的执行，在自己关注的地方多多停留一会仔细查看。以下以代码的流程进行解析，只贴出主要的代码块：Mybatis代码初始化入口@BeforeClasspublic static void setup() throws Exception {createBlogDataSource();final String resource = ""org/apache/ibatis/builder/MapperConfig.xml"";final Reader reader = Resources.getResourceAsReader(resource);sqlMapper = new SqlSessionFactoryBuilder().build(reader);}这里看到，进入了new SqlSessionFactoryBuilder().build(reader)方法。进入SqlSessionFactoryBuilder的build方法public SqlSessionFactory build(Reader reader, String environment, Properties properties) {try {XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);return build(parser.parse());} catch (Exception e) {throw ExceptionFactory.wrapException(""Error building SqlSession."", e);} finally {ErrorContext.instance().reset();try {reader.close();} catch (IOException e) {// Intentionally ignore. Prefer previous error.}}}主要两行在try块内，第一行的内容是调用XPathParser加载了Mybatis的主配置文件，而第二步包含两个步骤，parser.parse()方法返回的是一个Configuration对象，包裹它的build方法只有一行代码：public SqlSessionFactory build(Configuration config) {return new DefaultSqlSessionFactory(config);}这就可以看出，其实初始化过程就是创建Configuration对象的过程，对照MapperConfig.xml的根元素是<configuration>，不难猜测到Configuration是一个非常重要的、包含了Mybatis所有数据配置的对象。Mybatis核心对象Configuration的构建过程接下来进入了XMLConfigBuilder.parse()方法，该方法解析XML文件的/configuration节点，然后挨个解析了上面配置文件中提到的9大配置：public Configuration parse() {if (parsed) {throw new BuilderException(""Each XMLConfigBuilder can only be used once."");}parsed = true;parseConfiguration(parser.evalNode(""/configuration""));return configuration;}private void parseConfiguration(XNode root) {try {// issue #117 read properties firstpropertiesElement(root.evalNode(""properties""));Properties settings = settingsAsProperties(root.evalNode(""settings""));loadCustomVfs(settings);typeAliasesElement(root.evalNode(""typeAliases""));pluginElement(root.evalNode(""plugins""));objectFactoryElement(root.evalNode(""objectFactory""));objectWrapperFactoryElement(root.evalNode(""objectWrapperFactory""));reflectorFactoryElement(root.evalNode(""reflectorFactory""));settingsElement(settings);// read it after objectFactory and objectWrapperFactory issue #631environmentsElement(root.evalNode(""environments""));databaseIdProviderElement(root.evalNode(""databaseIdProvider""));typeHandlerElement(root.evalNode(""typeHandlers""));mapperElement(root.evalNode(""mappers""));} catch (Exception e) {throw new BuilderException(""Error parsing SQL Mapper Configuration. Cause: "" + e, e);}}我们挨个查看，这些配置项的解析，都产出了什么内容；1、properties配置项的解析进入propertiesElement方法，我们发现初始化了一个Properties对象，将XML中所有的子节点按照KEY-VALUE存入properties之后，和Configuration.variables变量进行了合并，而Configuration.variables本身，也是个Properties对象；private void propertiesElement(XNode context) throws Exception {if (context != null) {Properties defaults = context.getChildrenAsProperties();String resource = context.getStringAttribute(""resource"");String url = context.getStringAttribute(""url"");if (resource != null && url != null) {throw new BuilderException(""The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other."");}if (resource != null) {defaults.putAll(Resources.getResourceAsProperties(resource));} else if (url != null) {defaults.putAll(Resources.getUrlAsProperties(url));}Properties vars = configuration.getVariables();if (vars != null) {defaults.putAll(vars);}parser.setVariables(defaults);configuration.setVariables(defaults);}}将properties配置解析后合并到Configuration.variables之后，后续的配置文件都可以使用这些变量。2、setting的配置读取setting配置的读取，包含两个步骤，第一步，将XML中所有的配置读取到properties对象：private Properties settingsAsProperties(XNode context) {if (context == null) {return new Properties();}Properties props = context.getChildrenAsProperties();// Check that all settings are known to the configuration classMetaClass metaConfig = MetaClass.forClass(Configuration.class, localReflectorFactory);for (Object key : props.keySet()) {if (!metaConfig.hasSetter(String.valueOf(key))) {throw new BuilderException(""The setting "" + key + "" is not known.  Make sure you spelled it correctly (case sensitive)."");}}return props;}这个函数读取了setting的配置项，通过反射访问Configuration.class，如果不存在某个配置项的set方法则报错；然后在settingsElement方法中，将这些读取的配置项存入了Configuration中：private void settingsElement(Properties props) throws Exception {configuration.setAutoMappingBehavior(AutoMappingBehavior.valueOf(props.getProperty(""autoMappingBehavior"", ""PARTIAL"")));configuration.setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior.valueOf(props.getProperty(""autoMappingUnknownColumnBehavior"", ""NONE"")));configuration.setCacheEnabled(booleanValueOf(props.getProperty(""cacheEnabled""), true));configuration.setProxyFactory((ProxyFactory) createInstance(props.getProperty(""proxyFactory"")));configuration.setLazyLoadingEnabled(booleanValueOf(props.getProperty(""lazyLoadingEnabled""), false));configuration.setAggressiveLazyLoading(booleanValueOf(props.getProperty(""aggressiveLazyLoading""), false));configuration.setMultipleResultSetsEnabled(booleanValueOf(props.getProperty(""multipleResultSetsEnabled""), true));configuration.setUseColumnLabel(booleanValueOf(props.getProperty(""useColumnLabel""), true));configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty(""useGeneratedKeys""), false));configuration.setDefaultExecutorType(ExecutorType.valueOf(props.getProperty(""defaultExecutorType"", ""SIMPLE"")));configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty(""defaultStatementTimeout""), null));configuration.setDefaultFetchSize(integerValueOf(props.getProperty(""defaultFetchSize""), null));configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty(""mapUnderscoreToCamelCase""), false));configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty(""safeRowBoundsEnabled""), false));configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty(""localCacheScope"", ""SESSION"")));configuration.setJdbcTypeForNull(JdbcType.valueOf(props.getProperty(""jdbcTypeForNull"", ""OTHER"")));configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty(""lazyLoadTriggerMethods""), ""equals,clone,hashCode,toString""));configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty(""safeResultHandlerEnabled""), true));configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty(""defaultScriptingLanguage"")));configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty(""callSettersOnNulls""), false));configuration.setUseActualParamName(booleanValueOf(props.getProperty(""useActualParamName""), true));configuration.setReturnInstanceForEmptyRow(booleanValueOf(props.getProperty(""returnInstanceForEmptyRow""), false));configuration.setLogPrefix(props.getProperty(""logPrefix""));@SuppressWarnings(""unchecked"")Class<? extends Log> logImpl = (Class<? extends Log>) resolveClass(props.getProperty(""logImpl""));configuration.setLogImpl(logImpl);configuration.setConfigurationFactory(resolveClass(props.getProperty(""configurationFactory"")));}因为setting变量直接改变的是Mybatis的行为，所以配置项直接存于Confirguration的属性中。3、typeAliases配置的解析进入typeAliasesElement方法，用于对typeAliases配置的解析：private void typeAliasesElement(XNode parent) {if (parent != null) {for (XNode child : parent.getChildren()) {if (""package"".equals(child.getName())) {String typeAliasPackage = child.getStringAttribute(""name"");configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);} else {String alias = child.getStringAttribute(""alias"");String type = child.getStringAttribute(""type"");try {Class<?> clazz = Resources.classForName(type);if (alias == null) {typeAliasRegistry.registerAlias(clazz);} else {typeAliasRegistry.registerAlias(alias, clazz);}} catch (ClassNotFoundException e) {throw new BuilderException(""Error registering typeAlias for '"" + alias + ""'. Cause: "" + e, e);}}}}}该方法将typeAliases的配置项提取之后，存入了typeAliasRegistry这个对象，该对象是在BaseBuilder中初始化的：public abstract class BaseBuilder {protected final Configuration configuration;protected final TypeAliasRegistry typeAliasRegistry;protected final TypeHandlerRegistry typeHandlerRegistry;public BaseBuilder(Configuration configuration) {this.configuration = configuration;this.typeAliasRegistry = this.configuration.getTypeAliasRegistry();this.typeHandlerRegistry = this.configuration.getTypeHandlerRegistry();}在Configuration类中，我们看到了该对象的声明：protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();打开该类的代码，发现特别简单的，用一个MAP存储了别名和对应的类的映射：public class TypeAliasRegistry {private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<String, Class<?>>();public TypeAliasRegistry() {registerAlias(""string"", String.class);registerAlias(""byte"", Byte.class);registerAlias(""long"", Long.class);registerAlias(""short"", Short.class);registerAlias(""int"", Integer.class);registerAlias(""integer"", Integer.class);registerAlias(""double"", Double.class);registerAlias(""float"", Float.class);registerAlias(""boolean"", Boolean.class);在构造函数中Mybatis已经默认注册了一些常用的别名和类的关系，所以我们可以在mappers的xml文件中使用这些短名字。4、typeHandlers配置元素的解析mybatis提供了大部分数据类型的typeHandlers，如果我们要定制自己的类型处理器比如实现数据库中0/1两个数字到中文男/女的映射，就可以自己实现typeHandlerprivate void typeHandlerElement(XNode parent) throws Exception {if (parent != null) {for (XNode child : parent.getChildren()) {if (""package"".equals(child.getName())) {String typeHandlerPackage = child.getStringAttribute(""name"");typeHandlerRegistry.register(typeHandlerPackage);} else {String javaTypeName = child.getStringAttribute(""javaType"");String jdbcTypeName = child.getStringAttribute(""jdbcType"");String handlerTypeName = child.getStringAttribute(""handler"");Class<?> javaTypeClass = resolveClass(javaTypeName);JdbcType jdbcType = resolveJdbcType(jdbcTypeName);Class<?> typeHandlerClass = resolveClass(handlerTypeName);if (javaTypeClass != null) {if (jdbcType == null) {typeHandlerRegistry.register(javaTypeClass, typeHandlerClass);} else {typeHandlerRegistry.register(javaTypeClass, jdbcType, typeHandlerClass);}} else {typeHandlerRegistry.register(typeHandlerClass);}}}}}在该方法中，通过反射得到了javaTypeClass、jdbcType、typeHandlerClass三个变量，这三个变量组成（javaType、jdbcType、typeHandler）三元组，当遇到javaType到jdbcType的转换，或者遇到jdbcType到javaType的转换时就会使用该typeHandler。然后该方法调用了TypeHandlerRegistry.register进行注册，TypeHandlerRegistry对象是从BaseBuilder中的Configuration对象中获取的：public abstract class BaseBuilder {protected final Configuration configuration;protected final TypeAliasRegistry typeAliasRegistry;protected final TypeHandlerRegistry typeHandlerRegistry;public BaseBuilder(Configuration configuration) {this.configuration = configuration;this.typeAliasRegistry = this.configuration.getTypeAliasRegistry();this.typeHandlerRegistry = this.configuration.getTypeHandlerRegistry();}在TypeHandlerRegistry中，建立了几个Map映射：public final class TypeHandlerRegistry {private final Map<JdbcType, TypeHandler<?>> JDBC_TYPE_HANDLER_MAP = new EnumMap<JdbcType, TypeHandler<?>>(JdbcType.class);private final Map<Type, Map<JdbcType, TypeHandler<?>>> TYPE_HANDLER_MAP = new HashMap<Type, Map<JdbcType, TypeHandler<?>>>();private final TypeHandler<Object> UNKNOWN_TYPE_HANDLER = new UnknownTypeHandler(this);private final Map<Class<?>, TypeHandler<?>> ALL_TYPE_HANDLERS_MAP = new HashMap<Class<?>, TypeHandler<?>>();第一个是JdbcType为key的map，第二个是JavaType为key的map，第三个是未知的处理器、最后一个是包含全部的处理器；当执行SQL的时候，会将javaBean的JavaType转换到DB的jdbcType，而查询出来数据的时候，又需要将jdbcType转换成javaType，在TypeHandlerRegistry的构造函数中，已经注册好了很多默认的typeHandler，大部分情况下不需要我们添加：public TypeHandlerRegistry() {register(Boolean.class, new BooleanTypeHandler());register(boolean.class, new BooleanTypeHandler());register(JdbcType.BOOLEAN, new BooleanTypeHandler());register(JdbcType.BIT, new BooleanTypeHandler());register(Byte.class, new ByteTypeHandler());register(byte.class, new ByteTypeHandler());register(JdbcType.TINYINT, new ByteTypeHandler());register(Short.class, new ShortTypeHandler());register(short.class, new ShortTypeHandler());register(JdbcType.SMALLINT, new ShortTypeHandler());要实现一个typeHandler，需要实现接口，该接口提供的就是从javaType到jdbcType的setParameter方法，以及从jdbcType到javaType转换的getResult方法：public interface TypeHandler<T> {void setParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbcType) throws SQLException;T getResult(ResultSet rs, String columnName) throws SQLException;T getResult(ResultSet rs, int columnIndex) throws SQLException;T getResult(CallableStatement cs, int columnIndex) throws SQLException;} 5、objectFactory配置项的解析如果想自己控制查询数据库的结果到JavaBean映射的生成，则可以创建自己的objectFactory，解析代码如下：private void objectFactoryElement(XNode context) throws Exception {if (context != null) {String type = context.getStringAttribute(""type"");Properties properties = context.getChildrenAsProperties();ObjectFactory factory = (ObjectFactory) resolveClass(type).newInstance();factory.setProperties(properties);configuration.setObjectFactory(factory);}}可以看到，该配置项包含type属性，以及properties子节点，创建好ObjectFactory对象后，就会设置到configuration中：// Configuration对象的objectFactory成员变量protected ObjectFactory objectFactory = new DefaultObjectFactory();要实现ObjectFactory，需要继承该接口：public interface ObjectFactory {void setProperties(Properties properties);<T> T create(Class<T> type);<T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs);<T> boolean isCollection(Class<T> type);}该工厂接口提供了设置属性列表，还有创建对象的工厂方法。6、plugin元素的解析plugin，即mybatis的插件，可以让我们自己进行开发用于扩展mybatis。进入pluginElement方法进入解析：private void pluginElement(XNode parent) throws Exception {if (parent != null) {for (XNode child : parent.getChildren()) {String interceptor = child.getStringAttribute(""interceptor"");Properties properties = child.getChildrenAsProperties();Interceptor interceptorInstance = (Interceptor) resolveClass(interceptor).newInstance();interceptorInstance.setProperties(properties);configuration.addInterceptor(interceptorInstance);}}}该段代码，首先获取intercepter元素作为拦截器，然后读取该节点的所有子节点作为配置项，最后调用configuration.addInterceptor方法添加到了configuration中的interceptorChain中，该对象是拦截器链的一个包装对象：public class InterceptorChain {private final List<Interceptor> interceptors = new ArrayList<Interceptor>();public Object pluginAll(Object target) {for (Interceptor interceptor : interceptors) {                        // target变量每次也在变化着target = interceptor.plugin(target);}return target;}public void addInterceptor(Interceptor interceptor) {interceptors.add(interceptor);}public List<Interceptor> getInterceptors() {return Collections.unmodifiableList(interceptors);}}该类中使用List<Interceptor>存储了所有配置的拦截器，并提供了addInterceptor用于添加拦截器，提供了getInterceptors用于获取当前所有添加的插件列表，提供了pluginAll接口调用所有的Interceptor.plugin(Object)方法进行插件的执行。7、environments的配置解析environments可以配置多个环境配置，每个配置包含了数据源和事务管理器两项，如下所示代码：private void environmentsElement(XNode context) throws Exception {if (context != null) {if (environment == null) {environment = context.getStringAttribute(""default"");}for (XNode child : context.getChildren()) {String id = child.getStringAttribute(""id"");if (isSpecifiedEnvironment(id)) {TransactionFactory txFactory = transactionManagerElement(child.evalNode(""transactionManager""));DataSourceFactory dsFactory = dataSourceElement(child.evalNode(""dataSource""));DataSource dataSource = dsFactory.getDataSource();Environment.Builder environmentBuilder = new Environment.Builder(id).transactionFactory(txFactory).dataSource(dataSource);configuration.setEnvironment(environmentBuilder.build());}}}}代码中通过isSpecifiedEnvironment方法判断当前的id是不是指定要读取的environment，如果是的话通过反射获取事务管理器和数据源，然后用Environment.Builder创建Enviroment对象并设置到Configuration中，在Configuration中可以看到Enviroment成员变量：protected Environment environment;而Enviroment对象也只包含了这三个属性：public final class Environment {private final String id;private final TransactionFactory transactionFactory;private final DataSource dataSource;8、databaseIdProvider配置项的解析mybatis当然不只是支持mysql，也会支持oracle、sqlserver等不同的数据库，解析代码如下：private void databaseIdProviderElement(XNode context) throws Exception {DatabaseIdProvider databaseIdProvider = null;if (context != null) {String type = context.getStringAttribute(""type"");// awful patch to keep backward compatibilityif (""VENDOR"".equals(type)) {type = ""DB_VENDOR"";}Properties properties = context.getChildrenAsProperties();databaseIdProvider = (DatabaseIdProvider) resolveClass(type).newInstance();databaseIdProvider.setProperties(properties);}Environment environment = configuration.getEnvironment();if (environment != null && databaseIdProvider != null) {String databaseId = databaseIdProvider.getDatabaseId(environment.getDataSource());configuration.setDatabaseId(databaseId);}}解析databaseIdProvider后里面的Properties中存储了各种数据库的映射，并且databaseIdProvider提供了一个根据dataSource获取对应的databseId的方法，以VendorDatabaseIdProvider为例，是通过connection.getMetaData().getDatabaseProductName()获取数据库的产品名称，然后从刚才databaseIdProvider中获取对应的databaseId：public class VendorDatabaseIdProvider implements DatabaseIdProvider {private static final Log log = LogFactory.getLog(VendorDatabaseIdProvider.class);private Properties properties;@Overridepublic String getDatabaseId(DataSource dataSource) {if (dataSource == null) {throw new NullPointerException(""dataSource cannot be null"");}try {return getDatabaseName(dataSource);} catch (Exception e) {log.error(""Could not get a databaseId from dataSource"", e);}return null;}@Overridepublic void setProperties(Properties p) {this.properties = p;}private String getDatabaseName(DataSource dataSource) throws SQLException {String productName = getDatabaseProductName(dataSource);if (this.properties != null) {for (Map.Entry<Object, Object> property : properties.entrySet()) {if (productName.contains((String) property.getKey())) {return (String) property.getValue();}}// no match, return nullreturn null;}return productName;}private String getDatabaseProductName(DataSource dataSource) throws SQLException {Connection con = null;try {con = dataSource.getConnection();DatabaseMetaData metaData = con.getMetaData();return metaData.getDatabaseProductName();} finally {if (con != null) {try {con.close();} catch (SQLException e) {// ignored}}}}}在获取了databaseId之后，最后将databaseId设置到configuration，后续当执行SQL的时候会自动根据该databaseId来映射具体数据库的SQL。9、mappers配置项的解析mappers的解析最为复杂，我们假设mapper文件均是url指定的xml文件，来进行解析流程的查看：private void mapperElement(XNode parent) throws Exception {if (parent != null) {for (XNode child : parent.getChildren()) {if (""package"".equals(child.getName())) {String mapperPackage = child.getStringAttribute(""name"");configuration.addMappers(mapperPackage);} else {String resource = child.getStringAttribute(""resource"");String url = child.getStringAttribute(""url"");String mapperClass = child.getStringAttribute(""class"");if (resource != null && url == null && mapperClass == null) {ErrorContext.instance().resource(resource);InputStream inputStream = Resources.getResourceAsStream(resource);// 使用XMLMapperBuilder加载mapper.xml，然后进入parse()方法XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,configuration.getSqlFragments());mapperParser.parse();} else if (resource == null && url != null && mapperClass == null) {ErrorContext.instance().resource(url);InputStream inputStream = Resources.getUrlAsStream(url);XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,configuration.getSqlFragments());mapperParser.parse();} else if (resource == null && url == null && mapperClass != null) {Class<?> mapperInterface = Resources.classForName(mapperClass);configuration.addMapper(mapperInterface);} else {throw new BuilderException(""A mapper element may only specify a url, resource or class, but not more than one."");}}}}}加注释部分显示，读取每个mapper.xml资源文件的地址后，进入了XMLMapperBuilder.parse()方法：public void parse() {if (!configuration.isResourceLoaded(resource)) {configurationElement(parser.evalNode(""/mapper""));configuration.addLoadedResource(resource);bindMapperForNamespace();}parsePendingResultMaps();parsePendingChacheRefs();parsePendingStatements();}private void configurationElement(XNode context) {try {String namespace = context.getStringAttribute(""namespace"");if (namespace == null || namespace.equals("""")) {throw new BuilderException(""Mapper's namespace cannot be empty"");}builderAssistant.setCurrentNamespace(namespace);cacheRefElement(context.evalNode(""cache-ref""));cacheElement(context.evalNode(""cache""));parameterMapElement(context.evalNodes(""/mapper/parameterMap""));resultMapElements(context.evalNodes(""/mapper/resultMap""));sqlElement(context.evalNodes(""/mapper/sql""));buildStatementFromContext(context.evalNodes(""select|insert|update|delete""));} catch (Exception e) {throw new BuilderException(""Error parsing Mapper XML. Cause: "" + e, e);}}然后进入了configurationElement(parser.evalNode(""/mapper""));方法后会读取所有xml中mapper下的子元素，在这里我们只查看buildStatementFromContext方法：private void buildStatementFromContext(List<XNode> list) {if (configuration.getDatabaseId() != null) {buildStatementFromContext(list, configuration.getDatabaseId());}buildStatementFromContext(list, null);}private void buildStatementFromContext(List<XNode> list, String requiredDatabaseId) {for (XNode context : list) {final XMLStatementBuilder statementParser = new XMLStatementBuilder(configuration, builderAssistant,context, requiredDatabaseId);try {statementParser.parseStatementNode();} catch (IncompleteElementException e) {configuration.addIncompleteStatement(statementParser);}}}该方法出现了一个XMLStatementBuilder用于select/insert/update/delete语句各自的解析，在XMLStatementBuilder.parseStatementNode方法中解析了各种语句的属性和参数以及动态SQL的处理，最后调用builderAssistant.addMappedStatement方法，所有的参数和内容被构建成MappedStatement，添加到了configuration中：MappedStatement statement = statementBuilder.build();configuration.addMappedStatement(statement);以下是configuration中的mappedStatements对象：// Configuration的mappedStatements对象protected final Map<String, MappedStatement> mappedStatements = new StrictMap<MappedStatement>(""Mapped Statements collection"");这里的StrictMap就是一个HashMap，在addMappedStatement方法中可以看到该map的Key是各个SQL的ID:public void addMappedStatement(MappedStatement ms) {mappedStatements.put(ms.getId(), ms);}由此可以推测整个Mybatis执行SQL的过程：业务代码调用SqlMapperInterface.method方法；Mybatis根据method的全限定名称作为ID，从mappedStatements找到构建好的MappedStatement对象；使用MappedStatement中读取的SQL等各种配置，执行SQL；Mybatis初始化的对象产出列表总结以上就是对Mybatis初始化过程的详解，其最终产出了以下对象列表：总产出：SqlSessionFactory，相当于ConnectionFactory用于生产SqlSession，而SqlSession相当于Connection用于实际的SQL查询；SQlSessionFactory的核心对象Configuration，所有的Mybatis配置项和Mapper配置列表，都会被解析并读取到该对象的属性中；Configuration中的各个对象：Configuration.variables，类型为Properties，存储Mybatis配置的Properties对象；Configuration.直接属性，setting的配置，因为直接影响Mybatis的行为，直接赋值到了Configuration对象的属性；Configuration.TypeAliasRegistry对象，存储别名映射，KEY是别名，VALUE是别名对应的类；Configuration.TypeHandlerRegistry对象，存储typeHandler映射，KEY是javaType或者jdbcType，VALUE是typeHandler类；Configuration.ObjectFactory对象，存储单个的ObjectFactory对象，用于DB映射JAVABEAN对象的创建；Configuration.InterceptorChain对象，存储Plugin对象列表，用户可以添加用于扩展Mybatis；Configuration.Environment对象，指定开发/测试/线上环境，根据其dataSource也决定了databaseId对象的取值；Configuration.databaseId，存储使用的DB的类型，Mybatis会根据不同的DB做SQL适配；Configuration.mappedStatements，存储KEY为ID，VALUE为MappedStatement的MAP，执行SQL时从此处获取对象；参考资料：XML 映射配置文件 http://www.mybatis.org/mybatis-3/zh/configuration.htmlXML 映射文件 http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html本文地址：http://crazyant.net/2089.html，转载请注明来源。","['mybatis', '源码', '解读', '初始化', '过程', '详解', '使用', 'mybatis', '我们', '通常', '配置', 'spring', '容器', 'spring', '启动', '时候', '自动', '加载', 'mybatis', '所有', '配置文件', '然后', '生成', '注入', 'spring', 'bean', '本文', '实用', '角度', '进行', 'mybatis', '源码', '解读', '关注', '以下', '一些', '方面', 'mybatis', '哪些', '配置文件', '配置', 'mybatis', '初始化', '源码', '流程', 'mybatis', '初始化', '产生', '哪些', '对象', 'mybatis', '初始化', '环境', '并且', '执行', 'sql', '语句', 'java', '代码', '先看', '一段', '初始化', 'mybatis', '环境', '并且', '执行', 'sql', '语句', 'java', '代码', 'package', 'org', 'apache', 'ibatis', 'session', 'import', 'java', 'io', 'reader', 'import', 'org', 'apache', 'ibatis', 'io', 'resources', 'public', 'class', 'mytest', 'public', 'static', 'void', 'main', 'string', 'args', 'throws', 'exception', '开始', '初始化', 'final', 'string', 'resource', 'org', 'apache', 'ibatis', 'builder', 'mapperconfig', 'xml', 'final', 'reader', 'reader', 'resources', 'getresourceasreader', 'resource', 'sqlsessionfactory', 'sqlmapper', 'new', 'sqlsessionfactorybuilder', 'build', 'reader', '开始', '执行', 'sqlsqlsession', 'session', 'sqlmapper', 'opensession', 'integer', 'count', 'session', 'selectone', 'org', 'apache', 'ibatis', 'domain', 'blog', 'mappers', 'blogmapper', 'selectcountofposts', 'system', 'out', 'println', 'count', '代码', '完成', '这些', '事情', '读取', 'mybatis', '配置文件', '构建', 'sqlsessionfactory3', 'sqlsessionfactory', '创建', '一个', 'sqlsession4', '使用', 'sqlsession', '执行', '一个', 'select', '语句', '参数', 'mapper', 'java', '一个', '方法', '打印', '结果', '这里', '三行', '代码', '包括', '读取', '配置文件', '创建', 'sqlsessionfactory', '就是', 'mybatis', '一次', '初始化', '过程', '如果', '查看', '一下', 'spring', '配置', 'mybatis', '文件', '发现', '使用', 'mybatis', 'spring', '主要', '初始化', '这个', 'sqlsessionfactory', '对象', 'bean', 'id', 'sqlsessionfactory', 'class', 'org', 'mybatis', 'spring', 'sqlsessionfactorybean', 'property', 'name', 'datasource', 'ref', 'datasource', 'property', 'name', 'configlocation', 'value', 'classpath', 'conf', 'mapperconfig', 'xml', 'property', 'name', 'mapperlocations', 'list', 'value', 'classpath', 'mapper', 'xml', 'value', 'list', 'property', 'bean', 'spring', '配置', 'sqlsessionfactory', '接收', '三个', '参数', '分别', '数据源', 'datasource', 'mybatis', '配置文件', 'mapperconfig', 'xml', 'mapper', 'xml', '文件', '扫描', '路径', '可以', '看出', 'mybatis', '初始化', '过程', '就是', '读取', '配置文件', '然后', '构建', 'sqlsessionfactory', '过程', 'mybatis', '哪些', '配置文件', '配置', '上面', 'java', '代码', '初始化', 'mybatis', '使用', '配置文件', 'mapperconfig', 'xml', '然而', 'spring', '配置文件', '构建', 'sqlsessionfactory', '使用', 'mapper', 'xml', '配置文件', '其实', 'mybatis', '最多', '两类', '文件', '配置文件', 'mapperconfig', 'xml', '可以', '通过', 'mappers', 'xml', '元素', '包含', '普通', 'mapper', 'xml', '配置文件', '配置文件', 'mapperconfig', 'xml', '一个', '包含', '所有', '属性', 'mapperconfig', 'xml', '实例', 'xml', 'version', '1.0', 'encoding', 'utf', 'doctype', 'configuration', 'public', 'mybatis', 'org', 'dtd', 'config', '3.0', 'en', 'http', 'mybatis', 'org', 'dtd', 'mybatis', 'config', 'dtd', 'configuration', 'properties', 'resource', 'org', 'apache', 'ibatis', 'databases', 'blog', 'blog', 'derby', 'properties', 'settings', 'setting', 'name', 'cacheenabled', 'value', 'true', 'setting', 'name', 'lazyloadingenabled', 'value', 'false', 'setting', 'name', 'multipleresultsetsenabled', 'value', 'true', 'setting', 'name', 'usecolumnlabel', 'value', 'true', 'setting', 'name', 'usegeneratedkeys', 'value', 'false', 'setting', 'name', 'defaultexecutortype', 'value', 'simple', 'setting', 'name', 'defaultstatementtimeout', 'value', '25', 'settings', 'typealiases', 'typealias', 'alias', 'author', 'type', 'org', 'apache', 'ibatis', 'domain', 'blog', 'author', 'typealias', 'alias', 'blog', 'type', 'org', 'apache', 'ibatis', 'domain', 'blog', 'blog', 'typealiases', 'typehandlers', 'typehandler', 'javatype', 'string', 'jdbctype', 'varchar', 'handler', 'org', 'apache', 'ibatis', 'builder', 'customstringtypehandler', 'typehandlers', 'objectfactory', 'type', 'org', 'apache', 'ibatis', 'builder', 'exampleobjectfactory', 'property', 'name', 'objectfactoryproperty', 'value', '100', 'objectfactory', 'plugins', 'plugin', 'interceptor', 'org', 'apache', 'ibatis', 'builder', 'exampleplugin', 'property', 'name', 'pluginproperty', 'value', '100', 'plugin', 'plugins', 'environments', 'default', 'development', 'environment', 'id', 'development', 'transactionmanager', 'type', 'jdbc', 'property', 'name', 'value', 'transactionmanager', 'datasource', 'type', 'unpooled', 'property', 'name', 'driver', 'value', 'driver', 'property', 'name', 'url', 'value', 'url', 'property', 'name', 'username', 'value', 'username', 'property', 'name', 'password', 'value', 'password', 'datasource', 'environment', 'environments', 'databaseidprovider', 'type', 'db', 'vendor', 'property', 'name', 'sql', 'server', 'value', 'sqlserver', 'property', 'name', 'db2', 'value', 'db2', 'property', 'name', 'oracle', 'value', 'oracle', 'databaseidprovider', 'mappers', 'mapper', 'resource', 'org', 'apache', 'ibatis', 'builder', 'authormapper', 'xml', 'mapper', 'resource', 'org', 'apache', 'ibatis', 'builder', 'blogmapper', 'xml', 'mappers', 'configuration', '配置文件', '只有', '一个', 'xml', '节点', '就是', 'configuration', '包含', '配置', 'properties', '属性', '这里', '配置', '属性', '可以', '整个', '配置文件', '使用', '替换', '需要', '动态', '配置', '属性', 'settings', '设置', 'mybatis', '极为重要', '调整', '设置', '它们', '改变', 'mybatis', '运行', '行为', '比如', '是否', '使用', '缓存', '日志', '记录', '方式', 'typealiases', '类型', '命名', '类型', '别名', 'java', '类型', '设置', '一个', '名字', 'xml', '配置', '有关', '存在', '意义', '在于', '用来', '减少', '完全', '限定', '冗余', 'typehandlers', '类型', '处理器', '无论是', 'mybatis', '预处理', '语句', 'preparedstatement', '设置', '一个', '参数', '还是', '结果', '集中', '取出', '一个', '值时', '类型', '处理器', '获取', '合适', '方式', '转换成', 'java', '类型', 'objectfactory', '对象', '工厂', 'mybatis', '每次', '创建', '结果', '对象', '实例', '使用', '一个', '对象', '工厂', 'objectfactory', '实例', '完成', 'plugins', '插件', 'mybatis', '允许', '映射', '语句', '执行', '过程', '一点', '进行', '拦截', '调用', '比如', '增加', '分页', '功能', '格式化', '输出', '最终', 'sql', '扩展', 'environments', '环境', 'mybatis', '可以', '配置', '适应', '多种', '环境', '这种', '机制', '有助于', 'sql', '映射', '应用', '多种', '数据库', '之中', '比如', '设置', '不同', '开发', '测试', '线上', '配置', '每个', '配置', '可以', '配置', '事务', '管理器', '数据源', '对象', 'databaseidprovider', '数据库', '厂商', '标识', 'mybatis', '可以', '根据', '不同', '数据库', '厂商', '执行', '不同', '语句', '这种', '厂商', '支持', '基于', '映射', '语句', 'databaseid', '属性', 'mappers', '映射器', 'mybatis', '行为', '已经', '上述', '元素', '配置', '通过', '这里', '配置', 'mappers', '文件', '我们', '可以', '查找', '定义', 'sql', '映射', '语句', '用于', '执行', '可以', '看出', '配置', '用户', '设定', 'mybatis', '运行', '一些', '环境', 'mappers', '映射器', '需要', '执行', 'sql', '配置', '正常', '情况', '我们', '需要', '配置', 'mapper', '映射器', '地址', '即可', '前面', 'mybatis', '行为', '配置', '默认值', '正常', '情况', '需要', '设定', '包含', '最终', 'sql', 'mapper', '映射器', '配置文件', '虽然', '我们', '经常', 'mapper', '文件', '知道', 'select', 'insert', 'update', 'delete', '四种', '元素', '还有', 'sql', 'resultmap', '配置', '感觉', '配置', '好多好多', '其实', 'mapper', '总共', '配置', '我们', '常用', '包含', '在内', 'cache', '给定', '命名', '空间', '缓存', '配置', 'cache', 'ref', '其他', '命名', '空间', '缓存', '配置', '引用', 'resultmap', '复杂', '强大', '元素', '用于', '实现', '数据库', '表列', 'java', 'bean', '属性', '映射', '配置', 'sql', '其他', '语句', '引用', '重用', '语句', 'insert', '映射', '插入', '语句', 'update', '映射', '更新', '语句', 'delete', '映射', '删除', '语句', 'select', '映射', '查询', '语句', '正常', '情况', '我们', '很少', '使用', 'mybatis', '提供', 'cache', '机制', '而是', '使用', '外部', 'redis', '缓存', '所以', '这里', 'cache', '配置', '几乎', '不会', '使用', '主要', '就是', '我们', '平时', '使用', '配置', '以上', '就是', 'mybatis', '所有', '提供', '我们', '配置', '地方', '改变', 'mybatis', '行为', '配置', '每个', 'xml', '配置文件', '刚好', '配置', '总共', '16', '配置', 'mybatis', '初始化', '源码', '流程', '阅读', 'mybatis', '源码', '最好', '方式', '是从', '源码', '单测', '作为', '入口', '然后', 'debug', '一步步', '执行', '自己', '关注', '地方', '多多', '停留', '一会', '仔细', '查看', '以下', '代码', '流程', '进行', '解析', '主要', '代码', 'mybatis', '代码', '初始化', '入口', 'beforeclasspublic', 'static', 'void', 'setup', 'throws', 'exception', 'createblogdatasource', 'final', 'string', 'resource', 'org', 'apache', 'ibatis', 'builder', 'mapperconfig', 'xml', 'final', 'reader', 'reader', 'resources', 'getresourceasreader', 'resource', 'sqlmapper', 'new', 'sqlsessionfactorybuilder', 'build', 'reader', '这里', '看到', '进入', 'new', 'sqlsessionfactorybuilder', 'build', 'reader', '方法', '进入', 'sqlsessionfactorybuilder', 'build', '方法', 'public', 'sqlsessionfactory', 'build', 'reader', 'reader', 'string', 'environment', 'properties', 'properties', 'try', 'xmlconfigbuilder', 'parser', 'new', 'xmlconfigbuilder', 'reader', 'environment', 'properties', 'return', 'build', 'parser', 'parse', 'catch', 'exception', 'throw', 'exceptionfactory', 'wrapexception', 'error', 'building', 'sqlsession', 'finally', 'errorcontext', 'instance', 'reset', 'try', 'reader', 'close', 'catch', 'ioexception', 'intentionally', 'ignore', 'prefer', 'previous', 'error', '主要', '两行', 'try', '第一行', '内容', '调用', 'xpathparser', '加载', 'mybatis', '配置文件', '第二步', '包含', '两个', '步骤', 'parser', 'parse', '方法', '返回', '一个', 'configuration', '对象', '包裹', 'build', '方法', '只有', '一行', '代码', 'public', 'sqlsessionfactory', 'build', 'configuration', 'config', 'return', 'new', 'defaultsqlsessionfactory', 'config', '可以', '看出', '其实', '初始化', '过程', '就是', '创建', 'configuration', '对象', '过程', '对照', 'mapperconfig', 'xml', '元素', 'configuration', '不难猜测', 'configuration', '一个', '非常', '重要', '包含', 'mybatis', '所有', '数据', '配置', '对象', 'mybatis', '核心', '对象', 'configuration', '构建', '过程', '接下来', '进入', 'xmlconfigbuilder', 'parse', '方法', '方法', '解析', 'xml', '文件', 'configuration', '节点', '然后', '挨个', '解析', '上面', '配置文件', '提到', '配置', 'public', 'configuration', 'parse', 'if', 'parsed', 'throw', 'new', 'builderexception', 'each', 'xmlconfigbuilder', 'can', 'only', 'be', 'used', 'once', 'parsed', 'true', 'parseconfiguration', 'parser', 'evalnode', 'configuration', 'return', 'configuration', 'private', 'void', 'parseconfiguration', 'xnode', 'root', 'try', 'issue', '117', 'read', 'properties', 'firstpropertieselement', 'root', 'evalnode', 'properties', 'properties', 'settings', 'settingsasproperties', 'root', 'evalnode', 'settings', 'loadcustomvfs', 'settings', 'typealiaseselement', 'root', 'evalnode', 'typealiases', 'pluginelement', 'root', 'evalnode', 'plugins', 'objectfactoryelement', 'root', 'evalnode', 'objectfactory', 'objectwrapperfactoryelement', 'root', 'evalnode', 'objectwrapperfactory', 'reflectorfactoryelement', 'root', 'evalnode', 'reflectorfactory', 'settingselement', 'settings', 'read', 'it', 'after', 'objectfactory', 'and', 'objectwrapperfactory', 'issue', '631environmentselement', 'root', 'evalnode', 'environments', 'databaseidproviderelement', 'root', 'evalnode', 'databaseidprovider', 'typehandlerelement', 'root', 'evalnode', 'typehandlers', 'mapperelement', 'root', 'evalnode', 'mappers', 'catch', 'exception', 'throw', 'new', 'builderexception', 'error', 'parsing', 'sql', 'mapper', 'configuration', 'cause', '我们', '挨个', '查看', '这些', '配置', '解析', '产出', '什么', '内容', 'properties', '配置', '解析', '进入', 'propertieselement', '方法', '我们', '发现', '初始化', '一个', 'properties', '对象', 'xml', '所有', '节点', '按照', 'key', 'value', '存入', 'properties', '之后', 'configuration', 'variables', '变量', '进行', '合并', 'configuration', 'variables', '本身', 'properties', '对象', 'private', 'void', 'propertieselement', 'xnode', 'context', 'throws', 'exception', 'if', 'context', 'null', 'properties', 'defaults', 'context', 'getchildrenasproperties', 'string', 'resource', 'context', 'getstringattribute', 'resource', 'string', 'url', 'context', 'getstringattribute', 'url', 'if', 'resource', 'null', '&&', 'url', 'null', 'throw', 'new', 'builderexception', 'the', 'properties', 'element', 'cannot', 'specify', 'both', 'url', 'and', 'resource', 'based', 'property', 'file', 'reference', 'please', 'specify', 'one', 'or', 'the', 'other', 'if', 'resource', 'null', 'defaults', 'putall', 'resources', 'getresourceasproperties', 'resource', 'else', 'if', 'url', 'null', 'defaults', 'putall', 'resources', 'geturlasproperties', 'url', 'properties', 'vars', 'configuration', 'getvariables', 'if', 'vars', 'null', 'defaults', 'putall', 'vars', 'parser', 'setvariables', 'defaults', 'configuration', 'setvariables', 'defaults', 'properties', '配置', '解析', '合并', 'configuration', 'variables', '之后', '后续', '配置文件', '可以', '使用', '这些', '变量', 'setting', '配置', '读取', 'setting', '配置', '读取', '包含', '两个', '步骤', '第一步', 'xml', '所有', '配置', '读取', 'properties', '对象', 'private', 'properties', 'settingsasproperties', 'xnode', 'context', 'if', 'context', 'null', 'return', 'new', 'properties', 'properties', 'props', 'context', 'getchildrenasproperties', 'check', 'that', 'all', 'settings', 'are', 'known', 'to', 'the', 'configuration', 'classmetaclass', 'metaconfig', 'metaclass', 'forclass', 'configuration', 'class', 'localreflectorfactory', 'for', 'object', 'key', 'props', 'keyset', 'if', 'metaconfig', 'hassetter', 'string', 'valueof', 'key', 'throw', 'new', 'builderexception', 'the', 'setting', 'key', 'is', 'not', 'known', 'make', 'sure', 'you', 'spelled', 'it', 'correctly', 'case', 'sensitive', 'return', 'props', '这个', '函数', '读取', 'setting', '配置', '通过', '反射', '访问', 'configuration', 'class', '如果', '存在', '某个', '配置', 'set', '方法', '报错', '然后', 'settingselement', '方法', '这些', '读取', '配置', '存入', 'configuration', 'private', 'void', 'settingselement', 'properties', 'props', 'throws', 'exception', 'configuration', 'setautomappingbehavior', 'automappingbehavior', 'valueof', 'props', 'getproperty', 'automappingbehavior', 'partial', 'configuration', 'setautomappingunknowncolumnbehavior', 'automappingunknowncolumnbehavior', 'valueof', 'props', 'getproperty', 'automappingunknowncolumnbehavior', 'none', 'configuration', 'setcacheenabled', 'booleanvalueof', 'props', 'getproperty', 'cacheenabled', 'true', 'configuration', 'setproxyfactory', 'proxyfactory', 'createinstance', 'props', 'getproperty', 'proxyfactory', 'configuration', 'setlazyloadingenabled', 'booleanvalueof', 'props', 'getproperty', 'lazyloadingenabled', 'false', 'configuration', 'setaggressivelazyloading', 'booleanvalueof', 'props', 'getproperty', 'aggressivelazyloading', 'false', 'configuration', 'setmultipleresultsetsenabled', 'booleanvalueof', 'props', 'getproperty', 'multipleresultsetsenabled', 'true', 'configuration', 'setusecolumnlabel', 'booleanvalueof', 'props', 'getproperty', 'usecolumnlabel', 'true', 'configuration', 'setusegeneratedkeys', 'booleanvalueof', 'props', 'getproperty', 'usegeneratedkeys', 'false', 'configuration', 'setdefaultexecutortype', 'executortype', 'valueof', 'props', 'getproperty', 'defaultexecutortype', 'simple', 'configuration', 'setdefaultstatementtimeout', 'integervalueof', 'props', 'getproperty', 'defaultstatementtimeout', 'null', 'configuration', 'setdefaultfetchsize', 'integervalueof', 'props', 'getproperty', 'defaultfetchsize', 'null', 'configuration', 'setmapunderscoretocamelcase', 'booleanvalueof', 'props', 'getproperty', 'mapunderscoretocamelcase', 'false', 'configuration', 'setsaferowboundsenabled', 'booleanvalueof', 'props', 'getproperty', 'saferowboundsenabled', 'false', 'configuration', 'setlocalcachescope', 'localcachescope', 'valueof', 'props', 'getproperty', 'localcachescope', 'session', 'configuration', 'setjdbctypefornull', 'jdbctype', 'valueof', 'props', 'getproperty', 'jdbctypefornull', 'other', 'configuration', 'setlazyloadtriggermethods', 'stringsetvalueof', 'props', 'getproperty', 'lazyloadtriggermethods', 'equals', 'clone', 'hashcode', 'tostring', 'configuration', 'setsaferesulthandlerenabled', 'booleanvalueof', 'props', 'getproperty', 'saferesulthandlerenabled', 'true', 'configuration', 'setdefaultscriptinglanguage', 'resolveclass', 'props', 'getproperty', 'defaultscriptinglanguage', 'configuration', 'setcallsettersonnulls', 'booleanvalueof', 'props', 'getproperty', 'callsettersonnulls', 'false', 'configuration', 'setuseactualparamname', 'booleanvalueof', 'props', 'getproperty', 'useactualparamname', 'true', 'configuration', 'setreturninstanceforemptyrow', 'booleanvalueof', 'props', 'getproperty', 'returninstanceforemptyrow', 'false', 'configuration', 'setlogprefix', 'props', 'getproperty', 'logprefix', 'suppresswarnings', 'unchecked', 'class', 'extends', 'log', 'logimpl', 'class', 'extends', 'log', 'resolveclass', 'props', 'getproperty', 'logimpl', 'configuration', 'setlogimpl', 'logimpl', 'configuration', 'setconfigurationfactory', 'resolveclass', 'props', 'getproperty', 'configurationfactory', '因为', 'setting', '变量', '直接', '改变', 'mybatis', '行为', '所以', '配置', '直接', '存于', 'confirguration', '属性', 'typealiases', '配置', '解析', '进入', 'typealiaseselement', '方法', '用于', 'typealiases', '配置', '解析', 'private', 'void', 'typealiaseselement', 'xnode', 'parent', 'if', 'parent', 'null', 'for', 'xnode', 'child', 'parent', 'getchildren', 'if', 'package', 'equals', 'child', 'getname', 'string', 'typealiaspackage', 'child', 'getstringattribute', 'name', 'configuration', 'gettypealiasregistry', 'registeraliases', 'typealiaspackage', 'else', 'string', 'alias', 'child', 'getstringattribute', 'alias', 'string', 'type', 'child', 'getstringattribute', 'type', 'try', 'class', 'clazz', 'resources', 'classforname', 'type', 'if', 'alias', 'null', 'typealiasregistry', 'registeralias', 'clazz', 'else', 'typealiasregistry', 'registeralias', 'alias', 'clazz', 'catch', 'classnotfoundexception', 'throw', 'new', 'builderexception', 'error', 'registering', 'typealias', 'for', 'alias', 'cause', '方法', 'typealiases', '配置', '提取', '之后', '存入', 'typealiasregistry', '这个', '对象', '对象', 'basebuilder', '初始化', 'public', 'abstract', 'class', 'basebuilder', 'protected', 'final', 'configuration', 'configuration', 'protected', 'final', 'typealiasregistry', 'typealiasregistry', 'protected', 'final', 'typehandlerregistry', 'typehandlerregistry', 'public', 'basebuilder', 'configuration', 'configuration', 'this', 'configuration', 'configuration', 'this', 'typealiasregistry', 'this', 'configuration', 'gettypealiasregistry', 'this', 'typehandlerregistry', 'this', 'configuration', 'gettypehandlerregistry', 'configuration', '类中', '我们', '看到', '对象', '声明', 'protected', 'final', 'typealiasregistry', 'typealiasregistry', 'new', 'typealiasregistry', '打开', '该类', '代码', '发现', '特别', '简单', '一个', 'map', '存储', '别名', '对应', '映射', 'public', 'class', 'typealiasregistry', 'private', 'final', 'map', 'string', 'class', 'type', 'aliases', 'new', 'hashmap', 'string', 'class', 'public', 'typealiasregistry', 'registeralias', 'string', 'string', 'class', 'registeralias', 'byte', 'byte', 'class', 'registeralias', 'long', 'long', 'class', 'registeralias', 'short', 'short', 'class', 'registeralias', 'int', 'integer', 'class', 'registeralias', 'integer', 'integer', 'class', 'registeralias', 'double', 'double', 'class', 'registeralias', 'float', 'float', 'class', 'registeralias', 'boolean', 'boolean', 'class', '构造函数', 'mybatis', '已经', '默认', '注册', '一些', '常用', '别名', '关系', '所以', '我们', '可以', 'mappers', 'xml', '文件', '使用', '这些', '名字', 'typehandlers', '配置', '元素', '解析', 'mybatis', '提供', '大部分', '数据类型', 'typehandlers', '如果', '我们', '定制', '自己', '类型', '处理器', '比如', '实现', '数据库', '两个', '数字', '中文', '映射', '可以', '自己', '实现', 'typehandlerprivate', 'void', 'typehandlerelement', 'xnode', 'parent', 'throws', 'exception', 'if', 'parent', 'null', 'for', 'xnode', 'child', 'parent', 'getchildren', 'if', 'package', 'equals', 'child', 'getname', 'string', 'typehandlerpackage', 'child', 'getstringattribute', 'name', 'typehandlerregistry', 'register', 'typehandlerpackage', 'else', 'string', 'javatypename', 'child', 'getstringattribute', 'javatype', 'string', 'jdbctypename', 'child', 'getstringattribute', 'jdbctype', 'string', 'handlertypename', 'child', 'getstringattribute', 'handler', 'class', 'javatypeclass', 'resolveclass', 'javatypename', 'jdbctype', 'jdbctype', 'resolvejdbctype', 'jdbctypename', 'class', 'typehandlerclass', 'resolveclass', 'handlertypename', 'if', 'javatypeclass', 'null', 'if', 'jdbctype', 'null', 'typehandlerregistry', 'register', 'javatypeclass', 'typehandlerclass', 'else', 'typehandlerregistry', 'register', 'javatypeclass', 'jdbctype', 'typehandlerclass', 'else', 'typehandlerregistry', 'register', 'typehandlerclass', '方法', '通过', '反射', '得到', 'javatypeclass', 'jdbctype', 'typehandlerclass', '三个', '变量', '三个', '变量', '组成', 'javatype', 'jdbctype', 'typehandler', '三元组', '遇到', 'javatype', 'jdbctype', '转换', '或者', '遇到', 'jdbctype', 'javatype', '转换', '使用', 'typehandler', '然后', '方法', '调用', 'typehandlerregistry', 'register', '进行', '注册', 'typehandlerregistry', '对象', '是从', 'basebuilder', 'configuration', '对象', '获取', 'public', 'abstract', 'class', 'basebuilder', 'protected', 'final', 'configuration', 'configuration', 'protected', 'final', 'typealiasregistry', 'typealiasregistry', 'protected', 'final', 'typehandlerregistry', 'typehandlerregistry', 'public', 'basebuilder', 'configuration', 'configuration', 'this', 'configuration', 'configuration', 'this', 'typealiasregistry', 'this', 'configuration', 'gettypealiasregistry', 'this', 'typehandlerregistry', 'this', 'configuration', 'gettypehandlerregistry', 'typehandlerregistry', '建立', '几个', 'map', '映射', 'public', 'final', 'class', 'typehandlerregistry', 'private', 'final', 'map', 'jdbctype', 'typehandler', 'jdbc', 'type', 'handler', 'map', 'new', 'enummap', 'jdbctype', 'typehandler', 'jdbctype', 'class', 'private', 'final', 'map', 'type', 'map', 'jdbctype', 'typehandler', 'type', 'handler', 'map', 'new', 'hashmap', 'type', 'map', 'jdbctype', 'typehandler', 'private', 'final', 'typehandler', 'object', 'unknown', 'type', 'handler', 'new', 'unknowntypehandler', 'this', 'private', 'final', 'map', 'class', 'typehandler', 'all', 'type', 'handlers', 'map', 'new', 'hashmap', 'class', 'typehandler', '第一个', 'jdbctype', 'key', 'map', '第二个', 'javatype', 'key', 'map', '第三个', '未知', '处理器', '最后', '一个', '包含', '全部', '处理器', '执行', 'sql', '时候', 'javabean', 'javatype', '转换', 'db', 'jdbctype', '查询', '出来', '数据', '时候', '需要', 'jdbctype', '转换成', 'javatype', 'typehandlerregistry', '构造函数', '已经', '注册', '很多', '默认', 'typehandler', '大部分', '情况', '需要', '我们', '添加', 'public', 'typehandlerregistry', 'register', 'boolean', 'class', 'new', 'booleantypehandler', 'register', 'boolean', 'class', 'new', 'booleantypehandler', 'register', 'jdbctype', 'boolean', 'new', 'booleantypehandler', 'register', 'jdbctype', 'bit', 'new', 'booleantypehandler', 'register', 'byte', 'class', 'new', 'bytetypehandler', 'register', 'byte', 'class', 'new', 'bytetypehandler', 'register', 'jdbctype', 'tinyint', 'new', 'bytetypehandler', 'register', 'short', 'class', 'new', 'shorttypehandler', 'register', 'short', 'class', 'new', 'shorttypehandler', 'register', 'jdbctype', 'smallint', 'new', 'shorttypehandler', '实现', '一个', 'typehandler', '需要', '实现', '接口', '接口', '提供', '是从', 'javatype', 'jdbctype', 'setparameter', '方法', '以及', 'jdbctype', 'javatype', '转换', 'getresult', '方法', 'public', 'interface', 'typehandler', 'void', 'setparameter', 'preparedstatement', 'ps', 'int', 'parameter', 'jdbctype', 'jdbctype', 'throws', 'sqlexception', 'getresult', 'resultset', 'rs', 'string', 'columnname', 'throws', 'sqlexception', 'getresult', 'resultset', 'rs', 'int', 'columnindex', 'throws', 'sqlexception', 'getresult', 'callablestatement', 'cs', 'int', 'columnindex', 'throws', 'sqlexception', 'objectfactory', '配置', '解析', '如果', '自己', '控制', '查询数据库', '结果', 'javabean', '映射', '生成', '可以', '创建', '自己', 'objectfactory', '解析', '代码', '如下', 'private', 'void', 'objectfactoryelement', 'xnode', 'context', 'throws', 'exception', 'if', 'context', 'null', 'string', 'type', 'context', 'getstringattribute', 'type', 'properties', 'properties', 'context', 'getchildrenasproperties', 'objectfactory', 'factory', 'objectfactory', 'resolveclass', 'type', 'newinstance', 'factory', 'setproperties', 'properties', 'configuration', 'setobjectfactory', 'factory', '可以', '看到', '配置', '包含', 'type', '属性', '以及', 'properties', '节点', '创建', 'objectfactory', '对象', '设置', 'configuration', 'configuration', '对象', 'objectfactory', '成员', '变量', 'protected', 'objectfactory', 'objectfactory', 'new', 'defaultobjectfactory', '实现', 'objectfactory', '需要', '继承', '接口', 'public', 'interface', 'objectfactory', 'void', 'setproperties', 'properties', 'properties', 'create', 'class', 'type', 'create', 'class', 'type', 'list', 'class', 'constructorargtypes', 'list', 'object', 'constructorargs', 'boolean', 'iscollection', 'class', 'type', '工厂', '接口', '提供', '设置', '属性', '列表', '还有', '创建对象', '工厂', '方法', 'plugin', '元素', '解析', 'plugin', 'mybatis', '插件', '可以', '我们', '自己', '进行', '开发', '用于', '扩展', 'mybatis', '进入', 'pluginelement', '方法', '进入', '解析', 'private', 'void', 'pluginelement', 'xnode', 'parent', 'throws', 'exception', 'if', 'parent', 'null', 'for', 'xnode', 'child', 'parent', 'getchildren', 'string', 'interceptor', 'child', 'getstringattribute', 'interceptor', 'properties', 'properties', 'child', 'getchildrenasproperties', 'interceptor', 'interceptorinstance', 'interceptor', 'resolveclass', 'interceptor', 'newinstance', 'interceptorinstance', 'setproperties', 'properties', 'configuration', 'addinterceptor', 'interceptorinstance', '该段', '代码', '首先', '获取', 'intercepter', '元素', '作为', '拦截器', '然后', '读取', '节点', '所有', '节点', '作为', '配置', '最后', '调用', 'configuration', 'addinterceptor', '方法', '添加', 'configuration', 'interceptorchain', '对象', '拦截器', '一个', '包装', '对象', 'public', 'class', 'interceptorchain', 'private', 'final', 'list', 'interceptor', 'interceptors', 'new', 'arraylist', 'interceptor', 'public', 'object', 'pluginall', 'object', 'target', 'for', 'interceptor', 'interceptor', 'interceptors', 'target', '变量', '每次', '变化', 'target', 'interceptor', 'plugin', 'target', 'return', 'target', 'public', 'void', 'addinterceptor', 'interceptor', 'interceptor', 'interceptors', 'add', 'interceptor', 'public', 'list', 'interceptor', 'getinterceptors', 'return', 'collections', 'unmodifiablelist', 'interceptors', '该类', '使用', 'list', 'interceptor', '存储', '所有', '配置', '拦截器', '提供', 'addinterceptor', '用于', '添加', '拦截器', '提供', 'getinterceptors', '用于', '获取', '当前', '所有', '添加', '插件', '列表', '提供', 'pluginall', '接口', '调用', '所有', 'interceptor', 'plugin', 'object', '方法', '进行', '插件', '执行', 'environments', '配置', '解析', 'environments', '可以', '配置', '多个', '环境', '配置', '每个', '配置', '包含', '数据源', '事务', '管理器', '两项', '如下', '所示', '代码', 'private', 'void', 'environmentselement', 'xnode', 'context', 'throws', 'exception', 'if', 'context', 'null', 'if', 'environment', 'null', 'environment', 'context', 'getstringattribute', 'default', 'for', 'xnode', 'child', 'context', 'getchildren', 'string', 'id', 'child', 'getstringattribute', 'id', 'if', 'isspecifiedenvironment', 'id', 'transactionfactory', 'txfactory', 'transactionmanagerelement', 'child', 'evalnode', 'transactionmanager', 'datasourcefactory', 'dsfactory', 'datasourceelement', 'child', 'evalnode', 'datasource', 'datasource', 'datasource', 'dsfactory', 'getdatasource', 'environment', 'builder', 'environmentbuilder', 'new', 'environment', 'builder', 'id', 'transactionfactory', 'txfactory', 'datasource', 'datasource', 'configuration', 'setenvironment', 'environmentbuilder', 'build', '代码', '通过', 'isspecifiedenvironment', '方法', '判断', '当前', 'id', '是不是', '指定', '读取', 'environment', '如果', '的话', '通过', '反射', '获取', '事务', '管理器', '数据源', '然后', 'environment', 'builder', '创建', 'enviroment', '对象', '设置', 'configuration', 'configuration', '可以', '看到', 'enviroment', '成员', '变量', 'protected', 'environment', 'environment', 'enviroment', '对象', '包含', '三个', '属性', 'public', 'final', 'class', 'environment', 'private', 'final', 'string', 'id', 'private', 'final', 'transactionfactory', 'transactionfactory', 'private', 'final', 'datasource', 'datasource', 'databaseidprovider', '配置', '解析', 'mybatis', '当然', '只是', '支持', 'mysql', '支持', 'oracle', 'sqlserver', '不同', '数据库', '解析', '代码', '如下', 'private', 'void', 'databaseidproviderelement', 'xnode', 'context', 'throws', 'exception', 'databaseidprovider', 'databaseidprovider', 'null', 'if', 'context', 'null', 'string', 'type', 'context', 'getstringattribute', 'type', 'awful', 'patch', 'to', 'keep', 'backward', 'compatibilityif', 'vendor', 'equals', 'type', 'type', 'db', 'vendor', 'properties', 'properties', 'context', 'getchildrenasproperties', 'databaseidprovider', 'databaseidprovider', 'resolveclass', 'type', 'newinstance', 'databaseidprovider', 'setproperties', 'properties', 'environment', 'environment', 'configuration', 'getenvironment', 'if', 'environment', 'null', '&&', 'databaseidprovider', 'null', 'string', 'databaseid', 'databaseidprovider', 'getdatabaseid', 'environment', 'getdatasource', 'configuration', 'setdatabaseid', 'databaseid', '解析', 'databaseidprovider', '里面', 'properties', '存储', '各种', '数据库', '映射', '并且', 'databaseidprovider', '提供', '一个', '根据', 'datasource', '获取', '对应', 'databseid', '方法', 'vendordatabaseidprovider', '为例', '通过', 'connection', 'getmetadata', 'getdatabaseproductname', '获取', '数据库', '产品名称', '然后', '刚才', 'databaseidprovider', '获取', '对应', 'databaseid', 'public', 'class', 'vendordatabaseidprovider', 'implements', 'databaseidprovider', 'private', 'static', 'final', 'log', 'log', 'logfactory', 'getlog', 'vendordatabaseidprovider', 'class', 'private', 'properties', 'properties', 'overridepublic', 'string', 'getdatabaseid', 'datasource', 'datasource', 'if', 'datasource', 'null', 'throw', 'new', 'nullpointerexception', 'datasource', 'cannot', 'be', 'null', 'try', 'return', 'getdatabasename', 'datasource', 'catch', 'exception', 'log', 'error', 'could', 'not', 'get', 'databaseid', 'from', 'datasource', 'return', 'null', 'overridepublic', 'void', 'setproperties', 'properties', 'this', 'properties', 'private', 'string', 'getdatabasename', 'datasource', 'datasource', 'throws', 'sqlexception', 'string', 'productname', 'getdatabaseproductname', 'datasource', 'if', 'this', 'properties', 'null', 'for', 'map', 'entry', 'object', 'object', 'property', 'properties', 'entryset', 'if', 'productname', 'contains', 'string', 'property', 'getkey', 'return', 'string', 'property', 'getvalue', 'no', 'match', 'return', 'nullreturn', 'null', 'return', 'productname', 'private', 'string', 'getdatabaseproductname', 'datasource', 'datasource', 'throws', 'sqlexception', 'connection', 'con', 'null', 'try', 'con', 'datasource', 'getconnection', 'databasemetadata', 'metadata', 'con', 'getmetadata', 'return', 'metadata', 'getdatabaseproductname', 'finally', 'if', 'con', 'null', 'try', 'con', 'close', 'catch', 'sqlexception', 'ignored', '获取', 'databaseid', '之后', '最后', 'databaseid', '设置', 'configuration', '后续', '执行', 'sql', '时候', '自动', '根据', 'databaseid', '映射', '具体', '数据库', 'sql', 'mappers', '配置', '解析', 'mappers', '解析', '最为', '复杂', '我们', '假设', 'mapper', '文件', 'url', '指定', 'xml', '文件', '进行', '解析', '流程', '查看', 'private', 'void', 'mapperelement', 'xnode', 'parent', 'throws', 'exception', 'if', 'parent', 'null', 'for', 'xnode', 'child', 'parent', 'getchildren', 'if', 'package', 'equals', 'child', 'getname', 'string', 'mapperpackage', 'child', 'getstringattribute', 'name', 'configuration', 'addmappers', 'mapperpackage', 'else', 'string', 'resource', 'child', 'getstringattribute', 'resource', 'string', 'url', 'child', 'getstringattribute', 'url', 'string', 'mapperclass', 'child', 'getstringattribute', 'class', 'if', 'resource', 'null', '&&', 'url', 'null', '&&', 'mapperclass', 'null', 'errorcontext', 'instance', 'resource', 'resource', 'inputstream', 'inputstream', 'resources', 'getresourceasstream', 'resource', '使用', 'xmlmapperbuilder', '加载', 'mapper', 'xml', '然后', '进入', 'parse', '方法', 'xmlmapperbuilder', 'mapperparser', 'new', 'xmlmapperbuilder', 'inputstream', 'configuration', 'resource', 'configuration', 'getsqlfragments', 'mapperparser', 'parse', 'else', 'if', 'resource', 'null', '&&', 'url', 'null', '&&', 'mapperclass', 'null', 'errorcontext', 'instance', 'resource', 'url', 'inputstream', 'inputstream', 'resources', 'geturlasstream', 'url', 'xmlmapperbuilder', 'mapperparser', 'new', 'xmlmapperbuilder', 'inputstream', 'configuration', 'url', 'configuration', 'getsqlfragments', 'mapperparser', 'parse', 'else', 'if', 'resource', 'null', '&&', 'url', 'null', '&&', 'mapperclass', 'null', 'class', 'mapperinterface', 'resources', 'classforname', 'mapperclass', 'configuration', 'addmapper', 'mapperinterface', 'else', 'throw', 'new', 'builderexception', 'mapper', 'element', 'may', 'only', 'specify', 'url', 'resource', 'or', 'class', 'but', 'not', 'more', 'than', 'one', '注释', '部分', '显示', '读取', '每个', 'mapper', 'xml', '资源', '文件', '地址', '进入', 'xmlmapperbuilder', 'parse', '方法', 'public', 'void', 'parse', 'if', 'configuration', 'isresourceloaded', 'resource', 'configurationelement', 'parser', 'evalnode', 'mapper', 'configuration', 'addloadedresource', 'resource', 'bindmapperfornamespace', 'parsependingresultmaps', 'parsependingchacherefs', 'parsependingstatements', 'private', 'void', 'configurationelement', 'xnode', 'context', 'try', 'string', 'namespace', 'context', 'getstringattribute', 'namespace', 'if', 'namespace', 'null', 'namespace', 'equals', 'throw', 'new', 'builderexception', 'mapper', 'namespace', 'cannot', 'be', 'empty', 'builderassistant', 'setcurrentnamespace', 'namespace', 'cacherefelement', 'context', 'evalnode', 'cache', 'ref', 'cacheelement', 'context', 'evalnode', 'cache', 'parametermapelement', 'context', 'evalnodes', 'mapper', 'parametermap', 'resultmapelements', 'context', 'evalnodes', 'mapper', 'resultmap', 'sqlelement', 'context', 'evalnodes', 'mapper', 'sql', 'buildstatementfromcontext', 'context', 'evalnodes', 'select', 'insert', 'update', 'delete', 'catch', 'exception', 'throw', 'new', 'builderexception', 'error', 'parsing', 'mapper', 'xml', 'cause', '然后', '进入', 'configurationelement', 'parser', 'evalnode', 'mapper', '方法', '读取', '所有', 'xml', 'mapper', '元素', '这里', '我们', '查看', 'buildstatementfromcontext', '方法', 'private', 'void', 'buildstatementfromcontext', 'list', 'xnode', 'list', 'if', 'configuration', 'getdatabaseid', 'null', 'buildstatementfromcontext', 'list', 'configuration', 'getdatabaseid', 'buildstatementfromcontext', 'list', 'null', 'private', 'void', 'buildstatementfromcontext', 'list', 'xnode', 'list', 'string', 'requireddatabaseid', 'for', 'xnode', 'context', 'list', 'final', 'xmlstatementbuilder', 'statementparser', 'new', 'xmlstatementbuilder', 'configuration', 'builderassistant', 'context', 'requireddatabaseid', 'try', 'statementparser', 'parsestatementnode', 'catch', 'incompleteelementexception', 'configuration', 'addincompletestatement', 'statementparser', '方法', '出现', '一个', 'xmlstatementbuilder', '用于', 'select', 'insert', 'update', 'delete', '语句', '各自', '解析', 'xmlstatementbuilder', 'parsestatementnode', '方法', '解析', '各种', '语句', '属性', '参数', '以及', '动态', 'sql', '处理', '最后', '调用', 'builderassistant', 'addmappedstatement', '方法', '所有', '参数', '内容', '构建', 'mappedstatement', '添加', 'configuration', 'mappedstatement', 'statement', 'statementbuilder', 'build', 'configuration', 'addmappedstatement', 'statement', '以下', 'configuration', 'mappedstatements', '对象', 'configuration', 'mappedstatements', '对象', 'protected', 'final', 'map', 'string', 'mappedstatement', 'mappedstatements', 'new', 'strictmap', 'mappedstatement', 'mapped', 'statements', 'collection', '这里', 'strictmap', '就是', '一个', 'hashmap', 'addmappedstatement', '方法', '可以', '看到', 'map', 'key', '各个', 'sql', 'id', 'public', 'void', 'addmappedstatement', 'mappedstatement', 'ms', 'mappedstatements', 'put', 'ms', 'getid', 'ms', '由此', '可以', '推测', '整个', 'mybatis', '执行', 'sql', '过程', '业务', '代码', '调用', 'sqlmapperinterface', 'method', '方法', 'mybatis', '根据', 'method', '限定', '名称', '作为', 'id', 'mappedstatements', '找到', '构建', 'mappedstatement', '对象', '使用', 'mappedstatement', '读取', 'sql', '各种', '配置', '执行', 'sql', 'mybatis', '初始化', '对象', '产出', '列表', '总结', '以上', '就是', 'mybatis', '初始化', '过程', '详解', '最终', '产出', '以下', '对象', '列表', '产出', 'sqlsessionfactory', '相当于', 'connectionfactory', '用于', '生产', 'sqlsession', 'sqlsession', '相当于', 'connection', '用于', '实际', 'sql', '查询', 'sqlsessionfactory', '核心', '对象', 'configuration', '所有', 'mybatis', '配置', 'mapper', '配置', '列表', '解析', '读取', '对象', '属性', 'configuration', '各个', '对象', 'configuration', 'variables', '类型', 'properties', '存储', 'mybatis', '配置', 'properties', '对象', 'configuration', '直接', '属性', 'setting', '配置', '因为', '直接', '影响', 'mybatis', '行为', '直接', '赋值', 'configuration', '对象', '属性', 'configuration', 'typealiasregistry', '对象', '存储', '别名', '映射', 'key', '别名', 'value', '别名', '对应', 'configuration', 'typehandlerregistry', '对象', '存储', 'typehandler', '映射', 'key', 'javatype', '或者', 'jdbctype', 'value', 'typehandler', 'configuration', 'objectfactory', '对象', '存储', '单个', 'objectfactory', '对象', '用于', 'db', '映射', 'javabean', '对象', '创建', 'configuration', 'interceptorchain', '对象', '存储', 'plugin', '对象', '列表', '用户', '可以', '添加', '用于', '扩展', 'mybatis', 'configuration', 'environment', '对象', '指定', '开发', '测试', '线上', '环境', '根据', 'datasource', '决定', 'databaseid', '对象', '取值', 'configuration', 'databaseid', '存储', '使用', 'db', '类型', 'mybatis', '根据', '不同', 'db', 'sql', '适配', 'configuration', 'mappedstatements', '存储', 'key', 'id', 'value', 'mappedstatement', 'map', '执行', 'sql', '此处', '获取', '对象', '参考资料', 'xml', '映射', '配置文件', 'http', 'www', 'mybatis', 'org', 'mybatis', 'zh', 'configuration', 'htmlxml', '映射', '文件', 'http', 'www', 'mybatis', 'org', 'mybatis', 'zh', 'sqlmap', 'xml', 'html', '本文', '地址', 'http', 'crazyant', 'net', '2089', 'html', '转载', '注明', '来源']","[[-0.24936714 -0.10605836  0.28624226  0.14129195  0.31214856 -0.38661247
  -0.13054635  0.50144778 -0.07488484 -0.12416328 -0.03711132 -0.40870963
  -0.1406045   0.56996068  0.19073864 -0.10888009 -0.13825556 -0.02410933
  -0.08555513 -0.58387892 -0.04282852  0.28267656 -0.05154253 -0.19613458
   0.06008354 -0.50467906 -0.32898419  0.03551808 -0.25600341 -0.08870779
   0.17507085 -0.00989975 -0.00224325 -0.13057867 -0.17298416  0.36254812
  -0.21642822 -0.30087825  0.08675579 -0.80062215 -0.1567572  -0.63524436
  -0.09148477 -0.00800695 -0.14622356 -0.23329195 -0.25606704  0.3846457
  -0.21378311  0.5070375   0.16093835 -0.29430397 -0.14235934 -0.19622846
   0.00235777  0.42345228  0.16277528 -0.09203445  0.12217731 -0.14438483
   0.0917792   0.24661294  0.02163377  0.09095957 -0.40767462  0.04663413
   0.06233616 -0.03108221 -0.32139327  0.46664169  0.10698112 -0.18570377
   0.41378752 -0.35031334  0.58141006  0.28844762  0.15464305 -0.16405449
  -0.3470573  -0.13945464  0.00480377  0.05607012 -0.12026828  0.39791437
  -0.35150682  0.23767207 -0.30268184  0.47055955  0.52763269  0.17500581
   0.25862578  0.11545133  0.39778611  0.21180056  0.20636388  0.36820663
   0.12903797 -0.34335258 -0.02722332 -0.14230862]]"
2120,Zookeeper并不保证读取的是最新数据,如果是对zk进行读取操作，读取到的数据可能是过期的旧数据，不是最新的数据。已上图为例，如果一个zk集群有10000台节点，当进行写入的时候，如果已经有6K个节点写入成功，zk就认为本次写请求成功。但是这时候如果一个客户端读取的刚好是另外4K个节点的数据，那么读取到的就是旧的过期数据。在zk的官方文档中对此有解释，地址在：https://zookeeper.apache.org/doc/r3.1.2/zookeeperProgrammers.htmlzookeeper一致性的保证：ZooKeeper是一种高性能，可扩展的服务，虽然读取速度比写入快，但是读取和写入操作都设计的极为快速，这样做的原因是在读取的情况下，ZooKeeper可能会提供较旧的数据，但这是为了ZooKeeper的一致性保证：顺序一致性：来自客户端的更新将按照发送的顺序被写入到zk原子性：更新操作要么成功要么失败，没有中间状态单系统快照：客户端将看到服务的相同视图，而不管它连接到的服务器。可靠性：一旦应用更新，数据将被持久化，直到数据被再次更新，对于该保证有两个推论：1、如果客户端得到了成功的返回码，说明写入成功，数据被持久化，如果出现了通信错误，超时等一些故障，客户端将不知道更新是否已应用。我们采取措施尽量减少失败，但唯一的保证是只有成功的返回码。 （这在Paxos中称为单调性条件。）2、如果客户端已经读取到了数据或者写入成功了数据，都不会因为zk的失败而导致回滚；及时性：在一段时间后，客户端将看到最新的系统更新，在此期间客户端将看到这种变更。有时开发人员错误地假定ZooKeeper实际上没有做出另一个保证：跨客户端的强一致性ZooKeeper并不保证在每个实例中，两个不同的客户端将具有相同的ZooKeeper数据的视图。由于诸如网络延迟的因素，一个客户端可以在另一客户端被通知该改变之前执行更新，考虑两个客户端A和B的场景。如果客户端A将znode / a的值从0设置为1，则告诉客户端B读取/ a，则客户端B可以读取旧值0，这取决于它连接到的服务器。如果客户端A和客户端B读取相同的值很重要，则客户端B应该在执行读取之前从ZooKeeper API方法调用sync()方法。因此，ZooKeeper本身不保证所有服务器上同步发生变化，但ZooKeeper原语可用于构建更高级的函数，提供有用的客户端同步。zk的sync方法的解释：异步的实现当前进程与leader之间的指定path的数据同步；CAP理论在理论计算机科学中，CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer's theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：一致性（Consistence) （等同于所有节点访问同一份最新的数据副本）可用性（Availability）（每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据）分区容错性（Network partitioning）（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。）根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。对于zookeeper来说，它实现了A可用性、P分区容错性、C中的写入强一致性，丧失的是C中的读取一致性。有所丧失，才有所获得，没有十全十美。本文地址：http://crazyant.net/2120.html，转载请注明来源。,"['zookeeper', '保证', '读取', '最新', '数据', '如果', 'zk', '进行', '读取', '操作', '读取', '数据', '可能', '过期', '数据', '不是', '最新', '数据', '已上', '图为例', '如果', '一个', 'zk', '集群', '10000', '节点', '进行', '写入', '时候', '如果', '已经', '6k', '节点', '写入', '成功', 'zk', '认为', '本次', '请求', '成功', '但是', '这时候', '如果', '一个', '客户端', '读取', '刚好', '另外', '4k', '节点', '数据', '那么', '读取', '就是', '过期数据', 'zk', '官方', '文档', '对此', '解释', '地址', 'https', 'zookeeper', 'apache', 'org', 'doc', 'r3.1', 'zookeeperprogrammers', 'htmlzookeeper', '一致性', '保证', 'zookeeper', '一种', '高性能', '扩展', '服务', '虽然', '读取', '速度', '写入', '但是', '读取', '写入', '操作', '设计', '极为', '快速', '这样', '原因', '读取', '情况', 'zookeeper', '可能', '提供', '数据', '为了', 'zookeeper', '一致性', '保证', '顺序', '一致性', '来自', '客户端', '更新', '按照', '发送', '顺序', '写入', 'zk', '原子', '更新', '操作', '要么', '成功', '要么', '失败', '没有', '中间状态', '系统', '快照', '客户端', '看到', '服务', '相同', '视图', '不管', '连接', '服务器', '可靠性', '一旦', '应用', '更新', '数据', '持久', '直到', '数据', '再次', '更新', '对于', '保证', '两个', '推论', '如果', '客户端', '得到', '成功', '返回', '说明', '写入', '成功', '数据', '持久', '如果', '出现', '通信', '错误', '超时', '一些', '故障', '客户端', '知道', '更新', '是否', '应用', '我们', '采取措施', '尽量减少', '失败', '唯一', '保证', '只有', '成功', '返回', 'paxos', '称为', '单调', '条件', '如果', '客户端', '已经', '读取', '数据', '或者', '写入', '成功', '数据', '不会', '因为', 'zk', '失败', '导致', '回滚', '及时性', '一段时间', '客户端', '看到', '最新', '系统', '更新', '在此期间', '客户端', '看到', '这种', '变更', '有时', '开发人员', '错误', '假定', 'zookeeper', '实际上', '没有', '做出', '一个', '保证', '客户端', '一致性', 'zookeeper', '保证', '每个', '实例', '两个', '不同', '客户端', '具有', '相同', 'zookeeper', '数据', '视图', '由于', '诸如', '网络', '延迟', '因素', '一个', '客户端', '可以', '客户端', '通知', '改变', '之前', '执行', '更新', '考虑', '两个', '客户端', '场景', '如果', '客户端', 'znode', '设置', '告诉', '客户端', '读取', '客户端', '可以', '读取', '旧值', '取决于', '连接', '服务器', '如果', '客户端', '客户端', '读取', '相同', '重要', '客户端', '应该', '执行', '读取', '之前', 'zookeeper', 'api', '方法', '调用', 'sync', '方法', '因此', 'zookeeper', '本身', '保证', '所有', '服务器', '同步', '发生变化', 'zookeeper', '原语', '用于', '构建', '高级', '函数', '提供', '有用', '客户端', '同步', 'zk', 'sync', '方法', '解释', '异步', '实现', '当前', '进程', 'leader', '之间', '指定', 'path', '数据', '同步', 'cap', '理论', '理论', '计算机科学', 'cap', '定理', 'cap', 'theorem', '被称作', '鲁尔', '定理', 'brewer', 'theorem', '指出', '对于', '一个', '分布式计算', '系统', '来说', '可能', '同时', '满足', '以下', '三点', '一致性', 'consistence', '等同于', '所有', '节点', '访问', '一份', '最新', '数据', '副本', '可用性', 'availability', '每次', '请求', '获取', '非错', '响应', '但是', '保证', '获取', '数据', '最新', '数据', '分区', '容错性', 'network', 'partitioning', '实际效果', '而言', '分区', '相当于', '通信', '时限', '要求', '系统', '如果', '不能', '时限', '达成', '数据', '一致性', '意味着', '发生', '分区', '情况', '必须', '当前', '操作', '之间', '做出', '选择', '根据', '定理', '分布式系统', '只能', '满足', '三项', '两项', '可能', '满足', '全部', '三项', '理解', 'cap', '理论', '简单', '方式', '想象', '两个', '节点', '处分', '两侧', '允许', '至少', '一个', '节点', '更新', '状态', '导致', '数据', '一致', '丧失', '性质', '如果', '为了', '保证数据', '一致性', '分区', '一侧', '节点', '设置', '不可', '那么', '丧失', '性质', '除非', '两个', '节点', '可以', '互相', '通信', '才能', '既保证', '保证', '导致', '丧失', '性质', '对于', 'zookeeper', '来说', '实现', '可用性', '分区', '容错性', '写入', '一致性', '丧失', '读取', '一致性', '有所', '丧失', '有所', '获得', '没有', '十全十美', '本文', '地址', 'http', 'crazyant', 'net', '2120', 'html', '转载', '注明', '来源']","[[-2.43349206e-01 -1.39572189e-01  2.02673109e-01  1.69027643e-01
   2.85656586e-01 -3.25981303e-01 -1.94887478e-01  4.75678643e-01
   9.72396936e-03  5.63884674e-04 -6.68402142e-02 -3.08885073e-01
  -1.87616334e-01  5.92930980e-01  1.42293874e-01 -1.00729105e-01
  -1.58551231e-01 -5.09851262e-04 -1.07554200e-01 -4.26838210e-01
   4.68653910e-02  2.23569798e-01  1.33978891e-02 -6.67780403e-02
   1.24852521e-01 -5.44507556e-01 -2.77312112e-01  9.62066535e-02
  -1.93654204e-01 -5.47440893e-02  2.51926050e-01  3.73739315e-02
  -2.20480117e-02 -1.43988075e-01 -9.15226222e-02  3.21191959e-01
  -1.17578383e-01 -1.94723259e-01  1.16976404e-01 -7.39029899e-01
  -1.74756838e-01 -5.59635387e-01 -3.02827679e-02 -8.49524177e-02
  -1.69932998e-01 -1.26810733e-01 -2.62713159e-01  4.79680735e-01
  -1.58621493e-01  3.63913262e-01  2.08750175e-01 -2.61635601e-01
  -1.03166069e-01 -2.34477478e-01  8.62167646e-02  3.77643194e-01
   2.61464981e-01 -5.23323413e-02  9.22109332e-02 -8.29463531e-02
   3.27290536e-02  2.95850483e-01  2.46991202e-02  8.49590147e-02
  -3.72877653e-01 -2.23282816e-02  3.53707937e-02 -1.13989513e-02
  -2.20373729e-01  4.25325043e-01  1.50443986e-01 -2.53348358e-01
   3.90593283e-01 -3.12831467e-01  5.58733879e-01  1.39345269e-01
   2.15241789e-01 -1.29074714e-01 -2.46063382e-01 -2.24656639e-01
  -9.62360868e-02 -1.63716779e-02 -5.39453203e-02  3.10450259e-01
  -3.76407170e-01  1.94626052e-01 -2.79072205e-01  3.91500568e-01
   4.46190692e-01  1.16539549e-01  3.15030906e-01  1.19618315e-01
   3.45200874e-01  1.79940449e-01  1.79984894e-01  3.72754162e-01
   8.91196289e-02 -2.82461240e-01 -2.08945133e-02 -8.14280797e-02]]"
2124,Java线程池ThreadPoolExecutor详解,"1、线程池的工作原理？线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。当调用 execute() 方法添加一个任务时，线程池会做如下判断：如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列。如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建线程运行这个任务；如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常，告诉调用者“我不能再接受任务了”。当一个线程完成任务时，它会从队列中取下一个任务来执行。当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。这样的过程说明，并不是先加入任务就一定会先执行。假设队列大小为 10，corePoolSize 为 3，maximumPoolSize 为 6，那么当加入 20 个任务时，执行的顺序就是这样的：首先执行任务 1、2、3，然后任务 4~13 被放入队列。这时候队列满了，任务 14、15、16 会被马上执行，而任务 17~20 则会抛出异常。最终顺序是：1、2、3、14、15、16、4、5、6、7、8、9、10、11、12、13。2、线程池有哪些配置项？线程池可以使用java.util.concurrent.ThreadPoolExecutor来创建，在该类中包含最全参数的构造函数如下：    public ThreadPoolExecutor(int corePoolSize,                              int maximumPoolSize,                              long keepAliveTime,                              TimeUnit unit,                              BlockingQueue<Runnable> workQueue,                              ThreadFactory threadFactory,                              RejectedExecutionHandler handler)相应的入参就是线程池可以配置的参数：corePoolSize ：核心池的大小，如果调用了prestartAllCoreThreads()或者prestartCoreThread()方法，会直接预先创建corePoolSize的线程，否则当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；这样做的好处是，如果任务量很小，那么甚至就不需要缓存任务，corePoolSize的线程就可以应对；maximumPoolSize：线程池最大线程数，表示在线程池中最多能创建多少个线程，如果运行中的线程超过了这个数字，那么相当于线程池已满，新来的任务会使用RejectedExecutionHandler 进行处理；keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止，然后线程池的数目维持在corePoolSize 大小；unit：参数keepAliveTime的时间单位；workQueue：一个阻塞队列，用来存储等待执行的任务，如果当前对线程的需求超过了corePoolSize大小，才会放在这里；threadFactory：线程工厂，主要用来创建线程，比如可以指定线程的名字；handler：如果线程池已满，新的任务的处理方式3、线程池的阻塞队列包含哪几种选择？如果线程数超过了corePoolSize，则开始把线程先放到阻塞队列里，相当于生产者消费者的一个数据通道，有以下一些阻塞队列可供选择：1. ArrayBlockingQueue2. DelayQueue3. LinkedBlockingQueue4. PriorityBlockingQueue5. SynchronousQueueArrayBlockingQueue是一个有边界的阻塞队列，它的内部实现是一个数组。有边界的意思是它的容量是有限的，我们必须在其初始化的时候指定它的容量大小，容量大小一旦指定就不可改变。DelayQueue阻塞的是其内部元素，DelayQueue中的元素必须实现 java.util.concurrent.Delayed接口，该接口只有一个方法就是long getDelay(TimeUnit unit)，返回值就是队列元素被释放前的保持时间，如果返回0或者一个负值，就意味着该元素已经到期需要被释放，此时DelayedQueue会通过其take()方法释放此对象，DelayQueue可应用于定时关闭连接、缓存对象，超时处理等各种场景；LinkedBlockingQueue阻塞队列大小的配置是可选的，如果我们初始化时指定一个大小，它就是有边界的，如果不指定，它就是无边界的。说是无边界，其实是采用了默认大小为Integer.MAX_VALUE的容量 。它的内部实现是一个链表。PriorityBlockingQueue是一个没有边界的队列，它的排序规则和 java.util.PriorityQueue一样。需要注意，PriorityBlockingQueue中允许插入null对象。所有插入PriorityBlockingQueue的对象必须实现 java.lang.Comparable接口，队列优先级的排序规则就是按照我们对这个接口的实现来定义的。SynchronousQueue队列内部仅允许容纳一个元素。当一个线程插入一个元素后会被阻塞，除非这个元素被另一个线程消费。使用的最多的应该是LinkedBlockingQueue，注意一般情况下要配置一下队列大小，设置成有界队列，否则JVM内存会被撑爆！4、如果线程池已经满了可是还有新的任务提交怎么办？线程池已满的定义，是指运行线程数==maximumPoolSize，并且workQueue是有界队列并且已满（如果是无界队列当然永远不会满）；这时候再提交任务怎么办呢？线程池会将任务传递给最后一个参数RejectedExecutionHandler来处理，比如打印报错日志、抛出异常、存储到Mysql/redis用于后续处理等等，线程池默认也提供了几种处理方式见第5条目；5、有哪些饱和策略可以使用？饱和策略指的就是线程池已满情况下任务的处理策略，默认有以下几种：在默认的 ThreadPoolExecutor.AbortPolicy 中，处理程序遭到拒绝将抛出运行时RejectedExecutionException。在 ThreadPoolExecutor.CallerRunsPolicy 中，线程调用运行该任务的execute 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。在 ThreadPoolExecutor.DiscardPolicy 中，不能执行的任务将被删除。在 ThreadPoolExecutor.DiscardOldestPolicy 中，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）当然也可以自己实现处理策略类，继承RejectedExecutionHandler接口即可，该接口只有一个方法：void rejectedExecution(Runnable r, ThreadPoolExecutor executor);6、怎样优化线程池的配置？如何合理配置线程池大小，仅供参考。一般需要根据任务的类型来配置线程池大小：如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1如果是IO密集型任务，参考值可以设置为2*NCPU当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。其中NCPU的指的是CPU的核心数，可以使用Runtime.getRuntime().availableProcessors()来获取；参考文章：java多线程详解(7)-线程池的使用 http://www.cnblogs.com/weiguo21/p/4813678.htmlThreadPoolExecutor中策略的选择与工作队列的选择（java线程池） http://blog.csdn.net/longeremmy/article/details/8231184【Java并发之】BlockingQueue http://blog.csdn.net/suifeng3051/article/details/48807423本文地址：http://crazyant.net/2124.html，转载请注明来源。","['java', '线程', 'threadpoolexecutor', '详解', '线程', '工作', '原理', '线程', '池刚', '创建', '里面', '没有', '一个', '线程', '任务', '队列', '作为', '参数', '进来', '不过', '就算', '队列', '里面', '任务', '线程', '不会', '马上', '执行', '它们', '调用', 'execute', '方法', '添加', '一个', '任务', '线程', '池会', '如下', '判断', '如果', '正在', '运行', '线程', '数量', '小于', 'corepoolsize', '那么', '马上', '创建', '线程', '运行', '这个', '任务', '如果', '正在', '运行', '线程', '数量', '大于', '等于', 'corepoolsize', '那么', '这个', '任务', '放入', '队列', '如果', '这时候', '队列', '而且', '正在', '运行', '线程', '数量', '小于', 'maximumpoolsize', '那么', '还是', '创建', '线程', '运行', '这个', '任务', '如果', '队列', '而且', '正在', '运行', '线程', '数量', '大于', '等于', 'maximumpoolsize', '那么', '线程', '池会', '抛出', '异常', '告诉', '调用者', '不能', '接受任务', '一个', '线程', '完成', '任务', '它会', '队列', '中取', '一个', '任务', '执行', '一个', '线程', '无事', '超过', '一定', '时间', 'keepalivetime', '线程', '池会', '判断', '如果', '当前', '运行', '线程', '大于', 'corepoolsize', '那么', '这个', '线程', '停掉', '所以', '线程', '所有', '任务', '完成', '最终', '收缩', 'corepoolsize', '大小', '这样', '过程', '说明', '不是', '加入', '任务', '一定', '会先', '执行', '假设', '队列', '大小', '10', 'corepoolsize', 'maximumpoolsize', '那么', '加入', '20', '任务', '执行', '顺序', '就是', '这样', '首先', '执行', '任务', '然后', '任务', '13', '放入', '队列', '这时候', '队列', '任务', '14', '15', '16', '马上', '执行', '任务', '17', '20', '抛出', '异常', '最终', '顺序', '14', '15', '16', '10', '11', '12', '13', '线程', '池有', '哪些', '配置', '线程', '可以', '使用', 'java', 'util', 'concurrent', 'threadpoolexecutor', '创建', '该类', '包含', '最全', '参数', '构造函数', '如下', 'public', 'threadpoolexecutor', 'int', 'corepoolsize', 'int', 'maximumpoolsize', 'long', 'keepalivetime', 'timeunit', 'unit', 'blockingqueue', 'runnable', 'workqueue', 'threadfactory', 'threadfactory', 'rejectedexecutionhandler', 'handler', '相应', '就是', '线程', '可以', '配置', '参数', 'corepoolsize', '核心', '大小', '如果', '调用', 'prestartallcorethreads', '或者', 'prestartcorethread', '方法', '直接', '预先', '创建', 'corepoolsize', '线程', '否则', '当有', '任务', '之后', '创建', '一个', '线程', '执行', '任务', '线程', '池中', '线程', '数目', '达到', 'corepoolsize', '到达', '任务', '放到', '缓存', '队列', '当中', '这样', '好处', '如果', '任务量', '很小', '那么', '甚至', '需要', '缓存', '任务', 'corepoolsize', '线程', '可以', '应对', 'maximumpoolsize', '线程', '最大', '线程', '表示', '在线', '程池', '最多能', '创建', '多少', '线程', '如果', '运行', '线程', '超过', '这个', '数字', '那么', '相当于', '线程', '池已', '新来', '任务', '使用', 'rejectedexecutionhandler', '进行', '处理', 'keepalivetime', '表示', '线程', '没有', '任务', '执行', '保持', '多久', '时间', '终止', '然后', '线程', '数目', '维持', 'corepoolsize', '大小', 'unit', '参数', 'keepalivetime', '时间', '单位', 'workqueue', '一个', '阻塞', '队列', '用来', '存储', '等待', '执行', '任务', '如果', '当前', '线程', '需求', '超过', 'corepoolsize', '大小', '放在', '这里', 'threadfactory', '线程', '工厂', '主要', '用来', '创建', '线程', '比如', '可以', '指定', '线程', '名字', 'handler', '如果', '线程', '池已', '任务', '处理', '方式', '线程', '阻塞', '队列', '包含', '哪几种', '选择', '如果', '线程', '超过', 'corepoolsize', '开始', '线程', '放到', '阻塞', '队列', '相当于', '生产者', '消费者', '一个', '数据通道', '以下', '一些', '阻塞', '队列', '供选择', 'arrayblockingqueue2', 'delayqueue3', 'linkedblockingqueue4', 'priorityblockingqueue5', 'synchronousqueuearrayblockingqueue', '一个', '边界', '阻塞', '队列', '内部', '实现', '一个', '数组', '边界', '意思', '容量', '有限', '我们', '必须', '初始化', '时候', '指定', '容量', '大小', '容量', '大小', '一旦', '指定', '不可', '改变', 'delayqueue', '阻塞', '内部', '元素', 'delayqueue', '元素', '必须', '实现', 'java', 'util', 'concurrent', 'delayed', '接口', '接口', '只有', '一个', '方法', '就是', 'long', 'getdelay', 'timeunit', 'unit', '返回值', '就是', '队列', '元素', '释放', '保持', '时间', '如果', '返回', '或者', '一个', '负值', '意味着', '元素', '已经', '到期', '需要', '释放', '此时', 'delayedqueue', '通过', 'take', '方法', '释放', '对象', 'delayqueue', '应用', '定时', '关闭', '连接', '缓存', '对象', '超时', '处理', '各种', '场景', 'linkedblockingqueue', '阻塞', '队列', '大小', '配置', '可选', '如果', '我们', '初始化', '指定', '一个', '大小', '就是', '边界', '如果', '指定', '就是', '边界', '边界', '其实', '采用', '默认', '大小', 'integer', 'max', 'value', '容量', '内部', '实现', '一个', '链表', 'priorityblockingqueue', '一个', '没有', '边界', '队列', '排序', '规则', 'java', 'util', 'priorityqueue', '一样', '需要', '注意', 'priorityblockingqueue', '允许', '插入', 'null', '对象', '所有', '插入', 'priorityblockingqueue', '对象', '必须', '实现', 'java', 'lang', 'comparable', '接口', '队列', '优先级', '排序', '规则', '就是', '按照', '我们', '这个', '接口', '实现', '定义', 'synchronousqueue', '队列', '内部', '允许', '容纳', '一个', '元素', '一个', '线程', '插入', '一个', '元素', '后会', '阻塞', '除非', '这个', '元素', '一个', '线程', '消费', '使用', '应该', 'linkedblockingqueue', '注意', '一般', '情况', '下要', '配置', '一下', '队列', '大小', '设置', '成有界', '队列', '否则', 'jvm', '内存', '如果', '线程', '已经', '可是', '还有', '任务', '提交', '怎么办', '线程', '池已', '定义', '运行', '线程', 'maximumpoolsize', '并且', 'workqueue', '有界', '队列', '并且', '已满', '如果', '无界', '队列', '当然', '永远', '不会', '这时候', '提交', '任务', '怎么办', '线程', '池会', '任务', '传递', '最后', '一个', '参数', 'rejectedexecutionhandler', '处理', '比如', '打印', '报错', '日志', '抛出', '异常', '存储', 'mysql', 'redis', '用于', '后续', '处理', '等等', '线程', '默认', '提供', '几种', '处理', '方式', '条目', '哪些', '饱和', '策略', '可以', '使用', '饱和', '策略', '就是', '线程', '池已', '情况', '任务', '处理', '策略', '默认', '以下', '几种', '默认', 'threadpoolexecutor', 'abortpolicy', '处理程序', '遭到', '拒绝', '抛出', '运行', 'rejectedexecutionexception', 'threadpoolexecutor', 'callerrunspolicy', '线程', '调用', '运行', '任务', 'execute', '本身', '策略', '提供', '简单', '反馈', '控制', '机制', '能够', '减缓', '任务', '提交', '速度', 'threadpoolexecutor', 'discardpolicy', '不能', '执行', '任务', '删除', 'threadpoolexecutor', 'discardoldestpolicy', '如果', '执行程序', '尚未', '关闭', '位于', '工作', '队列', '头部', '任务', '删除', '然后', '重试', '执行程序', '如果', '再次', '失败', '重复', '过程', '当然', '可以', '自己', '实现', '处理', '策略', '继承', 'rejectedexecutionhandler', '接口', '即可', '接口', '只有', '一个', '方法', 'void', 'rejectedexecution', 'runnable', 'threadpoolexecutor', 'executor', '怎样', '优化', '线程', '配置', '如何', '合理配置', '线程', '大小', '仅供参考', '一般', '需要', '根据', '任务', '类型', '配置', '线程', '大小', '如果', 'cpu', '密集型', '任务', '需要', '尽量', '压榨', 'cpu', '参考值', '可以', 'ncpu', '如果', 'io', '密集型', '任务', '参考值', '可以', '设置', 'ncpu', '当然', '只是', '一个', '参考值', '具体', '设置', '需要', '根据', '实际', '情况', '进行', '调整', '比如', '可以', '线程', '大小', '设置', '参考值', '观察', '任务', '运行', '情况', '系统', '负载', '资源', '利用率', '进行', '适当', '调整', '其中', 'ncpu', 'cpu', '核心', '可以', '使用', 'runtime', 'getruntime', 'availableprocessors', '获取', '参考', '文章', 'java', '多线程', '详解', '线程', '使用', 'http', 'www', 'cnblogs', 'com', 'weiguo21', '4813678', 'htmlthreadpoolexecutor', '策略', '选择', '工作', '队列', '选择', 'java', '线程', 'http', 'blog', 'csdn', 'net', 'longeremmy', 'article', 'details', '8231184', 'java', '并发', 'blockingqueue', 'http', 'blog', 'csdn', 'net', 'suifeng3051', 'article', 'details', '48807423', '本文', '地址', 'http', 'crazyant', 'net', '2124', 'html', '转载', '注明', '来源']","[[-0.28227834 -0.14612039  0.23500864  0.18691411  0.31844949 -0.36749469
  -0.20877146  0.52478472 -0.00094227 -0.00251849 -0.06616663 -0.35370238
  -0.19519729  0.65921551  0.17398253 -0.11927205 -0.17985461 -0.0020067
  -0.12102511 -0.48586796  0.04783164  0.26284463  0.01364078 -0.07065629
   0.13512282 -0.60796616 -0.30382203  0.09768183 -0.21308836 -0.06252998
   0.28454382  0.02858869 -0.02051954 -0.1604691  -0.104456    0.36725622
  -0.13298378 -0.22190122  0.13455615 -0.8437634  -0.19756748 -0.62160221
  -0.04595059 -0.09838145 -0.19450736 -0.14772581 -0.30244     0.52725107
  -0.18904379  0.40795544  0.2271995  -0.29896678 -0.12659776 -0.26864606
   0.09784907  0.42901138  0.28519095 -0.06432152  0.10561467 -0.09677508
   0.03758661  0.32962117  0.02710611  0.09579825 -0.42590091 -0.0211363
   0.04233005 -0.01566985 -0.25601613  0.47932326  0.15459865 -0.27662968
   0.4388322  -0.35152964  0.61323239  0.16436425  0.2336801  -0.14381418
  -0.28181214 -0.25029287 -0.10015082 -0.02800594 -0.06170087  0.35817453
  -0.41148422  0.22190454 -0.31058545  0.4313392   0.49911003  0.13913914
   0.34950429  0.13436813  0.3877491   0.20260502  0.2050607   0.4153187
   0.10939329 -0.31977325 -0.02433127 -0.09992483]]"
2145,快速找到Tomcat中最耗CPU的线程,"1、找出TOMCAT的JVM的进程ID[work@112542000 ~]$ jps                                                                                                                                         290 Bootstrap                                                                                                                                                   61213 Jps                                                                                                                                                       2、查看该进程中，最耗费CPU的线程[work@112542000 ~]$ ps -mp 290 -o THREAD,tid,time | sort -k2 -r | head -n 20                                                                                    USER     %CPU PRI SCNT WCHAN  USER SYSTEM   TID     TIME                                                                                                        work     15.3   -    - -         -      -     - 03:11:58                                                                                                        work      1.2  19    - -         -      -   326 00:15:45                                                                                                        work      0.2  19    - -         -      -   872 00:03:44                                                                                                        work      0.1  19    - -         -      -   992 00:01:44                                                                                                        work      0.1  19    - -         -      -   972 00:01:16                                                                                                        work      0.1  19    - -         -      -   870 00:01:19                                                                                                        work      0.1  19    - -         -      -   869 00:01:34                                                                                                        work      0.0  19    - -         -      -  9993 00:00:00                                                                                                        work      0.0  19    - -         -      -   997 00:00:06                                                                                                        work      0.0  19    - -         -      -  9969 00:00:00                                                                                                        work      0.0  19    - -         -      -  9968 00:00:00                                                                                                        work      0.0  19    - -         -      -   996 00:00:34                                                                                                        work      0.0  19    - -         -      -  9960 00:00:00                                                                                                        work      0.0  19    - -         -      -   995 00:00:00                                                                                                        work      0.0  19    - -         -      -  9944 00:00:00                                                                                                        work      0.0  19    - -         -      -   994 00:00:31                                                                                                        work      0.0  19    - -         -      -  9936 00:00:00                                                                                                        work      0.0  19    - -         -      -  9934 00:00:26                                                                                                        work      0.0  19    - -         -      -  9933 00:00:21                                                                                                        3、以TID==326为例，查看该线程的堆栈首先，将十进制的326转换成十六进制，可以在线转换：http://tool.oschina.net/hexconvert结果等于146使用jstack查询该线程堆栈：[work@112542000 ~]$ jstack 290 | grep ""0x160"" -A 10                                                                                                             ""Timer-2955"" daemon prio=10 tid=0x00007f39d3ecd000 nid=0x1602 in Object.wait() [0x00007f38fb273000]                                                                java.lang.Thread.State: TIMED_WAITING (on object monitor)                                                                                                            at java.lang.Object.wait(Native Method)                                                                                                                         at java.util.TimerThread.mainLoop(Timer.java:552)                                                                                                               - locked <0x00000007c2a0fc40> (a java.util.TaskQueue)                                                                                                           at java.util.TimerThread.run(Timer.java:505)                                                                                                                                                                                                                                                                            ""Timer-2954"" daemon prio=10 tid=0x00007f392481e000 nid=0x15e4 in Object.wait() [0x00007f38fbe7f000]                                                                java.lang.Thread.State: TIMED_WAITING (on object monitor)                                                                                                            at java.lang.Object.wait(Native Method)                                                                                                                         at java.util.TimerThread.mainLoop(Timer.java:552)                                                                                                       --                                                                                                                                                              ""Timer-2132"" daemon prio=10 tid=0x00007f39d367d000 nid=0x1603 in Object.wait() [0x00007f3933f46000]                                                                java.lang.Thread.State: TIMED_WAITING (on object monitor)                                                                                                            at java.lang.Object.wait(Native Method)                                                                                                                         at java.util.TimerThread.mainLoop(Timer.java:552)                                                                                                               - locked <0x00000007b44ef3c8> (a java.util.TaskQueue)                                                                                                           at java.util.TimerThread.run(Timer.java:505)                                                                                                                                                                                                                                                                            ""Timer-2131"" daemon prio=10 tid=0x00007f39d3b61800 nid=0x15e6 in Object.wait() [0x00007f3934d54000]                                                                java.lang.Thread.State: TIMED_WAITING (on object monitor)                                                                                                            at java.lang.Object.wait(Native Method)                                                                                                                         at java.util.TimerThread.mainLoop(Timer.java:552)                                                                                                       --                                                                                                                                                              ""Timer-450"" daemon prio=10 tid=0x00007f39d0728800 nid=0x160 in Object.wait() [0x00007f39b1312000]                                                                  java.lang.Thread.State: TIMED_WAITING (on object monitor)                                                                                                            at java.lang.Object.wait(Native Method)                                                                                                                         at java.util.TimerThread.mainLoop(Timer.java:552)                                                                                                               - locked <0x00000007bddf8788> (a java.util.TaskQueue)                                                                                                           at java.util.TimerThread.run(Timer.java:505)                                                                                                                                                                                                                                                                            ""Timer-449"" daemon prio=10 tid=0x00007f39ec01f000 nid=0xffc7 in Object.wait() [0x00007f39af5f5000]                                                                 java.lang.Thread.State: TIMED_WAITING (on object monitor)                                                                                                            at java.lang.Object.wait(Native Method)                                                                                                                         at java.util.TimerThread.mainLoop(Timer.java:552)                                                                                                        参考资料：http://scau-fly.iteye.com/blog/1884606http://www.blogjava.net/hankchen/archive/2012/05/09/377735.html 本文地址：http://crazyant.net/2145.html","['快速', '找到', 'tomcat', '最耗', 'cpu', '线程', '找出', 'tomcat', 'jvm', '进程', 'id', 'work', '112542000', 'jps', '290', 'bootstrap', '61213', 'jps', '查看', '进程', '耗费', 'cpu', '线程', 'work', '112542000', 'ps', 'mp', '290', 'thread', 'tid', 'time', 'sort', 'k2', 'head', '20', 'user', 'cpu', 'pri', 'scnt', 'wchan', 'user', 'system', 'tid', 'time', 'work', '15.3', '03', '11', '58', 'work', '1.2', '19', '326', '00', '15', '45', 'work', '0.2', '19', '872', '00', '03', '44', 'work', '0.1', '19', '992', '00', '01', '44', 'work', '0.1', '19', '972', '00', '01', '16', 'work', '0.1', '19', '870', '00', '01', '19', 'work', '0.1', '19', '869', '00', '01', '34', 'work', '0.0', '19', '9993', '00', '00', '00', 'work', '0.0', '19', '997', '00', '00', '06', 'work', '0.0', '19', '9969', '00', '00', '00', 'work', '0.0', '19', '9968', '00', '00', '00', 'work', '0.0', '19', '996', '00', '00', '34', 'work', '0.0', '19', '9960', '00', '00', '00', 'work', '0.0', '19', '995', '00', '00', '00', 'work', '0.0', '19', '9944', '00', '00', '00', 'work', '0.0', '19', '994', '00', '00', '31', 'work', '0.0', '19', '9936', '00', '00', '00', 'work', '0.0', '19', '9934', '00', '00', '26', 'work', '0.0', '19', '9933', '00', '00', '21', 'tid', '326', '为例', '查看', '线程', '堆栈', '首先', '十进制', '326', '转换成', '十六进制', '可以', '在线', '转换', 'http', 'tool', 'oschina', 'net', 'hexconvert', '结果', '等于', '146', '使用', 'jstack', '查询', '线程', '堆栈', 'work', '112542000', 'jstack', '290', 'grep', '0x160', '10', 'timer', '2955', 'daemon', 'prio', '10', 'tid', '0x00007f39d3ecd000', 'nid', '0x1602', 'in', 'object', 'wait', '0x00007f38fb273000', 'java', 'lang', 'thread', 'state', 'timed', 'waiting', 'on', 'object', 'monitor', 'at', 'java', 'lang', 'object', 'wait', 'native', 'method', 'at', 'java', 'util', 'timerthread', 'mainloop', 'timer', 'java', '552', 'locked', '0x00000007c2a0fc40', 'java', 'util', 'taskqueue', 'at', 'java', 'util', 'timerthread', 'run', 'timer', 'java', '505', 'timer', '2954', 'daemon', 'prio', '10', 'tid', '0x00007f392481e000', 'nid', '0x15e4', 'in', 'object', 'wait', '0x00007f38fbe7f000', 'java', 'lang', 'thread', 'state', 'timed', 'waiting', 'on', 'object', 'monitor', 'at', 'java', 'lang', 'object', 'wait', 'native', 'method', 'at', 'java', 'util', 'timerthread', 'mainloop', 'timer', 'java', '552', '--', 'timer', '2132', 'daemon', 'prio', '10', 'tid', '0x00007f39d367d000', 'nid', '0x1603', 'in', 'object', 'wait', '0x00007f3933f46000', 'java', 'lang', 'thread', 'state', 'timed', 'waiting', 'on', 'object', 'monitor', 'at', 'java', 'lang', 'object', 'wait', 'native', 'method', 'at', 'java', 'util', 'timerthread', 'mainloop', 'timer', 'java', '552', 'locked', '0x00000007b44ef3c8', 'java', 'util', 'taskqueue', 'at', 'java', 'util', 'timerthread', 'run', 'timer', 'java', '505', 'timer', '2131', 'daemon', 'prio', '10', 'tid', '0x00007f39d3b61800', 'nid', '0x15e6', 'in', 'object', 'wait', '0x00007f3934d54000', 'java', 'lang', 'thread', 'state', 'timed', 'waiting', 'on', 'object', 'monitor', 'at', 'java', 'lang', 'object', 'wait', 'native', 'method', 'at', 'java', 'util', 'timerthread', 'mainloop', 'timer', 'java', '552', '--', 'timer', '450', 'daemon', 'prio', '10', 'tid', '0x00007f39d0728800', 'nid', '0x160', 'in', 'object', 'wait', '0x00007f39b1312000', 'java', 'lang', 'thread', 'state', 'timed', 'waiting', 'on', 'object', 'monitor', 'at', 'java', 'lang', 'object', 'wait', 'native', 'method', 'at', 'java', 'util', 'timerthread', 'mainloop', 'timer', 'java', '552', 'locked', '0x00000007bddf8788', 'java', 'util', 'taskqueue', 'at', 'java', 'util', 'timerthread', 'run', 'timer', 'java', '505', 'timer', '449', 'daemon', 'prio', '10', 'tid', '0x00007f39ec01f000', 'nid', '0xffc7', 'in', 'object', 'wait', '0x00007f39af5f5000', 'java', 'lang', 'thread', 'state', 'timed', 'waiting', 'on', 'object', 'monitor', 'at', 'java', 'lang', 'object', 'wait', 'native', 'method', 'at', 'java', 'util', 'timerthread', 'mainloop', 'timer', 'java', '552', '参考资料', 'http', 'scau', 'fly', 'iteye', 'com', 'blog', '1884606http', 'www', 'blogjava', 'net', 'hankchen', 'archive', '2012', '05', '09', '377735', 'html', '本文', '地址', 'http', 'crazyant', 'net', '2145', 'html']","[[-0.3833127   0.00737947  0.33293695  0.28733707  0.19607289 -0.44626201
   0.00858288  0.46787238 -0.19605185 -0.21699903 -0.04276755 -0.4908854
   0.06218622  0.46219448  0.18248304 -0.17734785 -0.06357905 -0.08371357
   0.01702221 -0.49594394 -0.10070076  0.42311252 -0.15498635 -0.3229108
  -0.07028258 -0.3486665  -0.34280515 -0.04040493 -0.17634891 -0.11838256
   0.16986271  0.02290848  0.02915645 -0.07430716 -0.21271258  0.43085953
  -0.24484079 -0.37119865  0.0644338  -0.73699678 -0.02990211 -0.4416821
  -0.11276009 -0.02645642 -0.10969702 -0.29892347 -0.3764425   0.30915917
  -0.13174612  0.43892849 -0.04062777 -0.35737916 -0.10527844 -0.25985402
  -0.07153977  0.44434103  0.03818103 -0.13082599  0.16086    -0.12836516
   0.17306147  0.1476176   0.02026538  0.02251141 -0.39840714  0.13310032
   0.01208471  0.02309546 -0.29827513  0.43962111 -0.1073218  -0.06257729
   0.42103669 -0.38496119  0.44955412  0.41663657  0.19726381 -0.26136679
  -0.26853996 -0.11646771 -0.01500612  0.05415275 -0.13189885  0.54929747
  -0.21927707  0.17277401 -0.25243586  0.53203224  0.53347322  0.26950978
   0.08276066  0.13328396  0.33536065  0.19663057  0.20429285  0.41431673
   0.13993696 -0.2288816   0.26124322 -0.11761561]]"
2150,Python高级编程技巧,"ipython的使用地址：https://ipython.org/install.html简单的安装方法：pip install ipython一些方便的使用方法：输入要查看的对象，然后输入一个问号可以查看API，输入两个问号可以查看代码可以直接调用shell命令，在前面带上！即可按Tab可以自动语法补全最近的命令输出结果，可以从_、__、___三个变量获得%hist或者%history查看历史命令%timeit可以进行命令的执行时间测试数据结构与算法列表生成器In [5]: a=[1,2,3]In [6]: [x*x for x in a if x>1]Out[6]: [4, 9]集合生成器（和列表生成器相同）In [7]: a=[1,2,3]In [8]: s = {x*x for x in a if x>1}In [9]: sOut[9]: {4, 9}In [10]: type(s)Out[10]: set字典生成器In [11]: a=[1,2,3]In [12]: {str(x):x+1 for x in a if x>1}Out[12]: {'2': 3, '3': 4}range和xrange的使用In [13]: range?Docstring:range(stop) -> list of integersrange(start, stop[, step]) -> list of integersIn [14]: range(10)Out[14]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]In [15]: range(3,10)Out[15]: [3, 4, 5, 6, 7, 8, 9]In [16]: xrange?Docstring:xrange(stop) -> xrange objectxrange(start, stop[, step]) -> xrange objectIn [19]: list(xrange(3,10))Out[19]: [3, 4, 5, 6, 7, 8, 9]In [21]: list(xrange(10))Out[21]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]range和xrange的用法相同，只是range会直接生成一个内存列表，xrange会生成一个生产器，xrange的效率更高，更节省内存filter用于过滤数据In [22]: filter?Docstring:filter(function or None, sequence) -> list, tuple, or stringReturn those items of sequence for which function(item) is true.  Iffunction is None, return the items that are true.  If sequence is a tupleor string, return the same type, else return a list.Type:      builtin_function_or_methodIn [23]: filter(lambda x:x%3==0, xrange(10))Out[23]: [0, 3, 6, 9]使用collections.namedtuple给列表或者元组命名In [24]: from collections import namedtupleIn [30]: Point = namedtuple('Point', ['x', 'y'])In [31]: p = Point(11, 22)In [32]: p.__dict__Out[32]: OrderedDict([('x', 11), ('y', 22)])In [33]: p.xOut[33]: 11In [34]: p.yOut[34]: 22random的使用In [35]: from random import randintIn [36]: randint?Signature: randint(a, b)Docstring:Return random integer in range [a, b], including both end points.File:      /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/random.pyType:      instancemethodIn [37]: randint(1,10)Out[37]: 2统计序列元素的频度和TOP NIn [42]: from collections import CounterIn [43]: Counter?In [44]: c = Counter('aaabbbbccccccddddddeeeeee')In [45]: cOut[45]: Counter({'a': 3, 'b': 4, 'c': 6, 'd': 6, 'e': 6})In [46]: c.most_common(3)Out[46]: [('c', 6), ('e', 6), ('d', 6)]将字典按value排序In [47]: from random import randintIn [48]: keys = 'abcdefg'In [50]: d = {x:randint(90,100) for x in keys}In [51]: dOut[51]: {'a': 90, 'b': 100, 'c': 94, 'd': 97, 'e': 94, 'f': 95, 'g': 91}In [53]: d.items()Out[53]: [('a', 90), ('c', 94), ('b', 100), ('e', 94), ('d', 97), ('g', 91), ('f', 95)]In [54]: sorted?Docstring: sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted listType:      builtin_function_or_methodIn [55]: sorted(d.items(), key=lambda x : x[1])Out[55]: [('a', 90), ('g', 91), ('c', 94), ('e', 94), ('f', 95), ('d', 97), ('b', 100)]获得多个词典的key的交集In [99]: from random import randint, sampleIn [100]: dd1 = {x:randint(90,100) for x in sample('abcdefghij', 5)}In [101]: dd2 = {x:randint(90,100) for x in sample('abcdefghij', 5)}In [102]: dd3 = {x:randint(90,100) for x in sample('abcdefghij', 5)}In [103]: dd1Out[103]: {'b': 100, 'c': 97, 'd': 100, 'e': 97, 'f': 92}In [104]: dd2Out[104]: {'a': 100, 'c': 90, 'g': 93, 'h': 93, 'j': 90}In [105]: dd3Out[105]: {'c': 96, 'e': 93, 'f': 91, 'h': 97, 'j': 90}In [106]: mp = map(dict.viewkeys, (dd1, dd2, dd3))In [107]: mpOut[107]:[dict_keys(['c', 'b', 'e', 'd', 'f']), dict_keys(['a', 'h', 'c', 'j', 'g']), dict_keys(['h', 'c', 'j', 'e', 'f'])]In [108]: reduce(lambda x,y: x&y, mp)Out[108]: {'c'}怎样让字典按照插入有序In [122]: from collections import OrderedDictIn [123]: d = OrderedDict()In [124]: d['x'] = 1In [125]: d['y'] = 2In [126]: d['a'] = 2In [127]: d['b'] = 2In [128]: dOut[128]: OrderedDict([('x', 1), ('y', 2), ('a', 2), ('b', 2)])怎样实现长度为N的队列功能In [138]: from collections import dequeIn [139]: deque?Docstring:deque([iterable[, maxlen]]) --> deque objectBuild an ordered collection with optimized access from its endpoints.File:      /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/collections.pyType:      typeIn [141]: d = deque([], 3)In [142]: d.append(1)In [143]: d.append(2)In [144]: d.append(3)In [145]: d.append(4)In [146]: dOut[146]: deque([2, 3, 4])迭代器怎样齐头并进并行的遍历多个集合In [147]: names = [x for x in 'abcdefg']In [148]: ages = [x for x in range(21, 28)]In [149]: scores = [randint(90,100) for x in range(7)]In [150]: namesOut[150]: ['a', 'b', 'c', 'd', 'e', 'f', 'g']In [151]: agesOut[151]: [21, 22, 23, 24, 25, 26, 27]In [152]: scoresOut[152]: [93, 90, 95, 97, 91, 93, 92]In [153]:In [153]: zip?Docstring:zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]Return a list of tuples, where each tuple contains the i-th elementfrom each of the argument sequences.  The returned list is truncatedin length to the length of the shortest argument sequence.Type:      builtin_function_or_methodIn [154]: for name,age,score in zip(names, ages, scores):     ...:     print name,age,score     ...:a 21 93b 22 90c 23 95d 24 97e 25 91f 26 93g 27 92怎样串行的遍历多个集合In [158]: lista = (randint(60,70) for x in range(10))In [159]: list(lista)Out[159]: [65, 60, 62, 64, 63, 60, 68, 67, 61, 62]In [160]: listb = [randint(90,100) for x in range(20)]In [161]: listbOut[161]:[98, 96, 97, 98, 95, 95, 90, 99, 92, 92, 99, 92, 100, 95, 100, 100, 93, 91, 92, 98]In [163]: from itertools import chainIn [164]: chain?Docstring:chain(*iterables) --> chain objectReturn a chain object whose .next() method returns elements from thefirst iterable until it is exhausted, then elements from the nextiterable, until all of the iterables are exhausted.File:      /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/itertools.soType:      typeIn [165]: for x in chain(lista, listb):     ...:     print x,     ...:98 96 97 98 95 95 90 99 92 92 99 92 100 95 100 100 93 91 92 98字符串使用多种分隔符拆分字符串In [166]: s = 'a,b;c/d'In [167]: import reIn [169]: re.sub?Signature: re.sub(pattern, repl, string, count=0, flags=0)Docstring:Return the string obtained by replacing the leftmostnon-overlapping occurrences of the pattern in string by thereplacement repl.  repl can be either a string or a callable;if a string, backslash escapes in it are processed.  If it isa callable, it's passed the match object and must returna replacement string to be used.File:      /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/re.pyType:      functionIn [171]: re.sub(r'[,;/]', '-', s)Out[171]: 'a-b-c-d'如果进行字符串的模糊搜索与部分替换In [172]: s = 'things happend in 2017-08-09, it is a sunddy'In [175]: re.sub(r'(\d{4})-(\d{2})-(\d{2})', r'\2-\1-\3', s)Out[175]: 'things happend in 08-2017-09, it is a sunddy'列表JOIN时如果有数字元素怎么办In [176]: print '\t'.join([str(x) for x in ['a','b',33,4.0,'e']])ab334.0e文件如何使用临时文件In [186]: from tempfile import TemporaryFile,NamedTemporaryFileIn [187]: t = TemporaryFile()In [188]: t.write('aa')In [189]: t.close()In [191]: NamedTemporaryFile?Signature: NamedTemporaryFile(mode='w+b', bufsize=-1, suffix='', prefix='tmp', dir=None, delete=True)Docstring:Create and return a temporary file.Arguments:'prefix', 'suffix', 'dir' -- as for mkstemp.'mode' -- the mode argument to os.fdopen (default ""w+b"").'bufsize' -- the buffer size argument to os.fdopen (default -1).'delete' -- whether the file is deleted on close (default True).The file is created as mkstemp() would do it.Returns an object with a file-like interface; the name of the fileis accessible as its 'name' attribute.  The file will be automaticallydeleted when it is closed unless the 'delete' argument is set to False.File:      /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/tempfile.pyType:      functionIn [192]: t = NamedTemporaryFile()In [193]: t.write(""a"")In [194]: t.nameOut[194]: '/var/folders/sc/rpg0yq054hb7vdr83ms1rp2w0000gn/T/tmpQIONuU'并发编程如何使用多线程In [8]: cat multi_threading.pyfrom threading import Threaddef func(x):    print x, x*x*xts = []for x in range(10):    t = Thread(target=func, args=(x,))    t.start()    ts.append(t)for t in ts:    t.join()print 'main thread over'In [9]: %run multi_threading.py0 01 12 83 274 645 1256 2167 3438 5129 729main thread over上一中是直接用函数执行，第二种是先创建一个类继承自Thread类In [18]: cat multi_threading_class.pyfrom threading import Threadclass MyThread(Thread):    def __init__(self, x):        Thread.__init__(self)        self.x = x    def run(self):        print self.x, self.x*self.x*self.xts = []for x in range(10):    t = MyThread(x)    t.start()    ts.append(t)for t in ts:    t.join()print 'main thread over'In [19]: %run multi_threading_class.py0 01 12 83 274 64 5 1256 2167 3438 5129 729main thread over线程间通信-生产者消费者模式In [8]: cat producer_consumer.py#coding:utf8from threading import Thread,currentThreadfrom Queue import Queuefrom time import sleepfrom random import randint,samplefrom itertools import chainclass Producer(Thread):    def __init__(self, queue):        Thread.__init__(self)        self.queue = queue    def run(self):       for x in range(5):            sleep(randint(1,3))            ele = sample('abcdefg',1)[0]            print 'producer %s: %s'%(currentThread().name, ele)            self.queue.put(ele)class Consumer(Thread):    def __init__(self, queue):        Thread.__init__(self)        self.setDaemon(True)        self.queue = queue    def run(self):        while(True):            e = self.queue.get()            sleep(1)            print 'consumer %s: %s' % (currentThread().name, e)queue = Queue()tps = []for x in range(3):    tp = Producer(queue)    tp.start()    tps.append(tp)for x in range(2):    tc = Consumer(queue)    tc.start()for t in tps:    t.join()print 'main thread over'In [9]: %run producer_consumer.pyproducer Thread-301: a^Cconsumer Thread-304: aproducer Thread-302: c producer Thread-303: gproducer Thread-301: cconsumer Thread-304: g consumer Thread-305: cproducer Thread-303: b ","['python', '高级', '编程', '技巧', 'ipython', '使用', '地址', 'https', 'ipython', 'org', 'install', 'html', '简单', '安装', '方法', 'pip', 'install', 'ipython', '一些', '方便', '使用', '方法', '输入', '查看', '对象', '然后', '输入', '一个', '问号', '可以', '查看', 'api', '输入', '两个', '问号', '可以', '查看', '代码', '可以', '直接', '调用', 'shell', '命令', '前面', '带上', '即可', 'tab', '可以', '自动', '语法', '补全', '最近', '命令', '输出', '结果', '可以', '__', '___', '三个', '变量', '获得', 'hist', '或者', 'history', '查看', '历史', '命令', 'timeit', '可以', '进行', '命令', '执行', '时间', '测试', '数据结构', '算法', '列表', '生成器', 'in', 'in', 'for', 'in', 'if', 'out', '集合', '生成器', '列表', '生成器', '相同', 'in', 'in', 'for', 'in', 'if', 'in', 'sout', 'in', '10', 'type', 'out', '10', 'set', '字典', '生成器', 'in', '11', 'in', '12', 'str', 'for', 'in', 'if', 'out', '12', 'range', 'xrange', '使用', 'in', '13', 'range', 'docstring', 'range', 'stop', 'list', 'of', 'integersrange', 'start', 'stop', 'step', 'list', 'of', 'integersin', '14', 'range', '10', 'out', '14', 'in', '15', 'range', '10', 'out', '15', 'in', '16', 'xrange', 'docstring', 'xrange', 'stop', 'xrange', 'objectxrange', 'start', 'stop', 'step', 'xrange', 'objectin', '19', 'list', 'xrange', '10', 'out', '19', 'in', '21', 'list', 'xrange', '10', 'out', '21', 'range', 'xrange', '用法', '相同', '只是', 'range', '直接', '生成', '一个', '内存', '列表', 'xrange', '生成', '一个', '生产', 'xrange', '效率', '更高', '节省', '内存', 'filter', '用于', '过滤', '数据', 'in', '22', 'filter', 'docstring', 'filter', 'function', 'or', 'none', 'sequence', 'list', 'tuple', 'or', 'stringreturn', 'those', 'items', 'of', 'sequence', 'for', 'which', 'function', 'item', 'is', 'true', 'iffunction', 'is', 'none', 'return', 'the', 'items', 'that', 'are', 'true', 'if', 'sequence', 'is', 'tupleor', 'string', 'return', 'the', 'same', 'type', 'else', 'return', 'list', 'type', 'builtin', 'function', 'or', 'methodin', '23', 'filter', 'lambda', 'x%', 'xrange', '10', 'out', '23', '使用', 'collections', 'namedtuple', '列表', '或者', '元组', '命名', 'in', '24', 'from', 'collections', 'import', 'namedtuplein', '30', 'point', 'namedtuple', 'point', 'in', '31', 'point', '11', '22', 'in', '32', '.__', 'dict', '__', 'out', '32', 'ordereddict', '11', '22', 'in', '33', 'xout', '33', '11in', '34', 'yout', '34', '22random', '使用', 'in', '35', 'from', 'random', 'import', 'randintin', '36', 'randint', 'signature', 'randint', 'docstring', 'return', 'random', 'integer', 'in', 'range', 'including', 'both', 'end', 'points', 'file', 'library', 'frameworks', 'python', 'framework', 'versions', '2.7', 'lib', 'python2.7', 'random', 'pytype', 'instancemethodin', '37', 'randint', '10', 'out', '37', '统计', '序列', '元素', '频度', 'top', 'nin', '42', 'from', 'collections', 'import', 'counterin', '43', 'counter', 'in', '44', 'counter', 'aaabbbbccccccddddddeeeeee', 'in', '45', 'cout', '45', 'counter', 'in', '46', 'most', 'common', 'out', '46', '字典', 'value', '排序', 'in', '47', 'from', 'random', 'import', 'randintin', '48', 'keys', 'abcdefg', 'in', '50', 'randint', '90', '100', 'for', 'in', 'keys', 'in', '51', 'dout', '51', '90', '100', '94', '97', '94', '95', '91', 'in', '53', 'items', 'out', '53', '90', '94', '100', '94', '97', '91', '95', 'in', '54', 'sorted', 'docstring', 'sorted', 'iterable', 'cmp', 'none', 'key', 'none', 'reverse', 'false', '--', 'new', 'sorted', 'listtype', 'builtin', 'function', 'or', 'methodin', '55', 'sorted', 'items', 'key', 'lambda', 'out', '55', '90', '91', '94', '94', '95', '97', '100', '获得', '多个', '词典', 'key', '交集', 'in', '99', 'from', 'random', 'import', 'randint', 'samplein', '100', 'dd1', 'randint', '90', '100', 'for', 'in', 'sample', 'abcdefghij', 'in', '101', 'dd2', 'randint', '90', '100', 'for', 'in', 'sample', 'abcdefghij', 'in', '102', 'dd3', 'randint', '90', '100', 'for', 'in', 'sample', 'abcdefghij', 'in', '103', 'dd1out', '103', '100', '97', '100', '97', '92', 'in', '104', 'dd2out', '104', '100', '90', '93', '93', '90', 'in', '105', 'dd3out', '105', '96', '93', '91', '97', '90', 'in', '106', 'mp', 'map', 'dict', 'viewkeys', 'dd1', 'dd2', 'dd3', 'in', '107', 'mpout', '107', 'dict', 'keys', 'dict', 'keys', 'dict', 'keys', 'in', '108', 'reduce', 'lambda', 'mp', 'out', '108', '怎样', '字典', '按照', '插入', '有序', 'in', '122', 'from', 'collections', 'import', 'ordereddictin', '123', 'ordereddict', 'in', '124', '1in', '125', '2in', '126', '2in', '127', '2in', '128', 'dout', '128', 'ordereddict', '怎样', '实现', '长度', '队列', '功能', 'in', '138', 'from', 'collections', 'import', 'dequein', '139', 'deque', 'docstring', 'deque', 'iterable', 'maxlen', '--', 'deque', 'objectbuild', 'an', 'ordered', 'collection', 'with', 'optimized', 'access', 'from', 'its', 'endpoints', 'file', 'library', 'frameworks', 'python', 'framework', 'versions', '2.7', 'lib', 'python2.7', 'collections', 'pytype', 'typein', '141', 'deque', 'in', '142', 'append', 'in', '143', 'append', 'in', '144', 'append', 'in', '145', 'append', 'in', '146', 'dout', '146', 'deque', '迭代', '怎样', '齐头并进', '并行', '遍历', '多个', '集合', 'in', '147', 'names', 'for', 'in', 'abcdefg', 'in', '148', 'ages', 'for', 'in', 'range', '21', '28', 'in', '149', 'scores', 'randint', '90', '100', 'for', 'in', 'range', 'in', '150', 'namesout', '150', 'in', '151', 'agesout', '151', '21', '22', '23', '24', '25', '26', '27', 'in', '152', 'scoresout', '152', '93', '90', '95', '97', '91', '93', '92', 'in', '153', 'in', '153', 'zip', 'docstring', 'zip', 'seq1', 'seq2', '...', 'seq1', 'seq2', '...', '...', 'return', 'list', 'of', 'tuples', 'where', 'each', 'tuple', 'contains', 'the', 'th', 'elementfrom', 'each', 'of', 'the', 'argument', 'sequences', 'the', 'returned', 'list', 'is', 'truncatedin', 'length', 'to', 'the', 'length', 'of', 'the', 'shortest', 'argument', 'sequence', 'type', 'builtin', 'function', 'or', 'methodin', '154', 'for', 'name', 'age', 'score', 'in', 'zip', 'names', 'ages', 'scores', '...', 'print', 'name', 'age', 'score', '...', '21', '93b', '22', '90c', '23', '95d', '24', '97e', '25', '91f', '26', '93g', '27', '92', '怎样', '串行', '遍历', '多个', '集合', 'in', '158', 'lista', 'randint', '60', '70', 'for', 'in', 'range', '10', 'in', '159', 'list', 'lista', 'out', '159', '65', '60', '62', '64', '63', '60', '68', '67', '61', '62', 'in', '160', 'listb', 'randint', '90', '100', 'for', 'in', 'range', '20', 'in', '161', 'listbout', '161', '98', '96', '97', '98', '95', '95', '90', '99', '92', '92', '99', '92', '100', '95', '100', '100', '93', '91', '92', '98', 'in', '163', 'from', 'itertools', 'import', 'chainin', '164', 'chain', 'docstring', 'chain', 'iterables', '--', 'chain', 'objectreturn', 'chain', 'object', 'whose', 'next', 'method', 'returns', 'elements', 'from', 'thefirst', 'iterable', 'until', 'it', 'is', 'exhausted', 'then', 'elements', 'from', 'the', 'nextiterable', 'until', 'all', 'of', 'the', 'iterables', 'are', 'exhausted', 'file', 'library', 'frameworks', 'python', 'framework', 'versions', '2.7', 'lib', 'python2.7', 'lib', 'dynload', 'itertools', 'sotype', 'typein', '165', 'for', 'in', 'chain', 'lista', 'listb', '...', 'print', '...', '98', '96', '97', '98', '95', '95', '90', '99', '92', '92', '99', '92', '100', '95', '100', '100', '93', '91', '92', '98', '字符串', '使用', '多种', '分隔符', '拆分', '字符串', 'in', '166', 'in', '167', 'import', 'rein', '169', 're', 'sub', 'signature', 're', 'sub', 'pattern', 'repl', 'string', 'count', 'flags', 'docstring', 'return', 'the', 'string', 'obtained', 'by', 'replacing', 'the', 'leftmostnon', 'overlapping', 'occurrences', 'of', 'the', 'pattern', 'in', 'string', 'by', 'thereplacement', 'repl', 'repl', 'can', 'be', 'either', 'string', 'or', 'callable', 'if', 'string', 'backslash', 'escapes', 'in', 'it', 'are', 'processed', 'if', 'it', 'isa', 'callable', 'it', 'passed', 'the', 'match', 'object', 'and', 'must', 'returna', 'replacement', 'string', 'to', 'be', 'used', 'file', 'library', 'frameworks', 'python', 'framework', 'versions', '2.7', 'lib', 'python2.7', 're', 'pytype', 'functionin', '171', 're', 'sub', 'out', '171', '如果', '进行', '字符串', '模糊', '搜索', '部分', '替换', 'in', '172', 'things', 'happend', 'in', '2017', '08', '09', 'it', 'is', 'sunddy', 'in', '175', 're', 'sub', 'out', '175', 'things', 'happend', 'in', '08', '2017', '09', 'it', 'is', 'sunddy', '列表', 'join', '如果', '数字', '元素', '怎么办', 'in', '176', 'print', 'join', 'str', 'for', 'in', '33', '4.0', 'ab334.0', '文件', '如何', '使用', '临时文件', 'in', '186', 'from', 'tempfile', 'import', 'temporaryfile', 'namedtemporaryfilein', '187', 'temporaryfile', 'in', '188', 'write', 'aa', 'in', '189', 'close', 'in', '191', 'namedtemporaryfile', 'signature', 'namedtemporaryfile', 'mode', 'bufsize', 'suffix', 'prefix', 'tmp', 'dir', 'none', 'delete', 'true', 'docstring', 'create', 'and', 'return', 'temporary', 'file', 'arguments', 'prefix', 'suffix', 'dir', '--', 'as', 'for', 'mkstemp', 'mode', '--', 'the', 'mode', 'argument', 'to', 'os', 'fdopen', 'default', 'bufsize', '--', 'the', 'buffer', 'size', 'argument', 'to', 'os', 'fdopen', 'default', 'delete', '--', 'whether', 'the', 'file', 'is', 'deleted', 'on', 'close', 'default', 'true', 'the', 'file', 'is', 'created', 'as', 'mkstemp', 'would', 'do', 'it', 'returns', 'an', 'object', 'with', 'file', 'like', 'interface', 'the', 'name', 'of', 'the', 'fileis', 'accessible', 'as', 'its', 'name', 'attribute', 'the', 'file', 'will', 'be', 'automaticallydeleted', 'when', 'it', 'is', 'closed', 'unless', 'the', 'delete', 'argument', 'is', 'set', 'to', 'false', 'file', 'library', 'frameworks', 'python', 'framework', 'versions', '2.7', 'lib', 'python2.7', 'tempfile', 'pytype', 'functionin', '192', 'namedtemporaryfile', 'in', '193', 'write', 'in', '194', 'nameout', '194', 'var', 'folders', 'sc', 'rpg0yq054hb7vdr83ms1rp2w0000gn', 'tmpqionuu', '并发', '编程', '如何', '使用', '多线程', 'in', 'cat', 'multi', 'threading', 'pyfrom', 'threading', 'import', 'threaddef', 'func', 'print', 'xts', 'for', 'in', 'range', '10', 'thread', 'target', 'func', 'args', 'start', 'ts', 'append', 'for', 'in', 'ts', 'join', 'print', 'main', 'thread', 'over', 'in', 'run', 'multi', 'threading', 'py0', '01', '12', '83', '274', '645', '1256', '2167', '3438', '5129', '729main', 'thread', 'over', '一中', '直接', '函数', '执行', '第二种', '创建', '一个', '继承', 'thread', 'in', '18', 'cat', 'multi', 'threading', 'class', 'pyfrom', 'threading', 'import', 'threadclass', 'mythread', 'thread', 'def', '__', 'init', '__', 'self', 'thread', '.__', 'init', '__', 'self', 'self', 'def', 'run', 'self', 'print', 'self', 'self', 'self', 'self', 'xts', 'for', 'in', 'range', '10', 'mythread', 'start', 'ts', 'append', 'for', 'in', 'ts', 'join', 'print', 'main', 'thread', 'over', 'in', '19', 'run', 'multi', 'threading', 'class', 'py0', '01', '12', '83', '274', '64', '1256', '2167', '3438', '5129', '729main', 'thread', 'over', '线程', '间通信', '生产者', '消费者', '模式', 'in', 'cat', 'producer', 'consumer', 'py', 'coding', 'utf8from', 'threading', 'import', 'thread', 'currentthreadfrom', 'queue', 'import', 'queuefrom', 'time', 'import', 'sleepfrom', 'random', 'import', 'randint', 'samplefrom', 'itertools', 'import', 'chainclass', 'producer', 'thread', 'def', '__', 'init', '__', 'self', 'queue', 'thread', '.__', 'init', '__', 'self', 'self', 'queue', 'queue', 'def', 'run', 'self', 'for', 'in', 'range', 'sleep', 'randint', 'ele', 'sample', 'abcdefg', 'print', 'producer', 'currentthread', 'name', 'ele', 'self', 'queue', 'put', 'ele', 'class', 'consumer', 'thread', 'def', '__', 'init', '__', 'self', 'queue', 'thread', '.__', 'init', '__', 'self', 'self', 'setdaemon', 'true', 'self', 'queue', 'queue', 'def', 'run', 'self', 'while', 'true', 'self', 'queue', 'get', 'sleep', 'print', 'consumer', 'currentthread', 'name', 'queue', 'queue', 'tps', 'for', 'in', 'range', 'tp', 'producer', 'queue', 'tp', 'start', 'tps', 'append', 'tp', 'for', 'in', 'range', 'tc', 'consumer', 'queue', 'tc', 'start', 'for', 'in', 'tps', 'join', 'print', 'main', 'thread', 'over', 'in', 'run', 'producer', 'consumer', 'pyproducer', 'thread', '301', 'cconsumer', 'thread', '304', 'aproducer', 'thread', '302', 'producer', 'thread', '303', 'gproducer', 'thread', '301', 'cconsumer', 'thread', '304', 'consumer', 'thread', '305', 'cproducer', 'thread', '303']","[[-1.81914290e-01 -8.69270474e-02  2.72977441e-01  5.02460602e-02
   2.80644043e-01 -3.99299579e-01 -4.42028472e-02  4.37666305e-01
  -1.46038653e-01 -2.55169878e-01  1.12289331e-02 -4.16392570e-01
  -1.38660239e-01  4.47533075e-01  1.86981490e-01 -1.03333283e-01
  -8.72780798e-02 -7.30100769e-03 -2.83947933e-02 -6.32258330e-01
  -1.66816369e-01  2.78811738e-01 -8.07762994e-02 -3.65101890e-01
   1.02194146e-02 -3.73404338e-01 -3.07056976e-01 -3.62489897e-02
  -2.96611523e-01 -9.11080195e-02  7.65185651e-02 -6.17552224e-02
   7.45372779e-02 -1.31687091e-01 -2.43861814e-01  2.96697732e-01
  -3.13052983e-01 -3.67131193e-01  4.56220119e-02 -6.82664656e-01
  -9.83387169e-02 -6.19128548e-01 -1.30870621e-01  9.16913975e-02
  -6.78564723e-02 -3.32825183e-01 -1.33878300e-01  1.75558178e-01
  -2.28347418e-01  5.81910386e-01  8.72786122e-02 -2.70320316e-01
  -1.82647912e-01 -6.60964918e-02 -1.32154492e-01  3.54980229e-01
   1.94788203e-02 -1.44464472e-01  1.37179930e-01 -2.22806284e-01
   1.67206997e-01  1.75003601e-01  1.13908321e-02  1.00025524e-01
  -3.74172687e-01  1.25170734e-01  8.42039134e-02 -7.17638368e-02
  -4.08481505e-01  4.10859501e-01  1.98190392e-02 -6.47425147e-02
   3.42149307e-01 -3.19224546e-01  5.32144591e-01  3.73509747e-01
  -1.80102937e-04 -1.67350203e-01 -4.22110205e-01  4.08727001e-02
   1.24590570e-01  1.25830179e-01 -2.11416819e-01  4.29262590e-01
  -2.32725018e-01  1.99174844e-01 -2.60443867e-01  4.65562735e-01
   4.87403833e-01  1.81878804e-01  1.31219861e-01  9.19780788e-02
   3.47099004e-01  1.78996170e-01  2.10599747e-01  2.81106639e-01
   1.97784795e-01 -3.42996213e-01 -8.87988501e-02 -1.67558645e-01]]"
2160,Hive实现返回MAP的UDF,"如果只是返回String，那么直接继承UDF即可，如果想要返回MAP/LIST/STRUCT，则需要继承GenericUDF；如下代码示例，将URL中的参数进行了解析成了一个MAP返回：import java.util.LinkedHashMap;import java.util.Map;import org.apache.commons.lang.StringUtils;import org.apache.hadoop.hive.ql.exec.UDFArgumentException;import org.apache.hadoop.hive.ql.metadata.HiveException;import org.apache.hadoop.hive.ql.udf.generic.GenericUDF;import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;import org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;import org.apache.hadoop.io.Text;public class UrlParamsToMap extends GenericUDF {    private final Map<Text, Text> sortMap = new LinkedHashMap<Text, Text>();    private StringObjectInspector urlOI;    @Override    public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumentException {        if (arguments.length != 1) {            throw new UDFArgumentException(""UrlParamsToMap param must be 1 argu."");        }        urlOI = (StringObjectInspector) arguments[0];        return ObjectInspectorFactory.getStandardMapObjectInspector(                PrimitiveObjectInspectorFactory.writableStringObjectInspector,                PrimitiveObjectInspectorFactory.writableStringObjectInspector);    }    @Override    public Object evaluate(DeferredObject[] deferredObjects) throws HiveException {        Object urlObj = deferredObjects[0].get();        Text url = (Text) urlOI.getPrimitiveWritableObject(urlObj);        getParamsMap(url.toString(), sortMap);        return sortMap;    }    public Map<Text, Text> getParamsMap(String url, Map<Text, Text> sortMap) {        Map<Text, Text> defaultMap = new LinkedHashMap<Text, Text>();        if (StringUtils.isBlank(url)) {            return defaultMap;        }        String[] urlSplits = url.split(""\\?"");        if (null == urlSplits || urlSplits.length != 2) {            return defaultMap;        }        String urlParamStr = urlSplits[1];        if (StringUtils.isBlank(urlParamStr)) {            return defaultMap;        }        String[] paramSplits = urlParamStr.split(""&"");        if (null == paramSplits || paramSplits.length == 0) {            return defaultMap;        }        for (String kvStr : paramSplits) {            if (StringUtils.isBlank(kvStr)) {                continue;            }            String[] kvs = kvStr.split(""="");            if (null != kvs && kvs.length == 2) {                if (StringUtils.isNotBlank(kvs[0]) && StringUtils.isNotBlank(kvs[1])) {                    sortMap.put(new Text(kvs[0]), new Text(kvs[1]));                }            }        }        return sortMap;    }    @Override    public String getDisplayString(String[] strings) {        return ""map("" + strings[0] + "")"";    }} 转载请注明来自：疯狂的蚂蚁www.crazyant.net","['hive', '实现', '返回', 'map', 'udf', '如果', '只是', '返回', 'string', '那么', '直接', '继承', 'udf', '即可', '如果', '想要', '返回', 'map', 'list', 'struct', '需要', '继承', 'genericudf', '如下', '代码', '示例', 'url', '参数', '进行', '解析', '一个', 'map', '返回', 'import', 'java', 'util', 'linkedhashmap', 'import', 'java', 'util', 'map', 'import', 'org', 'apache', 'commons', 'lang', 'stringutils', 'import', 'org', 'apache', 'hadoop', 'hive', 'ql', 'exec', 'udfargumentexception', 'import', 'org', 'apache', 'hadoop', 'hive', 'ql', 'metadata', 'hiveexception', 'import', 'org', 'apache', 'hadoop', 'hive', 'ql', 'udf', 'generic', 'genericudf', 'import', 'org', 'apache', 'hadoop', 'hive', 'serde2', 'objectinspector', 'objectinspector', 'import', 'org', 'apache', 'hadoop', 'hive', 'serde2', 'objectinspector', 'objectinspectorfactory', 'import', 'org', 'apache', 'hadoop', 'hive', 'serde2', 'objectinspector', 'primitive', 'primitiveobjectinspectorfactory', 'import', 'org', 'apache', 'hadoop', 'hive', 'serde2', 'objectinspector', 'primitive', 'stringobjectinspector', 'import', 'org', 'apache', 'hadoop', 'io', 'text', 'public', 'class', 'urlparamstomap', 'extends', 'genericudf', 'private', 'final', 'map', 'text', 'text', 'sortmap', 'new', 'linkedhashmap', 'text', 'text', 'private', 'stringobjectinspector', 'urloi', 'override', 'public', 'objectinspector', 'initialize', 'objectinspector', 'arguments', 'throws', 'udfargumentexception', 'if', 'arguments', 'length', 'throw', 'new', 'udfargumentexception', 'urlparamstomap', 'param', 'must', 'be', 'argu', 'urloi', 'stringobjectinspector', 'arguments', 'return', 'objectinspectorfactory', 'getstandardmapobjectinspector', 'primitiveobjectinspectorfactory', 'writablestringobjectinspector', 'primitiveobjectinspectorfactory', 'writablestringobjectinspector', 'override', 'public', 'object', 'evaluate', 'deferredobject', 'deferredobjects', 'throws', 'hiveexception', 'object', 'urlobj', 'deferredobjects', 'get', 'text', 'url', 'text', 'urloi', 'getprimitivewritableobject', 'urlobj', 'getparamsmap', 'url', 'tostring', 'sortmap', 'return', 'sortmap', 'public', 'map', 'text', 'text', 'getparamsmap', 'string', 'url', 'map', 'text', 'text', 'sortmap', 'map', 'text', 'text', 'defaultmap', 'new', 'linkedhashmap', 'text', 'text', 'if', 'stringutils', 'isblank', 'url', 'return', 'defaultmap', 'string', 'urlsplits', 'url', 'split', 'if', 'null', 'urlsplits', 'urlsplits', 'length', 'return', 'defaultmap', 'string', 'urlparamstr', 'urlsplits', 'if', 'stringutils', 'isblank', 'urlparamstr', 'return', 'defaultmap', 'string', 'paramsplits', 'urlparamstr', 'split', 'if', 'null', 'paramsplits', 'paramsplits', 'length', 'return', 'defaultmap', 'for', 'string', 'kvstr', 'paramsplits', 'if', 'stringutils', 'isblank', 'kvstr', 'continue', 'string', 'kvs', 'kvstr', 'split', 'if', 'null', 'kvs', '&&', 'kvs', 'length', 'if', 'stringutils', 'isnotblank', 'kvs', '&&', 'stringutils', 'isnotblank', 'kvs', 'sortmap', 'put', 'new', 'text', 'kvs', 'new', 'text', 'kvs', 'return', 'sortmap', 'override', 'public', 'string', 'getdisplaystring', 'string', 'strings', 'return', 'map', 'strings', '转载', '注明', '来自', '疯狂', '蚂蚁', 'www', 'crazyant', 'net']","[[-0.3076978  -0.02609509  0.35789881  0.23109422  0.25074659 -0.43174745
  -0.03494243  0.52262772 -0.16560729 -0.22516369 -0.02529454 -0.50889516
  -0.00245639  0.52213846  0.21773229 -0.14982603 -0.0945166  -0.05956007
  -0.01783648 -0.63559203 -0.11208779  0.38434706 -0.161399   -0.33122413
  -0.05013175 -0.40374591 -0.37931364 -0.01052723 -0.24706043 -0.12206452
   0.11334926  0.00286037  0.00700296 -0.08760914 -0.24441022  0.44579373
  -0.27849629 -0.40290247  0.05542388 -0.79854221 -0.07942102 -0.56999071
  -0.12524123  0.04540087 -0.11950712 -0.33941411 -0.32165645  0.3112617
  -0.15377125  0.54839032  0.02497631 -0.35901807 -0.13865781 -0.21155448
  -0.06014481  0.48592292  0.0666936  -0.12300385  0.1722292  -0.18062895
   0.18139173  0.15699478  0.02243046  0.0651876  -0.42973737  0.14303922
   0.03519339  0.0015196  -0.3784919   0.48329567 -0.01065967 -0.08243827
   0.44528958 -0.37985834  0.536149    0.4484919   0.16544618 -0.24730259
  -0.37616094 -0.08047407  0.03065598  0.07444211 -0.16281912  0.52474315
  -0.27569047  0.24340671 -0.30737295  0.55477751  0.59970431  0.25569114
   0.14105661  0.11990286  0.39238795  0.23285293  0.22234646  0.41095982
   0.13320646 -0.31134981  0.13006559 -0.17870084]]"
2167,使用Kmeans对Word2vec的输出做聚类,"Word2vec会产出每个词语的权重向量使用这个向量，可以直接对所有的词语聚类以下代码，以word2vec的model作为输入，进行kmeans训练，同时进行K的迭代计算，选出WSSSE最小的K值    /**      * 将word2vec的结果，作为kmeans的输入进行聚类；进行K的多次迭代，选出WSSSE最小的K      * @param spark      * @param model      */    def word2vecToKmeans(spark: SparkSession, model: org.apache.spark.mllib.feature.Word2VecModel) = {        import org.apache.spark.mllib.clustering.{KMeans, KMeansModel}        import org.apache.spark.mllib.linalg.Vectors        // val parsedData = data.map(s => Vectors.dense(s.split(' ').map(_.toDouble))).cache()        val parsedData = model.getVectors.map(row => Vectors.dense(row._2.map(_.toDouble))).toSeq        val parsedDataRDD = spark.sparkContext.parallelize(parsedData).cache()        // Cluster the data into two classes using KMeans        val numKList = 2 to 20        numKList.foreach(            k => {                val numIterations = 50                val clusters = KMeans.train(parsedDataRDD, k, numIterations)                // Evaluate clustering by computing Within Set Sum of Squared Errors                val WSSSE = clusters.computeCost(parsedDataRDD)                println(s""K==${k}, Within Set Sum of Squared Errors = $WSSSE"")            }        )    }这里使用的是mllib的库算出来的K值和WSSSE的对应关系为：2737409.97935174433680667.17178079424646796.95862099535621979.8313877946600079.29481542747583517.9018185788568308.93915777589558225.364393443510553948.31711242811548844.816332791912534551.224984812313530924.490348819214525710.927285733915523946.1744262096516516929.8587020234617511611.249029313118510014.9337205022519503478.8160144274620500293.188117236 使用如下代码进行绘图：#coding:utf8import matplotlib.pyplot as pltx = []wssse = []for line in open(""kmeans_k_wssse.txt""):    line = line[:-1]    fields = line.split(""\t"")    if len(fields) != 2:        continue    x.append(int(fields[0]))    wssse.append(float(fields[1]))plt.xlabel('k')plt.ylabel('SSE')plt.plot(x,wssse,'o-')plt.show() 图片如下： 并不是完美的手肘，不过拐点大概在8、9的位置，以8或者9来聚类比较合适 也可以打印距离每个中心的10个数据val distData = model.getVectors.map(row => {            val word = row._1            val probVector = Vectors.dense(row._2.map(_.toDouble))            val predictK = clusters.predict(probVector)            val centerVector = clusters.clusterCenters(predictK)            // 计算当前点，到当前中心的距离            val dist = Vectors.sqdist(probVector, centerVector)            (predictK, word, dist)        }).toSeq        val distRdd = spark.sparkContext.parallelize(distData)        val groupData = distRdd.map(row => (row._1, (row._2, row._3))).groupByKey()        // 打印距离每个中心的10个点        groupData.map(row => {            (row._1, row._2.toList.sortWith((a, b) => a._2 < b._2).take(10))        }).collect().foreach(row => {            row._2.foreach(                row2 => println(s""${row._1}\t${row2._1}\t${row2._2}"")            )        }) 然而，查看数据，并不能得到为啥这么分类，聚类的结果不好分析~~ 参考文章：用手肘法选出最佳的kmeans的K值：https://blog.csdn.net/qq_15738501/article/details/79036255K-MEANS-SPARK文档：https://spark.apache.org/docs/2.2.0/mllib-clustering.html#k-means","['使用', 'kmeans', 'word2vec', '输出', '聚类', 'word2vec', '产出', '每个', '词语', '权重', '向量', '使用', '这个', '向量', '可以', '直接', '所有', '词语', '聚类', '以下', '代码', 'word2vec', 'model', '作为', '输入', '进行', 'kmeans', '训练', '同时', '进行', '迭代', '计算', '选出', 'wssse', '最小', 'word2vec', '结果', '作为', 'kmeans', '输入', '进行', '聚类', '进行', '多次', '迭代', '选出', 'wssse', '最小', 'param', 'spark', 'param', 'model', 'def', 'word2vectokmeans', 'spark', 'sparksession', 'model', 'org', 'apache', 'spark', 'mllib', 'feature', 'word2vecmodel', 'import', 'org', 'apache', 'spark', 'mllib', 'clustering', 'kmeans', 'kmeansmodel', 'import', 'org', 'apache', 'spark', 'mllib', 'linalg', 'vectors', 'val', 'parseddata', 'data', 'map', 'vectors', 'dense', 'split', 'map', '_.', 'todouble', 'cache', 'val', 'parseddata', 'model', 'getvectors', 'map', 'row', 'vectors', 'dense', 'row', '._', 'map', '_.', 'todouble', 'toseq', 'val', 'parseddatardd', 'spark', 'sparkcontext', 'parallelize', 'parseddata', 'cache', 'cluster', 'the', 'data', 'into', 'two', 'classes', 'using', 'kmeans', 'val', 'numklist', 'to', '20', 'numklist', 'foreach', 'val', 'numiterations', '50', 'val', 'clusters', 'kmeans', 'train', 'parseddatardd', 'numiterations', 'evaluate', 'clustering', 'by', 'computing', 'within', 'set', 'sum', 'of', 'squared', 'errors', 'val', 'wssse', 'clusters', 'computecost', 'parseddatardd', 'println', 'within', 'set', 'sum', 'of', 'squared', 'errors', 'wssse', '这里', '使用', 'mllib', '库算', '出来', 'wssse', '对应', '关系', '2737409.97935174433680667', '17178079424646796.95862099535621979', '8313877946600079.29481542747583517', '9018185788568308.93915777589558225', '364393443510553948.31711242811548844', '816332791912534551.224984812313530924', '490348819214525710.927285733915523946', '1744262096516516929.8587020234617511611', '249029313118510014.9337205022519503478', '8160144274620500293.188117236', '使用', '如下', '代码', '进行', '绘图', 'coding', 'utf8import', 'matplotlib', 'pyplot', 'as', 'pltx', 'wssse', 'for', 'line', 'in', 'open', 'kmeans', 'wssse', 'txt', 'line', 'line', 'fields', 'line', 'split', 'if', 'len', 'fields', 'continue', 'append', 'int', 'fields', 'wssse', 'append', 'float', 'fields', 'plt', 'xlabel', 'plt', 'ylabel', 'sse', 'plt', 'plot', 'wssse', 'plt', 'show', '图片', '如下', '不是', '完美', '手肘', '不过', '拐点', '大概', '位置', '或者', '聚类', '比较', '合适', '可以', '打印', '距离', '每个', '中心', '10', '数据', 'val', 'distdata', 'model', 'getvectors', 'map', 'row', 'val', 'word', 'row', '._', 'val', 'probvector', 'vectors', 'dense', 'row', '._', 'map', '_.', 'todouble', 'val', 'predictk', 'clusters', 'predict', 'probvector', 'val', 'centervector', 'clusters', 'clustercenters', 'predictk', '计算', '当前', '当前', '中心', '距离', 'val', 'dist', 'vectors', 'sqdist', 'probvector', 'centervector', 'predictk', 'word', 'dist', 'toseq', 'val', 'distrdd', 'spark', 'sparkcontext', 'parallelize', 'distdata', 'val', 'groupdata', 'distrdd', 'map', 'row', 'row', '._', 'row', '._', 'row', '._', 'groupbykey', '打印', '距离', '每个', '中心', '10', '个点', 'groupdata', 'map', 'row', 'row', '._', 'row', '._', 'tolist', 'sortwith', '._', '._', 'take', '10', 'collect', 'foreach', 'row', 'row', '._', 'foreach', 'row2', 'println', 'row', '._', 'row2', '._', 'row2', '._', '然而', '查看', '数据', '不能', '得到', '为啥', '这么', '分类', '聚类', '结果', '不好', '分析', '参考', '文章', '手肘', '选出', '最佳', 'kmeans', 'https', 'blog', 'csdn', 'net', 'qq', '15738501', 'article', 'details', '79036255k', 'means', 'spark', '文档', 'https', 'spark', 'apache', 'org', 'docs', '2.2', 'mllib', 'clustering', 'html', 'means']","[[-0.22891199 -0.08314505  0.24623677  0.13900037  0.24879205 -0.3525437
  -0.09975541  0.44051716 -0.07522889 -0.12850415 -0.03457884 -0.36075001
  -0.10822655  0.48820883  0.15759471 -0.10900588 -0.10599781 -0.019858
  -0.05111643 -0.48594176 -0.05483146  0.26161245 -0.06449061 -0.20696004
   0.03616116 -0.41814688 -0.28782104  0.0250727  -0.21559771 -0.07135484
   0.15462996  0.00346547  0.01221668 -0.10761344 -0.16421732  0.31974593
  -0.19174861 -0.27803314  0.07439273 -0.67306157 -0.11412671 -0.53223582
  -0.07686858 -0.00663891 -0.11689916 -0.22568317 -0.22353851  0.31998867
  -0.16208838  0.43676408  0.10979    -0.26534518 -0.12211165 -0.1679208
  -0.02207414  0.36464398  0.12453391 -0.09584604  0.10892865 -0.13482733
   0.10203525  0.20568769  0.01130831  0.07492097 -0.35102337  0.05672919
   0.04933618 -0.02512045 -0.28494734  0.40371426  0.0572674  -0.144727
   0.35438386 -0.30932119  0.49730266  0.27540976  0.13276509 -0.1615001
  -0.29411372 -0.09613136  0.00591441  0.0518495  -0.11786775  0.37393919
  -0.28105159  0.18894044 -0.26047617  0.42340452  0.45762368  0.15960133
   0.19889997  0.10423635  0.32503089  0.17372469  0.1848725   0.32717952
   0.11605869 -0.28420172  0.00688123 -0.1144482 ]]"
2177,使用PaddlePaddle搭建卷积网络做文本数据分类,"PaddlePaddle是百度开源的深度学习框架，采用和cafee类似的layer搭建的方式构建深度神经网络，当前也在试图发布fluid新版本提供算子级别的网络构建技能，最近有一个文本分类的需求，试着使用paddle进行了实验，对paddle的使用体验为：文档不全，特别简陋模型库比较好，即使不懂的用法，可以搜索代码查找用法；github的问题回复比较及时感觉Paddle是在大力推广和发展的，如果有Paddle同学看到的话，建议把文档补全点；我的输入数据包含两部分：用户画像，包括用户的性别、年龄、职业等信息；用户搜索词列表，保持时间序列，进行分词、停用词过滤等处理；将类别信息、词语信息，进行StringIndexer之后（使用的Spark进行），输入数据如下所示：10673111069|36027|15862|11069|48152|36027|11069|33830|48152|36027|11069|50730|11069|50730|11069|47002110673162151|21292|21666|53679|21292|21666|34384|26807|53680|381|2992|64045|2992|69922|62902|33460其中单个数字列都是画像的属性分类，以|分割的数字列表代表词语列表，最后一列代表分类目标整个代码的实现包含三部分，分别是数据读入reader的实现、训练算法的实现、使用算法的实现；数据读入reader的实现# coding:utf8""""""实现paddle需要的读取数据reader的实现其中包括如下部分：1、读取整个数据；2、分割成训练集和测试集；3、提供paddle可以直接使用的reader()函数，通过yield的方式抛出数据""""""import randomdef read_datas():    """"""    读取所有的数据    :return:    """"""    fpath = ""./inputdatas_numbers.txt""    results_datas = []    for line in open(fpath):        line = line[:-1]        if not line or len(line) == 0:            continue        fields = line.split(""\t"")        if len(fields) != 8: continue        # 按属性提取        gender, age, lifeStage, trade, educationalLevel, job, words, label = fields        results_datas.append([            int(float(gender)),            int(float(age)),            int(float(lifeStage)),            int(float(trade)),            int(float(educationalLevel)),            int(float(job)),            # 注意这里，paddle的序列数据，sequence_data，其实是元素为list的元素            [int(x) for x in words.split(""|"")],            int(float(label))        ])    return results_datasdef split_data_train_test(results_datas, rand_seed=0, test_ratio=0.1):    """"""    进行训练数据和测试数据的拆分，这里使用随机的方法进行    :param results_datas:     :param rand_seed:     :param test_ratio:     :return:     """"""    rand_seed = 37    rand = random.Random(x=rand_seed)    train_data, test_data = [], []    for line in results_datas:        if rand.random() > test_ratio:            train_data.append(line)        else:            test_data.append(line)    return train_data, test_datadef split_data_train_test_avg(results_datas, test_ratio=0.03):    """"""    按词典顺序倒叙排列，然后均匀采样    :param results_datas:    :param rand_seed:    :param test_ratio:    :return:    """"""    total_len = len(results_datas)    test_datas_cnt = total_len * test_ratio    sample_gap = int(total_len * 1.0 / test_datas_cnt)    sort_datas = sorted(results_datas, cmp=lambda x, y: int(x[7]) < int(y[7]))    train_data, test_data = [], []    for i in range(len(sort_datas)):        if i % sample_gap == 0:            test_data.append(sort_datas[i])        else:            train_data.append(sort_datas[i])    return train_data, test_dataresults_datas = read_datas()print ""数据读取完毕:"", len(results_datas)train_data, test_data = split_data_train_test_avg(results_datas, 0.03)print ""data read over.""print ""训练集合数据大小："", len(train_data)print ""测试集合数据大小："", len(test_data)def train_reader():    """"""    paddle需要，用于训练数据的提取    :return:    """"""    for line in train_data:        yield linedef test_reader():    """"""    paddle需要，用于训练数据的提取    :return:    """"""    for line in test_data:        yield lineif __name__ == ""__main__"":    print len(train_data)    print len(test_data)其中需要注意的地方，就是paddle的sequence_data的含义，就是一个list，所以对于query的数据列表，需要处理成[x,y,list(),z]中的子元素list的形式。查看一下本脚本的运行结果：数据读取完毕: 20088data read over.训练集合数据大小： 19479测试集合数据大小： 60919479609[1, 0, 6, 7, 3, 1, [62151, 21292, 21666, 53679, 21292, 21666, 34384, 26807, 53680, 381, 2992, 64045, 2992, 69922, 62902, 3346], 0] 训练算法的实现# coding:utf8""""""使用paddle实现深层网络""""""import osimport paddle.v2 as paddleimport reader_paddle_sequenceimport sys# 该字典是输入数据的模式，比如通过fileds[feeding[""gender""]]就可以得到gender的数值feeding = {    'gender': 0,    'age': 1,    'lifeStage': 2,    'trade': 3,    'educationalLevel': 4,    'job': 5,    'words': 6,    'label': 7}def convr_perceptron():    """"""    搭配而成的卷积网络    :return:    """"""    # 获取卷积层    conv1, conv2 = get_words_conv()    # 获取画像特征层    features_fc = get_usr_combined_features()    # concat卷积层和画像层    concat_layer = paddle.layer.concat(        input=[            features_fc, conv1, conv2        ])    # 加入dropout layer，防止过拟合    dropout_layer = paddle.layer.dropout(input=concat_layer, dropout_rate=0.6)    # 加入最终的分类层，使用softmax，分类成6个类别    predict = paddle.layer.fc(input=dropout_layer, size=6, act=paddle.activation.Softmax())    return predictdef get_usr_combined_features():    """"""    用户画像的特征，都进入FC    :return:    """"""    gender = paddle.layer.data(name='gender', type=paddle.data_type.integer_value(2))    gender_emb = paddle.layer.embedding(input=gender, size=16)    gender_fc = paddle.layer.fc(input=gender_emb, size=16)    age = paddle.layer.data(name='age', type=paddle.data_type.integer_value(6))    age_emb = paddle.layer.embedding(input=age, size=16)    age_fc = paddle.layer.fc(input=age_emb, size=16)    lifeStage = paddle.layer.data(name='lifeStage', type=paddle.data_type.integer_value(10))    lifeStage_emb = paddle.layer.embedding(input=lifeStage, size=16)    lifeStage_fc = paddle.layer.fc(input=lifeStage_emb, size=16)    trade = paddle.layer.data(name='trade', type=paddle.data_type.integer_value(23))    trade_emb = paddle.layer.embedding(input=trade, size=16)    trade_fc = paddle.layer.fc(input=trade_emb, size=16)    educationalLevel = paddle.layer.data(name='educationalLevel', type=paddle.data_type.integer_value(4))    educationalLevel_emb = paddle.layer.embedding(input=educationalLevel, size=16)    educationalLevel_fc = paddle.layer.fc(input=educationalLevel_emb, size=16)    job = paddle.layer.data(name='job', type=paddle.data_type.integer_value(6))    job_emb = paddle.layer.embedding(input=job, size=16)    job_fc = paddle.layer.fc(input=job_emb, size=16)    usr_combined_features = paddle.layer.fc(        input=[gender_fc, age_fc, lifeStage_fc, trade_fc, educationalLevel_fc, job_fc],        size=200,        act=paddle.activation.Tanh())    return usr_combined_featuresdef get_words_conv():    """"""    words的输入，进入conv    :return:    """"""    # 词表大小，这个数字来自于分词后进入list的size    word_dict_len = 73614    emb_dim = 8    hid_dim = 256    # 注意这里的integer_value_sequence，意思是[1,2,3,4]这种形式    words = paddle.layer.data(name='words', type=paddle.data_type.integer_value_sequence(word_dict_len))    words_emb = paddle.layer.embedding(input=words, size=emb_dim)    # 搭建卷积网络，这类可以是多个卷积层    conv1 = paddle.networks.sequence_conv_pool(input=words_emb, context_len=3, hidden_size=hid_dim)    conv2 = paddle.networks.sequence_conv_pool(input=words_emb, context_len=4, hidden_size=hid_dim)    return conv1, conv2def train():    """"""    执行训练    """"""    # 初始化paddle    paddle.init(use_gpu=False, trainer_count=1)    # network config    y = paddle.layer.data(name='label', type=paddle.data_type.integer_value(6))    # 获取网络预测结果    y_predict = convr_perceptron()    # 设定cost为分类误差    cost = paddle.layer.classification_cost(input=y_predict, label=y)    # 随机初始化参数    parameters = paddle.parameters.create(cost)    # 创建优化器，主要是设定L2的正则化和学习率    adam_optimizer = paddle.optimizer.Adam(        learning_rate=2e-4,        regularization=paddle.optimizer.L2Regularization(rate=0.9),        model_average=paddle.optimizer.ModelAverage(average_window=0.5, max_average_window=10000))    # 使用SGD做训练器    trainer = paddle.trainer.SGD(cost=cost, parameters=parameters, update_equation=adam_optimizer)    # 报错拓扑结构，这个拓扑结构将来回用于infer    inference_topology = paddle.topology.Topology(layers=y_predict)    with open(""inference_topology_conv.pkl"", 'wb') as f:        inference_topology.serialize_for_inference(f)    # 保存训练误差和测试误差，用于将来的曲线绘制    fout_pass_err = open(""train_pass_error_conv.txt"", ""w"")    fout_pass_err.write(""passid\ttest_data_accurcy\ttrain_data_accurcy\n"")    # 保存中间信息    def event_handler(event):        if isinstance(event, paddle.event.EndIteration):            if event.batch_id % 100 == 0:                print ""\nPass %d, Batch %d, Cost %f, %s"" % (                    event.pass_id, event.batch_id, event.cost, event.metrics)            else:                sys.stdout.write('.')                sys.stdout.flush()        if isinstance(event, paddle.event.EndPass):            with open('./params_pass_conv_%d.tar' % event.pass_id, 'w') as f:                trainer.save_parameter_to_tar(f)            result_test = trainer.test(                reader=paddle.batch(                    paddle.reader.shuffle(reader_paddle_sequence.test_reader, buf_size=50000),                    batch_size=100),                feeding=feeding)            print ""\nTest with Pass %d, %s"" % (event.pass_id, result_test.metrics[""classification_error_evaluator""])            result_train = trainer.test(                reader=paddle.batch(                    paddle.reader.shuffle(reader_paddle_sequence.train_reader, buf_size=50000),                    batch_size=100),                feeding=feeding)            print ""\nTrain with Pass %d, %s"" % (event.pass_id, result_train.metrics[""classification_error_evaluator""])            fout_pass_err.write(""%s\t%s\t%s\n"" % (                str(event.pass_id),                str(float(result_test.metrics[""classification_error_evaluator""])),                str(float(result_train.metrics[""classification_error_evaluator""]))            )                                )            fout_pass_err.flush()    # 执行训练    trainer.train(        reader=paddle.batch(            paddle.reader.shuffle(reader_paddle_sequence.train_reader, buf_size=50000),            batch_size=100),        feeding=feeding,        event_handler=event_handler,        num_passes=300)    fout_pass_err.flush()    fout_pass_err.close()if __name__ == '__main__':    train() 训练后，会在当前目录下生成如下文件：-rw-r--r--  1 baidu  staff   2.4M May 22 16:06 params_pass_conv_0.tar-rw-r--r--  1 baidu  staff   2.4M May 22 16:06 params_pass_conv_1.tar-rw-r--r--  1 baidu  staff   2.4M May 22 16:07 params_pass_conv_2.tar-rw-r--r--  1 baidu  staff   6.0K May 17 16:14 inference_topology.pkl 同时训练过程会打印过程信息：I0523 15:53:02.666565 2921214848 Util.cpp:166] commandline:  --use_gpu=False --trainer_count=1 I0523 15:53:02.690153 2921214848 GradientMachine.cpp:94] Initing parameters..I0523 15:53:02.708933 2921214848 GradientMachine.cpp:101] Init parameters done.Pass 0, Batch 0, Cost 1.769033, {'classification_error_evaluator': 0.7699999809265137}...................................................................................................Pass 0, Batch 100, Cost 1.773714, {'classification_error_evaluator': 0.8100000023841858}..............................................................................................Test with Pass 0, 0.750410497189Train with Pass 0, 0.740233063698Pass 1, Batch 0, Cost 1.779777, {'classification_error_evaluator': 0.75}...................................................................................................Pass 1, Batch 100, Cost 1.677371, {'classification_error_evaluator': 0.7200000286102295}..............................................................................................Test with Pass 1, 0.610837459564Train with Pass 1, 0.5671235919 试了试GPU和CPU的区别，真的发现GPU那是好多倍的速度呀，深度学习是建立在GPU上的技术果然不差；同时可以试着打印训练集和错误集的准确率曲线： 可以看到，在12轮的时候打到了局部最优，之后出现过拟合；整体效果最好的是88%准确率；在尝试多次调整dropout和l2正则化参数后依然是这个准确率，因此停止了调整；有待收集更多的数据才可以提升准确率；利用模型做预测既然已经训练完毕，那么怎么使用呢，看代码# coding:utf8""""""使用模型做预测""""""import osimport paddle.v2 as paddleimport reader_paddle_sequenceimport sys# 需要和训练的时候的feeding一样feeding = {    'gender': 0,    'age': 1,    'lifeStage': 2,    'trade': 3,    'educationalLevel': 4,    'job': 5,    'words': 6,    'label': 7}def test():    paddle.init(use_gpu=False, trainer_count=1)    # 读取最优的那个参数集文件    tarfn = ""params_pass_conv_1.tar""    # 读取模型拓扑文件    topology_filepath = ""inference_topology_conv.pkl""    # 加载参数和拓扑到一个infer对象    with open(tarfn) as param_f, open(topology_filepath) as topo_f:        params = paddle.parameters.Parameters.from_tar(param_f)        inferer = paddle.inference.Inference(parameters=params, fileobj=topo_f)    # 使用测试集合的一条数据，进行Infer    # 这也说明了，对于要预测的输入，需要处理成和训练集、测试集一样的格式才可以    reader = reader_paddle_sequence.test_reader    for k in reader():        print k[:-1]        res = inferer.infer(input=[k,], feeding=feeding)        print res        breakif __name__ == '__main__':    # 两个选项    test() 打印一下运行结果：I0523 16:00:56.536753 2921214848 Util.cpp:166] commandline:  --use_gpu=False --trainer_count=1 [1, 0, 6, 7, 3, 1, [11069, 36027, 15862, 11069, 48152, 36027, 11069, 33830, 48152, 36027, 11069, 50730, 11069, 50730, 11069, 47002]][[0.25260347 0.15734845 0.1648475  0.17209302 0.14046918 0.11263847]] 可以看到最后一行打印了预测的6个分类的概率；总结以上讲述了使用paddle搭建神经网络的整个流程，包括数据读取、网络搭建、训练、模型应用等方面；对于已经训练好的模型，可以用python flask或者django进行加载和对外提供远程调用；其实一通百通，当一个网络搭建和实现之后，对paddle都有了很好的理解，自己同时尝试了全连接网络、LSTM网络，都和卷积网络非常类似，只要替换卷积层部分即可；对于paddle，虽然当前还不完善，但毕竟是国内的深度学习框架，同时也能够实现业务目标，这一点还是要继续支持滴；附带Paddle链接：最新文档：http://www.paddlepaddle.org/docs/develop/documentation/zh/getstarted/index_cn.html开放模型库：https://github.com/PaddlePaddle/models教程：https://github.com/PaddlePaddle/book中文BOOK：http://www.paddlepaddle.org/docs/develop/book/04.word2vec/index.cn.html本文链接：http://crazyant.net/2177.html，转载请注明来源。","['使用', 'paddlepaddle', '搭建', '卷积', '网络', '文本', '数据', '分类', 'paddlepaddle', '百度', '开源', '深度', '学习', '框架', '采用', 'cafee', '类似', 'layer', '搭建', '方式', '构建', '深度', '神经网络', '当前', '试图', '发布', 'fluid', '版本', '提供', '算子', '级别', '网络', '构建', '技能', '最近', '一个', '文本', '分类', '需求', '试着', '使用', 'paddle', '进行', '实验', 'paddle', '使用', '体验', '文档', '不全', '特别', '简陋', '模型库', '比较', '即使', '用法', '可以', '搜索', '代码', '查找', '用法', 'github', '问题', '回复', '比较', '及时', '感觉', 'paddle', '大力推广', '发展', '如果', 'paddle', '同学', '看到', '的话', '建议', '文档', '补全', '输入', '数据', '包含', '部分', '用户', '画像', '包括', '用户', '性别', '年龄', '职业', '信息', '用户', '搜索词', '列表', '保持', '时间', '序列', '进行', '分词', '用词', '过滤', '处理', '类别', '信息', '词语', '信息', '进行', 'stringindexer', '之后', '使用', 'spark', '进行', '输入', '数据', '如下', '所示', '10673111069', '36027', '15862', '11069', '48152', '36027', '11069', '33830', '48152', '36027', '11069', '50730', '11069', '50730', '11069', '47002110673162151', '21292', '21666', '53679', '21292', '21666', '34384', '26807', '53680', '381', '2992', '64045', '2992', '69922', '62902', '33460', '其中', '单个', '数字', '画像', '属性', '分类', '分割', '数字', '列表', '代表', '词语', '列表', '最后', '一列', '代表', '分类', '目标', '整个', '代码', '实现', '包含', '部分', '分别', '数据', '读入', 'reader', '实现', '训练', '算法', '实现', '使用', '算法', '实现', '数据', '读入', 'reader', '实现', 'coding', 'utf8', '实现', 'paddle', '需要', '读取数据', 'reader', '实现', '其中', '包括', '如下', '部分', '读取', '整个', '数据', '分割', '训练', '测试', '提供', 'paddle', '可以', '直接', '使用', 'reader', '函数', '通过', 'yield', '方式', '抛出', '数据', 'import', 'randomdef', 'read', 'datas', '读取', '所有', '数据', 'return', 'fpath', 'inputdatas', 'numbers', 'txt', 'results', 'datas', 'for', 'line', 'in', 'open', 'fpath', 'line', 'line', 'if', 'not', 'line', 'or', 'len', 'line', 'continue', 'fields', 'line', 'split', 'if', 'len', 'fields', 'continue', '属性', '提取', 'gender', 'age', 'lifestage', 'trade', 'educationallevel', 'job', 'words', 'label', 'fields', 'results', 'datas', 'append', 'int', 'float', 'gender', 'int', 'float', 'age', 'int', 'float', 'lifestage', 'int', 'float', 'trade', 'int', 'float', 'educationallevel', 'int', 'float', 'job', '注意', '这里', 'paddle', '序列', '数据', 'sequence', 'data', '其实', '元素', 'list', '元素', 'int', 'for', 'in', 'words', 'split', 'int', 'float', 'label', 'return', 'results', 'datasdef', 'split', 'data', 'train', 'test', 'results', 'datas', 'rand', 'seed', 'test', 'ratio', '0.1', '进行', '训练', '数据', '测试数据', '拆分', '这里', '使用', '随机', '方法', '进行', 'param', 'results', 'datas', 'param', 'rand', 'seed', 'param', 'test', 'ratio', 'return', 'rand', 'seed', '37', 'rand', 'random', 'random', 'rand', 'seed', 'train', 'data', 'test', 'data', 'for', 'line', 'in', 'results', 'datas', 'if', 'rand', 'random', 'test', 'ratio', 'train', 'data', 'append', 'line', 'else', 'test', 'data', 'append', 'line', 'return', 'train', 'data', 'test', 'datadef', 'split', 'data', 'train', 'test', 'avg', 'results', 'datas', 'test', 'ratio', '0.03', '词典', '顺序', '倒叙', '排列', '然后', '均匀', '采样', 'param', 'results', 'datas', 'param', 'rand', 'seed', 'param', 'test', 'ratio', 'return', 'total', 'len', 'len', 'results', 'datas', 'test', 'datas', 'cnt', 'total', 'len', 'test', 'ratio', 'sample', 'gap', 'int', 'total', 'len', '1.0', 'test', 'datas', 'cnt', 'sort', 'datas', 'sorted', 'results', 'datas', 'cmp', 'lambda', 'int', 'int', 'train', 'data', 'test', 'data', 'for', 'in', 'range', 'len', 'sort', 'datas', 'if', 'sample', 'gap', 'test', 'data', 'append', 'sort', 'datas', 'else', 'train', 'data', 'append', 'sort', 'datas', 'return', 'train', 'data', 'test', 'dataresults', 'datas', 'read', 'datas', 'print', '数据', '读取', '完毕', 'len', 'results', 'datas', 'train', 'data', 'test', 'data', 'split', 'data', 'train', 'test', 'avg', 'results', 'datas', '0.03', 'print', 'data', 'read', 'over', 'print', '训练', '集合', '数据', '大小', 'len', 'train', 'data', 'print', '测试', '集合', '数据', '大小', 'len', 'test', 'data', 'def', 'train', 'reader', 'paddle', '需要', '用于', '训练', '数据', '提取', 'return', 'for', 'line', 'in', 'train', 'data', 'yield', 'linedef', 'test', 'reader', 'paddle', '需要', '用于', '训练', '数据', '提取', 'return', 'for', 'line', 'in', 'test', 'data', 'yield', 'lineif', '__', 'name', '__', '__', 'main', '__', 'print', 'len', 'train', 'data', 'print', 'len', 'test', 'data', '其中', '需要', '注意', '地方', '就是', 'paddle', 'sequence', 'data', '含义', '就是', '一个', 'list', '所以', '对于', 'query', '数据', '列表', '需要', '处理', 'list', '元素', 'list', '形式', '查看', '一下', '脚本', '运行', '结果', '数据', '读取', '完毕', '20088data', 'read', 'over', '训练', '集合', '数据', '大小', '19479', '测试', '集合', '数据', '大小', '60919479609', '62151', '21292', '21666', '53679', '21292', '21666', '34384', '26807', '53680', '381', '2992', '64045', '2992', '69922', '62902', '3346', '训练', '算法', '实现', 'coding', 'utf8', '使用', 'paddle', '实现', '深层', '网络', 'import', 'osimport', 'paddle', 'v2', 'as', 'paddleimport', 'reader', 'paddle', 'sequenceimport', 'sys', '字典', '输入', '数据', '模式', '比如', '通过', 'fileds', 'feeding', 'gender', '可以', '得到', 'gender', '数值', 'feeding', 'gender', 'age', 'lifestage', 'trade', 'educationallevel', 'job', 'words', 'label', 'def', 'convr', 'perceptron', '搭配', '而成', '卷积', '网络', 'return', '获取', '卷积', 'conv1', 'conv2', 'get', 'words', 'conv', '获取', '画像', '特征', 'features', 'fc', 'get', 'usr', 'combined', 'features', 'concat', '卷积', '画像', 'concat', 'layer', 'paddle', 'layer', 'concat', 'input', 'features', 'fc', 'conv1', 'conv2', '加入', 'dropout', 'layer', '防止', '拟合', 'dropout', 'layer', 'paddle', 'layer', 'dropout', 'input', 'concat', 'layer', 'dropout', 'rate', '0.6', '加入', '最终', '分类', '使用', 'softmax', '分类', '类别', 'predict', 'paddle', 'layer', 'fc', 'input', 'dropout', 'layer', 'size', 'act', 'paddle', 'activation', 'softmax', 'return', 'predictdef', 'get', 'usr', 'combined', 'features', '用户', '画像', '特征', '进入', 'fc', 'return', 'gender', 'paddle', 'layer', 'data', 'name', 'gender', 'type', 'paddle', 'data', 'type', 'integer', 'value', 'gender', 'emb', 'paddle', 'layer', 'embedding', 'input', 'gender', 'size', '16', 'gender', 'fc', 'paddle', 'layer', 'fc', 'input', 'gender', 'emb', 'size', '16', 'age', 'paddle', 'layer', 'data', 'name', 'age', 'type', 'paddle', 'data', 'type', 'integer', 'value', 'age', 'emb', 'paddle', 'layer', 'embedding', 'input', 'age', 'size', '16', 'age', 'fc', 'paddle', 'layer', 'fc', 'input', 'age', 'emb', 'size', '16', 'lifestage', 'paddle', 'layer', 'data', 'name', 'lifestage', 'type', 'paddle', 'data', 'type', 'integer', 'value', '10', 'lifestage', 'emb', 'paddle', 'layer', 'embedding', 'input', 'lifestage', 'size', '16', 'lifestage', 'fc', 'paddle', 'layer', 'fc', 'input', 'lifestage', 'emb', 'size', '16', 'trade', 'paddle', 'layer', 'data', 'name', 'trade', 'type', 'paddle', 'data', 'type', 'integer', 'value', '23', 'trade', 'emb', 'paddle', 'layer', 'embedding', 'input', 'trade', 'size', '16', 'trade', 'fc', 'paddle', 'layer', 'fc', 'input', 'trade', 'emb', 'size', '16', 'educationallevel', 'paddle', 'layer', 'data', 'name', 'educationallevel', 'type', 'paddle', 'data', 'type', 'integer', 'value', 'educationallevel', 'emb', 'paddle', 'layer', 'embedding', 'input', 'educationallevel', 'size', '16', 'educationallevel', 'fc', 'paddle', 'layer', 'fc', 'input', 'educationallevel', 'emb', 'size', '16', 'job', 'paddle', 'layer', 'data', 'name', 'job', 'type', 'paddle', 'data', 'type', 'integer', 'value', 'job', 'emb', 'paddle', 'layer', 'embedding', 'input', 'job', 'size', '16', 'job', 'fc', 'paddle', 'layer', 'fc', 'input', 'job', 'emb', 'size', '16', 'usr', 'combined', 'features', 'paddle', 'layer', 'fc', 'input', 'gender', 'fc', 'age', 'fc', 'lifestage', 'fc', 'trade', 'fc', 'educationallevel', 'fc', 'job', 'fc', 'size', '200', 'act', 'paddle', 'activation', 'tanh', 'return', 'usr', 'combined', 'featuresdef', 'get', 'words', 'conv', 'words', '输入', '进入', 'conv', 'return', '词表', '大小', '这个', '数字', '来自', '分词', '进入', 'list', 'size', 'word', 'dict', 'len', '73614', 'emb', 'dim', 'hid', 'dim', '256', '注意', '这里', 'integer', 'value', 'sequence', '意思', '这种', '形式', 'words', 'paddle', 'layer', 'data', 'name', 'words', 'type', 'paddle', 'data', 'type', 'integer', 'value', 'sequence', 'word', 'dict', 'len', 'words', 'emb', 'paddle', 'layer', 'embedding', 'input', 'words', 'size', 'emb', 'dim', '搭建', '卷积', '网络', '可以', '多个', '卷积', 'conv1', 'paddle', 'networks', 'sequence', 'conv', 'pool', 'input', 'words', 'emb', 'context', 'len', 'hidden', 'size', 'hid', 'dim', 'conv2', 'paddle', 'networks', 'sequence', 'conv', 'pool', 'input', 'words', 'emb', 'context', 'len', 'hidden', 'size', 'hid', 'dim', 'return', 'conv1', 'conv2def', 'train', '执行', '训练', '初始化', 'paddle', 'paddle', 'init', 'use', 'gpu', 'false', 'trainer', 'count', 'network', 'config', 'paddle', 'layer', 'data', 'name', 'label', 'type', 'paddle', 'data', 'type', 'integer', 'value', '获取', '网络', '预测', '结果', 'predict', 'convr', 'perceptron', '设定', 'cost', '分类', '误差', 'cost', 'paddle', 'layer', 'classification', 'cost', 'input', 'predict', 'label', '随机', '初始化', '参数', 'parameters', 'paddle', 'parameters', 'create', 'cost', '创建', '优化', '主要', '设定', 'l2', '正则', '学习', 'adam', 'optimizer', 'paddle', 'optimizer', 'adam', 'learning', 'rate', '2e', 'regularization', 'paddle', 'optimizer', 'l2regularization', 'rate', '0.9', 'model', 'average', 'paddle', 'optimizer', 'modelaverage', 'average', 'window', '0.5', 'max', 'average', 'window', '10000', '使用', 'sgd', '训练器', 'trainer', 'paddle', 'trainer', 'sgd', 'cost', 'cost', 'parameters', 'parameters', 'update', 'equation', 'adam', 'optimizer', '报错', '拓扑', '结构', '这个', '拓扑', '结构', '来回', '用于', 'infer', 'inference', 'topology', 'paddle', 'topology', 'topology', 'layers', 'predict', 'with', 'open', 'inference', 'topology', 'conv', 'pkl', 'wb', 'as', 'inference', 'topology', 'serialize', 'for', 'inference', '保存', '训练', '误差', '测试', '误差', '用于', '将来', '曲线', '绘制', 'fout', 'pass', 'err', 'open', 'train', 'pass', 'error', 'conv', 'txt', 'fout', 'pass', 'err', 'write', 'passid', 'ttest', 'data', 'accurcy', 'ttrain', 'data', 'accurcy', '保存', '中间', '信息', 'def', 'event', 'handler', 'event', 'if', 'isinstance', 'event', 'paddle', 'event', 'enditeration', 'if', 'event', 'batch', 'id', '100', 'print', 'npass', 'batch', 'cost', 'event', 'pass', 'id', 'event', 'batch', 'id', 'event', 'cost', 'event', 'metrics', 'else', 'sys', 'stdout', 'write', 'sys', 'stdout', 'flush', 'if', 'isinstance', 'event', 'paddle', 'event', 'endpass', 'with', 'open', 'params', 'pass', 'conv', '_%', 'tar', 'event', 'pass', 'id', 'as', 'trainer', 'save', 'parameter', 'to', 'tar', 'result', 'test', 'trainer', 'test', 'reader', 'paddle', 'batch', 'paddle', 'reader', 'shuffle', 'reader', 'paddle', 'sequence', 'test', 'reader', 'buf', 'size', '50000', 'batch', 'size', '100', 'feeding', 'feeding', 'print', 'ntest', 'with', 'pass', 'event', 'pass', 'id', 'result', 'test', 'metrics', 'classification', 'error', 'evaluator', 'result', 'train', 'trainer', 'test', 'reader', 'paddle', 'batch', 'paddle', 'reader', 'shuffle', 'reader', 'paddle', 'sequence', 'train', 'reader', 'buf', 'size', '50000', 'batch', 'size', '100', 'feeding', 'feeding', 'print', 'ntrain', 'with', 'pass', 'event', 'pass', 'id', 'result', 'train', 'metrics', 'classification', 'error', 'evaluator', 'fout', 'pass', 'err', 'write', 't%', 't%', 'str', 'event', 'pass', 'id', 'str', 'float', 'result', 'test', 'metrics', 'classification', 'error', 'evaluator', 'str', 'float', 'result', 'train', 'metrics', 'classification', 'error', 'evaluator', 'fout', 'pass', 'err', 'flush', '执行', '训练', 'trainer', 'train', 'reader', 'paddle', 'batch', 'paddle', 'reader', 'shuffle', 'reader', 'paddle', 'sequence', 'train', 'reader', 'buf', 'size', '50000', 'batch', 'size', '100', 'feeding', 'feeding', 'event', 'handler', 'event', 'handler', 'num', 'passes', '300', 'fout', 'pass', 'err', 'flush', 'fout', 'pass', 'err', 'close', 'if', '__', 'name', '__', '__', 'main', '__', 'train', '训练', '当前目录', '生成', '如下', '文件', 'rw', '--', '--', 'baidu', 'staff', '2.4', 'may', '22', '16', '06', 'params', 'pass', 'conv', 'tar', 'rw', '--', '--', 'baidu', 'staff', '2.4', 'may', '22', '16', '06', 'params', 'pass', 'conv', 'tar', 'rw', '--', '--', 'baidu', 'staff', '2.4', 'may', '22', '16', '07', 'params', 'pass', 'conv', 'tar', 'rw', '--', '--', 'baidu', 'staff', '6.0', 'may', '17', '16', '14', 'inference', 'topology', 'pkl', '同时', '训练', '过程', '打印', '过程', '信息', 'i0523', '15', '53', '02.666565', '2921214848', 'util', 'cpp', '166', 'commandline', '--', 'use', 'gpu', 'false', '--', 'trainer', 'count', 'i0523', '15', '53', '02.690153', '2921214848', 'gradientmachine', 'cpp', '94', 'initing', 'parameters', '..', 'i0523', '15', '53', '02.708933', '2921214848', 'gradientmachine', 'cpp', '101', 'init', 'parameters', 'done', 'pass', 'batch', 'cost', '1.769033', 'classification', 'error', 'evaluator', '0.7699999809265137', '...................................................................................................', 'pass', 'batch', '100', 'cost', '1.773714', 'classification', 'error', 'evaluator', '0.8100000023841858', '..............................................................................................', 'test', 'with', 'pass', '0.750410497189', 'train', 'with', 'pass', '0.740233063698', 'pass', 'batch', 'cost', '1.779777', 'classification', 'error', 'evaluator', '0.75', '...................................................................................................', 'pass', 'batch', '100', 'cost', '1.677371', 'classification', 'error', 'evaluator', '0.7200000286102295', '..............................................................................................', 'test', 'with', 'pass', '0.610837459564', 'train', 'with', 'pass', '0.5671235919', '试了试', 'gpu', 'cpu', '区别', '真的', '发现', 'gpu', '多倍', '速度', '深度', '学习', '建立', 'gpu', '技术', '果然', '不差', '同时', '可以', '试着', '打印', '训练', '错误', '准确率', '曲线', '可以', '看到', '12', '时候', '打到', '局部', '最优', '之后', '出现', '拟合', '整体', '效果', '最好', '88%', '准确率', '尝试', '多次', '调整', 'dropout', 'l2', '正则', '参数', '依然', '这个', '准确率', '因此', '停止', '调整', '有待', '收集', '数据', '可以', '提升', '准确率', '利用', '模型', '预测', '既然', '已经', '训练', '完毕', '那么', '怎么', '使用', '代码', 'coding', 'utf8', '使用', '模型', '预测', 'import', 'osimport', 'paddle', 'v2', 'as', 'paddleimport', 'reader', 'paddle', 'sequenceimport', 'sys', '需要', '训练', '时候', 'feeding', '一样', 'feeding', 'gender', 'age', 'lifestage', 'trade', 'educationallevel', 'job', 'words', 'label', 'def', 'test', 'paddle', 'init', 'use', 'gpu', 'false', 'trainer', 'count', '读取', '最优', '那个', '参数', '文件', 'tarfn', 'params', 'pass', 'conv', 'tar', '读取', '模型', '拓扑', '文件', 'topology', 'filepath', 'inference', 'topology', 'conv', 'pkl', '加载', '参数', '拓扑', '一个', 'infer', '对象', 'with', 'open', 'tarfn', 'as', 'param', 'open', 'topology', 'filepath', 'as', 'topo', 'params', 'paddle', 'parameters', 'parameters', 'from', 'tar', 'param', 'inferer', 'paddle', 'inference', 'inference', 'parameters', 'params', 'fileobj', 'topo', '使用', '测试', '集合', '一条', '数据', '进行', 'infer', '说明', '对于', '预测', '输入', '需要', '处理', '训练', '测试', '一样', '格式', '可以', 'reader', 'reader', 'paddle', 'sequence', 'test', 'reader', 'for', 'in', 'reader', 'print', 'res', 'inferer', 'infer', 'input', 'feeding', 'feeding', 'print', 'res', 'breakif', '__', 'name', '__', '__', 'main', '__', '两个', '选项', 'test', '打印', '一下', '运行', '结果', 'i0523', '16', '00', '56.536753', '2921214848', 'util', 'cpp', '166', 'commandline', '--', 'use', 'gpu', 'false', '--', 'trainer', 'count', '11069', '36027', '15862', '11069', '48152', '36027', '11069', '33830', '48152', '36027', '11069', '50730', '11069', '50730', '11069', '47002', '0.25260347', '0.15734845', '0.1648475', '0.17209302', '0.14046918', '0.11263847', '可以', '看到', '最后', '一行', '打印', '预测', '分类', '概率', '总结', '以上', '讲述', '使用', 'paddle', '搭建', '神经网络', '整个', '流程', '包括', '数据', '读取', '网络', '搭建', '训练', '模型', '应用', '方面', '对于', '已经', '训练', '模型', '可以', 'python', 'flask', '或者', 'django', '进行', '加载', '对外', '提供', '远程', '调用', '其实', '一通百通', '一个', '网络', '搭建', '实现', '之后', 'paddle', '理解', '自己', '同时', '尝试', '连接', '网络', 'lstm', '网络', '卷积', '网络', '非常', '类似', '只要', '替换', '卷积', '部分', '即可', '对于', 'paddle', '虽然', '当前', '完善', '毕竟', '国内', '深度', '学习', '框架', '同时', '能够', '实现', '业务', '目标', '一点', '还是', '继续', '支持', '附带', 'paddle', '链接', '最新', '文档', 'http', 'www', 'paddlepaddle', 'org', 'docs', 'develop', 'documentation', 'zh', 'getstarted', 'index', 'cn', 'html', '开放', '模型库', 'https', 'github', 'com', 'paddlepaddle', 'models', '教程', 'https', 'github', 'com', 'paddlepaddle', 'book', '中文', 'book', 'http', 'www', 'paddlepaddle', 'org', 'docs', 'develop', 'book', '04', 'word2vec', 'index', 'cn', 'html', '本文', '链接', 'http', 'crazyant', 'net', '2177', 'html', '转载', '注明', '来源']","[[-0.21402362 -0.09920822  0.26183656  0.10414426  0.27651201 -0.38560973
  -0.09802323  0.46250105 -0.0781126  -0.15211728 -0.02504128 -0.38284454
  -0.14610795  0.51153138  0.15591646 -0.11495281 -0.11108729 -0.00758653
  -0.05719574 -0.53836493 -0.0679834   0.25740497 -0.06689098 -0.23917207
   0.04547171 -0.45256196 -0.30066128  0.01689344 -0.24415447 -0.07994781
   0.14526715 -0.00911592  0.0263264  -0.12400391 -0.18960703  0.30990815
  -0.21997695 -0.30047738  0.07457347 -0.70513381 -0.12845045 -0.59768349
  -0.08361768  0.00502688 -0.11134285 -0.24922981 -0.20019396  0.31673568
  -0.18634223  0.49504263  0.1363614  -0.26628922 -0.13602891 -0.15003475
  -0.05233568  0.37942542  0.1215471  -0.11634823  0.12173957 -0.16427004
   0.11362752  0.22550857  0.00478139  0.0897747  -0.37068772  0.06787028
   0.06105445 -0.05188997 -0.31895998  0.42304911  0.07577317 -0.15470465
   0.37266345 -0.32372794  0.5461922   0.29837781  0.11057702 -0.1694361
  -0.32614382 -0.07602988  0.02959284  0.08197109 -0.14895561  0.38700319
  -0.30127062  0.19760559 -0.2780026   0.44664342  0.48675194  0.158281
   0.20962196  0.10300487  0.34444195  0.1731276   0.19450718  0.32982527
   0.14040286 -0.32113932 -0.0387678  -0.12728721]]"
2194,读书笔记 - 数据驱动从方法到实践,数据源和Event模型的重要性数据源很重要。若想把数据平台做好，数据源非常重要。如果我们从源头本身结构化，构化，下游就不需要跟着源头动，数据解析效率也会高很多。用户行为事件模型很有效。规范并结构化用户行为之后，许多数据分析都会变得更容易。每个Event都是用户发生行为的一个快照，能够尽可能地还原现场。大数据的概念大：大数据的“大”强调宏观的“大”，而非一味追求数据量的“大”。全：强调的“全”是全量，强调多种数据源，包括前端、后端的数据，以及日志、数据库数据等。大数据时代有了更前沿的数据采集手段，让获取全量数据成为可能。细：“细”强调多维度数据，包括事件、商品的各种维度、属性、字段等。比如我现在问“你所在公司的客户中，不同身高的群体在平均消费额上有什么差异”，你很可能回答不出来，因为你没有记录“身高”这一维度的数据。时：“时”，它强调实时数据采集和实时数据分析的价值。“大”“全”“细”“时”让我们对大数据的概念有较为清晰的认识，它们主要强调数据在获取和规模上与传统数据时代的差异。这是企业进行数据采集的“四字法则”，该法则对企业数据采集提出了一定的要求。大数据的本质运用大数据首先应该解决“思维”问题，大数据思维指的是企业在数据化运营和管理过程中运用数据的思维和方式。随着各种前沿技术的发展，我们的思维方式已经从最直接的决策方式——拍脑袋、因果驱动转化为数据驱动。直接向数据要答案，这就是大数据思维。我们获取的数据越全面，就越能消除更多的不确定性。“大数据的本质是消除不确定性”，我第一次接触这个观点是在吴军的《硅谷之谜》一书中，当时觉得醍醐灌顶，我一直在思考究竟什么是大数据？而吴军的这句话直中要害。之后我在看《暗时间》一书时，尝试搜索信息论和不确定性的关系，发现克劳德·香农（ClaudeShannon）说了这么一句话：“信息是用来消除不确定性的东西。”果然是信息论的鼻祖，一句话解释了“信息”的精髓。数据驱动理念与现状数据驱动的价值分为两点：其一是驱动决策。通过数据来帮助拍板，包括产品改进、运营优化、营销分析和商业决策等。我们有了数据，就能判断哪些渠道转化的效果更好，哪些功能样式更加受用户欢迎。这也就是我们常说的BI（BusinessIntelligence，商业智能），通过数据来支持决策。其二是驱动产品智能。所谓智能，我把它归结为这么一种模式：我们有了一定的数据基础，然后在上面套一个算法模型，再将得到的数据结果反馈到产品中。这样，产品本身就具有了学习能力，可以不断迭代。比如个性化推荐，通过采集许多用户行为数据，在这个基础上训练用户兴趣模型，然后给用户推荐信息，再将用户的使用数据反馈到模型中，精准广告就是类似的模式。智能是一种学习能力，产品智能就是现在比较火的AI（ArtificialIntelligence，人工智能）概念。这两点都消除了决策的不确定性，只是前者是人来执行决策，后者是机器来执行决策。事实上，我认为，数据驱动决策只能发挥数据20%的价值，甚至更少。而数据驱动产品智能将会发挥数据更大的价值，我也非常看好AI的发展趋势。现实和理想中的数据驱动典型的“需求驱动”，即根据需求去找数据。业务方提出数据需求，工程师满足需求，加上排队等待，整个效率非常低，完成一个需求都要几天甚至几周的时间。那么，理想的数据驱动应该是怎样的？先把数据源整好，在这个基础上提供强大的分析平台，让业务需求提出者能够自助式（Self-Service）地完成数据分析需求，从串行变成并行，完成需求从几天时间缩短到几分钟甚至几秒钟，这才是理想中的数据驱动，数据驱动的流大数据时代到来的条件数据采集能力的增强：数据采集能力是一个大数据团队必须具备的能力。根据前文提及的“大”、“全”、“细”、“时”，数据采集能力应该是全域数据的采集能力，包括PC互联网、移动互联网、IOT、线下数据等各个方面。数据处理能力的增强：数据处理能力是对数据的采集、存储、检索、加工、变换和传输的能力。数据处理是实现数据分析和挖掘数据价值的前提，是衡量大数据发展状态的重要指标。摩尔定律及大数据分析和计算技术的发展，赋予了企业很强的数据处理能力。数据意识的提升：互联网作为新兴行业，在高速发展初期引发诸多流量红利。如今，红利已经消失殆尽，企业认识到，必须通过数据分析去了解用户需求、洞察用户心理，从而提升用户体验，最终构建起自身的核心竞争力。企业发展已进入精细化运营阶段，建立起以用户为中心的设计、数据驱动的产品管理意识。5年前，大家还在讨论数据重不重要的问题，现在问题的焦点已经变成如何让数据发挥更大价值。数据分析金字塔数据采集与埋点在数据分析的整个体系中，数据采集恰恰是最重要的。数据源很重要，这是我在百度做大数据时的最大心得。数据源和数据建模，恰恰是冰山下面的部分，各种分析方法只是冰山一角。我们建设好数据源，就做好了数据的根基。在数据采集上，“埋点”一词非常形象，我是在创业之后才知道这个词的。因为我在百度时的数据采集是基于日志的，而非在业务逻辑上嵌入代码，在正常的业务逻辑中嵌入数据采集代码的过程，就是“埋点”的过程。对于用户行为分析来说，不但要采集客户端数据，还要采集服务端日志、业务数据库，以及第三方服务器等数据，全面覆盖。科学的数据采集和埋点方式可视化/全埋点/无埋点使用这种方案，必须在产品中嵌入SDK，等于做了一个统一的埋点，因此“无埋点”的叫法实际上是“全埋点”的代名词。优势：1.可视化展示宏观指标，满足基本数据分析需求。通过展现PV、UV等网站或APP分析的宏观指标，告诉运营人员每个控件被点击的量有多少，哪些控件值得做更进一步的分析，以助于企业了解用户行为，为进一步数据分析指明方向。2.技术门槛低，使用与较简单。只需要嵌入SDK，极大程度避免了因需求变更、埋点错误等原因导致重新埋点的复杂工作。3.用户友好性强。可以直接应用手指或者鼠标进行操作，自动向服务器发送数据，避免手工埋点的失误。劣势：1.无埋点只能采集到用户交互数据，且适合标准化的采集，自定义属性的采集需要代码埋点来辅助。2.无埋点兼容性有限。3.无埋点是前端数据采集方式之一，因此具有前端埋点的天然缺陷，如数据采集不全面、传输时效性较差、数据可靠性无法保障等问题。无埋点的技术原理依赖网站或者APP后端技术开发的严谨性与规范性、网络状态、网络口径等因素。代码埋点代码埋点又分为前端代码埋点和后端代码埋点。前端代码埋点类似于全埋点，都是在前端嵌入SDK的方式，所不同的是，对于每一个关键行为，我们都需要调用SDK代码，将必要的事件名、属性字段等写入代码，然后发送到后台数据服务器。后端代码埋点则将相关的事件、属性等通过后端模块调用SDK的方式，发送到后台服务器。这种方式相比全埋点来说，更适合精细化分析的场景。我们可以将各种细粒度的数据采集下来，方便做后续的深度分析需求。其中后端代码埋点，相比前端代码埋点，具有更高的数据可靠性，并且可以实现一处埋点，不用从各个APP、Web端进行埋点操作。全埋点VS代码埋点：如果仅仅为了看看宏观数据，并没有精细化分析需求，并且是对客户端做的分析，这种时候全埋点是一种比较省事的选择。如阅读类、词典类工具性APP的企业客户，在其发展初期的产品运营阶段，产品功能较为基础，无明确业务数据、交易数据，仅通过UV、PV、点击量等基本指标分析即可满足需求。如果全埋点还采集了渠道来源信息，则可以进行不同的渠道来源对比。图3-4是某广告企业通过全埋点的方式采集数据后了解用户渠道来源，并判断不同渠道和不同推广方式的投放效果。一旦企业有复杂的分析需求，就必须进行代码埋点，否则数据无法进行灵活下钻。前端埋点VS后端埋点在产品运营的初期，产品功能比较简单，可以采用前端埋点。或者有些行为没有和后端进行交互操作，比如有些游戏是离线运行，就比较适合前端埋点。为了保证核心数据的准确性，我们更推荐“后端埋点”。当前后端都可以实现数据采集时，应优先考虑后端（代码）埋点，尤其在各行业中有特殊业务需求的数据，更是强烈建议通过后端（代码）埋点方式采集。总的来说，后端（代码）埋点，或者“后端（代码）埋点+全埋点”方案，适合有深度数据分析需求的企业。需要具有完善的元数据管理和埋点管理元数据管理可精细化管理每个行为事件的属性类型定义，埋点管理会跟踪每个埋点的数据量、校验通过量等，出现异常要及时发现。系统还应提供Debug模式，以精确跟踪每一条数据是不是按预期的计划进行处理。实时导入监测功能，可以通过用户ID及其他属性，筛选实时采集的数据，精确定位问题。总之，是要把数据采集从“黑盒”变“白盒”。元数据管理界面：多维数据模型数据模型就是对现实世界抽象化的数据展示。数据模型在满足抽象的同时，越简单越好。数据立方体是多维数据模型的一个通俗叫法，主要由“维度”和“指标”两部分组成，比如地域、操作系统属于“维度”，销售额、注册用户数、成单量是“指标”。我们可以通过维度组合，查看该组合下的指标情况数据分层的金字塔模型，决定构建UDW（UserDataWarehouse），能够将用户在百度所有产品线的行为统一到一起去。有了这个地基，剩下的数据使用问题，就变得容易了。多维事件模型多维事件模型分成Event实体和User实体。Event实体Event描述了一个用户在某个时间点、某个地方以某种方式完成某个具体事情。一个完整的Event，包含如下如下的几个关键因素。Who：即参与这个事件的用户是谁。When：即这个事件发生的实际时间。Where：即事件发生的地点。How：即用户从事这个事件的方式。What：描述用户所做的这个事件的具体内容。在数据接口中，首先使用“Event”这个事件名称来对用户所做的内容进行初步分类。Event的划分和设计也有一定的指导原则，我们会在后文详细描述。除了“Event”这个至关重要的字段以外，我们并没有设置太多预置字段，而是请使用者根据每个产品以及每个事件的实际情况和分析的需求举个例子，记录事件和扩展字段：User实体每个User实体对应一个真实的用户，用distinct_id进行标识，描述用户的长期属性（也即Profile），并且通过distinct_id与这个用户所从事的行为，也即Event进行关联。收集哪些字段作为UserProfile，也完全取决于产品形态及分析需求。简单来说，就是在能够拿到的那些用户属性中，哪些对于分析有帮助，则作为Profile进行收集。事件分析方法行为事件分析行为事件分析法用来研究某行为事件的发生对企业组织价值的影响以及影响程度。企业借此来追踪或记录用户行为或业务过程，如用户注册、浏览产品详情页、成功投资、提现等，通过研究与事件发生关联的所有因素来挖掘用户行为事件背后的原因、交互影响等。行为事件分析涉及事件、维度和指标三个概念。在分析过程中，一般期望数据是实时采集并能够实时分析的，而事件、维度和指标是可以灵活自定义的。行为事件分析是上节内容讲到的Event实体的可视化展现，其中还将User实体的属性通过UserID贯穿到Event实体中，这样在分析时可以把用户属性作为分组或筛选的条件。行为事件分析法具有强大的筛选、分组和聚合能力，逻辑清晰且使用简单，已被广泛应用。行为事件分析法一般经过事件定义与选择、多维度下钻分析、解释与结论等环节。事件定义与选择。事件描述的是一个用户在某个时间点、某个地方、以某种方式完成了某个具体的事情。Who、When、Where、What、How是定义一个事件的关键因素。多维度下钻分析。高效的行为事件分析要支持任意下钻分析和精细化条件筛选。当行为事件分析合理配置追踪事件和属性，可以激发出事件分析的强大潜能，为企业回答关于变化趋势、维度对比等各种细分问题。同时，还可以通过添加筛选条件，精细化查看符合某些具体条件的事件数据。解释与结论。此环节要对分析结果进行合理的理论解释，判断数据分析结果是否与预期相符，如判断产品的细节优化是否提升了触发用户数。如果相悖，则应该针对不足的部分进行再分析与实证。漏斗分析现代营销观念认为：“营销管理重在过程，控制了过程就控制了结果。”漏斗分析模型是企业实现精细化运营的重要分析模型，其精细化程度影响着营销管理的成败。粗陋的漏斗分析模型因为“过程管理不透明”造成结果失控。漏斗分析是一套流程分析，它能够科学反映用户的行为状态以及从起点到终点各阶段用户转化率情况的重要分析模型。对于业务流程相对规范、周期较长、环节较多的流程分析，漏斗分析能够直观地发现和说明问题所在。值得强调的是，漏斗分析模型并非只是简单的转化率呈现，科学的漏斗分析模型能够实现以下价值。1.企业可以监控用户在各个层级的转化情况。聚焦用户选购全流程中最有效转化路径，同时找到可优化的短板，提升用户体验。降低流失是运营人员的重要目标，通过不同层级的转化情况，迅速定位流失环节，针对性持续分析找到可优化点，以提升用户留存率。2.多维度切分与呈现用户转化情况，成单瓶颈无处遁形。科学的漏斗分析能够展现转化率趋势的曲线，帮助企业精细地捕捉用户行为变化。提升了转化分析的精度和效率，对选购流程的异常定位和策略调整效果验证有科学指导意义。3.不同属性的用户群体漏斗比较，从差异角度窥视优化思路。漏斗对比分析是科学漏斗分析的重要一环。运营人员可以通过观察不同属性的用户群体（如新注册用户与老客户、不同渠道来源的客户）各环节转化率，各流程步骤转化率的差异对比，了解转化率最高的用户群体，并针对转化率异常环节进行调整。留存分析随着市场饱和度上升，绝大多数企业亟待解决如何增加客户黏性，延长每一个客户的生命周期价值的问题。因此留存分析这一分析模型备受青睐。留存分析是一种用来分析用户参与情况和活跃程度的分析模型，考察进行初始行为的用户中，有多少人会进行后续行为。这是用来衡量产品对用户价值高低的重要方法。留存分析模型特点与价值：1.留存率是判断产品价值最重要的标准，揭示了产品保留用户的能力。留存率反映的是一种转化率，即由初期不稳定的用户转化为活跃用户、稳定用户、忠诚用户的过程。随着统计数字的变化，运营人员可看到不同时期用户的变化情况，从而判断产品对客户的吸引力。2.宏观把握用户生命周期长度及定位产品可改善之处。通过留存分析，我们可以查看新功能上线之后，对不同群体的留存是否带来不同效果？判断产品新功能或某活动是否提高了用户的留存率？结合版本更新、市场推广等诸多因素，去除使用频率低的功能，实现快速迭代验证，制定相应的策略。分布分析分布分析是用户在特定指标下的频次、总额等的归类展现。它可以展现出单用户对产品的依赖程度，分析客户在不同地区、不同时段所购买的不同类型的产品数量、购买频次等，帮助运营人员了解当前的客户状态，以及客户的运转情况。科学的分布分析模型支持按时间、次数、事件、指标进行用户条件筛选及数据统计。为不同角色的人员统计用户在一天/周/月中，有多少个自然时间段（小时/天）进行了某项操作、进行某项操作的次数、进行事件指标。分布分析的价值：1.挖掘用户分布规律，优化产品策略。对同一指标下有关数据的统计与分析，帮助企业从中挖掘用户访问规律，企业可以将规律与实际产品策略相结合，进一步修正和重新制定产品策略。2.运营并持续产品生命力，增加客户回访率。彻底改变之前依靠随机抽样的回访率调查方式，如电话回访等，分布分析从多角度分析辅助企业，判断单用户对产品的依赖程度，以及产品对用户的价值与黏性。3.快速识别核心用户群体，资源配置有的放矢。核心用户群体是对企业价值贡献最大的用户群体，是企业最大的利润来源。不同用户群体对产品需求不一样，对用户群体进行差异性辨识，可以了解到用户群体对产品的依赖动力。分布分析通过不同维度筛选出核心用户群体，在此基础上，更好地配置优质资源，以最小成本实现企业利润最大化。点击分析点击图是点击分析方法的效果呈现。点击分析具有分析过程高效、灵活、易用和效果直观的特点。点击分析采用可视化的设计思想与架构，以简洁直观的操作方式，呈现访客热衷的区域，帮助运营人员或管理者评估网页设计的科学性。点击分析的价值：1.精准评估用户与网站交互背后的深层关系。2.实现网页内跳转点击分析，抽丝剥茧般完成网页深层次的点击分析。3.与其他分析模型配合，以全面视角探索数据价值，能够深度感知用户体验，实现科学决策。用户路径用户访问APP或网站，如同参观画展，每一位观众根据自身喜好形成特有的参观顺序。为让观众沿着最优访问路径前进，策展者需要结合观众需求进行布局调整。从一定程度上讲，用户路径分析为布局调整提供科学指导。用户行为路径分析，顾名思义，是用户在APP或网站中的访问行为路径。为了衡量网站优化的效果或营销推广的效果，以及了解用户行为偏好，我们时常要对访问路径的转换数据进行分析。以电商为例，买家从登录到支付成功要经过首页浏览、搜索商品、加入购物车、提交订单、支付订单等过程。而用户真实的选购过程是一个交缠反复的过程，例如提交订单后，用户可能会返回首页继续搜索商品，也可能去取消订单，每一个路径背后都有不同的动机。与其他分析模型配合进行深入分析后，找到快速用户动机，从而引领用户走向最优路径或者期望中的路径。用户路径分析的价值：用户路径的分析结果通常以桑基图形式展现，以目标事件为起点或终点，查看后续或前置路径，可以详细查看某个节点事件的流向，总的来说，科学的用户路径分析能够带来以下价值。1.可视化用户流，全面了解用户整体行为路径。通过用户路径分析，可以将一个事件的上下游进行可视化展示。用户即可查看当前节点事件的相关信息，包括事件名、分组属性值、后续事件统计、流失、后续事件列表等。运营人员可通过用户整体行为路径找到不同行为之间的关系，挖掘规律并找到瓶颈。2.定位影响转化的主次因素，产品设计的优化与改进有的放矢。路径分析对产品设计的优化与改进有很大的帮助，了解用户从登录到购买整体行为的主路径和次路径，根据用户路径中各个环节的转化率，发现用户的行为规律和偏好，也可以用于监测和定位用户路径走向存在的问题，判断影响转化的主要因素和次要因素，并发现某些冷僻的功能点。用户分群因为群体特征不同，行为会有很大差别，因此可以根据历史数据将用户进行划分，进而再次观察该群体的具体行为。这就是用户分群的原理。用户分群的定义用户分群即用户信息标签化，通过用户的历史行为路径、行为特征、偏好等属性，我们将具有相同属性的用户划分为一个群体，并进行后续分析。用户分群分析的分类与价值用户分群通常被分为普通分群和预测分群。普通分群根据用户的属性特征和行为特征将用户群体进行分类，预测分群根据用户以往的行为属性特征，运用机器学习算法来预测他们将来会发生某些事件的概率。用户分群具有以下价值。1.帮助企业打破数据孤岛并真实了解用户。用户画像是用户分群的前提，对特定属性的用户群体进行持续深入的用户行为的洞察后，该用户群体的画像逐渐清晰。这些都有助于企业了解某个指标数字背后的用户群体具备哪些特征——他们是谁？行为特点有哪些？偏好是什么？潜在需求和行为喜好是什么？这是后续用户群体针对性分析的前提。2.定位营销目标群体，帮助企业实现精准、高效营销。清晰勾勒某群体在特定研究范围内的行为全貌，并定义目标人群，是运营人员信息推送的前提。运营人员根据需求对特定目标人群完成精准信息推送工作，如召回流失用户、刺激用户复购等。当完成特定人群的精准信息推送工作之后，进一步分析以实时全方位查看营销效果，帮助企业与用户实现精准高效的信息互通。属性分析属性分析根据用户自身属性对用户进行分类与统计分析，比如查看用户数量在注册时间上的变化趋势、查看用户按省份的分布情况。用户属性涉及用户信息，如姓名、年龄、家庭、婚姻状况、性别、最高教育程度等自然信息，也有产品相关属性，如用户常驻省市、用户等级、用户首次访问渠道来源等。属性分析模型的价值属性分析主要价值体现在丰富用户画像维度，让用户行为洞察粒度更细致。科学的属性分析方法，对于所有类型的属性都可以将“去重数”作为分析指标，数值类型的属性可以将“总和”“均值”“最大值”“最小值”作为分析指标，添加多个维度。 实际上以上各分析模型应该是一个综合体，它们之间存在无法割裂的关系。各分析模型实现科学互动和配合，能够科学揭示出用户个人或群体行为的潜在规律，并据此做出理论推导，不断在工作实践中优化商业决策和产品智能。指标体系的构建对于不同的产品，所要关注的指标不应该这么千篇一律，还是要根据产品特性来灵活定义。这里要说的是，我们所说的指标，并非企业管理环境的绩效指标，而是和业务运营相关的各种指标。指标体系分散在各个业务流程中，并由不同部门计算和分析。企业如何开展、管理、规划指标体系已成企业掌控数据的关键。第一关键指标法在企业发展的每个阶段，都有一个当前阶段高于一切、需要集中全部精力注意的一个数据，这个数据就是“第一关键指标”。当然，随着业务的发展，这个指标会发生变化。第一关键指标可外延出更多指标，比如一个成熟的电商平台，第一关键指标一定是销售额，而销售额能够衍生访问量、转化率、客单价等多指标。企业运营人员或产品经理需要通过对衍生指标的优化，来促进第一关键指标的增长。因此，企业应该基于第一关键指标及衍生指标来衡量发展情况。让全企业员工明确当前阶段的核心目标，以此来制定与规划清晰任务。第一关键指标法和绩效管理中的KPI的理念比较接近，就是要寻找当前阶段整个公司最需要关注的指标，以此来集中火力向目标前进。海盗指标法2007年，500Startups创业孵化器的创始合伙人戴夫·麦克卢尔（DaveMcClure）针对创业公司应该关注的指标，提出了一套模型——PirateMetrics，即海盗指标法。他将创业公司需要关注的指标归结为5个方面，分别是Acquisition（获取）、Activation（激活）、Retention（留存）、Revenue（营收）和Referral（引荐），简称AARRR。第一关键指标法定位了企业当前发展阶段的最重要问题，它关注全企业层面的运转健康，有利于让全公司形成合力聚焦同一目标。海盗指标法为企业提供了数据分析基础和罗盘，以及指导创业和企业发展的探索方向。数据驱动商业决策数据是验证实践的科学依据。数据驱动是最先进的生产力，让数据驱动落地企业，最为有效的方式是从上而下地推动。管理者推动的前提是其自身具备数据意识，能够认识到大数据的意义与价值，意识到数据管理不善可能带来的危害。若某下属费劲整理了一批数据报表，领导却对此无视，仍坚持拍脑袋做决定，这样企业数据发展就会陷入绝境。数据驱动商业决策实现了以下三大价值。1.透过现象看本质，提升企业决策的准确性与科学性。大数据时代改变了曾经仅依靠企业内部业务数据优化决策的情况，通过洞察“大”“全”“细”“时”数据背后的价值，赋予企业更加全面和准确的商业洞察力，大幅提升企业的商业决策水平，降低企业经营的风险。2.用数据说话，降低企业沟通成本。“用数据说话”终止了企业团队之间因某一结果无休止争论的局面，降低了团队的沟通成本，缩短了企业研发时间。就像大家经常所说的，在争论中，如果两个人都没有数据，那么嗓门大的通常获胜。如果一个人有数据而另一个没有，那么有数据的通常会获胜。如果两个人都有数据，那就不需要争论了。3.赋予企业全面准确的商业洞察力，实现智能商业预测。除了提升企业的商业决策水平之外，数据驱动商业决策还赋予企业商业预测的能力。大数据分析像一架望远镜，企业通过望远镜能够看到未来可能会发生的情况。智能商业预测帮助企业率先进一步挖掘市场，实现产品与服务上的创新，在诡谲多变的市场环境中取得先发优势。数据驱动产品智能所谓智能，我把它归结为这么一种模式：首先我们要有数据，然后在数据上套用某种算法模型，最后再将结果数据反馈到产品中，这样的产品就具备了一种“学习”能力，这就是我说的产品智能。数据驱动决策将分析结果用于人的决策使用，而数据驱动产品智能更加强调数据的处理结果是给机器用的，并且这种数据分析的算法往往更加复杂，本身具有可以自我迭代的特点。一个典型的数据平台架构实时订阅：举个例子，一个用户在产品首页搜索了一个关键词“鲜花”，立即会有一条代表此行为的数据被发送到接收层。而后续的一个针对用户近期搜索行为提供推荐服务的模块则可以在1秒钟内拿到这个行为的数据，并且在用户访问下一个页面的时候及时提供“鲜花”相关的内容推荐。人工智能领域的先驱者，ArthurSamuel在1959年创造“机器学习”这个概念时，这样对它下的定义：“Fieldofstudythatgivescomputerstheabilitytolearnwithoutbeingexplicitlyprogrammed”。简单来说，机器学习是研究通过不显式编程来赋予计算机学习能力的一个领域。从这个概念可以看出，与以往普通的计算机程序有一个最大的不同，就是机器学习并不是一个被完全设计好的程序，而是一种特殊的、能够自我提升的算法，让计算机自己从数据中学习并由此具备解决问题的能力。回归算法在很多领域得到了普遍应用，在金融方面，可以用它来做股市行情分析和预测，在产品运营方面，可以用它来做产品流量预估；在生物领域，可以用它来做蛋白结合点位预测；在交通领域，可以用它来做道路流量预警。分类算法也在各个领域都得到了广泛的应用，在金融方面，可以用它来识别作弊用户；在交通领域，车牌识别也是一种分类应用；在产品运营领域，它可以用作流失客户的预警，提前找到那些有可能流失的客户。聚类算法同样也在很多不同的领域得到广泛应用。例如，在产品运营中，我们可以用聚类算法，自动聚合用户的行为轨迹，并且据此分析用户使用产品的习惯，用于改善产品交互设计；在图形学领域，基于聚类算法进行图像主题筛选也是一种常见的应用；甚至在防火墙领域，对于那些加密流量，也可以通过聚类算法来大概识别这些流量到底是什么类型的流量。数据案例的实现步骤需求梳理，区分业务线、业务流程事件设计，主要区分事件本身和对应事件的扩展字段数据接入，前端采集、后端采集企业埋点规范：最后的书评书籍的前半部分给我惊喜，解答了很多我在搭建数据平台中的困惑，但是后半部分的信息量明显降低并且是在宣传神策公司，感觉作为一本知识型的数据，后半部分的大幅宣传不合适；整体上我得到的并且对我有帮助的知识：数据驱动的数据、信息、知识、智慧理论数据驱动产品决策，也驱动产品智能数据驱动的流，包括数据接入、传输、建模/存储、统计分析挖掘、可视化反馈数据分析金字塔，采集、建模、分析、指标数据埋点包括前端埋点、后端埋点、业务数据库，之前忽略了后端埋点埋点方式分为无埋点/全埋点、代码埋点对于埋点事件，最好引入元数据管理多维事件模型event模型，引入who/when/where/what/how理论模型分为行为模型event和用户模型user几种数据分析方法：漏斗分析、分布分析、留存分析、用户路径、用户分群、点击分析指标体系的构建：第一关键指标法、海盗指标法数据的分析和实据的智能，可以连起来形成闭环书中强调了多次数据驱动产品智能，不过对于智能这部分介绍的很浅显有点不匹配的感觉，可能是因为篇幅也可能是因为我更想看到更多对智能的思考和应用场景，而不是简单的介绍下算法和几个简单案例当然，总体来说对我帮助很大，推荐4星/5星本文地址：http://crazyant.net/2194.html，转载请注明来源,"['读书笔记', '数据', '驱动', '方法', '实践', '数据源', 'event', '模型', '重要性', '数据源', '重要', '若想', '数据', '平台', '做好', '数据源', '非常', '重要', '如果', '我们', '源头', '本身', '结构化', '构化', '下游', '需要', '跟着', '源头', '数据', '解析', '效率', '很多', '用户', '行为', '事件', '模型', '有效', '规范', '结构化', '用户', '行为', '之后', '许多', '数据分析', '变得', '容易', '每个', 'event', '用户', '发生', '行为', '一个', '快照', '能够', '尽可能', '还原', '现场', '数据', '概念', '数据', '强调', '宏观', '一味', '追求', '数据量', '强调', '全量', '强调', '多种', '数据源', '包括', '前端', '端的', '数据', '以及', '日志', '数据库', '数据', '数据', '时代', '前沿', '数据', '采集', '手段', '获取', '全量', '数据', '成为', '可能', '强调', '多维度', '数据', '包括', '事件', '商品', '各种', '维度', '属性', '字段', '比如', '现在', '所在', '公司', '客户', '不同', '身高', '群体', '平均', '消费额', '什么', '差异', '可能', '回答', '出来', '因为', '没有', '记录', '身高', '这一', '维度', '数据', '强调', '实时', '数据', '采集', '实时', '数据分析', '价值', '我们', '对大', '数据', '概念', '较为', '清晰', '认识', '它们', '主要', '强调', '数据', '获取', '规模', '传统', '数据', '时代', '差异', '这是', '企业', '进行', '数据', '采集', '四字', '法则', '法则', '企业', '数据', '采集', '提出', '一定', '要求', '数据', '本质', '运用', '数据', '首先', '应该', '解决', '思维', '问题', '数据', '思维', '企业', '数据', '运营', '管理', '过程', '运用', '数据', '思维', '方式', '随着', '各种', '前沿技术', '发展', '我们', '思维', '方式', '已经', '直接', '决策', '方式', '脑袋', '因果', '驱动', '转化', '数据', '驱动', '直接', '数据', '答案', '就是', '数据', '思维', '我们', '获取', '数据', '全面', '消除', '不确定性', '数据', '本质', '消除', '不确定性', '第一次', '接触', '这个', '观点', '吴军', '硅谷', '之谜', '一书中', '当时', '觉得', '醍醐灌顶', '一直', '思考', '究竟', '什么', '数据', '吴军', '这句', '直中', '要害', '之后', '时间', '一书时', '尝试', '搜索', '信息论', '不确定性', '关系', '发现', '克劳德', '香农', 'claudeshannon', '这么', '一句', '信息', '用来', '消除', '不确定性', '东西', '果然', '信息论', '鼻祖', '一句', '解释', '信息', '精髓', '数据', '驱动', '理念', '现状', '数据', '驱动', '价值', '分为', '两点', '其一', '驱动', '决策', '通过', '数据', '帮助', '拍板', '包括', '产品', '改进', '运营', '优化', '营销', '分析', '商业', '决策', '我们', '数据', '判断', '哪些', '渠道', '转化', '效果', '更好', '哪些', '功能', '样式', '更加', '用户', '欢迎', '就是', '我们', '常说', 'bi', 'businessintelligence', '商业智能', '通过', '数据', '支持', '决策', '其二', '驱动', '产品', '智能', '所谓', '智能', '归结为', '这么', '一种', '模式', '我们', '一定', '数据', '基础', '然后', '上面', '一个', '算法', '模型', '得到', '数据', '结果', '反馈', '产品', '这样', '产品', '本身', '具有', '学习', '能力', '可以', '不断', '迭代', '比如', '个性化', '推荐', '通过', '采集', '许多', '用户', '行为', '数据', '这个', '基础', '训练', '用户', '兴趣', '模型', '然后', '用户', '推荐', '信息', '用户', '使用', '数据', '反馈', '模型', '精准', '广告', '就是', '类似', '模式', '智能', '一种', '学习', '能力', '产品', '智能', '就是', '现在', '比较', 'ai', 'artificialintelligence', '人工智能', '概念', '这两点', '消除', '决策', '不确定性', '只是', '前者', '人来', '执行', '决策', '后者', '机器', '执行', '决策', '事实上', '认为', '数据', '驱动', '决策', '只能', '发挥', '数据', '20%', '价值', '甚至', '数据', '驱动', '产品', '智能', '将会', '发挥', '数据', '更大', '价值', '非常', '看好', 'ai', '发展趋势', '现实', '理想', '数据', '驱动', '典型', '需求', '驱动', '根据', '需求', '数据', '业务', '提出', '数据', '需求', '工程师', '满足', '需求', '加上', '排队', '等待', '整个', '效率', '非常低', '完成', '一个', '需求', '几天', '甚至', '几周', '时间', '那么', '理想', '数据', '驱动', '应该', '怎样', '数据源', '整好', '这个', '基础', '提供', '强大', '分析', '平台', '业务', '需求', '提出', '能够', '自助式', 'self', 'service', '完成', '数据分析', '需求', '串行', '变成', '并行', '完成', '需求', '几天', '时间', '缩短', '几分钟', '甚至', '几秒钟', '这才', '理想', '数据', '驱动', '数据', '驱动', '流大', '数据', '时代', '到来', '条件', '数据', '采集', '能力', '增强', '数据', '采集', '能力', '一个', '数据', '团队', '必须', '具备', '能力', '根据', '提及', '数据', '采集', '能力', '应该', '全域', '数据', '采集', '能力', '包括', 'pc', '互联网', '移动', '互联网', 'iot', '线下', '数据', '各个方面', '数据处理', '能力', '增强', '数据处理', '能力', '数据', '采集', '存储', '检索', '加工', '变换', '传输', '能力', '数据处理', '实现', '数据分析', '挖掘', '数据', '价值', '前提', '衡量', '数据', '发展', '状态', '重要', '指标', '摩尔定律', '及大', '数据分析', '计算技术', '发展', '赋予', '企业', '很强', '数据处理', '能力', '数据', '意识', '提升', '互联网', '作为', '新兴', '行业', '高速', '发展', '初期', '引发', '诸多', '流量', '红利', '如今', '红利', '已经', '消失', '殆尽', '企业', '认识', '必须', '通过', '数据分析', '了解', '用户', '需求', '洞察', '用户', '心理', '从而', '提升', '用户', '体验', '最终', '构建', '自身', '核心', '竞争力', '企业', '发展', '进入', '精细化', '运营', '阶段', '建立', '起以', '用户', '中心', '设计', '数据', '驱动', '产品', '管理', '意识', '年前', '大家', '讨论', '数据', '重不', '重要', '问题', '现在', '问题', '焦点', '已经', '变成', '如何', '数据', '发挥', '更大', '价值', '数据分析', '金字塔', '数据', '采集', '埋点', '数据分析', '整个', '体系', '数据', '采集', '恰恰', '重要', '数据源', '重要', '百度', '做大', '数据', '最大', '心得', '数据源', '数据', '建模', '恰恰', '冰山', '下面', '部分', '各种', '分析方法', '只是', '冰山一角', '我们', '建设', '数据源', '做好', '数据', '根基', '数据', '采集', '埋点', '一词', '非常', '形象', '创业', '之后', '知道', '这个', '因为', '百度', '数据', '采集', '基于', '日志', '业务', '逻辑', '嵌入', '代码', '正常', '业务', '逻辑', '嵌入', '数据', '采集', '代码', '过程', '就是', '埋点', '过程', '对于', '用户', '行为', '分析', '来说', '不但', '采集', '客户端', '数据', '还要', '采集', '服务端', '日志', '业务', '数据库', '以及', '第三方', '服务器', '数据', '全面', '覆盖', '科学', '数据', '采集', '埋点', '方式', '可视化', '全埋点', '无埋点', '使用', '这种', '方案', '必须', '产品', '嵌入', 'sdk', '等于', '一个', '统一', '埋点', '因此', '无埋点', '叫法', '实际上', '全埋点', '代名词', '优势', '可视化', '展示', '宏观', '指标', '满足', '基本', '数据分析', '需求', '通过', '展现', 'pv', 'uv', '网站', 'app', '分析', '宏观', '指标', '告诉', '运营', '人员', '每个', '控件', '点击', '多少', '哪些', '控件', '值得', '更进一步', '分析', '助于', '企业', '了解', '用户', '行为', '进一步', '数据分析', '指明方向', '技术', '门槛', '使用', '简单', '需要', '嵌入', 'sdk', '极大', '程度', '避免', '需求', '变更', '埋点', '错误', '原因', '导致', '重新', '埋点', '复杂', '工作', '用户', '友好', '性强', '可以', '直接', '应用', '手指', '或者', '鼠标', '进行', '操作', '自动', '服务器发送', '数据', '避免', '手工', '埋点', '失误', '劣势', '无埋点', '只能', '采集', '用户', '交互', '数据', '适合', '标准化', '采集', '自定义', '属性', '采集', '需要', '代码', '埋点', '辅助', '无埋点', '兼容性', '有限', '无埋点', '前端', '数据', '采集', '方式', '之一', '因此', '具有', '前端', '埋点', '天然', '缺陷', '数据', '采集', '全面', '传输', '时效性', '较差', '数据', '可靠性', '无法', '保障', '问题', '无埋点', '技术', '原理', '依赖', '网站', '或者', 'app', '后端', '技术开发', '严谨性', '规范性', '网络', '状态', '网络', '口径', '因素', '代码', '埋点', '代码', '埋点', '分为', '前端', '代码', '埋点', '代码', '埋点', '前端', '代码', '埋点', '类似', '全埋点', '前端', '嵌入', 'sdk', '方式', '不同', '对于', '一个', '关键', '行为', '我们', '需要', '调用', 'sdk', '代码', '必要', '事件', '属性', '字段', '写入', '代码', '然后', '发送到', '后台', '数据', '服务器', '代码', '埋点', '相关', '事件', '属性', '通过', '模块', '调用', 'sdk', '方式', '发送到', '后台', '服务器', '这种', '方式', '相比', '全埋点', '来说', '适合', '精细化', '分析', '场景', '我们', '可以', '各种', '细粒度', '数据', '采集', '下来', '方便', '后续', '深度', '分析', '需求', '其中', '代码', '埋点', '相比', '前端', '代码', '埋点', '具有', '数据', '可靠性', '并且', '可以', '实现', '一处', '埋点', '不用', '各个', 'app', 'web', '进行', '埋点', '操作', '全埋点', 'vs', '代码', '埋点', '如果', '仅仅', '为了', '看看', '宏观', '数据', '没有', '精细化', '分析', '需求', '并且', '客户端', '分析', '这种', '时候', '全埋点', '一种', '比较', '省事', '选择', '阅读', '词典', '工具性', 'app', '企业', '客户', '发展', '初期', '产品', '运营', '阶段', '产品', '功能', '较为', '基础', '明确', '业务', '数据', '交易', '数据', '通过', 'uv', 'pv', '点击', '基本', '指标', '分析', '即可', '满足', '需求', '如果', '全埋点', '采集', '渠道', '来源', '信息', '可以', '进行', '不同', '渠道', '来源', '对比', '广告', '企业', '通过', '全埋点', '方式', '采集', '数据', '了解', '用户', '渠道', '来源', '判断', '不同', '渠道', '不同', '推广', '方式', '投放', '效果', '一旦', '企业', '复杂', '分析', '需求', '必须', '进行', '代码', '埋点', '否则', '数据', '无法', '进行', '灵活', '前端', '埋点', 'vs', '后端', '埋点', '产品', '运营', '初期', '产品', '功能', '比较简单', '可以', '采用', '前端', '埋点', '或者', '有些', '行为', '没有', '进行', '交互', '操作', '比如', '有些', '游戏', '离线', '运行', '比较', '适合', '前端', '埋点', '为了', '保证', '核心', '数据', '准确性', '我们', '推荐', '后端', '埋点', '当前', '后端', '可以', '实现', '数据', '采集', '优先', '考虑', '代码', '埋点', '尤其', '行业', '中有', '特殊', '业务', '需求', '数据', '更是', '强烈建议', '通过', '代码', '埋点', '方式', '采集', '总的来说', '代码', '埋点', '或者', '代码', '埋点', '全埋点', '方案', '适合', '深度', '数据分析', '需求', '企业', '需要', '具有', '完善', '数据管理', '埋点', '管理', '数据管理', '精细化', '管理', '每个', '行为', '事件', '属性', '类型定义', '埋点', '管理', '跟踪', '每个', '埋点', '数据量', '校验', '通过', '出现异常', '及时发现', '系统', '还应', '提供', 'debug', '模式', '精确', '跟踪', '一条', '数据', '是不是', '预期', '计划', '进行', '处理', '实时', '导入', '监测', '功能', '可以', '通过', '用户', 'id', '及其', '属性', '筛选', '实时', '采集', '数据', '精确定位', '问题', '总之', '数据', '采集', '黑盒', '白盒', '数据管理', '界面', '多维', '数据模型', '数据模型', '就是', '现实', '世界', '抽象化', '数据', '展示', '数据模型', '满足', '抽象', '同时', '简单', '数据', '立方体', '多维', '数据模型', '一个', '通俗', '叫法', '主要', '维度', '指标', '部分', '组成', '比如', '地域', '操作系统', '属于', '维度', '销售额', '注册', '用户数', '单量', '指标', '我们', '可以', '通过', '维度', '组合', '查看', '组合', '指标', '情况', '数据', '分层', '金字塔', '模型', '决定', '构建', 'udw', 'userdatawarehouse', '能够', '用户', '百度', '所有', '产品线', '行为', '统一', '一起', '这个', '地基', '剩下', '数据', '使用', '问题', '变得', '容易', '多维', '事件', '模型', '多维', '事件', '模型', '分成', 'event', '实体', 'user', '实体', 'event', '实体', 'event', '描述', '一个', '用户', '某个', '时间', '某个', '地方', '某种', '方式', '完成', '某个', '具体', '事情', '一个', '完整', 'event', '包含', '如下', '如下', '几个', '关键因素', 'who', '参与', '这个', '事件', '用户', 'when', '这个', '事件', '发生', '实际', '时间', 'where', '事件', '发生', '地点', 'how', '用户', '从事', '这个', '事件', '方式', 'what', '描述', '用户', '这个', '事件', '具体内容', '数据', '接口', '首先', '使用', 'event', '这个', '事件', '名称', '用户', '内容', '进行', '初步', '分类', 'event', '划分', '设计', '一定', '指导', '原则', '我们', '后文', '详细描述', '除了', 'event', '这个', '至关重要', '以外', '我们', '没有', '设置', '预置', '而是', '使用者', '根据', '每个', '产品', '以及', '每个', '事件', '实际', '情况', '分析', '需求', '举个', '例子', '记录', '事件', '扩展', 'user', '实体', '每个', 'user', '实体', '对应', '一个', '真实', '用户', 'distinct', 'id', '进行', '标识', '描述', '用户', '长期', '属性', 'profile', '并且', '通过', 'distinct', 'id', '这个', '用户', '从事', '行为', 'event', '进行', '关联', '收集', '哪些', '作为', 'userprofile', '完全', '取决于', '产品', '形态', '分析', '需求', '简单', '来说', '就是', '能够', '拿到', '那些', '用户', '属性', '哪些', '对于', '分析', '帮助', '作为', 'profile', '进行', '收集', '事件', '分析方法', '行为', '事件', '分析', '行为', '事件', '分析法', '用来', '研究', '行为', '事件', '发生', '企业', '组织', '价值', '影响', '以及', '影响', '程度', '企业', '借此', '追踪', '记录', '用户', '行为', '业务', '过程', '用户注册', '浏览', '产品', '详情页', '成功', '投资', '提现', '通过', '研究', '事件', '发生', '关联', '所有', '因素', '挖掘', '用户', '行为', '事件', '背后', '原因', '交互', '影响', '行为', '事件', '分析', '涉及', '事件', '维度', '指标', '三个', '概念', '分析', '过程', '一般', '期望', '数据', '实时', '采集', '能够', '实时', '分析', '事件', '维度', '指标', '可以', '灵活', '自定义', '行为', '事件', '分析', '上节', '内容', '讲到', 'event', '实体', '可视化', '展现', '其中', 'user', '实体', '属性', '通过', 'userid', '贯穿', 'event', '实体', '这样', '分析', '可以', '用户', '属性', '作为', '分组', '筛选', '条件', '行为', '事件', '分析法', '具有', '强大', '筛选', '分组', '聚合', '能力', '逻辑', '清晰', '使用', '简单', '广泛应用', '行为', '事件', '分析法', '一般', '经过', '事件', '定义', '选择', '多维度', '分析', '解释', '结论', '环节', '事件', '定义', '选择', '事件', '描述', '一个', '用户', '某个', '时间', '某个', '地方', '某种', '方式', '完成', '某个', '具体', '事情', 'who', 'when', 'where', 'what', 'how', '定义', '一个', '事件', '关键因素', '多维度', '分析', '高效', '行为', '事件', '分析', '支持', '任意', '分析', '精细化', '条件', '筛选', '行为', '事件', '分析', '合理配置', '追踪', '事件', '属性', '可以', '激发', '事件', '分析', '强大', '潜能', '企业', '回答', '关于', '变化趋势', '维度', '对比', '各种', '细分', '问题', '同时', '可以', '通过', '添加', '筛选', '条件', '精细化', '查看', '符合', '某些', '具体条件', '事件', '数据', '解释', '结论', '环节', '分析', '结果', '进行', '合理', '理论', '解释', '判断', '数据分析', '结果', '是否', '预期', '相符', '判断', '产品', '细节', '优化', '是否', '提升', '触发', '用户数', '如果', '相悖', '应该', '针对', '不足', '部分', '进行', '分析', '实证', '漏斗', '分析', '现代', '营销', '观念', '认为', '营销', '管理', '重在', '过程', '控制', '过程', '控制', '结果', '漏斗', '分析模型', '企业', '实现', '精细化', '运营', '重要', '分析模型', '精细化', '程度', '影响', '营销', '管理', '成败', '粗陋', '漏斗', '分析模型', '因为', '过程', '管理', '透明', '造成', '结果', '失控', '漏斗', '分析', '一套', '流程', '分析', '能够', '科学', '反映', '用户', '行为', '状态', '以及', '起点', '终点', '阶段', '用户', '转化率', '情况', '重要', '分析模型', '对于', '业务流程', '相对', '规范', '周期', '较长', '环节', '流程', '分析', '漏斗', '分析', '能够', '直观', '发现', '说明', '问题所在', '值得', '强调', '漏斗', '分析模型', '并非', '只是', '简单', '转化率', '呈现', '科学', '漏斗', '分析模型', '能够', '实现', '以下', '价值', '企业', '可以', '监控', '用户', '各个', '层级', '转化', '情况', '聚焦', '用户', '选购', '流程', '有效', '转化', '路径', '同时', '找到', '优化', '短板', '提升', '用户', '体验', '降低', '流失', '运营', '人员', '重要', '目标', '通过', '不同', '层级', '转化', '情况', '迅速', '定位', '流失', '环节', '针对性', '持续', '分析', '找到', '优化', '提升', '用户', '留存', '多维度', '切分', '呈现', '用户', '转化', '情况', '瓶颈', '无处', '遁形', '科学', '漏斗', '分析', '能够', '展现', '转化率', '趋势', '曲线', '帮助', '企业', '精细', '捕捉', '用户', '行为', '变化', '提升', '转化', '分析', '精度', '效率', '选购', '流程', '异常', '定位', '策略', '调整', '效果', '验证', '科学', '指导意义', '不同', '属性', '用户', '群体', '漏斗', '比较', '差异', '角度', '窥视', '优化', '思路', '漏斗', '对比', '分析', '科学', '漏斗', '分析', '重要一环', '运营', '人员', '可以', '通过观察', '不同', '属性', '用户', '群体', '如新', '注册', '用户', '老客户', '不同', '渠道', '来源', '客户', '环节', '转化率', '流程', '步骤', '转化率', '差异', '对比', '了解', '转化率', '最高', '用户', '群体', '针对', '转化率', '异常', '环节', '进行', '调整', '留存', '分析', '随着', '市场', '饱和度', '上升', '绝大多数', '企业', '亟待解决', '如何', '增加', '客户', '黏性', '延长', '一个', '客户', '生命周期', '价值', '问题', '因此', '留存', '分析', '这一', '分析模型', '备受', '青睐', '留存', '分析', '一种', '用来', '分析', '用户', '参与', '情况', '活跃', '程度', '分析模型', '考察', '进行', '初始', '行为', '用户', '多少', '人会', '进行', '后续', '行为', '这是', '用来', '衡量', '产品', '用户', '价值', '高低', '重要', '方法', '留存', '分析模型', '特点', '价值', '留存', '判断', '产品', '价值', '重要', '标准', '揭示', '产品', '保留', '用户', '能力', '留存', '反映', '一种', '转化率', '初期', '稳定', '用户', '转化', '活跃', '用户', '稳定', '用户', '忠诚', '用户', '过程', '随着', '统计数字', '变化', '运营', '人员', '看到', '不同', '时期', '用户', '变化', '情况', '从而', '判断', '产品', '客户', '吸引力', '宏观', '把握', '用户', '生命周期', '长度', '定位', '产品', '改善', '通过', '留存', '分析', '我们', '可以', '查看', '功能', '上线', '之后', '不同', '群体', '留存', '是否', '带来', '不同', '效果', '判断', '产品', '功能', '活动', '是否', '提高', '用户', '留存', '结合', '版本', '更新', '市场推广', '诸多', '因素', '去除', '使用', '频率', '功能', '实现', '快速', '迭代', '验证', '制定', '相应', '策略', '分布', '分析', '分布', '分析', '用户', '特定', '指标', '频次', '总额', '归类', '展现', '可以', '展现出', '单用户', '产品', '依赖', '程度', '分析', '客户', '不同', '地区', '不同', '时段', '购买', '不同', '类型', '产品数量', '购买', '频次', '帮助', '运营', '人员', '了解', '当前', '客户', '状态', '以及', '客户', '运转', '情况', '科学', '分布', '分析模型', '支持', '时间', '次数', '事件', '指标', '进行', '用户', '条件', '筛选', '数据', '统计', '不同', '角色', '人员', '统计', '用户', '一天', '多少', '自然', '时间段', '小时', '进行', '某项', '操作', '进行', '某项', '操作', '次数', '进行', '事件', '指标', '分布', '分析', '价值', '挖掘', '用户', '分布', '规律', '优化', '产品', '策略', '同一', '指标', '有关', '数据', '统计', '分析', '帮助', '企业', '从中', '挖掘', '用户', '访问', '规律', '企业', '可以', '规律', '实际', '产品', '策略', '相结合', '进一步', '修正', '重新制定', '产品', '策略', '运营', '持续', '产品', '生命力', '增加', '客户', '回访', '彻底改变', '之前', '依靠', '随机抽样', '回访', '调查', '方式', '电话', '回访', '分布', '分析', '多角度', '分析', '辅助', '企业', '判断', '单用户', '产品', '依赖', '程度', '以及', '产品', '用户', '价值', '黏性', '快速', '识别', '核心', '用户', '群体', '资源配置', '有的放矢', '核心', '用户', '群体', '企业', '价值', '贡献', '最大', '用户', '群体', '企业', '最大', '利润', '来源', '不同', '用户', '群体', '产品', '需求', '一样', '用户', '群体', '进行', '差异性', '辨识', '可以', '了解', '用户', '群体', '产品', '依赖', '动力', '分布', '分析', '通过', '不同', '维度', '筛选', '核心', '用户', '群体', '此基础', '更好', '配置', '优质', '资源', '最小', '成本', '实现', '企业', '利润', '最大化', '点击', '分析', '点击', '图是', '点击', '分析方法', '效果', '呈现', '点击', '分析', '具有', '分析', '过程', '高效', '灵活', '易用', '效果', '直观', '特点', '点击', '分析', '采用', '可视化', '设计', '思想', '架构', '简洁', '直观', '操作', '方式', '呈现', '访客', '热衷', '区域', '帮助', '运营', '人员', '管理者', '评估', '网页', '设计', '科学性', '点击', '分析', '价值', '精准', '评估', '用户', '网站', '交互', '背后', '深层', '关系', '实现', '网页', '跳转', '点击', '分析', '抽丝剥茧', '完成', '网页', '深层次', '点击', '分析', '其他', '分析模型', '配合', '全面', '视角', '探索', '数据', '价值', '能够', '深度', '感知', '用户', '体验', '实现', '科学决策', '用户', '路径', '用户', '访问', 'app', '网站', '如同', '参观', '画展', '一位', '观众', '根据', '自身', '喜好', '形成', '特有', '参观', '顺序', '观众', '沿着', '最优', '访问', '路径', '前进', '策展者', '需要', '结合', '观众', '需求', '进行', '布局调整', '一定', '程度', '用户', '路径分析', '布局调整', '提供', '科学', '指导', '用户', '行为', '路径分析', '顾名思义', '用户', 'app', '网站', '访问', '行为', '路径', '为了', '衡量', '网站', '优化', '效果', '营销', '推广', '效果', '以及', '了解', '用户', '行为', '偏好', '我们', '时常', '访问', '路径', '转换', '数据', '进行', '分析', '电商', '为例', '买家', '登录', '支付', '成功', '经过', '首页', '浏览', '搜索', '商品', '加入', '购物车', '提交', '订单', '支付', '订单', '过程', '用户', '真实', '选购', '过程', '一个', '交缠', '反复', '过程', '例如', '提交', '订单', '用户', '可能', '返回', '首页', '继续', '搜索', '商品', '可能', '取消', '订单', '一个', '路径', '背后', '不同', '动机', '其他', '分析模型', '配合', '进行', '深入分析', '找到', '快速', '用户', '动机', '从而', '引领', '用户', '走向', '最优', '路径', '或者', '期望', '路径', '用户', '路径分析', '价值', '用户', '路径', '分析', '结果', '通常', '以桑', '基图', '形式', '展现', '目标', '事件', '起点', '终点', '查看', '后续', '前置', '路径', '可以', '详细', '查看', '某个', '节点', '事件', '流向', '总的来说', '科学', '用户', '路径分析', '能够', '带来', '以下', '价值', '可视化', '用户', '全面', '了解', '用户', '整体', '行为', '路径', '通过', '用户', '路径分析', '可以', '一个', '事件', '上下游', '进行', '可视化', '展示', '用户', '即可', '查看', '当前', '节点', '事件', '相关', '信息', '包括', '事件', '分组', '属性', '后续', '事件', '统计', '流失', '后续', '事件', '列表', '运营', '人员', '通过', '用户', '整体', '行为', '路径', '找到', '不同', '行为', '之间', '关系', '挖掘', '规律', '找到', '瓶颈', '定位', '影响', '转化', '主次', '因素', '产品设计', '优化', '改进', '有的放矢', '路径分析', '产品设计', '优化', '改进', '很大', '帮助', '了解', '用户', '登录', '购买', '整体', '行为', '路径', '路径', '根据', '用户', '路径', '各个环节', '转化率', '发现', '用户', '行为', '规律', '偏好', '可以', '用于', '监测', '定位', '用户', '路径', '走向', '存在', '问题', '判断', '影响', '转化', '主要', '因素', '次要', '因素', '发现', '某些', '冷僻', '功能', '用户', '因为', '群体', '特征', '不同', '行为', '很大', '差别', '因此', '可以', '根据', '历史数据', '用户', '进行', '划分', '进而', '再次', '观察', '群体', '具体', '行为', '就是', '用户', '分群', '原理', '用户', '分群', '定义', '用户', '分群', '用户', '信息', '标签', '通过', '用户', '历史', '行为', '路径', '行为', '特征', '偏好', '属性', '我们', '具有', '相同', '属性', '用户', '划分', '一个', '群体', '进行', '后续', '分析', '用户', '分析', '分类', '价值', '用户', '通常', '分为', '普通', '分群', '预测', '普通', '根据', '用户', '属性', '特征', '行为', '特征', '用户', '群体', '进行', '分类', '预测', '根据', '用户', '以往', '行为', '属性', '特征', '运用', '机器', '学习', '算法', '预测', '他们', '将来', '发生', '某些', '事件', '概率', '用户', '具有', '以下', '价值', '帮助', '企业', '打破', '数据', '孤岛', '真实', '了解', '用户', '用户', '画像', '用户', '分群', '前提', '特定', '属性', '用户', '群体', '进行', '持续', '深入', '用户', '行为', '洞察', '用户', '群体', '画像', '逐渐', '清晰', '这些', '有助于', '企业', '了解', '某个', '指标', '数字', '背后', '用户', '群体', '具备', '哪些', '特征', '他们', '行为', '特点', '哪些', '偏好', '什么', '潜在', '需求', '行为', '喜好', '什么', '这是', '后续', '用户', '群体', '针对性', '分析', '前提', '定位', '营销', '目标群体', '帮助', '企业', '实现', '精准', '高效', '营销', '清晰', '勾勒', '群体', '特定', '研究', '范围', '行为', '全貌', '定义', '目标', '人群', '运营', '人员', '信息', '推送', '前提', '运营', '人员', '根据', '需求', '特定', '目标', '人群', '完成', '精准', '信息', '推送', '工作', '召回', '流失', '用户', '刺激', '用户', '复购', '完成', '特定', '人群', '精准', '信息', '推送', '工作', '之后', '进一步', '分析', '实时', '全方位', '查看', '营销', '效果', '帮助', '企业', '用户', '实现', '精准', '高效', '信息', '互通', '属性', '分析属性', '分析', '根据', '用户', '自身', '属性', '用户', '进行', '分类', '统计分析', '比如', '查看', '用户数量', '注册', '时间', '变化趋势', '查看', '用户', '省份', '分布', '情况', '用户', '属性', '涉及', '用户', '信息', '姓名', '年龄', '家庭', '婚姻状况', '性别', '最高', '教育', '程度', '自然', '信息', '产品', '相关', '属性', '用户', '常驻', '省市', '用户', '等级', '用户', '首次', '访问', '渠道', '来源', '属性', '分析模型', '价值', '属性', '分析', '主要', '价值', '体现', '丰富', '用户', '画像', '维度', '用户', '行为', '洞察', '粒度', '细致', '科学', '属性', '分析方法', '对于', '所有', '类型', '属性', '可以', '重数', '作为', '分析', '指标', '数值', '类型', '属性', '可以', '总和', '均值', '最大值', '最小值', '作为', '分析', '指标', '添加', '多个', '维度', '实际上', '以上', '分析模型', '应该', '一个', '综合体', '它们', '之间', '存在', '无法', '割裂', '关系', '分析模型', '实现', '科学', '互动', '配合', '能够', '科学', '揭示', '用户', '个人', '群体行为', '潜在', '规律', '据此', '做出', '理论', '推导', '不断', '工作', '实践', '优化', '商业', '决策', '产品', '智能', '指标体系', '构建', '对于', '不同', '产品', '关注', '指标', '应该', '这么', '千篇一律', '还是', '根据', '产品', '特性', '灵活', '定义', '这里', '要说', '我们', '所说', '指标', '并非', '企业', '管理', '环境', '绩效', '指标', '而是', '业务', '运营', '相关', '各种', '指标', '指标体系', '分散', '各个', '业务流程', '不同', '部门', '计算', '分析', '企业', '如何', '开展', '管理', '规划', '指标体系', '已成', '企业', '掌控', '数据', '关键', '第一', '关键', '指标', '法在', '企业', '发展', '每个', '阶段', '一个', '当前', '阶段', '高于一切', '需要', '集中', '全部', '精力', '注意', '一个', '数据', '这个', '数据', '就是', '第一', '关键', '指标', '当然', '随着', '业务', '发展', '这个', '指标', '发生变化', '第一', '关键', '指标', '外延', '指标', '比如', '一个', '成熟', '电商', '平台', '第一', '关键', '指标', '一定', '销售额', '销售额', '能够', '衍生', '访问量', '转化率', '单价', '指标', '企业', '运营', '人员', '产品', '经理', '需要', '通过', '衍生', '指标', '优化', '促进', '第一', '关键', '指标', '增长', '因此', '企业', '应该', '基于', '第一', '关键', '指标', '衍生', '指标', '衡量', '发展', '情况', '企业', '员工', '明确', '当前', '阶段', '核心', '目标', '以此', '制定', '规划', '清晰', '任务', '第一', '关键', '指标', '绩效', '管理', 'kpi', '理念', '比较', '接近', '就是', '寻找', '当前', '阶段', '整个', '公司', '需要', '关注', '指标', '以此', '集中', '火力', '目标', '前进', '海盗', '指标', '2007', '500startups', '创业', '孵化器', '创始', '合伙人', '戴夫', '麦克', '卢尔', 'davemcclure', '针对', '创业', '公司', '应该', '关注', '指标', '提出', '一套', '模型', 'piratemetrics', '海盗', '指标', '创业', '公司', '需要', '关注', '指标', '归结为', '方面', '分别', 'acquisition', '获取', 'activation', '激活', 'retention', '留存', 'revenue', '营收', 'referral', '引荐', '简称', 'aarrr', '第一', '关键', '指标', '定位', '企业', '当前', '发展', '阶段', '重要', '问题', '关注', '企业', '层面', '运转', '健康', '有利于', '公司', '形成', '合力', '聚焦', '同一', '目标', '海盗', '指标', '法为', '企业', '提供', '数据分析', '基础', '罗盘', '以及', '指导', '创业', '企业', '发展', '探索', '方向', '数据', '驱动', '商业', '决策', '数据', '验证', '实践', '科学依据', '数据', '驱动', '先进', '生产力', '数据', '驱动', '落地', '企业', '最为', '有效', '方式', '是从', '推动', '管理者', '推动', '前提', '自身', '具备', '数据', '意识', '能够', '认识', '数据', '意义', '价值', '意识', '数据管理', '不善', '可能', '带来', '危害', '下属', '费劲', '整理', '一批', '数据报表', '领导', '对此', '无视', '坚持', '脑袋', '决定', '这样', '企业', '数据', '发展', '陷入绝境', '数据', '驱动', '商业', '决策', '实现', '以下', '三大', '价值', '透过', '现象', '本质', '提升', '企业', '决策', '准确性', '科学性', '数据', '时代', '改变', '曾经', '依靠', '企业', '内部', '业务', '数据', '优化', '决策', '情况', '通过', '洞察', '数据', '背后', '价值', '赋予', '企业', '更加', '全面', '准确', '商业', '洞察力', '大幅', '提升', '企业', '商业', '决策', '水平', '降低', '企业', '经营', '风险', '数据', '说话', '降低', '企业', '沟通', '成本', '数据', '说话', '终止', '企业', '团队', '之间', '因某', '结果', '无休止', '争论', '局面', '降低', '团队', '沟通', '成本', '缩短', '企业', '研发', '时间', '大家', '经常', '所说', '争论', '如果', '两个', '没有', '数据', '那么', '嗓门', '通常', '获胜', '如果', '一个', '人有', '数据', '一个', '没有', '那么', '数据', '通常', '获胜', '如果', '两个', '数据', '需要', '争论', '赋予', '企业', '全面', '准确', '商业', '洞察力', '实现', '智能', '商业', '预测', '除了', '提升', '企业', '商业', '决策', '水平', '之外', '数据', '驱动', '商业', '决策', '赋予', '企业', '商业', '预测', '能力', '数据分析', '一架', '望远镜', '企业', '通过', '望远镜', '能够', '看到', '未来', '可能', '发生', '情况', '智能', '商业', '预测', '帮助', '企业', '率先', '进一步', '挖掘', '市场', '实现', '产品', '服务', '创新', '诡谲多变', '市场', '环境', '取得', '先发', '优势', '数据', '驱动', '产品', '智能', '所谓', '智能', '归结为', '这么', '一种', '模式', '首先', '我们', '数据', '然后', '数据', '套用', '某种', '算法', '模型', '最后', '结果', '数据', '反馈', '产品', '这样', '产品', '具备', '一种', '学习', '能力', '就是', '产品', '智能', '数据', '驱动', '决策', '分析', '结果', '用于', '决策', '使用', '数据', '驱动', '产品', '智能', '更加', '强调', '数据', '处理结果', '机器', '并且', '这种', '数据分析', '算法', '往往', '更加', '复杂', '本身', '具有', '可以', '自我', '迭代', '特点', '一个', '典型', '数据', '平台', '架构', '实时', '订阅', '举个', '例子', '一个', '用户', '产品', '首页', '搜索', '一个', '关键词', '鲜花', '立即', '一条', '代表', '行为', '数据', '发送到', '接收', '后续', '一个', '针对', '用户', '近期', '搜索', '行为', '提供', '推荐', '服务', '模块', '可以', '秒钟', '拿到', '这个', '行为', '数据', '并且', '用户', '访问', '一个', '页面', '时候', '及时', '提供', '鲜花', '相关', '内容', '推荐', '人工智能', '领域', '先驱者', 'arthursamuel', '1959', '创造', '机器', '学习', '这个', '概念', '这样', '定义', 'fieldofstudythatgivescomputerstheabilitytolearnwithoutbeingexplicitlyprogrammed', '简单', '来说', '机器', '学习', '研究', '通过', '显式', '编程', '赋予', '计算机', '学习', '能力', '一个', '领域', '这个', '概念', '可以', '看出', '以往', '普通', '计算机程序', '一个', '最大', '不同', '就是', '机器', '学习', '不是', '一个', '完全', '设计', '程序', '而是', '一种', '特殊', '能够', '自我', '提升', '算法', '计算机', '自己', '数据', '学习', '由此', '具备', '解决问题', '能力', '回归', '算法', '很多', '领域', '得到', '普遍', '应用', '金融', '方面', '可以', '股市行情', '分析', '预测', '产品', '运营', '方面', '可以', '产品', '流量', '预估', '生物', '领域', '可以', '蛋白', '结合点', '预测', '交通', '领域', '可以', '道路', '流量', '预警', '分类', '算法', '各个领域', '得到', '广泛', '应用', '金融', '方面', '可以', '识别', '作弊', '用户', '交通', '领域', '车牌', '识别', '一种', '分类', '应用', '产品', '运营', '领域', '可以', '用作', '流失', '客户', '预警', '提前', '找到', '那些', '可能', '流失', '客户', '聚类', '算法', '同样', '很多', '不同', '领域', '得到', '广泛应用', '例如', '产品', '运营', '我们', '可以', '聚类', '算法', '自动', '聚合', '用户', '行为', '轨迹', '并且', '据此', '分析', '用户', '使用', '产品', '习惯', '用于', '改善', '产品', '交互', '设计', '图形学', '领域', '基于', '聚类', '算法', '进行', '图像', '主题', '筛选', '一种', '常见', '应用', '甚至', '防火墙', '领域', '对于', '那些', '加密', '流量', '可以', '通过', '聚类', '算法', '大概', '识别', '这些', '流量', '到底', '什么', '类型', '流量', '数据', '案例', '实现', '步骤', '需求', '梳理', '区分', '业务', '业务流程', '事件', '设计', '主要', '区分', '事件', '本身', '对应', '事件', '扩展', '数据', '接入', '前端', '采集', '采集', '企业', '埋点', '规范', '最后', '书评', '书籍', '前半部', '分给', '惊喜', '解答', '很多', '搭建', '数据', '平台', '困惑', '但是', '部分', '信息量', '明显降低', '并且', '宣传', '神策', '公司', '感觉', '作为', '一本', '知识型', '数据', '部分', '大幅', '宣传', '合适', '整体', '得到', '并且', '帮助', '知识', '数据', '驱动', '数据', '信息', '知识', '智慧', '理论', '数据', '驱动', '产品', '决策', '驱动', '产品', '智能', '数据', '驱动', '包括', '数据', '接入', '传输', '建模', '存储', '统计分析', '挖掘', '可视化', '反馈', '数据分析', '金字塔', '采集', '建模', '分析', '指标', '数据', '埋点', '包括', '前端', '埋点', '后端', '埋点', '业务', '数据库', '之前', '忽略', '埋点', '埋点', '方式', '分为', '无埋点', '全埋点', '代码', '埋点', '对于', '埋点', '事件', '最好', '引入', '数据管理', '多维', '事件', '模型', 'event', '模型', '引入', 'who', 'when', 'where', 'what', 'how', '理论', '模型', '分为', '行为', '模型', 'event', '用户', '模型', 'user', '几种', '数据分析', '方法', '漏斗', '分析', '分布', '分析', '留存', '分析', '用户', '路径', '用户', '点击', '分析', '指标体系', '构建', '第一', '关键', '指标', '海盗', '指标', '数据', '分析', '实据', '智能', '可以', '起来', '形成', '闭环', '书中', '强调', '多次', '数据', '驱动', '产品', '智能', '不过', '对于', '智能', '这部分', '介绍', '浅显', '有点', '匹配', '感觉', '可能', '是因为', '篇幅', '可能', '是因为', '看到', '智能', '思考', '应用', '场景', '不是', '简单', '介绍', '算法', '几个', '简单', '案例', '当然', '总体', '来说', '帮助', '很大', '推荐', '本文', '地址', 'http', 'crazyant', 'net', '2194', 'html', '转载', '注明', '来源']","[[-2.50943134e-01 -1.38802300e-01  2.14618565e-01  1.62715457e-01
   3.02552717e-01 -3.35285452e-01 -1.96498441e-01  4.82916732e-01
   9.39556155e-03 -2.87283931e-04 -6.65938188e-02 -3.19794485e-01
  -1.88064224e-01  6.06160060e-01  1.41443272e-01 -9.61501433e-02
  -1.53252589e-01 -1.05700401e-02 -1.14202409e-01 -4.41481195e-01
   4.70381743e-02  2.29984621e-01  1.57147985e-02 -6.75668555e-02
   1.33906798e-01 -5.60509614e-01 -2.79306134e-01  9.44383707e-02
  -2.00167815e-01 -5.45169166e-02  2.63169972e-01  3.36658162e-02
  -2.39771333e-02 -1.42347450e-01 -9.00986497e-02  3.25020675e-01
  -1.14125710e-01 -2.05047984e-01  1.18042913e-01 -7.64204663e-01
  -1.81942530e-01 -5.79846971e-01 -2.87838488e-02 -9.04510966e-02
  -1.71979769e-01 -1.27158371e-01 -2.64104924e-01  4.85105444e-01
  -1.78365689e-01  3.83362309e-01  2.17110323e-01 -2.60681824e-01
  -1.16657575e-01 -2.36451497e-01  8.30505741e-02  3.79570612e-01
   2.66289210e-01 -5.20963024e-02  8.41917424e-02 -7.85091449e-02
   2.58713155e-02  3.02892057e-01  2.10429389e-02  8.62445317e-02
  -3.83058271e-01 -2.72372731e-02  4.44370531e-02 -2.10831674e-02
  -2.30047750e-01  4.39785980e-01  1.51505536e-01 -2.65307456e-01
   3.99153615e-01 -3.25866644e-01  5.76419165e-01  1.38077265e-01
   2.16594452e-01 -1.33180338e-01 -2.61937998e-01 -2.26734111e-01
  -9.05773529e-02 -9.06301500e-03 -5.64176324e-02  3.18873910e-01
  -3.85940707e-01  2.07125999e-01 -2.88700007e-01  3.97488323e-01
   4.51988989e-01  1.16693282e-01  3.23615226e-01  1.23141392e-01
   3.60169615e-01  1.83103141e-01  1.82774953e-01  3.73001962e-01
   9.03560447e-02 -3.02552747e-01 -2.81708165e-02 -7.68993827e-02]]"
2231,Spark数据倾斜解决方法,1、避免shuffle，改reduce join为map join，适用于JOIN的时候有一个表是小表的情况，直接使用collect()获取小表的所有数据，然后brodcast，对大表进行MAP，MAP时直接提取broadcast的小表数据实现JOIN；2、随机数的方案，对于聚合类操作，可以分步骤进行聚合，第一步，在原来的KEY后面加上随机数（比如1~10），然后进行聚合（比如SUM操作）；第二步去掉KEY后面的随机数；第三部再次聚合（对应第一步的SUM），只适用于聚合类场景；3、HIVE预处理的方案，如果已经有数据倾斜，则用HIVE预处理，然后将结果加载到SPARK中进行使用，适用于SPARK会频繁使用但是HIVE只会预计算一次的场景，用于即席查询比较多；4、修改或者提升shuffle的并行度，使用repatition进行，比如原来每个节点处理10个KEY的数据，现在处理3个KEY的数据，虽然某些KEY仍然是热点，但是会缓解不少；5、过滤掉发生倾斜的KEY，场景较少，可以用采样、预计算的方式计算出KEY的数量分布，然后过滤掉最多的KEY的数据即可；6、分治法+空间浪费法，将A表中热点KEY的数据单独提取出来，对KEY加上随机前缀；然后将B表对应热点KEY的数据提取出来，重复加上所有的随机数KEY，然后这俩RDD关联，得到热点的结果RDD；对于A/B剩下的数据，按普通的进行JOIN，得到普通结果的RDD；然后将热点RDD和普通RDD进行UNION得到最终结果；7、完全空间浪费法，对A表所有数据的KEY加随机前缀，对B表所有KEY做重复加上所有的随机前缀，然后做关联得到结果；8、多种方法配合使用；本文总结自：https://www.iteblog.com/archives/1671.html本文地址：http://crazyant.net/2231.html,"['spark', '数据', '倾斜', '解决', '方法', '避免', 'shuffle', 'reduce', 'join', 'map', 'join', '适用', 'join', '时候', '一个', '表是', '小表', '情况', '直接', '使用', 'collect', '获取', '小表', '所有', '数据', '然后', 'brodcast', '对大表', '进行', 'map', 'map', '直接', '提取', 'broadcast', '小表', '数据', '实现', 'join', '随机数', '方案', '对于', '聚合', '操作', '可以', '步骤', '进行', '聚合', '第一步', '原来', 'key', '后面', '加上', '随机数', '比如', '10', '然后', '进行', '聚合', '比如', 'sum', '操作', '第二步', '去掉', 'key', '后面', '随机数', '第三部', '再次', '聚合', '对应', '第一步', 'sum', '适用', '聚合', '场景', 'hive', '预处理', '方案', '如果', '已经', '数据', '倾斜', 'hive', '预处理', '然后', '结果', '加载', 'spark', '进行', '使用', '适用', 'spark', '频繁', '使用', '但是', 'hive', '只会', '预计', '一次', '场景', '用于', '即席', '查询', '比较', '修改', '或者', '提升', 'shuffle', '并行度', '使用', 'repatition', '进行', '比如', '原来', '每个', '节点', '处理', '10', 'key', '数据', '现在', '处理', 'key', '数据', '虽然', '某些', 'key', '仍然', '热点', '但是', '缓解', '不少', '过滤', '发生', '倾斜', 'key', '场景', '可以', '采样', '预计', '方式', '计算', 'key', '数量', '分布', '然后', '过滤', 'key', '数据', '即可', '分治', '空间', '浪费', '表中', '热点', 'key', '数据', '单独', '提取', '出来', 'key', '加上', '随机', '前缀', '然后', '对应', '热点', 'key', '数据', '提取', '出来', '重复', '加上', '所有', '随机数', 'key', '然后', '这俩', 'rdd', '关联', '得到', '热点', '结果', 'rdd', '对于', '剩下', '数据', '普通', '进行', 'join', '得到', '普通', '结果', 'rdd', '然后', '热点', 'rdd', '普通', 'rdd', '进行', 'union', '得到', '最终', '结果', '完全', '空间', '浪费', '所有', '数据', 'key', '随机', '前缀', '所有', 'key', '重复', '加上', '所有', '随机', '前缀', '然后', '关联', '得到', '结果', '多种', '方法', '配合', '使用', '本文', '总结', 'https', 'www', 'iteblog', 'com', 'archives', '1671', 'html', '本文', '地址', 'http', 'crazyant', 'net', '2231', 'html']","[[-0.25412089 -0.1392605   0.22436589  0.17409342  0.29607445 -0.3577704
  -0.20024925  0.50580896  0.00434635 -0.01683085 -0.07117693 -0.33780693
  -0.18925229  0.62095825  0.14992798 -0.1081317  -0.16093592  0.00116956
  -0.10269994 -0.46574678  0.03485121  0.23952503 -0.00254403 -0.09349261
   0.11885848 -0.56007598 -0.30042523  0.09871752 -0.21065223 -0.05392389
   0.25068079  0.04355841 -0.01973128 -0.14790725 -0.11068664  0.34331669
  -0.13142664 -0.21675564  0.12263123 -0.77434043 -0.17717968 -0.60108442
  -0.03476876 -0.07638022 -0.16722424 -0.15708262 -0.27450313  0.48857574
  -0.16101193  0.39812784  0.20752849 -0.27383767 -0.10136421 -0.23978639
   0.07044317  0.40363716  0.25963781 -0.0651138   0.09498669 -0.09993709
   0.04576588  0.30120255  0.01804187  0.09350369 -0.38479908 -0.0115009
   0.04066108 -0.01175808 -0.24317282  0.45250175  0.15157776 -0.25051995
   0.41063738 -0.3289954   0.59100564  0.17834163  0.22272335 -0.14607207
  -0.26348946 -0.21998418 -0.08623713 -0.00385398 -0.06746564  0.34189434
  -0.39462406  0.2044785  -0.29900216  0.4278941   0.48427759  0.13153088
   0.31998426  0.1269791   0.36398524  0.18375349  0.19480238  0.39329167
   0.09240173 -0.30277999 -0.01603662 -0.09185772]]"
2261,PyCharm开发PySpark程序的配置和实例,"对于PyCharm，需要作如下设置：1、安装pyspark，它会自动安装py4j2、在edit configuration中，add content root，选择spark下载包的python/pyspark/lib下的pyspark.zip和py4j.zip两个包；代码实例：from pyspark.sql import Rowfrom pyspark.sql import SparkSessionlogFile = ""file:///Users/peishuaishuai/tmp/sparktest.txt""  # Should be some file on your systemspark = SparkSession.builder.appName(""SimpleApp"").getOrCreate()input = spark.read.text(logFile).rdd.map(    lambda x: str(x[0]).split(""\t"")).filter(    lambda x: len(x) == 2).map(    lambda x: Row(name=x[0], grade=int(x[1])))schemaData = spark.createDataFrame(input)schemaData.createOrReplaceTempView(""tb"")print(schemaData.count())schemaData.printSchema()datas = spark.sql(""select name,sum(grade) from tb group by name"").rdd.map(    lambda x: ""\t"".join([x[0], str(x[1])]))datas.repartition(3).saveAsTextFile(""file:///Users/peishuaishuai/tmp/sparktest_output"")spark.stop() 输入数据为：name111name212name313name414name515name116name217name318name419name520name1121name1222name123name224name325name426name527name1828name1929name2030name2131name132name233name334name435name536name2737name2838name2939name140name241name342name443输出 print结果为：33root |-- grade: long (nullable = true) |-- name: string (nullable = true)文件中内容为：name3132name1929name2127name1222name1121name2030name2838name2737name598name2939name2131name4137name1122name1828pyspark开发起来，有点问题就是当级联过多的时候，类型可能丢失，导致代码没有提示，这点很不爽。其实对比了python、scala、java，我觉得编写大型的spark代码，用Java是最靠谱的，因为它强类型，代码提示很爽很直观。 ","['pycharm', '开发', 'pyspark', '程序', '配置', '实例', '对于', 'pycharm', '需要', '如下', '设置', '安装', 'pyspark', '它会', '自动', '安装', 'py4j2', 'edit', 'configuration', 'add', 'content', 'root', '选择', 'spark', '下载', 'python', 'pyspark', 'lib', 'pyspark', 'zip', 'py4j', 'zip', '两个', '代码', '实例', 'from', 'pyspark', 'sql', 'import', 'rowfrom', 'pyspark', 'sql', 'import', 'sparksessionlogfile', 'file', 'users', 'peishuaishuai', 'tmp', 'sparktest', 'txt', 'should', 'be', 'some', 'file', 'on', 'your', 'systemspark', 'sparksession', 'builder', 'appname', 'simpleapp', 'getorcreate', 'input', 'spark', 'read', 'text', 'logfile', 'rdd', 'map', 'lambda', 'str', 'split', 'filter', 'lambda', 'len', 'map', 'lambda', 'row', 'name', 'grade', 'int', 'schemadata', 'spark', 'createdataframe', 'input', 'schemadata', 'createorreplacetempview', 'tb', 'print', 'schemadata', 'count', 'schemadata', 'printschema', 'datas', 'spark', 'sql', 'select', 'name', 'sum', 'grade', 'from', 'tb', 'group', 'by', 'name', 'rdd', 'map', 'lambda', 'join', 'str', 'datas', 'repartition', 'saveastextfile', 'file', 'users', 'peishuaishuai', 'tmp', 'sparktest', 'output', 'spark', 'stop', '输入', '数据', 'name111name212name313name414name515name116name217name318name419name520name1121name1222name123name224name325name426name527name1828name1929name2030name2131name132name233name334name435name536name2737name2838name2939name140name241name342name443', '输出', 'print', '结果', '33root', '--', 'grade', 'long', 'nullable', 'true', '--', 'name', 'string', 'nullable', 'true', '文件', '内容', 'name3132name1929name2127name1222name1121name2030name2838name2737name598name2939name2131name4137name1122name1828pyspark', '开发', '起来', '有点', '问题', '就是', '级联', '过多', '时候', '类型', '可能', '丢失', '导致', '代码', '没有', '提示', '这点', '不爽', '其实', '对比', 'python', 'scala', 'java', '觉得', '编写', '大型', 'spark', '代码', 'java', '因为', '它强', '类型', '代码', '提示', '很爽', '直观']","[[-0.24665352 -0.09582597  0.26394232  0.13681549  0.28401947 -0.38130608
  -0.11288287  0.48626107 -0.07953625 -0.13953314 -0.03250362 -0.3861593
  -0.1317329   0.53463914  0.16929031 -0.11690534 -0.11465181 -0.01177095
  -0.06426245 -0.54083043 -0.05674875  0.27695209 -0.06700323 -0.22240398
   0.05525132 -0.47396142 -0.31324887  0.03126248 -0.24180695 -0.0873553
   0.16372475 -0.00378943  0.00765618 -0.12447014 -0.17802689  0.34298084
  -0.21071702 -0.30626008  0.08400535 -0.74693394 -0.13407383 -0.59324583
  -0.07719904 -0.00434905 -0.12902488 -0.23983463 -0.22776885  0.35474845
  -0.18965278  0.48550404  0.13672669 -0.28337066 -0.14070815 -0.17308407
  -0.0234881   0.39594131  0.14019935 -0.10596323  0.12774789 -0.16081622
   0.10726027  0.22953652  0.01814129  0.08102024 -0.39070295  0.0617778
   0.05798785 -0.03369132 -0.32034597  0.44071429  0.08417442 -0.1623503
   0.38786772 -0.3359049   0.55280164  0.30258697  0.13019809 -0.17476336
  -0.33526611 -0.09750291  0.01217058  0.05823316 -0.12772949  0.40507092
  -0.31137318  0.21215569 -0.2875812   0.45393278  0.50094917  0.17128932
   0.22936191  0.10520031  0.36077522  0.19342352  0.20075398  0.35427079
   0.13071479 -0.31872476 -0.0172035  -0.13518157]]"
2273,CentOS自己编译安装Python3的命令,yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make libffi-devel 参照：https://blog.51cto.com/13544424/2149473解决缺少SSL问题(安装1.1.1版本)，然后往下走 ./configure prefix=/usr/local/python3 --with-openssl=/usr/local/opensslmake && make install/usr/local/python3/bin/python3 -m pip install --upgrade pip/usr/local/python3/bin/python3 -m pip install redis,"['centos', '自己', '编译', '安装', 'python3', '命令', 'yum', 'install', 'zlib', 'devel', 'bzip2', 'devel', 'openssl', 'devel', 'ncurses', 'devel', 'sqlite', 'devel', 'readline', 'devel', 'tk', 'devel', 'gcc', 'make', 'libffi', 'devel', '参照', 'https', 'blog.51', 'cto', 'com', '13544424', '2149473', '解决', '缺少', 'ssl', '问题', '安装', '1.1', '版本', '然后', '往下走', 'configure', 'prefix', 'usr', 'local', 'python3', '--', 'with', 'openssl', 'usr', 'local', 'opensslmake', '&&', 'make', 'install', 'usr', 'local', 'python3', 'bin', 'python3', 'pip', 'install', '--', 'upgrade', 'pip', 'usr', 'local', 'python3', 'bin', 'python3', 'pip', 'install', 'redis']","[[-0.20831769 -0.07537965  0.20134482  0.16562404  0.16228355 -0.30614145
  -0.07443907  0.36895445 -0.04280808 -0.07980076 -0.05052465 -0.29758624
  -0.08239684  0.40907994  0.0885955  -0.11607069 -0.08323358 -0.00344856
  -0.02005571 -0.32466252 -0.00683063  0.21224255 -0.06996508 -0.14319902
   0.03287523 -0.36215367 -0.23615793  0.03269476 -0.1538893  -0.06975422
   0.13152138  0.05157733  0.00204548 -0.08707334 -0.1408283   0.27513491
  -0.12082282 -0.21680559  0.0567966  -0.52833759 -0.07529817 -0.41305692
  -0.02598828 -0.04115582 -0.0941582  -0.17153524 -0.23836164  0.31518567
  -0.0697597   0.30730597  0.07463613 -0.21695152 -0.03843938 -0.17693945
  -0.02301906  0.30326507  0.12085054 -0.07146413  0.09942406 -0.09908442
   0.09501902  0.17406699  0.00269439  0.04197822 -0.27755318  0.04202874
   0.00388816  0.00631179 -0.18608734  0.33287919  0.04232106 -0.13615658
   0.30588827 -0.25674525  0.43555416  0.23415405  0.17407175 -0.15918555
  -0.17681682 -0.1331096  -0.04978071  0.0419395  -0.08965197  0.31635468
  -0.26243611  0.14429619 -0.21310894  0.36683392  0.39334185  0.13497195
   0.16234125  0.09412335  0.24361846  0.12861793  0.15120773  0.33121553
   0.0723757  -0.20487456  0.08966275 -0.08351289]]"
2283,Python3用scan和delete命令批量清理redis数据,"import redisimport timeredis_cache = redis.Redis(host="""", port=0000, password=""xxxx"", db=1)print(""begin"")print(redis_cache.dbsize())begin_pos = 0while True:    result = redis_cache.scan(begin_pos, ""xxxxx_*"", 100000)    return_pos, datalist = result    print(time.strftime(""%Y-%m-%d %H:%M:%S"", time.localtime(time.time())), return_pos)    if len(datalist) > 0:        print(time.strftime(""%Y-%m-%d %H:%M:%S"", time.localtime(time.time())), ""delete"", len(datalist))        redis_cache.delete(*datalist)    if return_pos == 0:        break    begin_pos = return_posprint(""over"")有几个知识点：scan命令的第一个入参从0开始代表从头扫描scan命令的返回是(pos, [])元组，第一个pos可以作为下次扫描的入参pos，第二个值就是扫描到的KEYscan命令的第三个参数，是本次扫描的KEY数目，比如传递10万个，但是返回的LIST可能是0，因为有0个匹配redis的delete命令传递的是array参数，可以用*list传递 ","['python3', 'scan', 'delete', '命令', '批量', '清理', 'redis', '数据', 'import', 'redisimport', 'timeredis', 'cache', 'redis', 'redis', 'host', 'port', '0000', 'password', 'xxxx', 'db', 'print', 'begin', 'print', 'redis', 'cache', 'dbsize', 'begin', 'pos', '0while', 'true', 'result', 'redis', 'cache', 'scan', 'begin', 'pos', 'xxxxx', '100000', 'return', 'pos', 'datalist', 'result', 'print', 'time', 'strftime', '-%', '-%', 'time', 'localtime', 'time', 'time', 'return', 'pos', 'if', 'len', 'datalist', 'print', 'time', 'strftime', '-%', '-%', 'time', 'localtime', 'time', 'time', 'delete', 'len', 'datalist', 'redis', 'cache', 'delete', 'datalist', 'if', 'return', 'pos', 'break', 'begin', 'pos', 'return', 'posprint', 'over', '几个', '知识点', 'scan', '命令', '第一个', '参从', '开始', '代表', '从头', '扫描', 'scan', '命令', '返回', 'pos', '元组', '第一个', 'pos', '可以', '作为', '下次', '扫描', 'pos', '第二个', '就是', '扫描', 'keyscan', '命令', '第三个', '参数', '本次', '扫描', 'key', '数目', '比如', '传递', '10', '万个', '但是', '返回', 'list', '可能', '因为', '匹配', 'redis', 'delete', '命令', '传递', 'array', '参数', '可以', 'list', '传递']","[[-2.06970490e-01 -9.61589968e-02  2.39794205e-01  8.89133638e-02
   2.79863941e-01 -3.39400005e-01 -1.12412837e-01  4.27069001e-01
  -5.72241786e-02 -1.18825543e-01 -2.22447700e-02 -3.43651304e-01
  -1.40564056e-01  4.97781715e-01  1.63664844e-01 -9.47836661e-02
  -1.18663746e-01 -8.83379289e-03 -7.26972156e-02 -5.16602483e-01
  -5.40806809e-02  2.30976296e-01 -4.29228307e-02 -1.90613686e-01
   6.35193267e-02 -4.39161310e-01 -2.76347182e-01  3.04736688e-02
  -2.30349031e-01 -7.21546956e-02  1.48745804e-01 -1.89015037e-02
   1.26323563e-02 -1.23920398e-01 -1.55246428e-01  2.90341160e-01
  -1.96691901e-01 -2.61086803e-01  8.08934567e-02 -6.87475884e-01
  -1.48426239e-01 -5.62297989e-01 -7.88473781e-02 -6.13532382e-04
  -1.20983670e-01 -2.14891700e-01 -1.91594163e-01  3.15049848e-01
  -2.01719390e-01  4.54521379e-01  1.49173855e-01 -2.45207699e-01
  -1.41783405e-01 -1.45996371e-01 -1.47274369e-02  3.48216250e-01
   1.35354741e-01 -9.07442344e-02  1.00384834e-01 -1.41291942e-01
   8.51685715e-02  2.21614427e-01  1.54865362e-02  8.81111245e-02
  -3.57664327e-01  3.88901769e-02  6.37826316e-02 -4.60850617e-02
  -2.94724135e-01  3.99690589e-01  9.62443688e-02 -1.59958177e-01
   3.42315890e-01 -2.94569066e-01  5.06582181e-01  2.49899682e-01
   1.01054111e-01 -1.37547678e-01 -3.19755130e-01 -9.35704196e-02
   2.32643908e-02  5.68597283e-02 -1.16738787e-01  3.45102344e-01
  -2.90149536e-01  2.00826843e-01 -2.63744354e-01  4.02789010e-01
   4.42578761e-01  1.46140982e-01  2.24488117e-01  1.03695095e-01
   3.42013336e-01  1.74464340e-01  1.80360964e-01  3.00952988e-01
   1.28272296e-01 -3.09058454e-01 -6.38032981e-02 -1.23111346e-01]]"
2301,tensorflow怎样输入具有多个值的特征,"大部分的特征都是单个值的，比如性别、年龄、职业、地理位置、时间、地点、分类、点击率等等；但是还有一些是多个值的列表，比如最近点击ID列表、个人偏好的ID列表、物品分词列表等等，对于这种特征该怎么处理呢？参考文章：https://stackoverflow.com/questions/48697799/tensorflow-feature-column-for-variable-list-of-values以下是我自己的一个测试：features = {    'letter': [        ['A', 'A'], ['C', 'D'], ['E', 'F'], ['G', 'A'], ['X', 'R']    ]}letter_feature = tf.feature_column.categorical_column_with_vocabulary_list(    ""letter"", [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""X"", ""R""], dtype=tf.string)indicator = tf.feature_column.indicator_column(letter_feature)tensor = input_layer(features, [indicator])print(tensor)输出为：tf.Tensor([[2. 0. 0. 0. 0. 0. 0. 0. 0.] [0. 0. 1. 1. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 1. 1. 0. 0. 0.] [1. 0. 0. 0. 0. 0. 1. 0. 0.] [0. 0. 0. 0. 0. 0. 0. 1. 1.]], shape=(5, 9), dtype=float32)总结一下就是，将特征装饰为tf.feature_column.indicator_column就可以。参考文章为：Tensorflow feature column for variable list of values，地址","['tensorflow', '怎样', '输入', '具有', '多个', '特征', '大部分', '特征', '单个', '比如', '性别', '年龄', '职业', '地理位置', '时间', '地点', '分类', '点击率', '等等', '但是', '还有', '一些', '多个', '列表', '比如', '最近', '点击', 'id', '列表', '个人', '偏好', 'id', '列表', '物品', '分词', '列表', '等等', '对于', '这种', '特征', '怎么', '处理', '参考', '文章', 'https', 'stackoverflow', 'com', 'questions', '48697799', 'tensorflow', 'feature', 'column', 'for', 'variable', 'list', 'of', 'values', '以下', '自己', '一个', '测试', 'features', 'letter', 'letter', 'feature', 'tf', 'feature', 'column', 'categorical', 'column', 'with', 'vocabulary', 'list', 'letter', 'dtype', 'tf', 'string', 'indicator', 'tf', 'feature', 'column', 'indicator', 'column', 'letter', 'feature', 'tensor', 'input', 'layer', 'features', 'indicator', 'print', 'tensor', '输出', 'tf', 'tensor', 'shape', 'dtype', 'float32', '总结', '一下', '就是', '特征', '装饰', 'tf', 'feature', 'column', 'indicator', 'column', '可以', '参考', '文章', 'tensorflow', 'feature', 'column', 'for', 'variable', 'list', 'of', 'values', '地址']","[[-2.25280091e-01 -1.09056333e-01  2.46144053e-01  1.45677954e-01
   2.65713668e-01 -3.60581068e-01 -1.32326666e-01  4.60287534e-01
  -4.82590420e-02 -9.45375292e-02 -4.81742925e-02 -3.58059929e-01
  -1.44364835e-01  5.34129373e-01  1.49211714e-01 -1.06501954e-01
  -1.26942130e-01 -1.16014963e-02 -6.71258664e-02 -4.88757204e-01
  -2.55966067e-02  2.49025570e-01 -4.95460895e-02 -1.81322553e-01
   6.23714844e-02 -4.69021181e-01 -2.98509269e-01  4.94225332e-02
  -2.17939222e-01 -6.87893501e-02  1.73750829e-01  2.35046978e-02
   1.69160416e-03 -1.19936646e-01 -1.55218143e-01  3.22954755e-01
  -1.76368497e-01 -2.57927005e-01  7.85408077e-02 -7.05996561e-01
  -1.33226424e-01 -5.72267765e-01 -6.45440188e-02 -2.21264692e-02
  -1.31565965e-01 -2.16848108e-01 -2.41823572e-01  3.69813974e-01
  -1.62594674e-01  4.33344931e-01  1.46018818e-01 -2.61091981e-01
  -1.06191526e-01 -1.88536942e-01 -1.42533841e-03  3.76624700e-01
   1.66934175e-01 -8.55245528e-02  1.04060083e-01 -1.20417238e-01
   8.58854362e-02  2.32859898e-01  1.17295125e-02  8.59756928e-02
  -3.57862594e-01  3.77166661e-02  4.19832990e-02 -2.02431760e-02
  -2.70994216e-01  4.20155924e-01  9.75628751e-02 -1.80959151e-01
   3.78428679e-01 -3.14711417e-01  5.37615421e-01  2.50181902e-01
   1.65909338e-01 -1.62042110e-01 -2.91742560e-01 -1.44835181e-01
  -2.13433944e-02  4.28463900e-02 -1.06295292e-01  3.61711307e-01
  -3.35047258e-01  2.02790610e-01 -2.76111834e-01  4.38421810e-01
   4.80250175e-01  1.58347137e-01  2.35664675e-01  1.12932517e-01
   3.47358468e-01  1.75057280e-01  1.89198166e-01  3.52403984e-01
   1.07518239e-01 -2.97260496e-01 -5.92385441e-04 -1.12865897e-01]]"
2303,Spark使用JAVA编写自定义函数修改DataFrame,"本文的代码涉及几个知识点，都是比较有用：1、Spark用JAVA编写代码的方式；2、Spark读取MySQL数据表，并且使用的是自定义SQL的方式，默认会读取整个表的；3、Spark使用sql.functions的原有方法，给dataframe新增列、变更列；4、Spark使用udf的自定义函数，给dataframe新增列、变更列；/** * spark直接读取mysql */private static Dataset<Row> queryMySQLData(SparkSession spark) {    Properties properties = new Properties();    properties.put(""user"", ""root"");    properties.put(""password"", ""12345678"");    properties.put(""driver"", ""com.mysql.jdbc.Driver"");    // 可以写SQL语句查询数据结果    return spark.read().jdbc(            ""jdbc:mysql://127.0.0.1:3306/test""            , ""(select id, name from tb_data) tsub"",            properties);}整个函数使用spark.read().jdbc读取mysql数据表，配置了mysql的user、passpord、driver，jdbcurl，以及可以通过sql语句执行数据查询，sql语句这里在spark源文档是table name，如果只设置table name，则会读取整个表，可以使用(select id, name from tb_data) tsub的方式读取SQL结果，注意的是这里必须给SQL语句设定一个标的别名。以下是几种给dataframe添加新列、修改原有列的方法方法1：使用functions中的函数，有一些局限性// 方法1：使用functions中的函数，有一些局限性inputData.withColumn(""name_length_method1"", functions.length(inputData.col(""name"")));使用的是sql.functions里面的方法，里面支持了大部分的size、length等等方法，不过还是不够灵活，因为不支持就是不支持；方法2：自定义注册udf，可以用JAVA代码写处理可以先用spark.udf().register注册方法，然后使用functions.callUDF进行调用，其中自定义方法需要实现UDF1~UDF20的接口，分别代表传入不同的入参列：// 方法2：自定义注册udf，可以用JAVA代码写处理spark.udf().register(        ""getLength"",        new UDF1<String, Integer>() {            @Override            public Integer call(String s) throws Exception {                return s.length();            }        },        DataTypes.IntegerType);inputData = inputData.withColumn(        ""name_length_method2"",        functions.callUDF(""getLength"",                inputData.col(""name"")));// 方法2.1：可以写UDF2~UDF20，就是把输入字段变成多个spark.udf().register(        ""getLength2"",        new UDF2<Long, String, Long>() {            @Override            public Long call(Long aLong, String s) throws Exception {                return aLong + s.length();            }        },        DataTypes.LongType);inputData = inputData.withColumn(        ""name_length_method3"",        functions.callUDF(                ""getLength2"",                inputData.col(""id""),                inputData.col(""name"")));inputData.show(20, false);代码地址见：github地址tb_data的mysql表数据读取后的原始dataframe的schema：root |-- id: long (nullable = true) |-- name: string (nullable = true)数据：+---+-----------+|id |name       |+---+-----------+|1  |name1      ||2  |name22     ||3  |name333    ||4  |name4444   ||5  |name55555  ||6  |name666666 ||7  |name7777777|+---+-----------+最终计算之后的数据输出：+---+-----------+-------------------+-------------------+-------------------+|id |name       |name_length_method1|name_length_method2|name_length_method3|+---+-----------+-------------------+-------------------+-------------------+|1  |name1      |5                  |5                  |6                  ||2  |name22     |6                  |6                  |8                  ||3  |name333    |7                  |7                  |10                 ||4  |name4444   |8                  |8                  |12                 ||5  |name55555  |9                  |9                  |14                 ||6  |name666666 |10                 |10                 |16                 ||7  |name7777777|11                 |11                 |18                 |+---+-----------+-------------------+-------------------+-------------------+ ","['spark', '使用', 'java', '编写', '自定义', '函数', '修改', 'dataframe', '本文', '代码', '涉及', '几个', '知识点', '比较', '有用', 'spark', 'java', '编写', '代码', '方式', 'spark', '读取', 'mysql', '数据表', '并且', '使用', '自定义', 'sql', '方式', '默认', '读取', '整个', 'spark', '使用', 'sql', 'functions', '原有', '方法', 'dataframe', '新增', '变更', 'spark', '使用', 'udf', '自定义', '函数', 'dataframe', '新增', '变更', 'spark', '直接', '读取', 'mysql', 'private', 'static', 'dataset', 'row', 'querymysqldata', 'sparksession', 'spark', 'properties', 'properties', 'new', 'properties', 'properties', 'put', 'user', 'root', 'properties', 'put', 'password', '12345678', 'properties', 'put', 'driver', 'com', 'mysql', 'jdbc', 'driver', '可以', 'sql', '语句', '查询', '数据', '结果', 'return', 'spark', 'read', 'jdbc', 'jdbc', 'mysql', '127.0', '0.1', '3306', 'test', 'select', 'id', 'name', 'from', 'tb', 'data', 'tsub', 'properties', '整个', '函数', '使用', 'spark', 'read', 'jdbc', '读取', 'mysql', '数据表', '配置', 'mysql', 'user', 'passpord', 'driver', 'jdbcurl', '以及', '可以', '通过', 'sql', '语句', '执行', '数据', '查询', 'sql', '语句', '这里', 'spark', '文档', 'table', 'name', '如果', '设置', 'table', 'name', '读取', '整个', '可以', '使用', 'select', 'id', 'name', 'from', 'tb', 'data', 'tsub', '方式', '读取', 'sql', '结果', '注意', '这里', '必须', 'sql', '语句', '设定', '一个', '标的', '别名', '以下', '几种', 'dataframe', '添加', '新列', '修改', '原有', '方法', '方法', '使用', 'functions', '函数', '一些', '局限性', '方法', '使用', 'functions', '函数', '一些', '局限性', 'inputdata', 'withcolumn', 'name', 'length', 'method1', 'functions', 'length', 'inputdata', 'col', 'name', '使用', 'sql', 'functions', '里面', '方法', '里面', '支持', '大部分', 'size', 'length', '等等', '方法', '不过', '还是', '不够', '灵活', '因为', '支持', '就是', '支持', '方法', '自定义', '注册', 'udf', '可以', 'java', '代码', '处理', '可以', '先用', 'spark', 'udf', 'register', '注册', '方法', '然后', '使用', 'functions', 'calludf', '进行', '调用', '其中', '自定义', '方法', '需要', '实现', 'udf1', 'udf20', '接口', '分别', '代表', '传入', '不同', '参列', '方法', '自定义', '注册', 'udf', '可以', 'java', '代码', '处理', 'spark', 'udf', 'register', 'getlength', 'new', 'udf1', 'string', 'integer', 'override', 'public', 'integer', 'call', 'string', 'throws', 'exception', 'return', 'length', 'datatypes', 'integertype', 'inputdata', 'inputdata', 'withcolumn', 'name', 'length', 'method2', 'functions', 'calludf', 'getlength', 'inputdata', 'col', 'name', '方法', '2.1', '可以', 'udf2', 'udf20', '就是', '输入', '变成', '多个', 'spark', 'udf', 'register', 'getlength2', 'new', 'udf2', 'long', 'string', 'long', 'override', 'public', 'long', 'call', 'long', 'along', 'string', 'throws', 'exception', 'return', 'along', 'length', 'datatypes', 'longtype', 'inputdata', 'inputdata', 'withcolumn', 'name', 'length', 'method3', 'functions', 'calludf', 'getlength2', 'inputdata', 'col', 'id', 'inputdata', 'col', 'name', 'inputdata', 'show', '20', 'false', '代码', '地址', 'github', '地址', 'tb', 'data', 'mysql', '数据', '读取', '原始', 'dataframe', 'schema', 'root', '--', 'id', 'long', 'nullable', 'true', '--', 'name', 'string', 'nullable', 'true', '数据', '+---+-----------+', 'id', 'name', '+---+-----------+', 'name1', 'name22', 'name333', 'name4444', 'name55555', 'name666666', 'name7777777', '+---+-----------+', '最终', '计算', '之后', '数据', '输出', '+---+-----------+-------------------+-------------------+-------------------+', 'id', 'name', 'name', 'length', 'method1', 'name', 'length', 'method2', 'name', 'length', 'method3', '+---+-----------+-------------------+-------------------+-------------------+', 'name1', 'name22', 'name333', '10', 'name4444', '12', 'name55555', '14', 'name666666', '10', '10', '16', 'name7777777', '11', '11', '18', '+---+-----------+-------------------+-------------------+-------------------+']","[[-2.41681281e-01 -1.18259632e-01  2.55864957e-01  1.28824195e-01
   3.26418004e-01 -3.89249826e-01 -1.53988921e-01  5.26931674e-01
  -5.81755261e-02 -1.14318263e-01 -4.33768772e-02 -3.83705698e-01
  -1.75396619e-01  5.96801723e-01  1.82290708e-01 -1.08299438e-01
  -1.37619116e-01 -2.75096478e-05 -9.18402440e-02 -5.75977128e-01
  -4.12140475e-02  2.71293997e-01 -3.87419465e-02 -2.00876476e-01
   8.61905984e-02 -5.28580824e-01 -3.25717811e-01  5.19122740e-02
  -2.56400943e-01 -7.79163424e-02  2.01594551e-01 -3.77541886e-03
   2.99588145e-03 -1.49177005e-01 -1.69162047e-01  3.57581331e-01
  -2.12940009e-01 -2.88201306e-01  1.03742231e-01 -8.10502023e-01
  -1.65289296e-01 -6.43423648e-01 -7.71709266e-02 -6.11124191e-03
  -1.50099462e-01 -2.27537395e-01 -2.28118657e-01  3.98976534e-01
  -2.12379511e-01  5.02995296e-01  1.83904191e-01 -2.95557771e-01
  -1.56443192e-01 -1.83174307e-01  7.65843078e-03  4.21209015e-01
   1.83651243e-01 -9.86412148e-02  1.21570326e-01 -1.53863601e-01
   9.37146211e-02  2.64750976e-01  2.84998687e-02  1.04509707e-01
  -4.14994319e-01  3.65352343e-02  6.71436518e-02 -4.21326294e-02
  -3.34075108e-01  4.66726211e-01  1.20785571e-01 -1.98686474e-01
   4.09028506e-01 -3.50293408e-01  5.98029404e-01  2.74036535e-01
   1.38917979e-01 -1.52832980e-01 -3.63531519e-01 -1.27391760e-01
  -1.32561373e-03  5.01832859e-02 -1.18123660e-01  3.96217206e-01
  -3.55831159e-01  2.29903171e-01 -3.04317075e-01  4.61644222e-01
   5.20362141e-01  1.60832461e-01  2.83922847e-01  1.14188777e-01
   3.93348617e-01  2.08307927e-01  2.11931216e-01  3.60890964e-01
   1.35740700e-01 -3.42328927e-01 -6.07849251e-02 -1.35021557e-01]]"
2324,推荐系统：爱奇艺知识推荐系统架构,爱奇艺知识频道当前已经包含了2万精品课程，涵盖职场、文史、IT/互联网等多个分类，这么多课程怎么实现高效分发是一个大难题，通过搜索触达、人工运营位、IP导流等方式确实可以分发一批课程，然而这些课程普遍集中于头部热度课程，暴露在用户面前的仍然是冰山的顶部，大量的课程由于信息过载没有暴露的机会，挖掘长尾课程防止过度马太效应，推荐系统责任重大。1、表现形式爱奇艺知识当前的推荐系统有如图几个表现形式：个性化分群运营：根据画像做用户分群，按群推荐课程；猜你喜欢：个性化课程推荐流；相关推荐：课程页面内的相关推荐；买了又买：购买成功页的课程推荐；2、系统架构系统架构上图，主要流程如下：数据处理：使用spark、hive、python，从mysql备库、hbase、pingback的hive表和实时流提取数据，实现关联、清洗、映射特征等处理，其中spark streaming从pingback的rockermq准实时提取用户行为，实现10秒钟用户个性化推荐列表的更新；模型计算：使用spark als矩阵分解计算，结果可以给用户推荐协同过滤、以及根据item vectors实现相关推荐；使用tensorflow/paddle实现排序模型，使用LR/DNN/DEEP&WIDE实现CTR排序；结果数据存储：这里涉及比较多的考虑，主要是从数据量、查询响应时间、数据结构支持度等方面考虑：对于item本身实体数据、item相似度列表等数据，使用redis存储，因为redis cluster不能够批量读取，但是这里却需要批量读取；对于用户行为实时数据，因为需要大数据量存储，并且需要丰富的数据结构支持，选用redis cluster；对于用户画像数据、自己提取的用户标签数据，数据量大，只需要根据用户ID提取，所以选用scylla；在线服务：主要是参考youtube的推荐系统架构，将整体步骤细分为召回、排序、过滤、混排等步骤，其中：召回、排序、已购等步骤，都是id在参与计算，等最终返回的时候，才查询实体业务数据；模型排序服务使用grpc/brpc/http提供服务给应用服务调用；应用服务同时需要支持AB Test的分桶，以及参数的返回；前端请求：前端只进行非常短暂的缓存（防止恶意请求），重要的是需要搞定pingback的埋点投递，投递中需要设定ab test的参数以上就是爱奇艺知识的推荐系统架构，系统还处于快速迭代升级中，之后的事情有这些：当前系统在QPS高峰是耗时150MS左右，时间耗费在实体数据拼装阶段，后续进行优化；相关推荐的导流效果很好，后续进行多种实验进行效果对比；排序模型的线上化，通过AB测试进行效果对比； 本文地址：http://www.crazyant.net/2324.html，转载请注明来源,"['推荐', '系统', '爱奇艺', '知识', '推荐', '系统', '架构', '爱奇艺', '知识', '频道', '当前', '已经', '包含', '精品课程', '涵盖', '职场', '文史', 'it', '互联网', '多个', '分类', '这么', '课程', '怎么', '实现', '高效', '分发', '一个', '难题', '通过', '搜索', '触达', '人工', '运营', 'ip', '导流', '方式', '确实', '可以', '分发', '一批', '课程', '然而', '这些', '课程', '普遍', '集中', '头部', '热度', '课程', '暴露', '用户', '面前', '仍然', '冰山', '顶部', '大量', '课程', '由于', '信息', '过载', '没有', '暴露', '机会', '挖掘', '长尾', '课程', '防止', '过度', '马太效应', '推荐', '系统', '责任重大', '表现形式', '爱奇艺', '知识', '当前', '推荐', '系统', '有如', '几个', '表现形式', '个性化', '运营', '根据', '画像', '用户', '按群', '推荐', '课程', '喜欢', '个性化', '课程', '推荐', '相关', '推荐', '课程', '页面', '相关', '推荐', '购买', '成功', '课程', '推荐', '系统', '架构', '系统', '架构', '主要', '流程', '如下', '数据处理', '使用', 'spark', 'hive', 'python', 'mysql', '备库', 'hbase', 'pingback', 'hive', '实时', '提取', '数据', '实现', '关联', '清洗', '映射', '特征', '处理', '其中', 'spark', 'streaming', 'pingback', 'rockermq', '实时', '提取', '用户', '行为', '实现', '10', '秒钟', '用户', '个性化', '推荐', '列表', '更新', '模型', '计算', '使用', 'spark', 'als', '矩阵', '分解', '计算', '结果', '可以', '用户', '推荐', '协同', '过滤', '以及', '根据', 'item', 'vectors', '实现', '相关', '推荐', '使用', 'tensorflow', 'paddle', '实现', '排序', '模型', '使用', 'lr', 'dnn', 'deep', 'wide', '实现', 'ctr', '排序', '结果', '数据', '存储', '这里', '涉及', '比较', '考虑', '主要', '是从', '数据量', '查询', '响应', '时间', '数据结构', '支持', '方面', '考虑', '对于', 'item', '本身', '实体', '数据', 'item', '相似', '列表', '数据', '使用', 'redis', '存储', '因为', 'redis', 'cluster', '能够', '批量', '读取', '但是', '这里', '需要', '批量', '读取', '对于', '用户', '行为', '实时', '数据', '因为', '需要', '数据量', '存储', '并且', '需要', '丰富', '数据结构', '支持', '选用', 'redis', 'cluster', '对于', '用户', '画像', '数据', '自己', '提取', '用户', '标签', '数据', '数据量', '需要', '根据', '用户', 'id', '提取', '所以', '选用', 'scylla', '在线', '服务', '主要', '参考', 'youtube', '推荐', '系统', '架构', '整体', '步骤', '细分', '召回', '排序', '过滤', '混排', '步骤', '其中', '召回', '排序', '已购', '步骤', 'id', '参与', '计算', '最终', '返回', '时候', '查询', '实体', '业务', '数据', '模型', '排序', '服务', '使用', 'grpc', 'brpc', 'http', '提供', '服务', '应用服务', '调用', '应用服务', '同时', '需要', '支持', 'ab', 'test', '分桶', '以及', '参数', '返回', '前端', '请求', '前端', '进行', '非常', '短暂', '缓存', '防止', '恶意', '请求', '重要', '需要', '搞定', 'pingback', '埋点', '投递', '投递', '需要', '设定', 'ab', 'test', '参数', '以上', '就是', '爱奇艺', '知识', '推荐', '系统', '架构', '系统', '处于', '快速', '迭代', '升级', '之后', '事情', '这些', '当前', '系统', 'qps', '高峰', '耗时', '150ms', '左右', '时间', '耗费', '实体', '数据', '拼装', '阶段', '后续', '进行', '优化', '相关', '推荐', '导流', '效果', '后续', '进行', '多种', '实验', '进行', '效果', '对比', '排序', '模型', '上化', '通过', 'ab', '测试', '进行', '效果', '对比', '本文', '地址', 'http', 'www', 'crazyant', 'net', '2324', 'html', '转载', '注明', '来源']","[[-0.2568681  -0.13986779  0.22323107  0.18531345  0.29147217 -0.3494012
  -0.19118104  0.49939019  0.00494138 -0.00968074 -0.07308064 -0.33508754
  -0.18046599  0.61208814  0.14080253 -0.1059679  -0.15463551 -0.00597977
  -0.10045242 -0.44381505  0.04255482  0.24063511 -0.00382492 -0.0861633
   0.1199098  -0.55755582 -0.29378607  0.0964043  -0.2014685  -0.05961345
   0.25594835  0.04963952 -0.02114489 -0.14181423 -0.10561023  0.34149836
  -0.12331564 -0.21229867  0.11457368 -0.76818063 -0.17133434 -0.58330736
  -0.03009671 -0.08470825 -0.17041886 -0.14763509 -0.2850976   0.49225049
  -0.15826444  0.38591176  0.20256815 -0.27445731 -0.09950404 -0.24683969
   0.07620595  0.39752489  0.26123813 -0.05717619  0.09427307 -0.08678133
   0.04210648  0.29632895  0.02166717  0.08776663 -0.38703322 -0.01822163
   0.03516694 -0.00663058 -0.23128772  0.44838913  0.14561047 -0.25660972
   0.41167292 -0.32964305  0.58543935  0.16531793  0.23324377 -0.14768127
  -0.25753307 -0.23120146 -0.0969654  -0.00684356 -0.06228226  0.33842593
  -0.39447034  0.20715176 -0.29279484  0.42338261  0.47697673  0.13048623
   0.31467318  0.12620363  0.36349674  0.1870089   0.18948021  0.39571112
   0.08807193 -0.29539174  0.0013783  -0.08475657]]"
2336,我为什么从工程转了算法？,"一句话总结下：年龄大了，总想让自己做的事情有意义点，所以想让自己写的代码对产品有更多的影响、可衡量的影响。1、我发现自己的JAVA开发和大数据业务处理对产品影响甚微我自己工作快7年，工作主要有两个方向：A - JAVA后台业务开发来什么需求做什么开发，增删改查，接消息发消息，因为之前做的是公司商业运营部门的需求，面向公司运营市场人员，不直接面向普通用户，系统访问量特别低，往往一天几千个访问量很不错了，这也导致出去面试的时候别人问我系统QPS有多少，我真是不好意思说是不到两位数；B - 业务大数据处理现在做业务的都要看数据，毕竟数据能反映业务的状况，一旦涉及数据就不只是mysql里面的那些少量数据，往往需要查一下各个渠道来源的流量之类的，这就要去查公司级别的数据仓库，而他们每天的数据量每天几十上百TB，不用HIVE/SPARK这些大数据技术搞不定，但说到底就是SQL取数做个图表出来，出去面试人家问大数据建模方法论、怎样实现跨业务的统计指标统一我照样是一头懵逼；虽然我知道JAVA的后台服务开发确实可以往后发展，但是我没有接触到高并发这些难度大的方向；而大数据业务处理虽然只是出了一些报表，但是我自己却没有分析报表的能力，报表也是老大们看他们根据什么数据拍了什么板我也不知道。这两个方向都让我觉得有种不那么精准发展的感觉，如果我对别人说自己的职业发展方向是JAVA，恐怕别人会觉得你是随着业务走什么都得干，称作""方向""有点虚虚的，同时它俩都是非常间接的影响着业务，或者说影响很微小，缺少了那么点""意义""。2、对数据相关的学习，让我关注到数据分析和数据智能领域大数据领域这么的火，它真正的对产品业务有哪些影响呢？上面我整理的图表是我的理解，数据仓库、数据报表其实都是基础技术，只是工具或者手段，属于公司的基础技术部分，这两层的技术其实就像在打造一把刀，然而刀怎么用却跟这两层没关系。你跟别人说你是搞大数据的，被人怼你就是个取数的，你能反驳吗？再往上层走，是数据分析，通过数据分析，能够发现产品的问题、发展的趋势等等，然后影响产品的往后发展，但是我们开发人员其实跟这层也没有关系，因为分析的目标是决策，而我们码农并没有决策权。最上层数据智能，我指的推荐、搜索、用户增长等各个算法领域，搜索算法造就了百度谷歌、推荐算法造就了头条快手，用户增长领域是所有产品都要核心关注的事情，而这个领域，我们写的代码能真正看到对产品的影响，也能用线上点击率、购买率等真实有效的指标衡量。所以数据智能这一层才是我想要的，也是我觉得可以定准的方向。3、说是转了算法，其实是实现了算法在业务的落地没有足够的耐心，真的读不懂算法论文里面的公式，到现在我也没法手推算法公式，不能算是真正的算法人员。然而我却发现，我的目标是“让自己的代码给业务带来更多直接的影响”的话，潜伏在业务团队中、能快速运用成熟机器学习算法框架让算法落地上线产生线上价值，反而走对了。听很多人都说过，现在缺的其实不是研究算法的人，而是将算法结合业务落地的人才，吴恩达在他的视频课程中提到，他讲的算法虽然很基础，但是能搞定80%商业公司的需求；仍然在业务中做算法，实现在业务中的算法落地让我的代码真正产生对业务的影响才是我的目标，让我去专门的算法团队，一是我写不了算法公式去不了（哈哈），二是去了离业务远了点也违背了我的初衷。4、其实掌握算法技能，本来就是搞工程将来必备的要求？人恐惧的经常是对未知的恐惧，接触了算法领域，我才发现并没有那么的高深恐怖不可接触，各种机器学习深度学习框架，比如sciketlearn、tensorflow、paddlepaddle等，完成一个简单的CTR排序模型，只要简单的几十分钟就能参照教程实现训练。并且几乎所有的所谓算法人员，并没有从零实现一个算法发明一个算法，都是直接修改现成的模型代码，做各种的数据获取、数据处理、特征提取等事情。体现算法能力能力高低的，变成了一是这个人是调参圣手，第二就是这个人能把算法很好的结合业务落地，数据智能这一层因为是顶层，会依赖大量的底层技能，下层的pingback、业务数据、数据仓库、数据分析、JAVA开发与架构能力等都需要涉及，如果团队人少的话（就像我一样）所有的事情你都得干，这一层其实需要极强的工程能力，这方面专门搞算法的恐怕没有工程出身的玩的好。要将算法在业务中落地，更多的还是得靠工程开发人员，这方面也会越来越侧重，而专门的算法团队做一些基础设施、提供算法平台恐怕是更有可能发展的方向。人工智能越来越火，算法框架越来越简单，学习成本门槛越来越低，等越来越多的工程都会算法，面试一个JAVA程序员时必问算法落地能力时，懂得算法就是一个程序员的必备技能，而不是加分技能。关注这个公众号，一起学习吧哈哈！","['为什么', '工程', '算法', '一句', '总结', '年龄', '总想', '自己', '事情', '意义', '所以', '自己', '代码', '产品', '影响', '衡量', '影响', '发现自己', 'java', '开发', '数据业务', '处理', '产品', '影响', '甚微', '自己', '工作', '工作', '主要', '两个', '方向', 'java', '后台', '业务', '开发', '什么', '需求', '什么', '开发', '增删', '改查', '消息', '发消息', '因为', '之前', '公司', '商业', '运营', '部门', '需求', '面向', '公司', '运营', '市场', '人员', '直接', '面向', '普通用户', '系统', '访问量', '特别', '往往', '一天', '几千个', '访问量', '不错', '导致', '出去', '面试', '时候', '别人', '系统', 'qps', '多少', '真是', '不好意思', '不到', '两位数', '业务', '数据处理', '现在', '业务', '数据', '毕竟', '数据', '反映', '业务', '状况', '一旦', '涉及', '数据', '只是', 'mysql', '里面', '那些', '少量', '数据', '往往', '需要', '一下', '各个', '渠道', '来源', '流量', '之类', '就要', '去查', '公司', '级别', '数据仓库', '他们', '每天', '数据量', '每天', '几十', '上百', 'tb', '不用', 'hive', 'spark', '这些', '数据', '技术', '搞不定', '说到底', '就是', 'sql', '取数', '做个', '图表', '出来', '出去', '面试', '人家', '问大', '数据', '建模', '方法论', '怎样', '实现', '业务', '统计', '指标', '统一', '照样', '一头', '虽然', '知道', 'java', '后台', '服务', '开发', '确实', '可以', '往后', '发展', '但是', '没有', '接触', '并发', '这些', '难度', '方向', '数据业务', '处理', '虽然', '只是', '一些', '报表', '但是', '自己', '没有', '分析', '报表', '能力', '报表', '老大', '他们', '根据', '什么', '数据', '什么', '知道', '两个', '方向', '觉得', '有种', '那么', '精准', '发展', '感觉', '如果', '别人', '自己', '职业', '发展', '方向', 'java', '恐怕', '别人', '觉得', '随着', '业务', '什么', '称作', '方向', '有点', '虚虚', '同时', '非常', '间接', '影响', '业务', '或者说', '影响', '微小', '缺少', '那么', '意义', '数据', '相关', '学习', '关注', '数据分析', '数据', '智能', '领域', '数据', '领域', '这么', '真正', '产品', '业务', '哪些', '影响', '上面', '整理', '图表', '理解', '数据仓库', '数据报表', '其实', '基础', '技术', '只是', '工具', '或者', '手段', '属于', '公司', '基础', '技术', '部分', '两层', '技术', '其实', '打造', '一把', '然而', '怎么', '两层', '没关系', '别人', '数据', '就是', '取数', '反驳', '上层', '数据分析', '通过', '数据分析', '能够', '发现', '产品', '问题', '发展', '趋势', '等等', '然后', '影响', '产品', '往后', '发展', '但是', '我们', '开发人员', '其实', '这层', '没有', '关系', '因为', '分析', '目标', '决策', '我们', '码农', '没有', '决策权', '最上层', '数据', '智能', '推荐', '搜索', '用户', '增长', '各个', '算法', '领域', '搜索算法', '造就', '百度', '谷歌', '推荐', '算法', '造就', '头条', '快手', '用户', '增长', '领域', '所有', '产品', '核心', '关注', '事情', '这个', '领域', '我们', '代码', '真正', '看到', '产品', '影响', '用线', '点击率', '购买率', '真实有效', '指标', '衡量', '所以', '数据', '智能', '一层', '想要', '觉得', '可以', '定准', '方向', '算法', '其实', '实现', '算法', '业务', '落地', '没有', '足够', '耐心', '真的', '算法', '论文', '里面', '公式', '现在', '没法', '手推', '算法', '公式', '不能', '算是', '真正', '算法', '人员', '然而', '发现', '目标', '自己', '代码', '业务', '带来', '直接', '影响', '的话', '潜伏', '业务', '团队', '快速', '运用', '成熟', '机器', '学习', '算法', '框架', '算法', '落地', '上线', '产生', '线上', '价值', '反而', '很多', '现在', '其实', '不是', '研究', '算法', '而是', '算法', '结合', '业务', '落地', '人才', '吴恩达', '视频', '课程', '提到', '算法', '虽然', '基础', '但是', '搞定', '80%', '商业', '公司', '需求', '仍然', '业务', '算法', '实现', '业务', '算法', '落地', '代码', '真正', '产生', '业务', '影响', '目标', '专门', '算法', '团队', '一是', '不了', '算法', '公式', '不了', '哈哈', '二是', '业务', '违背', '初衷', '其实', '掌握', '算法', '技能', '本来', '就是', '工程', '将来', '必备', '要求', '恐惧', '经常', '未知', '恐惧', '接触', '算法', '领域', '发现', '没有', '那么', '高深', '恐怖', '不可', '接触', '各种', '机器', '学习', '深度', '学习', '框架', '比如', 'sciketlearn', 'tensorflow', 'paddlepaddle', '完成', '一个', '简单', 'ctr', '排序', '模型', '只要', '简单', '几十分钟', '参照', '教程', '实现', '训练', '并且', '几乎', '所有', '所谓', '算法', '人员', '没有', '实现', '一个', '算法', '发明', '一个', '算法', '直接', '修改', '现成', '模型', '代码', '各种', '数据', '获取', '数据处理', '特征提取', '事情', '体现', '算法', '能力', '能力', '高低', '变成', '这个', '调参', '圣手', '第二', '就是', '这个', '人能', '算法', '结合', '业务', '落地', '数据', '智能', '一层', '因为', '顶层', '依赖', '大量', '底层', '技能', '下层', 'pingback', '业务', '数据', '数据仓库', '数据分析', 'java', '开发', '架构', '能力', '需要', '涉及', '如果', '团队', '人少', '的话', '一样', '所有', '事情', '一层', '其实', '需要', '极强', '工程', '能力', '这方面', '专门', '算法', '恐怕', '没有', '工程', '出身', '算法', '业务', '落地', '还是', '工程', '开发人员', '这方面', '越来越', '侧重', '专门', '算法', '团队', '一些', '基础设施', '提供', '算法', '平台', '恐怕', '可能', '发展', '方向', '人工智能', '越来越', '算法', '框架', '越来越', '简单', '学习', '成本', '门槛', '越来越低', '越来越', '工程', '算法', '面试', '一个', 'java', '程序员', '时必', '算法', '落地', '能力', '懂得', '算法', '就是', '一个', '程序员', '必备', '技能', '不是', '技能', '关注', '这个', '公众', '一起', '学习', '哈哈']","[[-0.25960912 -0.12397271  0.21969302  0.17682965  0.28482338 -0.33376813
  -0.18130309  0.47499312 -0.00641508 -0.00906421 -0.06452538 -0.32252784
  -0.16490231  0.58740515  0.14635439 -0.10385332 -0.14653776 -0.01878226
  -0.10061373 -0.43307531  0.03583477  0.24462018  0.00340693 -0.07897034
   0.11594681 -0.53638637 -0.27744894  0.0864852  -0.18976155 -0.05964162
   0.25549822  0.03484883 -0.0230344  -0.13476847 -0.09101612  0.33371972
  -0.12060244 -0.21194     0.11276247 -0.75302801 -0.16609189 -0.55599351
  -0.03478638 -0.08407751 -0.16840259 -0.1316479  -0.2758437   0.47215516
  -0.17126049  0.37202991  0.19441422 -0.26346344 -0.11223879 -0.24275578
   0.08074903  0.38005301  0.25109052 -0.04930252  0.09082649 -0.07517207
   0.03174521  0.28848103  0.02401741  0.08145872 -0.38173434 -0.01752318
   0.04078723 -0.01331239 -0.22739942  0.434485    0.13238887 -0.24893951
   0.39482962 -0.3251606   0.55840816  0.15092163  0.22041403 -0.14095138
  -0.25374551 -0.2245149  -0.09280956 -0.01427178 -0.05299153  0.32940313
  -0.36597135  0.20305616 -0.28250592  0.3998448   0.44950991  0.13101049
   0.30428157  0.11956563  0.3544361   0.18388005  0.17985537  0.37388747
   0.09322638 -0.28544428  0.00344581 -0.07650408]]"
2343,Flask怎样从其他Python文件导入app.route视图函数,"用Blueprint这个东西实现；主文件：flask_main.pyimport flaskfrom flask_pyecharts.flask_moudle2 import account_apiapp = flask.Flask(__name__)app.register_blueprint(account_api)@app.route(""/hello"")def hello():    return ""hello""app.run()引入的一个Module的文件，这个文件中写了视图函数flask_moudle2.pyfrom flask import Blueprintaccount_api = Blueprint('account_api', __name__)@account_api.route(""/account"")def accountList():    return ""list of accounts""界面上访问第一个函数和第二个函数都返回正常贴一下官网蓝图的解释：Flask 用 蓝图（blueprints） 的概念来在一个应用中或跨应用制作应用组件和支持通用的模式。蓝图很好地简化了大型应用工作的方式，并提供给 Flask 扩展在应用上注册操作的核心方法。一个 Blueprint 对象与 Flask 应用对象的工作方式很像，但它确实不是一个应用，而是一个描述如何构建或扩展应用的 蓝图 。每个蓝图可以指定自己的templates和static文件夹，指定方法就是Blueprint的参数地址：http://docs.jinkan.org/docs/flask/blueprints.html参考：https://stackoverflow.com/questions/15231359/split-python-flask-app-into-multiple-files/15231623","['flask', '怎样', '其他', 'python', '文件', '导入', 'app', 'route', '视图', '函数', 'blueprint', '这个', '东西', '实现', '文件', 'flask', 'main', 'pyimport', 'flaskfrom', 'flask', 'pyecharts', 'flask', 'moudle2', 'import', 'account', 'apiapp', 'flask', 'flask', '__', 'name', '__', 'app', 'register', 'blueprint', 'account', 'api', 'app', 'route', 'hello', 'def', 'hello', 'return', 'hello', 'app', 'run', '引入', '一个', 'module', '文件', '这个', '文件', '中写', '视图', '函数', 'flask', 'moudle2', 'pyfrom', 'flask', 'import', 'blueprintaccount', 'api', 'blueprint', 'account', 'api', '__', 'name', '__', 'account', 'api', 'route', 'account', 'def', 'accountlist', 'return', 'list', 'of', 'accounts', '界面', '访问', '第一个', '函数', '第二个', '函数', '返回', '正常', '一下', '官网', '蓝图', '解释', 'flask', '蓝图', 'blueprints', '概念', '一个', '应用', '应用', '制作', '应用', '组件', '支持', '通用', '模式', '蓝图', '简化', '大型', '应用', '工作', '方式', '提供', 'flask', '扩展', '应用', '注册', '操作', '核心', '方法', '一个', 'blueprint', '对象', 'flask', '应用', '对象', '工作', '方式', '确实', '不是', '一个', '应用', '而是', '一个', '描述', '如何', '构建', '扩展', '应用', '蓝图', '每个', '蓝图', '可以', '指定', '自己', 'templates', 'static', '文件夹', '指定', '方法', '就是', 'blueprint', '参数', '地址', 'http', 'docs', 'jinkan', 'org', 'docs', 'flask', 'blueprints', 'html', '参考', 'https', 'stackoverflow', 'com', 'questions', '15231359', 'split', 'python', 'flask', 'app', 'into', 'multiple', 'files', '15231623']","[[-0.20807738 -0.12789087  0.22296907  0.15746203  0.25208933 -0.36132001
  -0.12798854  0.46620969 -0.05838118 -0.09481498 -0.0442965  -0.35384776
  -0.1752253   0.53968163  0.14588628 -0.11876864 -0.13198512  0.01835951
  -0.06337333 -0.48578985 -0.03853518  0.25267486 -0.02050481 -0.17654722
   0.06776854 -0.46275082 -0.28850248  0.04616877 -0.23221795 -0.06361328
   0.19071004  0.01904603  0.04050901 -0.1517467  -0.17444468  0.32266773
  -0.19989396 -0.25943385  0.09032844 -0.69498038 -0.13097751 -0.55773893
  -0.06432656 -0.00528394 -0.12697653 -0.21303659 -0.21997497  0.35817749
  -0.13812046  0.42414684  0.14905513 -0.28491325 -0.10700263 -0.17147899
   0.00401686  0.39697557  0.16780397 -0.09457129  0.12811907 -0.14725909
   0.11039512  0.24468888  0.02969057  0.10320707 -0.37588401  0.04362519
   0.01821013 -0.02063165 -0.28675507  0.41756232  0.07235656 -0.17342738
   0.38338098 -0.32218817  0.55827042  0.23333747  0.14152382 -0.14236235
  -0.29792336 -0.12613282 -0.03882607  0.03319538 -0.13117127  0.35365491
  -0.328522    0.17848317 -0.26680312  0.42440863  0.47422383  0.13074609
   0.22799048  0.10620687  0.31989944  0.17714134  0.19692103  0.35881591
   0.13435762 -0.27336017 -0.02811595 -0.11246769]]"
2351,推荐系统：怎样实现内容相似推荐,很多产品想要加入推荐系统模块，最简单的就是做内容相似推荐，虽然技术简单但是效果却很好，对于增加用户粘性、提升用户留存有较多的效果，甚至很多产品后来加入了很多推荐模块之后，还是发现导流效果最好的依然是内容的相似推荐。比如看完了一片《Python怎样读取MySQL》之后，在相似推荐中看到了一片题目为《Python操作MySQL的效果优化》的文章，很自然的就像多深入了解一下，于是就点进去看一看，那么对于整个网站来说，就会降低跳出率，增加用户的留存，是一个很好的用户体验。实现一个内容相似推荐的方案比较简单，大体上包含以下步骤：1、获取内容数据，比如标题、关键字、分类、甚至全文本；一般文档、数据等内容都存储于mysql，可以使用python/java等语言直接读取mysql导出到文件.txt格式，或者直接用shell的mysql -e sql > data.txt的方式导出。一般情况下，全文本内容太散，不会作为候选字段，但是有些视频之类的实体，因为标题和简介文字太少，如果有详情全文本的话，也可以加入候选数据字段。2、对内容数据做中文分词；如果是python语言，可以使用“结巴分词”，地址为：https://github.com/fxsjy/jieba或者可以直接使用百度云的中文分词，百度的NLP自然语言处理技术还是很厉害的。3、提取内容数据的关键词；当分词之后，分词结果中包含很多“的”、“也”等无意义的词语，这些词语不能称之为关键词，一般会通过TF/IDF的方法计算每个词语的权重，将一个文档的所有词语的TF/IDF权重倒序排列，取TOPN个作为关键词；如果使用的是jieba分词，那么直接就自带了提取关键词的支持；当然也可以自己计算，TF就是计算一篇文章中每个词语出现的次数、IDF就是这个词语在所有文章中出现的次数，TF除以IDF就是权重值；4、将关键词映射成数字向量；我们最终的目标是计算文档之间的相似度，要计算相似度那就需要把内容映射成向量，第一步就是先把每个词语映射成向量，映射的方式有几种：使用one hot方法映射成向量自己训练word2vec密度向量；使用业界的训练好的word2vec向量一般情况下，自己的数据集比较小，效果会比业界的word2vec效果差一些，比如这里推荐腾讯开源的200维度全网word2vec向量，地址在：https://ai.tencent.com/ailab/nlp/embedding.html5、计算文档粒度的数字向量；得到每个词语的向量之后，通过加权平均的方式可以计算整个文档的向量；权重可以使用每个词语的频率次数归一化，或者直接平均即可；6、计算文档之间的相似度；使用cosin算法就能够计算文档向量之间的相似度；cosin算法很简单，java、python自己实现就可以，也可用https://scikit-learn.org或者http://surpriselib.com/中的相似度计算模块直接调用实现。计算完之后，对于每个文档，将它跟每个文档的相似度做倒序排列，比如TOP 30个作为推荐的结果集合。7、将文档的相似度关系存入mysql/redis等缓存；第6步骤会得到一个这样的结果：(文档ID、相似文档ID列表)，将这样的数据直接存入mysql或者redis，key就是文档ID，value是相似文档ID列表即可。8、当页面展示一个内容的时候，提取相似推荐进行展示；当用户访问一个页面的时候，后端服务python/java从缓存redis或者mysql中根据展示的页面的文档ID，提取相似ID列表；因为前几步骤是提前计算好的列表，这里也可能做一些过滤已下线的事情，然后根据ID提取对应的标题、简介等信息，组装成相似推荐列表返回给前端即可；总结以上就是离线计算相似推荐的步骤，其实还可以用在线的方式进行，把这个问题按照搜索的架构实现即可，新来一个文档就分词、计算关键词列表存储，然后每次访问的时候根据关键词列表查询相同关键词列表的文档也可以实现。当相似内容推荐上线后，就能够不断积累一些用户点击、查看文档的行为数据，基于行为数据就能训练协同过滤的模型，实现内容不相似但是行为相似的协同过滤推荐。,"['推荐', '系统', '怎样', '实现', '内容', '相似', '推荐', '很多', '产品', '想要', '加入', '推荐', '系统', '模块', '简单', '就是', '内容', '相似', '推荐', '虽然', '技术', '简单', '但是', '效果', '对于', '增加', '用户', '粘性', '提升', '用户', '留存', '效果', '甚至', '很多', '产品', '后来', '加入', '很多', '推荐', '模块', '之后', '还是', '发现', '导流', '效果', '最好', '依然', '内容', '相似', '推荐', '比如', '一片', 'python', '怎样', '读取', 'mysql', '之后', '相似', '推荐', '看到', '一片', '题目', 'python', '操作', 'mysql', '效果', '优化', '文章', '自然', '深入', '了解', '一下', '于是', '就点', '进去', '看一看', '那么', '对于', '整个', '网站', '来说', '降低', '跳出', '增加', '用户', '留存', '一个', '用户', '体验', '实现', '一个', '内容', '相似', '推荐', '方案', '比较简单', '大体上', '包含', '以下', '步骤', '获取', '内容', '数据', '比如', '标题', '关键字', '分类', '甚至', '全文', '一般', '文档', '数据', '内容', '存储', 'mysql', '可以', '使用', 'python', 'java', '语言', '直接', '读取', 'mysql', '导出', '文件', 'txt', '格式', '或者', '直接', 'shell', 'mysql', 'sql', 'data', 'txt', '方式', '导出', '一般', '情况', '全文', '内容', '太散', '不会', '作为', '候选', '但是', '有些', '视频', '之类', '实体', '因为', '标题', '简介', '文字', '如果', '详情', '全文', '的话', '可以', '加入', '候选', '数据字', '内容', '数据', '中文', '分词', '如果', 'python', '语言', '可以', '使用', '结巴', '分词', '地址', 'https', 'github', 'com', 'fxsjy', 'jieba', '或者', '可以', '直接', '使用', '百度', '中文', '分词', '百度', 'nlp', '自然语言', '处理', '技术', '还是', '厉害', '提取', '内容', '数据', '关键词', '分词', '之后', '分词', '结果', '包含', '很多', '意义', '词语', '这些', '词语', '不能', '称之为', '关键词', '一般', '通过', 'tf', 'idf', '方法', '计算', '每个', '词语', '权重', '一个', '文档', '所有', '词语', 'tf', 'idf', '权重', '倒序', '排列', 'topn', '作为', '关键词', '如果', '使用', 'jieba', '分词', '那么', '直接', '自带', '提取', '关键词', '支持', '当然', '可以', '自己', '计算', 'tf', '就是', '计算', '一篇', '文章', '每个', '词语', '出现', '次数', 'idf', '就是', '这个', '词语', '所有', '文章', '出现', '次数', 'tf', '除以', 'idf', '就是', '权重', '关键词', '映射', '数字', '向量', '我们', '最终', '目标', '计算', '文档', '之间', '相似', '计算', '相似', '需要', '内容', '映射', '向量', '第一步', '就是', '每个', '词语', '映射', '向量', '映射', '方式', '几种', '使用', 'one', 'hot', '方法', '映射', '向量', '自己', '训练', 'word2vec', '密度', '向量', '使用', '业界', '训练', 'word2vec', '向量', '一般', '情况', '自己', '数据', '比较', '效果', '业界', 'word2vec', '效果', '一些', '比如', '这里', '推荐', '腾讯', '开源', '200', '维度', '全网', 'word2vec', '向量', '地址', 'https', 'ai', 'tencent', 'com', 'ailab', 'nlp', 'embedding', 'html5', '计算', '文档', '粒度', '数字', '向量', '得到', '每个', '词语', '向量', '之后', '通过', '加权', '平均', '方式', '可以', '计算', '整个', '文档', '向量', '权重', '可以', '使用', '每个', '词语', '频率', '次数', '归一化', '或者', '直接', '平均', '即可', '计算', '文档', '之间', '相似', '使用', 'cosin', '算法', '能够', '计算', '文档', '向量', '之间', '相似', 'cosin', '算法', '简单', 'java', 'python', '自己', '实现', '可以', '可用', 'https', 'scikit', 'learn', 'org', '或者', 'http', 'surpriselib', 'com', '相似', '计算', '模块', '直接', '调用', '实现', '计算', '之后', '对于', '每个', '文档', '每个', '文档', '相似', '倒序', '排列', '比如', 'top', '30', '作为', '推荐', '结果', '集合', '文档', '相似', '关系', '存入', 'mysql', 'redis', '缓存', '步骤', '得到', '一个', '这样', '结果', '文档', 'id', '相似', '文档', 'id', '列表', '这样', '数据', '直接', '存入', 'mysql', '或者', 'redis', 'key', '就是', '文档', 'id', 'value', '相似', '文档', 'id', '列表', '即可', '页面', '展示', '一个', '内容', '时候', '提取', '相似', '推荐', '进行', '展示', '用户', '访问', '一个', '页面', '时候', '服务', 'python', 'java', '缓存', 'redis', '或者', 'mysql', '根据', '展示', '页面', '文档', 'id', '提取', '相似', 'id', '列表', '因为', '步骤', '提前', '计算', '列表', '这里', '可能', '一些', '过滤', '下线', '事情', '然后', '根据', 'id', '提取', '对应', '标题', '简介', '信息', '组装', '相似', '推荐', '列表', '返回', '前端', '即可', '总结', '以上', '就是', '离线', '计算', '相似', '推荐', '步骤', '其实', '可以', '在线', '方式', '进行', '这个', '问题', '按照', '搜索', '架构', '实现', '即可', '新来', '一个', '文档', '分词', '计算', '关键词', '列表', '存储', '然后', '每次', '访问', '时候', '根据', '关键词', '列表', '查询', '相同', '关键词', '列表', '文档', '可以', '实现', '相似', '内容', '推荐', '上线', '能够', '不断', '积累', '一些', '用户', '点击', '查看', '文档', '行为', '数据', '基于', '行为', '数据', '训练', '协同', '过滤', '模型', '实现', '内容', '相似', '但是', '行为', '相似', '协同', '过滤', '推荐']","[[-0.27717543 -0.15148208  0.23359248  0.20262503  0.31377882 -0.36762185
  -0.21364517  0.53556731  0.00358149 -0.00465439 -0.07988512 -0.3492926
  -0.19484759  0.6596323   0.15442888 -0.11471518 -0.16947095 -0.00531532
  -0.1148233  -0.4749239   0.04617814  0.26077086  0.00153705 -0.08567771
   0.13178419 -0.60221825 -0.31258318  0.10803814 -0.21446549 -0.06124478
   0.28148356  0.05204025 -0.02708056 -0.15578584 -0.10857496  0.37195332
  -0.13333652 -0.22518558  0.12778835 -0.83005096 -0.18516149 -0.62116179
  -0.03154999 -0.08881368 -0.18874749 -0.15094714 -0.30254196  0.53288428
  -0.17395249  0.40429641  0.22205419 -0.29812025 -0.11083501 -0.26577425
   0.09282249  0.42731907  0.28557074 -0.05773018  0.10159726 -0.08536615
   0.04253317  0.3198884   0.02885438  0.09713814 -0.41630476 -0.02435425
   0.03776939 -0.00475578 -0.24843391  0.48035413  0.15951003 -0.27831555
   0.43956637 -0.35427683  0.62160141  0.16835024  0.24892905 -0.15029691
  -0.27948265 -0.25198149 -0.1072616  -0.01595944 -0.05846654  0.35838848
  -0.42109512  0.22162315 -0.3122382   0.44569336  0.50599134  0.13949307
   0.34454845  0.13348283  0.39037313  0.20526064  0.20288004  0.42209726
   0.0937719  -0.31252278 -0.00205464 -0.09182087]]"
2367,Java和Python使用Grpc访问Tensorflow的Serving代码,"发现网上大量的代码都是mnist，我自己反正不是搞图像处理的，所以这个例子我怎么都不想搞；wide&deep这种，包含各种特征的模型，才是我的需要，iris也是从文本训练模型，所以非常简单；本文给出Python和Java访问Tensorflow的Serving代码。Java版本使用Grpc访问Tensorflow的Serving代码package io.github.qf6101.tensorflowserving; import com.google.protobuf.ByteString;import io.grpc.ManagedChannel;import io.grpc.ManagedChannelBuilder;import io.grpc.netty.NegotiationType;import io.grpc.netty.NettyChannelBuilder;import org.tensorflow.example.*;import org.tensorflow.framework.DataType;import org.tensorflow.framework.TensorProto;import org.tensorflow.framework.TensorShapeProto;import tensorflow.serving.Model;import tensorflow.serving.Predict;import tensorflow.serving.PredictionServiceGrpc; import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map; /** * 参考：https://www.jianshu.com/p/d82107165119 * 参考：https://github.com/grpc/grpc-java */public class PssIrisGrpcClient {     public static Example createExample() {        Features.Builder featuresBuilder = Features.newBuilder();         Map<String, Float> dataMap = new HashMap<String, Float>();        dataMap.put(""SepalLength"", 5.1f);        dataMap.put(""SepalWidth"", 3.3f);        dataMap.put(""PetalLength"", 1.7f);        dataMap.put(""PetalWidth"", 0.5f);         Map<String, Feature> featuresMap = mapToFeatureMap(dataMap);        featuresBuilder.putAllFeature(featuresMap);         Features features = featuresBuilder.build();        Example.Builder exampleBuilder = Example.newBuilder();        exampleBuilder.setFeatures(features);        return exampleBuilder.build();    }     private static Map<String, Feature> mapToFeatureMap(Map<String, Float> dataMap) {        Map<String, Feature> resultMap = new HashMap<String, Feature>();        for (String key : dataMap.keySet()) {            // // data1 = {""SepalLength"":5.1,""SepalWidth"":3.3,""PetalLength"":1.7,""PetalWidth"":0.5}            FloatList floatList = FloatList.newBuilder().addValue(dataMap.get(key)).build();            Feature feature = Feature.newBuilder().setFloatList(floatList).build();            resultMap.put(key, feature);        }        return resultMap;    }     public static void main(String[] args) {        String host = ""127.0.0.1"";        int port = 8888;         ManagedChannel channel = ManagedChannelBuilder.forAddress(host, port)                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid                // needing certificates.                .usePlaintext()                .build();        PredictionServiceGrpc.PredictionServiceBlockingStub blockingStub = PredictionServiceGrpc.newBlockingStub(channel);         com.google.protobuf.Int64Value version = com.google.protobuf.Int64Value.newBuilder()                .setValue(1)                .build();         Model.ModelSpec modelSpec = Model.ModelSpec.newBuilder()                .setName(""iris"")                .setVersion(version)                .setSignatureName(""classification"")                .build();         List<ByteString> exampleList = new ArrayList<ByteString>();        exampleList.add(createExample().toByteString());         TensorShapeProto.Dim featureDim = TensorShapeProto.Dim.newBuilder().setSize(exampleList.size()).build();        TensorShapeProto shapeProto = TensorShapeProto.newBuilder().addDim(featureDim).build();        org.tensorflow.framework.TensorProto tensorProto = TensorProto.newBuilder().addAllStringVal(exampleList).setDtype(DataType.DT_STRING).setTensorShape(shapeProto).build();         Predict.PredictRequest request = Predict.PredictRequest.newBuilder()                .setModelSpec(modelSpec)                .putInputs(""inputs"", tensorProto)                .build();        tensorflow.serving.Predict.PredictResponse response = blockingStub.predict(request);        System.out.println(response);         channel.shutdown();    }}需要增加如下maven依赖：        <!-- https://mvnrepository.com/artifact/org.tensorflow/tensorflow -->        <dependency>            <groupId>org.tensorflow</groupId>            <artifactId>tensorflow</artifactId>            <version>1.12.0</version>        </dependency>         <!-- https://mvnrepository.com/artifact/io.grpc/grpc-netty -->        <dependency>            <groupId>io.grpc</groupId>            <artifactId>grpc-netty</artifactId>            <version>1.20.0</version>        </dependency>         <!-- https://mvnrepository.com/artifact/io.grpc/grpc-protobuf -->        <dependency>            <groupId>io.grpc</groupId>            <artifactId>grpc-protobuf</artifactId>            <version>1.20.0</version>        </dependency>        <!-- https://mvnrepository.com/artifact/io.grpc/grpc-stub -->        <dependency>            <groupId>io.grpc</groupId>            <artifactId>grpc-stub</artifactId>            <version>1.20.0</version>        </dependency>输出结果：outputs {  key: ""scores""  value {    dtype: DT_FLOAT    tensor_shape {      dim {        size: 1      }      dim {        size: 3      }    }    float_val: 0.9997806    float_val: 2.1938368E-4    float_val: 1.382611E-9  }}outputs {  key: ""classes""  value {    dtype: DT_STRING    tensor_shape {      dim {        size: 1      }      dim {        size: 3      }    }    string_val: ""0""    string_val: ""1""    string_val: ""2""  }}Python版本使用Grpc访问Tensorflow的Serving代码# 创建 gRPC 连接import pandas as pdfrom grpc.beta import implementationsimport tensorflow as tffrom tensorflow_serving.apis import prediction_service_pb2, classification_pb2 #channel = implementations.insecure_channel('127.0.0.1', 8500):8888channel = implementations.insecure_channel('127.0.0.1', 8888)stub = prediction_service_pb2.beta_create_PredictionService_stub(channel) def _create_feature(v):    return tf.train.Feature(float_list=tf.train.FloatList(value=[v])) data1 = {""SepalLength"":5.1,""SepalWidth"":3.3,""PetalLength"":1.7,""PetalWidth"":0.5}features1 = {k: _create_feature(v) for k, v in data1.items()}example1 = tf.train.Example(features=tf.train.Features(feature=features1))  data2 = {""SepalLength"":1.1,""SepalWidth"":1.3,""PetalLength"":1.7,""PetalWidth"":0.5}features2 = {k: _create_feature(v) for k, v in data2.items()}example2 = tf.train.Example(features=tf.train.Features(feature=features2)) # 获取测试数据集，并转换成 Example 实例。examples = [example1, example2] # 准备 RPC 请求，指定模型名称。request = classification_pb2.ClassificationRequest()request.model_spec.name = 'iris'request.input.example_list.examples.extend(examples) # 获取结果response = stub.Classify(request, 10.0)print(response)Python代码看起来简单不少，但是我们的线上服务都是Java，所以不好集成的，只能做一些离线的批量预测；输出如下：result {  classifications {    classes {      label: ""0""      score: 0.9997805953025818    }    classes {      label: ""1""      score: 0.00021938368445262313    }    classes {      label: ""2""      score: 1.382611025668723e-09    }  }  classifications {    classes {      label: ""0""      score: 0.0736534595489502    }    classes {      label: ""1""      score: 0.8393719792366028    }    classes {      label: ""2""      score: 0.08697459846735    }  }}model_spec {  name: ""iris""  version {    value: 1  }  signature_name: ""serving_default""}个人其实非常喜欢HTTP+JSON接口，完全不用搞这么多grpc这些麻烦的东西，尤其Java的grpc，遇到好多问题好崩溃；不过号称grpc比http性能好不少，线上只能用grpc。","['java', 'python', '使用', 'grpc', '访问', 'tensorflow', 'serving', '代码', '发现', '网上', '大量', '代码', 'mnist', '自己', '反正', '不是', '图像处理', '所以', '这个', '例子', '怎么', '不想', 'wide', 'deep', '这种', '包含', '各种', '特征', '模型', '需要', 'iris', '是从', '文本', '训练', '模型', '所以', '非常简单', '本文', '给出', 'python', 'java', '访问', 'tensorflow', 'serving', '代码', 'java', '版本', '使用', 'grpc', '访问', 'tensorflow', 'serving', '代码', 'package', 'io', 'github', 'qf6101', 'tensorflowserving', 'import', 'com', 'google', 'protobuf', 'bytestring', 'import', 'io', 'grpc', 'managedchannel', 'import', 'io', 'grpc', 'managedchannelbuilder', 'import', 'io', 'grpc', 'netty', 'negotiationtype', 'import', 'io', 'grpc', 'netty', 'nettychannelbuilder', 'import', 'org', 'tensorflow', 'example', 'import', 'org', 'tensorflow', 'framework', 'datatype', 'import', 'org', 'tensorflow', 'framework', 'tensorproto', 'import', 'org', 'tensorflow', 'framework', 'tensorshapeproto', 'import', 'tensorflow', 'serving', 'model', 'import', 'tensorflow', 'serving', 'predict', 'import', 'tensorflow', 'serving', 'predictionservicegrpc', 'import', 'java', 'util', 'arraylist', 'import', 'java', 'util', 'hashmap', 'import', 'java', 'util', 'list', 'import', 'java', 'util', 'map', '参考', 'https', 'www', 'jianshu', 'com', 'd82107165119', '参考', 'https', 'github', 'com', 'grpc', 'grpc', 'java', 'public', 'class', 'pssirisgrpcclient', 'public', 'static', 'example', 'createexample', 'features', 'builder', 'featuresbuilder', 'features', 'newbuilder', 'map', 'string', 'float', 'datamap', 'new', 'hashmap', 'string', 'float', 'datamap', 'put', 'sepallength', '5.1', 'datamap', 'put', 'sepalwidth', '3.3', 'datamap', 'put', 'petallength', '1.7', 'datamap', 'put', 'petalwidth', '0.5', 'map', 'string', 'feature', 'featuresmap', 'maptofeaturemap', 'datamap', 'featuresbuilder', 'putallfeature', 'featuresmap', 'features', 'features', 'featuresbuilder', 'build', 'example', 'builder', 'examplebuilder', 'example', 'newbuilder', 'examplebuilder', 'setfeatures', 'features', 'return', 'examplebuilder', 'build', 'private', 'static', 'map', 'string', 'feature', 'maptofeaturemap', 'map', 'string', 'float', 'datamap', 'map', 'string', 'feature', 'resultmap', 'new', 'hashmap', 'string', 'feature', 'for', 'string', 'key', 'datamap', 'keyset', 'data1', 'sepallength', '5.1', 'sepalwidth', '3.3', 'petallength', '1.7', 'petalwidth', '0.5', 'floatlist', 'floatlist', 'floatlist', 'newbuilder', 'addvalue', 'datamap', 'get', 'key', 'build', 'feature', 'feature', 'feature', 'newbuilder', 'setfloatlist', 'floatlist', 'build', 'resultmap', 'put', 'key', 'feature', 'return', 'resultmap', 'public', 'static', 'void', 'main', 'string', 'args', 'string', 'host', '127.0', '0.1', 'int', 'port', '8888', 'managedchannel', 'channel', 'managedchannelbuilder', 'foraddress', 'host', 'port', 'channels', 'are', 'secure', 'by', 'default', 'via', 'ssl', 'tls', 'for', 'the', 'example', 'we', 'disable', 'tls', 'to', 'avoid', 'needing', 'certificates', 'useplaintext', 'build', 'predictionservicegrpc', 'predictionserviceblockingstub', 'blockingstub', 'predictionservicegrpc', 'newblockingstub', 'channel', 'com', 'google', 'protobuf', 'int64value', 'version', 'com', 'google', 'protobuf', 'int64value', 'newbuilder', 'setvalue', 'build', 'model', 'modelspec', 'modelspec', 'model', 'modelspec', 'newbuilder', 'setname', 'iris', 'setversion', 'version', 'setsignaturename', 'classification', 'build', 'list', 'bytestring', 'examplelist', 'new', 'arraylist', 'bytestring', 'examplelist', 'add', 'createexample', 'tobytestring', 'tensorshapeproto', 'dim', 'featuredim', 'tensorshapeproto', 'dim', 'newbuilder', 'setsize', 'examplelist', 'size', 'build', 'tensorshapeproto', 'shapeproto', 'tensorshapeproto', 'newbuilder', 'adddim', 'featuredim', 'build', 'org', 'tensorflow', 'framework', 'tensorproto', 'tensorproto', 'tensorproto', 'newbuilder', 'addallstringval', 'examplelist', 'setdtype', 'datatype', 'dt', 'string', 'settensorshape', 'shapeproto', 'build', 'predict', 'predictrequest', 'request', 'predict', 'predictrequest', 'newbuilder', 'setmodelspec', 'modelspec', 'putinputs', 'inputs', 'tensorproto', 'build', 'tensorflow', 'serving', 'predict', 'predictresponse', 'response', 'blockingstub', 'predict', 'request', 'system', 'out', 'println', 'response', 'channel', 'shutdown', '需要', '增加', '如下', 'maven', '依赖', '--', 'https', 'mvnrepository', 'com', 'artifact', 'org', 'tensorflow', 'tensorflow', '--', 'dependency', 'groupid', 'org', 'tensorflow', 'groupid', 'artifactid', 'tensorflow', 'artifactid', 'version', '1.12', 'version', 'dependency', '--', 'https', 'mvnrepository', 'com', 'artifact', 'io', 'grpc', 'grpc', 'netty', '--', 'dependency', 'groupid', 'io', 'grpc', 'groupid', 'artifactid', 'grpc', 'netty', 'artifactid', 'version', '1.20', 'version', 'dependency', '--', 'https', 'mvnrepository', 'com', 'artifact', 'io', 'grpc', 'grpc', 'protobuf', '--', 'dependency', 'groupid', 'io', 'grpc', 'groupid', 'artifactid', 'grpc', 'protobuf', 'artifactid', 'version', '1.20', 'version', 'dependency', '--', 'https', 'mvnrepository', 'com', 'artifact', 'io', 'grpc', 'grpc', 'stub', '--', 'dependency', 'groupid', 'io', 'grpc', 'groupid', 'artifactid', 'grpc', 'stub', 'artifactid', 'version', '1.20', 'version', 'dependency', '输出', '结果', 'outputs', 'key', 'scores', 'value', 'dtype', 'dt', 'float', 'tensor', 'shape', 'dim', 'size', 'dim', 'size', 'float', 'val', '0.9997806', 'float', 'val', '2.1938368', 'float', 'val', '1.382611', 'outputs', 'key', 'classes', 'value', 'dtype', 'dt', 'string', 'tensor', 'shape', 'dim', 'size', 'dim', 'size', 'string', 'val', 'string', 'val', 'string', 'val', 'python', '版本', '使用', 'grpc', '访问', 'tensorflow', 'serving', '代码', '创建', 'grpc', '连接', 'import', 'pandas', 'as', 'pdfrom', 'grpc', 'beta', 'import', 'implementationsimport', 'tensorflow', 'as', 'tffrom', 'tensorflow', 'serving', 'apis', 'import', 'prediction', 'service', 'pb2', 'classification', 'pb2', 'channel', 'implementations', 'insecure', 'channel', '127.0', '0.1', '8500', '8888channel', 'implementations', 'insecure', 'channel', '127.0', '0.1', '8888', 'stub', 'prediction', 'service', 'pb2', 'beta', 'create', 'predictionservice', 'stub', 'channel', 'def', 'create', 'feature', 'return', 'tf', 'train', 'feature', 'float', 'list', 'tf', 'train', 'floatlist', 'value', 'data1', 'sepallength', '5.1', 'sepalwidth', '3.3', 'petallength', '1.7', 'petalwidth', '0.5', 'features1', 'create', 'feature', 'for', 'in', 'data1', 'items', 'example1', 'tf', 'train', 'example', 'features', 'tf', 'train', 'features', 'feature', 'features1', 'data2', 'sepallength', '1.1', 'sepalwidth', '1.3', 'petallength', '1.7', 'petalwidth', '0.5', 'features2', 'create', 'feature', 'for', 'in', 'data2', 'items', 'example2', 'tf', 'train', 'example', 'features', 'tf', 'train', 'features', 'feature', 'features2', '获取', '测试数据', '转换成', 'example', '实例', 'examples', 'example1', 'example2', '准备', 'rpc', '请求', '指定', '模型', '名称', 'request', 'classification', 'pb2', 'classificationrequest', 'request', 'model', 'spec', 'name', 'iris', 'request', 'input', 'example', 'list', 'examples', 'extend', 'examples', '获取', '结果', 'response', 'stub', 'classify', 'request', '10.0', 'print', 'response', 'python', '代码', '看起来', '简单', '不少', '但是', '我们', '服务', 'java', '所以', '不好', '集成', '只能', '一些', '离线', '批量', '预测', '输出', '如下', 'result', 'classifications', 'classes', 'label', 'score', '0.9997805953025818', 'classes', 'label', 'score', '0.00021938368445262313', 'classes', 'label', 'score', '1.382611025668723', '09', 'classifications', 'classes', 'label', 'score', '0.0736534595489502', 'classes', 'label', 'score', '0.8393719792366028', 'classes', 'label', 'score', '0.08697459846735', 'model', 'spec', 'name', 'iris', 'version', 'value', 'signature', 'name', 'serving', 'default', '个人', '其实', '非常', '喜欢', 'http', 'json', '接口', '完全', '不用', '这么', 'grpc', '这些', '麻烦', '东西', '尤其', 'java', 'grpc', '遇到', '好多', '问题', '崩溃', '不过', '号称', 'grpc', 'http', '性能', '不少', '线上', '只能', 'grpc']","[[-2.46968656e-01 -5.33826092e-02  2.79000800e-01  1.96257418e-01
   2.01639879e-01 -3.71892048e-01 -5.48146984e-02  4.45541913e-01
  -1.11363545e-01 -1.59186339e-01 -3.45302102e-02 -4.06173252e-01
  -5.01827026e-02  4.62975500e-01  1.54658206e-01 -1.33126627e-01
  -8.62517232e-02 -2.82367298e-02 -1.47775469e-02 -4.82742920e-01
  -6.75498579e-02  2.97994742e-01 -1.11559214e-01 -2.45959101e-01
  -1.20904681e-02 -3.74770546e-01 -3.08485036e-01  4.69090450e-03
  -2.04677412e-01 -9.00922766e-02  1.20211349e-01  2.17808136e-02
   1.43356406e-02 -9.04908815e-02 -1.99039123e-01  3.57384798e-01
  -2.07294198e-01 -3.08304804e-01  4.98034997e-02 -6.58437367e-01
  -6.76660439e-02 -4.99271063e-01 -8.47485349e-02  1.51926374e-02
  -1.05339849e-01 -2.61806591e-01 -2.78231380e-01  2.98685435e-01
  -1.17824231e-01  4.32252596e-01  4.58672520e-02 -2.89281011e-01
  -9.05687285e-02 -1.84453164e-01 -4.66537886e-02  3.93786140e-01
   9.20979379e-02 -9.97824544e-02  1.33946349e-01 -1.40710249e-01
   1.43053086e-01  1.61634631e-01  1.03389560e-02  5.84604220e-02
  -3.48204800e-01  9.58607278e-02  1.81160198e-02 -4.69821448e-04
  -2.87183859e-01  4.03244206e-01  6.17756065e-03 -1.06979154e-01
   3.73910686e-01 -3.20494180e-01  4.83268350e-01  3.43248203e-01
   1.59775614e-01 -2.00322315e-01 -2.78524299e-01 -1.00562676e-01
  -3.46690088e-03  6.26130037e-02 -1.31575037e-01  4.20478870e-01
  -2.65191228e-01  1.92015942e-01 -2.55791390e-01  4.61744449e-01
   4.94710272e-01  1.94934395e-01  1.47726254e-01  1.04798056e-01
   3.16370275e-01  1.79671109e-01  1.87105633e-01  3.70859678e-01
   1.07707326e-01 -2.57694414e-01  1.02077804e-01 -1.27465132e-01]]"
2404,听樊登的《非暴力沟通》,最近在爱奇艺知识买了课程《樊登教你快乐地事业有成》，第一节是《樊登：非暴力沟通》，看完后觉得自己有一些感悟。自己的感悟：我们总是太喜欢评价、评判别人不论是别人主动寻求你的帮助，或者你觉得自己是前辈想要指导一下对方，我们总是喜欢评价评判别人或者给别人建议，然而每个人的世界观不同，有什么资格评价别人呢，这都是不对的，如果对方寻求安慰向你倾诉，真正应该做的应该是体会对方的感受。就像有一句话：如果你不要求我给你评价，那我绝对不能所以评价。人类智力的最高形式是表达事实这句话在视频中樊登说过，挺惊讶的，不过仔细体会却觉得非常有道理；因为我们活在自己的世界里，所以看世界总是带着自己的人生观，这时候跟别人交互，其实说出的事实往往不是真正的事实，那么也就难以理解别人的感受。对于一件事情、先仔细体会其中的事实，然后把事实表达出来，这其实很难，可一旦这样阐述正确了，别人的愤怒、质疑等等任何情绪，起码在这一事实的表述上，不会爆发，并且因为同意你的说法，情绪也会有所安抚；很喜欢非暴力沟通的四要素这四要素很精辟，观察事实、表达感受、表达需要、表达请求，尤其是用于和孩子的沟通，不能愣头愣脑的评价孩子、建议孩子，首先得知道孩子为什么会这样，还在当前处于什么感受，然后在表达自己的想法、需求，但这里的想法不要是评价。不论是任何人，你评价他，就会给他带来伤害，他就会反弹；毕竟，你有什么资格、你凭什么觉得自己比人家厉害去评价他？视频的重点摘抄：暴力的来源：道德批判一味比较回避责任强人所难非暴力沟通四要素：观察：事实而非评论感受：表达感受而不是想法需要：说出引发感受的需要请求：说出你的具体要求倾听：全身心倾听，给予必要的反馈愤怒与感激：表达你的愤怒重获生活的热情表达感激有感兴趣的朋友可以评论或者加好友交流。,"['樊登', '非暴力', '沟通', '最近', '爱奇艺', '知识', '课程', '樊登教', '快乐', '事业有成', '第一节', '樊登', '非暴力', '沟通', '完后', '觉得', '自己', '一些', '感悟', '自己', '感悟', '我们', '总是', '喜欢', '评价', '评判', '别人', '不论是', '别人', '主动', '寻求', '帮助', '或者', '觉得', '自己', '前辈', '想要', '指导', '一下', '对方', '我们', '总是', '喜欢', '评价', '评判', '别人', '或者', '别人', '建议', '然而', '每个', '世界观', '不同', '什么', '资格', '评价', '别人', '如果', '对方', '寻求', '安慰', '倾诉', '真正', '应该', '应该', '体会', '对方', '感受', '一句', '如果', '要求', '评价', '绝对', '不能', '所以', '评价', '人类', '智力', '最高', '形式', '表达', '事实', '这句', '视频', '中樊登', '惊讶', '不过', '仔细', '体会', '觉得', '非常', '道理', '因为', '我们', '活在', '自己', '世界', '所以', '世界', '总是', '自己', '人生观', '这时候', '别人', '交互', '其实', '说出', '事实', '往往', '不是', '真正', '事实', '那么', '难以', '理解', '别人', '感受', '对于', '一件', '事情', '仔细', '体会', '其中', '事实', '然后', '事实', '表达出来', '其实', '很难', '一旦', '这样', '阐述', '正确', '别人', '愤怒', '质疑', '等等', '任何', '情绪', '起码', '事实', '表述', '不会', '爆发', '并且', '因为', '同意', '说法', '情绪', '有所', '安抚', '喜欢', '非暴力', '沟通', '要素', '这四', '要素', '精辟', '观察', '事实', '表达', '感受', '表达', '需要', '表达', '请求', '尤其', '用于', '孩子', '沟通', '不能', '愣头愣脑', '评价', '孩子', '建议', '孩子', '首先', '知道', '孩子', '为什么', '这样', '当前', '处于', '什么', '感受', '然后', '表达', '自己', '想法', '需求', '这里', '想法', '不要', '评价', '不论是', '任何人', '评价', '带来', '伤害', '反弹', '毕竟', '什么', '资格', '什么', '觉得', '自己', '人家', '厉害', '评价', '视频', '重点', '摘抄', '暴力', '来源', '道德', '批判', '一味', '比较', '回避', '责任', '强人所难', '非暴力', '沟通', '要素', '观察', '事实', '评论', '感受', '表达', '感受', '不是', '想法', '需要', '说出', '引发', '感受', '需要', '请求', '说出', '具体', '要求', '倾听', '全身心', '倾听', '给予', '必要', '反馈', '愤怒', '感激', '表达', '愤怒', '重获', '生活', '热情', '表达', '感激', '感兴趣', '朋友', '可以', '评论', '或者', '好友', '交流']","[[-0.20264299 -0.10612561  0.17717716  0.131546    0.23527952 -0.27085876
  -0.14965973  0.38396394 -0.00282114 -0.01143219 -0.04879581 -0.26341676
  -0.14517614  0.47780865  0.11892488 -0.08364938 -0.12067693 -0.0120608
  -0.08230158 -0.35673226  0.02841728  0.19325391  0.00544015 -0.06676475
   0.0958585  -0.4401024  -0.22267969  0.06675777 -0.16045251 -0.04746346
   0.20254354  0.02364736 -0.01711022 -0.11165927 -0.07675846  0.26451458
  -0.09939994 -0.17052884  0.08916708 -0.61103863 -0.13860007 -0.46363041
  -0.02958766 -0.06528945 -0.13694531 -0.11083579 -0.21560842  0.37927175
  -0.14579672  0.30826876  0.16661361 -0.2068511  -0.09099319 -0.18874584
   0.05942541  0.30452945  0.20324141 -0.04475441  0.07364653 -0.06670255
   0.02723731  0.23803922  0.01699319  0.06808166 -0.30672257 -0.01581565
   0.03470784 -0.0164364  -0.18491657  0.35318289  0.11489916 -0.2029343
   0.31823046 -0.25963486  0.46134235  0.12494002  0.1752283  -0.10922992
  -0.20899851 -0.17846576 -0.06857916 -0.00540404 -0.04727958  0.26055799
  -0.29981717  0.165516   -0.23170207  0.32642631  0.36330096  0.10320632
   0.25137859  0.09857921  0.28924837  0.14721383  0.14728239  0.30039794
   0.07966173 -0.23952193 -0.0121208  -0.06586151]]"
2419,Flask使用Pyecharts在单个页面展示多个图表,"在Flask页面展示echarts，主要有两种方法：方法1、原生echarts方法自己在前端引入echarts.js文件、自己创建div、自己初始化echarts对象、自己从官网复制并且配置图表、自己给echarts对象设置配置项实现绘制，这种方法的缺点是配置项都是js的形式比较繁琐，对于后端开发人员来说有点过于参与前端js部分的配置开发；这种方式参照echarts官网的方式，其实跟flask没有多大关系，php/java不同后端语言都一样，地址方法2：使用pyechartspyecharts主要是做了一件事情，把js的配置option，完全抽离使用Python代码配置，把js的数据结构使用python的代码结构实现，让后端开发只需要配置数据就能搞定图表，真的很像matplotlib，当然echarts的强大使得pyecharts更强大；但是这里真的要吐槽pyecharts，因为它包含多种输出图表结果的方式，没有一种是能够和flask完美配合的：render()方法：默认会在当前目录生成 render.html 文件；这是什么鬼，什么场景会用到这种方式，竟然是默认的方式？真是怪异；render()方法传入路径参数：传入路径参数，如 bar.render(""mycharts.html"")，这种方法好一点，可以设定文件路径，但是为毛要输出一个HTML，另外一点，我做一个网页，难道这个网页上除了这个图表没有其他数据和展示了？只有一个大大的echarts图表？render_notebook()方法：这个方法能用在notebook中，这个我不吐槽，因为如果使用notebook，这个方法很好用，但是我要用于flask网页展示；render_embed()方法：来自pyecharts的flask一章中的Markup(c.render_embed())，我估计作者根本没写过flask代码，不然为毛flask网页中只能展示一个echarts图表，我其他的数据展示，怎么用这个方法设置？我试图把render_embed()的结果传递给flask模板，结果发现这个函数的返回是一个整个HTML；chart.dump_options()方法：这个方法是唯一一个我觉得能和flask配合不错的方法，能够实现一个flask网页中绘制很多个图表；然而却依然需要自己引入echarts.js文件、自己设定div、自己初始化echarts对象、自己给echarts对象设置图表配置，唯一简化的就是图表配置是来自于python服务端；最后给出使用chart.dump_options()方法给一个flask网页配置多个图表的方法代码：Python代码：@app.route(""/show_pyecharts"")def show_pyecharts():    bar = (        Bar()            .add_xaxis([""衬衫"", ""羊毛衫"", ""雪纺衫"", ""裤子"", ""高跟鞋"", ""袜子""])            .add_yaxis(""商家A"", [5, 20, 36, 10, 75, 90])    )    # print(bar.render_embed())    # print(bar.dump_options())    return render_template(        ""show_pyecharts.html"",        bar_data=bar.dump_options()    )Flask模板代码：<!DOCTYPE html><html lang=""en""><head>    <meta charset=""UTF-8"">    <title>Title</title>    <script src=""/static/echarts.min.js""></script></head><body><h1>柱状图</h1><div>    <!-- 为ECharts准备一个具备大小（宽高）的Dom -->    <div id=""main"" style=""width: 600px;height:400px;""></div>    <script type=""text/javascript"">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('main'));        // 使用刚指定的配置项和数据显示图表。        myChart.setOption({{ bar_data | safe }});    </script>    <!-- 为ECharts准备一个具备大小（宽高）的Dom -->    <div id=""main2"" style=""width: 600px;height:400px;""></div>    <script type=""text/javascript"">        // 基于准备好的dom，初始化echarts实例        var myChart2 = echarts.init(document.getElementById('main2'));        // 指定图表的配置项和数据        var option2 = {{ bar_data | safe }};        // 使用刚指定的配置项和数据显示图表。        myChart2.setOption(option2);    </script></div></body></html>展示输出：本方法的视频演示教程，收录在自己录制的付费课程《Python Flask开发Web程序》，地址为http://www.iqiyi.com/a_19rrh35u11.html","['flask', '使用', 'pyecharts', '单个', '页面', '展示', '多个', '图表', 'flask', '页面', '展示', 'echarts', '主要', '两种', '方法', '方法', '原生', 'echarts', '方法', '自己', '前端', '引入', 'echarts', 'js', '文件', '自己', '创建', 'div', '自己', '初始化', 'echarts', '对象', '自己', '官网', '复制', '并且', '配置', '图表', '自己', 'echarts', '对象', '设置', '配置', '实现', '绘制', '这种', '方法', '缺点', '配置', 'js', '形式', '比较', '繁琐', '对于', '开发人员', '来说', '有点', '过于', '参与', '前端', 'js', '部分', '配置', '开发', '这种', '方式', '参照', 'echarts', '官网', '方式', '其实', 'flask', '没有', '多大', '关系', 'php', 'java', '不同', '语言', '一样', '地址', '方法', '使用', 'pyechartspyecharts', '主要', '一件', '事情', 'js', '配置', 'option', '完全', '抽离', '使用', 'python', '代码', '配置', 'js', '数据结构', '使用', 'python', '代码', '结构', '实现', '开发', '需要', '配置', '数据', '搞定', '图表', '真的', 'matplotlib', '当然', 'echarts', '强大', '使得', 'pyecharts', '强大', '但是', '这里', '真的', 'pyecharts', '因为', '包含', '多种', '输出', '图表', '结果', '方式', '没有', '一种', '能够', 'flask', '完美', '配合', 'render', '方法', '默认', '当前目录', '生成', 'render', 'html', '文件', '这是', '什么', '什么', '场景', '用到', '这种', '方式', '竟然', '默认', '方式', '真是', '怪异', 'render', '方法', '传入', '路径', '参数', '传入', '路径', '参数', 'bar', 'render', 'mycharts', 'html', '这种', '方法', '一点', '可以', '设定', '文件', '路径', '但是', '毛要', '输出', '一个', 'html', '另外', '一点', '一个', '网页', '难道', '这个', '网页', '除了', '这个', '图表', '没有', '其他', '数据', '展示', '只有', '一个', '大大的', 'echarts', '图表', 'render', 'notebook', '方法', '这个', '方法', '能用', 'notebook', '这个', '不吐槽', '因为', '如果', '使用', 'notebook', '这个', '方法', '但是', '我要', '用于', 'flask', '网页', '展示', 'render', 'embed', '方法', '来自', 'pyecharts', 'flask', '一章', 'markup', 'render', 'embed', '估计', '作者', '根本', '没写', 'flask', '代码', '不然', 'flask', '网页', '只能', '展示', '一个', 'echarts', '图表', '其他', '数据', '展示', '怎么', '这个', '方法', '设置', '试图', 'render', 'embed', '结果', '传递', 'flask', '模板', '结果', '发现', '这个', '函数', '返回', '一个', '整个', 'html', 'chart', 'dump', 'options', '方法', '这个', '方法', '唯一', '一个', '觉得', 'flask', '配合', '不错', '方法', '能够', '实现', '一个', 'flask', '网页', '绘制', '很多', '图表', '然而', '依然', '需要', '自己', '引入', 'echarts', 'js', '文件', '自己', '设定', 'div', '自己', '初始化', 'echarts', '对象', '自己', 'echarts', '对象', '设置', '图表', '配置', '唯一', '简化', '就是', '图表', '配置', '来自', 'python', '服务端', '最后', '给出', '使用', 'chart', 'dump', 'options', '方法', '一个', 'flask', '网页', '配置', '多个', '图表', '方法', '代码', 'python', '代码', 'app', 'route', 'show', 'pyecharts', 'def', 'show', 'pyecharts', 'bar', 'bar', 'add', 'xaxis', '衬衫', '羊毛衫', '雪纺衫', '裤子', '高跟鞋', '袜子', 'add', 'yaxis', '商家', '20', '36', '10', '75', '90', 'print', 'bar', 'render', 'embed', 'print', 'bar', 'dump', 'options', 'return', 'render', 'template', 'show', 'pyecharts', 'html', 'bar', 'data', 'bar', 'dump', 'options', 'flask', '模板', '代码', 'doctype', 'html', 'html', 'lang', 'en', 'head', 'meta', 'charset', 'utf', 'title', 'title', 'title', 'script', 'src', 'static', 'echarts', 'min', 'js', 'script', 'head', 'body', 'h1', '柱状图', 'h1', 'div', '--', 'echarts', '准备', '一个', '具备', '大小', '宽高', 'dom', '--', 'div', 'id', 'main', 'style', 'width', '600px', 'height', '400px', 'div', 'script', 'type', 'text', 'javascript', '基于', '准备', 'dom', '初始化', 'echarts', '实例', 'var', 'mychart', 'echarts', 'init', 'document', 'getelementbyid', 'main', '使用', '指定', '配置', '数据', '显示', '图表', 'mychart', 'setoption', 'bar', 'data', 'safe', 'script', '--', 'echarts', '准备', '一个', '具备', '大小', '宽高', 'dom', '--', 'div', 'id', 'main2', 'style', 'width', '600px', 'height', '400px', 'div', 'script', 'type', 'text', 'javascript', '基于', '准备', 'dom', '初始化', 'echarts', '实例', 'var', 'mychart2', 'echarts', 'init', 'document', 'getelementbyid', 'main2', '指定', '图表', '配置', '数据', 'var', 'option2', 'bar', 'data', 'safe', '使用', '指定', '配置', '数据', '显示', '图表', 'mychart2', 'setoption', 'option2', 'script', 'div', 'body', 'html', '展示', '输出', '方法', '视频', '演示', '教程', '收录', '自己', '录制', '付费', '课程', 'python', 'flask', '开发', 'web', '程序', '地址', 'http', 'www', 'iqiyi', 'com', '19rrh35u11', 'html']","[[-2.40537639e-01 -1.35240232e-01  2.19595083e-01  1.78550659e-01
   2.67617603e-01 -3.51292122e-01 -1.68386694e-01  4.84959475e-01
  -1.46267074e-02 -3.82251802e-02 -6.39414627e-02 -3.37886179e-01
  -1.77198162e-01  5.80789641e-01  1.37259739e-01 -1.16030178e-01
  -1.44975094e-01  5.90932084e-03 -8.03204623e-02 -4.44163512e-01
   1.84822932e-02  2.41347820e-01 -1.29815223e-02 -1.10988005e-01
   9.94749235e-02 -5.24292757e-01 -2.85151984e-01  8.02104043e-02
  -2.06993892e-01 -6.25608504e-02  2.29408975e-01  4.19670029e-02
  -1.01455762e-04 -1.42875311e-01 -1.27617699e-01  3.32248683e-01
  -1.43594172e-01 -2.24551656e-01  1.07072900e-01 -7.29460683e-01
  -1.53203000e-01 -5.66692863e-01 -3.86934051e-02 -6.11714146e-02
  -1.52607438e-01 -1.67393752e-01 -2.62332280e-01  4.49440762e-01
  -1.41462927e-01  3.86436350e-01  1.83057742e-01 -2.71585112e-01
  -9.09949500e-02 -2.22684171e-01  4.99949625e-02  3.94068706e-01
   2.27769336e-01 -7.16681273e-02  1.07616825e-01 -1.08044890e-01
   6.53214023e-02  2.76747841e-01  2.41041298e-02  8.86931771e-02
  -3.76312691e-01  2.99588134e-03  2.41335095e-02 -9.52245557e-03
  -2.40902535e-01  4.33299502e-01  1.21972347e-01 -2.27577037e-01
   3.99617648e-01 -3.22683846e-01  5.73347542e-01  1.90721841e-01
   2.08777611e-01 -1.48903684e-01 -2.60484463e-01 -1.99405357e-01
  -8.30096589e-02  5.81976040e-03 -8.28463397e-02  3.41845707e-01
  -3.71422451e-01  1.90807094e-01 -2.81062709e-01  4.24250767e-01
   4.70284047e-01  1.33436261e-01  2.80647613e-01  1.19008555e-01
   3.42717915e-01  1.79330760e-01  1.88369684e-01  3.85786146e-01
   1.00641376e-01 -2.79980793e-01  3.05530428e-03 -9.42770915e-02]]"
2434,Pandas中对轴axis=0和axis=1的理解,刚学习numpy和Pandas，被axis、axis=0或者axis='index'，axis=1或者axis='columns'给搞蒙了，甚至经常觉得书是不是写错了，有点反直觉。来自简书的一篇文章地址有张图解释的挺好的，见文章底部 引用一下这篇文章的话，理解的很好：实际上axis = 1，指的是沿着行求所有列的平均值，代表了横轴，那axis = 0，就是沿着列求所有行的平均值，代表了纵轴。但理解起来还是很绕，按我个人的理解，如果对比excel和MySQL的数据表来理解就更容易：我们正常在使用excel或者mysql的时候，默认都是一行代表一条数据，每个列是不同的信息字段，我们在读取表的时候，都是一行一行读取的，如果要算max、min、sum等函数，其实都是一行一行计算全局的min、max、sum，但是算出来其实是每个列的数据的min、max、sum，这其实就是axis=0和axis='index'的意思：一行一行的计算，但是算出来其实是每列的结果；相对应的，我们的excel、mysql，很少会实现跨列做计算，除非每列都是一样的数字信息，举个例子某一个数据表的每一行有一个主键是日期，每一列是对应每个页面的PV，那么我可以计算每个日期的PV总数、平均数，这时候就是跨列计算了，就是不常见的axis=1或者axis='columns'，虽然是跨列计算，但是算出来的结果其实是行标签日期的数据结果。axis=0，虽然是一行一行计算，其实算出来是每列的结果，换句话说，aixs=0是指计算的时候跨行、每行每行的算，那么算出来当然是每列的结果，就像一把梳子往下梳，得到的就是树条状的结果，每个竖条的标签当然就是columns的标签；axis=1，虽然是一列一列计算，其实算出来是每行的结果，换句话说，aixs=1是指计算的时候跨列、每列每列的算，那么算出来当然是每行的结果，就像一把梳子往右梳，得到的就是横条状的结果，每个横条的标签当然是index的标签；以上当然是自己的理解，具体还得自己琢磨才可以弄清楚。,"['pandas', 'axis', 'axis', '理解', '学习', 'numpy', 'pandas', 'axis', 'axis', '或者', 'axis', 'index', 'axis', '或者', 'axis', 'columns', '甚至', '经常', '觉得', '是不是', '写错', '有点', '直觉', '来自', '简书', '一篇', '文章', '地址', '张图', '解释', '文章', '底部', '引用', '一下', '篇文章', '的话', '理解', '实际上', 'axis', '沿着', '行求', '所有', '平均值', '代表', '横轴', 'axis', '就是', '沿着', '列求', '所有', '平均值', '代表', '纵轴', '理解', '起来', '还是', '很绕', '个人', '理解', '如果', '对比', 'excel', 'mysql', '数据表', '理解', '容易', '我们', '正常', '使用', 'excel', '或者', 'mysql', '时候', '默认', '一行', '代表', '一条', '数据', '每个', '列是', '不同', '信息', '我们', '读取', '时候', '一行', '一行', '读取', '如果', '要算', 'max', 'min', 'sum', '函数', '其实', '一行', '一行', '计算', '全局', 'min', 'max', 'sum', '但是', '出来', '其实', '每个', '数据', 'min', 'max', 'sum', '其实', '就是', 'axis', 'axis', 'index', '意思', '一行', '一行', '计算', '但是', '出来', '其实', '每列', '结果', '相对', '我们', 'excel', 'mysql', '很少', '实现', '跨列', '计算', '除非', '每列', '一样', '数字信息', '举个', '例子', '一个', '数据表', '一行', '一个', '主键', '日期', '一列', '对应', '每个', '页面', 'pv', '那么', '可以', '计算', '每个', '日期', 'pv', '总数', '平均数', '这时候', '就是', '跨列', '计算', '就是', '常见', 'axis', '或者', 'axis', 'columns', '虽然', '跨列', '计算', '但是', '出来', '结果', '其实', '标签', '日期', '数据', '结果', 'axis', '虽然', '一行', '一行', '计算', '其实', '出来', '每列', '结果', '换句话说', 'aixs', '计算', '时候', '跨行', '每行', '每行', '那么', '出来', '当然', '每列', '结果', '一把', '梳子', '往下', '得到', '就是', '条状', '结果', '每个', '竖条', '标签', '当然', '就是', 'columns', '标签', 'axis', '虽然', '一列', '一列', '计算', '其实', '出来', '每行', '结果', '换句话说', 'aixs', '计算', '时候', '跨列', '每列', '每列', '那么', '出来', '当然', '每行', '结果', '一把', '梳子', '往右', '得到', '就是', '条状', '结果', '每个', '横条', '标签', '当然', 'index', '标签', '以上', '当然', '自己', '理解', '具体', '自己', '琢磨', '可以', '弄清楚']","[[-0.2520693  -0.14589106  0.21790929  0.15735677  0.31079331 -0.34818865
  -0.2000124   0.49486983  0.00303464 -0.01541137 -0.06227864 -0.32478466
  -0.20040367  0.62201918  0.15813821 -0.10165743 -0.16416075 -0.00525604
  -0.11126969 -0.47171655  0.03157421  0.23892284  0.01034098 -0.08598006
   0.1315569  -0.57342506 -0.28792678  0.09551222 -0.2155051  -0.05690172
   0.25981153  0.02355041 -0.01999974 -0.1535435  -0.09822151  0.33407557
  -0.13734165 -0.21671661  0.12288967 -0.78907492 -0.18849642 -0.60699708
  -0.03996408 -0.07788856 -0.17338333 -0.1472186  -0.25849031  0.48760212
  -0.19086321  0.40428175  0.22462674 -0.26801404 -0.12487209 -0.23373986
   0.07818358  0.3945      0.26363128 -0.0617029   0.09331662 -0.09533979
   0.03294496  0.3070887   0.02069419  0.09619397 -0.39552129 -0.02203336
   0.05193821 -0.02528548 -0.25068253  0.4518026   0.16042482 -0.26121316
   0.40280087 -0.33178433  0.59244096  0.15622317  0.20730109 -0.13480365
  -0.27964241 -0.21845333 -0.07748484 -0.00791542 -0.06207463  0.33118506
  -0.38638009  0.20783027 -0.29647503  0.41203632  0.46962341  0.12959732
   0.33211196  0.12321253  0.3740748   0.18913482  0.19070602  0.37850528
   0.09992515 -0.31361395 -0.04271042 -0.09120592]]"
2447,Spark使用word2vec训练item2vec实现内容相关推荐,"之前使用spark als训练协同过滤，然后导出itemvectors做相似度计算，后来学到了可以用word2vec实现item2vec的训练效果貌似更好，试了一下果然不错；spark版本：2.3.1，开发语言为JAVA几大步骤读取查看、点击、播放等行为数据，我用的是播放数据；数据整理成(userid, itemid, playcnt)的形式，这个数据可能是聚合N天得到的；过滤掉playcnt为小于3的数据，我把这些过滤掉，觉得这个数据没有贡献；按照userid聚合，得到(userid, list(itemid))的形式；训练word2vec；导出model.vectors()，里面包括word和对应的向量vector，其中word其实就是itemidcrossjoin计算两两相似度，取相似度TOP N；将结果存入mysql，后续可以加载到REDIS实现实时相似推荐；代码实现读取播放数据：Dataset<Row> playDatas = spark.sql(        ""select user_id, item_id, play_cnt "" +                ""from hive_play_table group by user_id, item_id""); 做数据按userid聚合：playDatas = playDatas        // 删除掉只播放3次以下的数据        .filter(""play_cnt>2"")        // 按userid聚合        .groupBy(""user_id"")        .agg(collect_list(""item_id"").as(""item_ids""))        // 至少操作过2个元素        .where(size(col(""item_ids"")).geq(2)); 训练word2vec：Word2Vec word2Vec = new Word2Vec()        .setInputCol(""item_ids"")        .setOutputCol(""word2vec_result"")        .setVectorSize(50)        .setMinCount(0)        .setMaxIter(50)        .setSeed(123);Word2VecModel word2VecModel = word2Vec.fit(playDatas); 实现df的cross join：Dataset<Row> vectorsA = word2VecModel        .getVectors()        .select(                col(""word"").as(""itemIdA""),                col(""vector"").as(""vectorA""));Dataset<Row> vectorsB = word2VecModel        .getVectors()        .select(                col(""word"").as(""itemIdB""),                col(""vector"").as(""vectorB""));// self cross joinDataset<Row> crossDatas = vectorsA.crossJoin(vectorsB); 注册余弦相似度计算函数：spark.udf().register(        ""vectorCosinSim"",        new UDF2<Vector, Vector, Double>() {            @Override            public Double call(Vector vectora, Vector vectorb) throws Exception {                return SimilarityUtils.cosineSimilarity(vectora, vectorb);            }        },        DataTypes.DoubleType); 其中调用的余弦相似度计算函数，使用JAVA实现：public static double cosineSimilarity(Vector featuresLeft, Vector featuresRight) {    double[] dataLeft = featuresLeft.toArray();    List<Float> lista = new ArrayList<>();    if (dataLeft.length > 0) {        for (double d : dataLeft) {            lista.add((float) d);        }    }    double[] dataRight = featuresRight.toArray();    List<Float> listb = new ArrayList<>();    if (dataRight.length > 0) {        for (double d : dataRight) {            listb.add((float) d);        }    }    return cosineSimilarity(lista, listb);} 实现相似度计算，并过滤掉自身和自身的计算：crossDatas = crossDatas        .withColumn(                ""cosineSimilarity"", callUDF(                        ""vectorCosinSim"", col(""vectorA""), col(""vectorB"")))        .select(""itemIdA"", ""itemIdB"", ""cosineSimilarity"")        .filter(col(""itemIdA"").notEqual(col(""itemIdB""))); 使用 spark的Window，提取每个group的topn：// 按照相似度倒序排列取TOP 300WindowSpec windowSpec = Window.partitionBy(""itemIdA"").orderBy(col(""cosineSimilarity"").desc());crossDatas = crossDatas        .withColumn(""simRank"", rank().over(windowSpec))        .where(col(""simRank"").leq(200)); 将数据聚合成每个Item的推荐列表的形式：crossDatas = crossDatas        .groupBy(""itemIdA"")        .agg(                collect_list(""cosineSimilarity"").as(""columnSims""),                collect_list(""itemIdB"").as(""itemIds"")        ).select(                col(""itemIdA"").as(""item_id"").cast(DataTypes.LongType),                col(""columnSims"").as(""column_sims"").cast(DataTypes.StringType),                col(""itemIds"").as(""item_ids"").cast(DataTypes.StringType)        ); 将数据覆盖写入MySQL：crossDatas.write().mode(SaveMode.Overwrite).jdbc(        MysqlConfig.ONLINE_MYSQL_MASTER_URL,        ""item2vec_sims"",        MysqlConfig.getOnlineProperties()); 在数据库中，我们根据item_id，提取到item_ids，可以用于直接的推荐；其中column_sims也记录了对应的相似度权重，如果需要加权的话也可以直接提取；欢迎大家关注我的爱奇艺号，学习Pyton大数据人工智能技术，地址。本文地址：http://www.crazyant.net/2447.html，转载请注明来源。   ","['spark', '使用', 'word2vec', '训练', 'item2vec', '实现', '内容', '相关', '推荐', '之前', '使用', 'spark', 'als', '训练', '协同', '过滤', '然后', '导出', 'itemvectors', '相似', '计算', '后来', '学到', '可以', 'word2vec', '实现', 'item2vec', '训练', '效果', '貌似', '更好', '一下', '果然', '不错', 'spark', '版本', '2.3', '开发', '语言', 'java', '几大', '步骤', '读取', '查看', '点击', '播放', '行为', '数据', '我用', '播放', '数据', '数据', '整理', 'userid', 'itemid', 'playcnt', '形式', '这个', '数据', '可能', '聚合', '得到', '过滤', 'playcnt', '小于', '数据', '这些', '过滤', '觉得', '这个', '数据', '没有', '贡献', '按照', 'userid', '聚合', '得到', 'userid', 'list', 'itemid', '形式', '训练', 'word2vec', '导出', 'model', 'vectors', '里面', '包括', 'word', '对应', '向量', 'vector', '其中', 'word', '其实', '就是', 'itemidcrossjoin', '计算', '相似', '相似', 'top', '结果', '存入', 'mysql', '后续', '可以', '加载', 'redis', '实现', '实时', '相似', '推荐', '代码', '实现', '读取', '播放', '数据', 'dataset', 'row', 'playdatas', 'spark', 'sql', 'select', 'user', 'id', 'item', 'id', 'play', 'cnt', 'from', 'hive', 'play', 'table', 'group', 'by', 'user', 'id', 'item', 'id', '数据', 'userid', '聚合', 'playdatas', 'playdatas', '删除', '播放', '以下', '数据', 'filter', 'play', 'cnt', 'userid', '聚合', 'groupby', 'user', 'id', 'agg', 'collect', 'list', 'item', 'id', 'as', 'item', 'ids', '至少', '操作', '元素', 'where', 'size', 'col', 'item', 'ids', 'geq', '训练', 'word2vec', 'word2vec', 'word2vec', 'new', 'word2vec', 'setinputcol', 'item', 'ids', 'setoutputcol', 'word2vec', 'result', 'setvectorsize', '50', 'setmincount', 'setmaxiter', '50', 'setseed', '123', 'word2vecmodel', 'word2vecmodel', 'word2vec', 'fit', 'playdatas', '实现', 'df', 'cross', 'join', 'dataset', 'row', 'vectorsa', 'word2vecmodel', 'getvectors', 'select', 'col', 'word', 'as', 'itemida', 'col', 'vector', 'as', 'vectora', 'dataset', 'row', 'vectorsb', 'word2vecmodel', 'getvectors', 'select', 'col', 'word', 'as', 'itemidb', 'col', 'vector', 'as', 'vectorb', 'self', 'cross', 'joindataset', 'row', 'crossdatas', 'vectorsa', 'crossjoin', 'vectorsb', '注册', '余弦', '相似', '计算', '函数', 'spark', 'udf', 'register', 'vectorcosinsim', 'new', 'udf2', 'vector', 'vector', 'double', 'override', 'public', 'double', 'call', 'vector', 'vectora', 'vector', 'vectorb', 'throws', 'exception', 'return', 'similarityutils', 'cosinesimilarity', 'vectora', 'vectorb', 'datatypes', 'doubletype', '其中', '调用', '余弦', '相似', '计算', '函数', '使用', 'java', '实现', 'public', 'static', 'double', 'cosinesimilarity', 'vector', 'featuresleft', 'vector', 'featuresright', 'double', 'dataleft', 'featuresleft', 'toarray', 'list', 'float', 'lista', 'new', 'arraylist', 'if', 'dataleft', 'length', 'for', 'double', 'dataleft', 'lista', 'add', 'float', 'double', 'dataright', 'featuresright', 'toarray', 'list', 'float', 'listb', 'new', 'arraylist', 'if', 'dataright', 'length', 'for', 'double', 'dataright', 'listb', 'add', 'float', 'return', 'cosinesimilarity', 'lista', 'listb', '实现', '相似', '计算', '过滤', '自身', '自身', '计算', 'crossdatas', 'crossdatas', 'withcolumn', 'cosinesimilarity', 'calludf', 'vectorcosinsim', 'col', 'vectora', 'col', 'vectorb', 'select', 'itemida', 'itemidb', 'cosinesimilarity', 'filter', 'col', 'itemida', 'notequal', 'col', 'itemidb', '使用', 'spark', 'window', '提取', '每个', 'group', 'topn', '按照', '相似', '倒序', '排列', 'top', '300windowspec', 'windowspec', 'window', 'partitionby', 'itemida', 'orderby', 'col', 'cosinesimilarity', 'desc', 'crossdatas', 'crossdatas', 'withcolumn', 'simrank', 'rank', 'over', 'windowspec', 'where', 'col', 'simrank', 'leq', '200', '数据', '聚合', '每个', 'item', '推荐', '列表', '形式', 'crossdatas', 'crossdatas', 'groupby', 'itemida', 'agg', 'collect', 'list', 'cosinesimilarity', 'as', 'columnsims', 'collect', 'list', 'itemidb', 'as', 'itemids', 'select', 'col', 'itemida', 'as', 'item', 'id', 'cast', 'datatypes', 'longtype', 'col', 'columnsims', 'as', 'column', 'sims', 'cast', 'datatypes', 'stringtype', 'col', 'itemids', 'as', 'item', 'ids', 'cast', 'datatypes', 'stringtype', '数据', '覆盖', '写入', 'mysql', 'crossdatas', 'write', 'mode', 'savemode', 'overwrite', 'jdbc', 'mysqlconfig', 'online', 'mysql', 'master', 'url', 'item2vec', 'sims', 'mysqlconfig', 'getonlineproperties', '数据库', '我们', '根据', 'item', 'id', '提取', 'item', 'ids', '可以', '用于', '直接', '推荐', '其中', 'column', 'sims', '记录', '对应', '相似', '权重', '如果', '需要', '加权', '的话', '可以', '直接', '提取', '欢迎', '大家', '关注', '爱奇艺', '学习', 'pyton', '数据', '人工智能', '技术', '地址', '本文', '地址', 'http', 'www', 'crazyant', 'net', '2447', 'html', '转载', '注明', '来源']","[[-0.22164318 -0.10436251  0.23155234  0.1342319   0.27127718 -0.34279531
  -0.13454749  0.45413397 -0.04390228 -0.09048584 -0.0448669  -0.33918006
  -0.14286534  0.52287242  0.14838518 -0.09862377 -0.12183858 -0.00657474
  -0.07283551 -0.47866832 -0.02302622  0.23778999 -0.04209669 -0.17163509
   0.06865442 -0.46146216 -0.28956692  0.0540037  -0.21692545 -0.06776294
   0.17741066  0.0179373  -0.00253301 -0.12137301 -0.14308619  0.31360716
  -0.17079595 -0.24583392  0.0829856  -0.69305191 -0.13704187 -0.5568275
  -0.06067249 -0.02190589 -0.13060232 -0.20137502 -0.2234863   0.36315756
  -0.1660391   0.42277529  0.14898121 -0.2567311  -0.11424603 -0.17791365
   0.00621435  0.36494339  0.16784428 -0.07911846  0.10012924 -0.12106113
   0.07841315  0.22944177  0.01467826  0.08509585 -0.35088433  0.03006144
   0.050195   -0.02393616 -0.27009592  0.40954444  0.10380937 -0.17927182
   0.36291378 -0.3047691   0.52084636  0.23350962  0.14982397 -0.15018214
  -0.28943841 -0.13172392 -0.01604535  0.03999611 -0.09898793  0.34779804
  -0.32134971  0.19743333 -0.26686552  0.41432052  0.45965893  0.148264
   0.24080568  0.10403773  0.34091027  0.17519468  0.18426935  0.33543369
   0.10463895 -0.29259922 -0.01869308 -0.10834034]]"
2454,推荐系统：实现文章相似推荐的简单实例,"看了一篇文章实现了文章的内容相似度计算实现相似推荐，算法比较简单，非常适合我这种初学入门的人。来自一篇英文文章：地址文章标题为：How to build a content-based movie recommender system with Natural Language Processing文章的代码在：地址该文章实现相似推荐的步骤：1、将CSV加载到pandas.pd2、提取其中的标题、题材分类、导演、演员、情节描述4个字段；3、将单词都变小写，人名中的空格合并(英文才需要这样)；4、题材分类、导演、演员这几个特征都是结构化的不需要处理；而标题、情节描述这类字段是长段文本，使用nltk库做关键词提取(如果是中文可以用jieba分词库也有关键词提取功能)5、将第四步骤的分类、导演、演员、关键词列表，合并到一个词列表(这一处理其实暗含了分类、导演、演员三个特征和关键词一样重要，没有做加权处理)6、使用CountVectorizer做每个词语的计数，得到了每个文章的向量；7、使用sklearn的cosin做笛卡尔积的相似度计算；8、计算结果是一个二维矩阵，按行查询某一个文章的推荐结果，按相似度值排序得到最相似的文章从里面能学到不少知识的运用：1、全流程用pandas运行，尤其是for each row，做单个列的各种map计算；2、计算相似度时使用了多个特征，包括Title,Genre,Director,Actors,Plot，统一成一个bag of words参与计算3、使用from sklearn.metrics.pairwise import cosine_similarity用于相似度计算；4、使用from sklearn.feature_extraction.text import CountVectorizer用于单词计数；5、使用from rake_nltk import Rake用于关键词提取；代码实现关键部分：作者用到的一些库：import pandas as pdfrom rake_nltk import Rakeimport numpy as npfrom sklearn.metrics.pairwise import cosine_similarityfrom sklearn.feature_extraction.text import CountVectorizerpandas的dataframe中，直接替换一列的语法：df['Director'] = df['Director'].map(lambda x: x.split(' '))pd按行以此处理某个列的方法：for index, row in df.iterrows():    row['Actors'] = [x.lower().replace(' ','') for x in row['Actors']]    row['Director'] = ''.join(row['Director']).lower()pd.df删除某一列的方法：df.drop(columns = ['Plot'], inplace = True)pd.df从columns中提取一列作为index的方法：df.set_index('Title', inplace = True)作者将能使用的所有列，都放在了一个词包中用于相似度计算，按我的想法，这些特征列其实应该有不同的权重？df['bag_of_words'] = ''columns = df.columnsfor index, row in df.iterrows():    words = ''    for col in columns:        if col != 'Director':            words = words + ' '.join(row[col])+ ' '        else:            words = words + row[col]+ ' '    row['bag_of_words'] = words    df.drop(columns = [col for col in df.columns if col!= 'bag_of_words'], inplace = True)sklearn使用词计数的调用：count = CountVectorizer()count_matrix = count.fit_transform(df['bag_of_words'])sklearn实现矩阵相似度计算的方法：# generating the cosine similarity matrixcosine_sim = cosine_similarity(count_matrix, count_matrix)怎样实现不同特征列的融合相似度计算？这个问题纠结我很久，查询了一些文章，大都是人工指定加权权重，或者使用模型拟合权重值，没有多么简单的方法，而作者使用的其实是直接把分类、演员等字段，和关键词直接融合的方法作者在文章中提到一句话：I decided to use CountVectorizer rather than TfIdfVectorizer for one simple reason: I need a simple frequency counter for each word in my bag_of_words column. Tf-Idf tends to give less importance to the words that are more present in the entire corpus (our whole column, in this case) which is not what we want for this application, because every word is important to detect similarity!对于标题、介绍这种纯文本内容，我们可以用TF/IDF提取关键词，物理含义就是降低全局出现的词频很多的词语；但是其实对于作者、演员、题材这类特征列，他们并不需要降低全局词频，使用词频计数即可。有哪些可以提升的地方作者的方法确实可以实现相似推荐，不过我感觉有一些可以提升的地方：1、标题、简介，提取关键词后，可以查询业界的word2vec做向量扩展，这样能实现恰恰和伦巴舞这类词语的相似度度量，直接的关键词查询是得不到这样的信息；2、分类、导演、演员这三个特征，需要和描述得到的关键词区分开，可以用加权的方法进行，按照产品的需求，加重分类、导演的相似度权重，降低演员、关键词的权重等，如果需要可以从点击率等出发，用模型计算这些权重；本文地址：http://www.crazyant.net/2454.html，转载请注明来源 ","['推荐', '系统', '实现', '文章', '相似', '推荐', '简单', '实例', '一篇', '文章', '实现', '文章', '内容', '相似', '计算', '实现', '相似', '推荐', '算法', '比较简单', '非常适合', '这种', '初学', '入门', '来自', '一篇', '英文', '文章', '地址', '文章', '标题', 'how', 'to', 'build', 'content', 'based', 'movie', 'recommender', 'system', 'with', 'natural', 'language', 'processing', '文章', '代码', '地址', '文章', '实现', '相似', '推荐', '步骤', 'csv', '加载', 'pandas', 'pd2', '提取', '其中', '标题', '题材', '分类', '导演', '演员', '情节', '描述', '单词', '变小', '人名', '空格', '合并', '英文', '需要', '这样', '题材', '分类', '导演', '演员', '几个', '特征', '结构化', '需要', '处理', '标题', '情节', '描述', '这类', '长段', '文本', '使用', 'nltk', '关键词', '提取', '如果', '中文', '可以', 'jieba', '词库', '关键词', '提取', '功能', '第四', '步骤', '分类', '导演', '演员', '关键词', '列表', '合并', '一个', '列表', '这一', '处理', '其实', '暗含', '分类', '导演', '演员', '三个', '特征', '关键词', '一样', '重要', '没有', '加权', '处理', '使用', 'countvectorizer', '每个', '词语', '计数', '得到', '每个', '文章', '向量', '使用', 'sklearn', 'cosin', '笛卡尔', '相似', '计算', '计算结果', '一个二维', '矩阵', '按行', '查询', '一个', '文章', '推荐', '结果', '相似', '度值', '排序', '得到', '相似', '文章', '里面', '学到', '不少', '知识', '运用', '流程', 'pandas', '运行', '尤其', 'for', 'each', 'row', '单个', '各种', 'map', '计算', '计算', '相似', '度时', '使用', '多个', '特征', '包括', 'title', 'genre', 'director', 'actors', 'plot', '统一', '一个', 'bag', 'of', 'words', '参与', '计算', '使用', 'from', 'sklearn', 'metrics', 'pairwise', 'import', 'cosine', 'similarity', '用于', '相似', '计算', '使用', 'from', 'sklearn', 'feature', 'extraction', 'text', 'import', 'countvectorizer', '用于', '单词', '计数', '使用', 'from', 'rake', 'nltk', 'import', 'rake', '用于', '关键词', '提取', '代码', '实现', '关键', '部分', '作者', '用到', '一些', 'import', 'pandas', 'as', 'pdfrom', 'rake', 'nltk', 'import', 'rakeimport', 'numpy', 'as', 'npfrom', 'sklearn', 'metrics', 'pairwise', 'import', 'cosine', 'similarityfrom', 'sklearn', 'feature', 'extraction', 'text', 'import', 'countvectorizerpandas', 'dataframe', '直接', '替换', '一列', '语法', 'df', 'director', 'df', 'director', 'map', 'lambda', 'split', 'pd', '按行', '以此', '处理', '某个', '方法', 'for', 'index', 'row', 'in', 'df', 'iterrows', 'row', 'actors', 'lower', 'replace', 'for', 'in', 'row', 'actors', 'row', 'director', 'join', 'row', 'director', 'lower', 'pd', 'df', '删除', '一列', '方法', 'df', 'drop', 'columns', 'plot', 'inplace', 'true', 'pd', 'df', 'columns', '提取', '一列', '作为', 'index', '方法', 'df', 'set', 'index', 'title', 'inplace', 'true', '作者', '使用', '所有', '放在', '一个', '词包', '用于', '相似', '计算', '想法', '这些', '特征', '其实', '应该', '不同', '权重', 'df', 'bag', 'of', 'words', 'columns', 'df', 'columnsfor', 'index', 'row', 'in', 'df', 'iterrows', 'words', 'for', 'col', 'in', 'columns', 'if', 'col', 'director', 'words', 'words', 'join', 'row', 'col', 'else', 'words', 'words', 'row', 'col', 'row', 'bag', 'of', 'words', 'words', 'df', 'drop', 'columns', 'col', 'for', 'col', 'in', 'df', 'columns', 'if', 'col', 'bag', 'of', 'words', 'inplace', 'true', 'sklearn', '使用', '计数', '调用', 'count', 'countvectorizer', 'count', 'matrix', 'count', 'fit', 'transform', 'df', 'bag', 'of', 'words', 'sklearn', '实现', '矩阵', '相似', '计算', '方法', 'generating', 'the', 'cosine', 'similarity', 'matrixcosine', 'sim', 'cosine', 'similarity', 'count', 'matrix', 'count', 'matrix', '怎样', '实现', '不同', '特征', '融合', '相似', '计算', '这个', '问题', '纠结', '查询', '一些', '文章', '大都', '人工', '指定', '加权', '权重', '或者', '使用', '模型', '拟合', '权重', '没有', '多么', '简单', '方法', '作者', '使用', '其实', '直接', '分类', '演员', '关键词', '直接', '融合', '方法', '作者', '文章', '提到', '一句', 'decided', 'to', 'use', 'countvectorizer', 'rather', 'than', 'tfidfvectorizer', 'for', 'one', 'simple', 'reason', 'need', 'simple', 'frequency', 'counter', 'for', 'each', 'word', 'in', 'my', 'bag', 'of', 'words', 'column', 'tf', 'idf', 'tends', 'to', 'give', 'less', 'importance', 'to', 'the', 'words', 'that', 'are', 'more', 'present', 'in', 'the', 'entire', 'corpus', 'our', 'whole', 'column', 'in', 'this', 'case', 'which', 'is', 'not', 'what', 'we', 'want', 'for', 'this', 'application', 'because', 'every', 'word', 'is', 'important', 'to', 'detect', 'similarity', '对于', '标题', '介绍', '这种', '文本', '内容', '我们', '可以', 'tf', 'idf', '提取', '关键词', '物理', '含义', '就是', '降低', '全局', '出现', '词频', '很多', '词语', '但是', '其实', '对于', '作者', '演员', '题材', '特征', '他们', '并不需要', '降低', '全局', '词频', '使用', '词频', '计数', '即可', '哪些', '可以', '提升', '地方', '作者', '方法', '确实', '可以', '实现', '相似', '推荐', '不过', '感觉', '一些', '可以', '提升', '地方', '标题', '简介', '提取', '关键词', '可以', '查询', '业界', 'word2vec', '向量', '扩展', '这样', '实现', '恰恰', '伦巴', '这类', '词语', '相似', '度量', '直接', '关键词', '查询', '得不到', '这样', '信息', '分类', '导演', '演员', '三个', '特征', '需要', '描述', '得到', '关键词', '区分', '可以', '加权', '方法', '进行', '按照', '产品', '需求', '加重', '分类', '导演', '相似', '权重', '降低', '演员', '关键词', '权重', '如果', '需要', '可以', '点击率', '出发', '模型', '计算', '这些', '权重', '本文', '地址', 'http', 'www', 'crazyant', 'net', '2454', 'html', '转载', '注明', '来源']","[[-0.24564839 -0.12022769  0.24978848  0.14856091  0.29458493 -0.36997974
  -0.146395    0.48568332 -0.0435469  -0.0891313  -0.04729956 -0.36852799
  -0.16052322  0.56588434  0.1612064  -0.11052739 -0.13852131 -0.01348906
  -0.07818282 -0.51270829 -0.02048901  0.25578884 -0.03745608 -0.17542116
   0.0808592  -0.50902955 -0.30592537  0.05799071 -0.23598974 -0.07545088
   0.19707856  0.01621035  0.00223083 -0.13632409 -0.15076034  0.33331655
  -0.18234929 -0.26584287  0.09119636 -0.75255928 -0.15181652 -0.60886279
  -0.06238347 -0.03125951 -0.14368178 -0.2159339  -0.24213489  0.40398212
  -0.18351897  0.45469273  0.16771596 -0.27442855 -0.12339525 -0.19806377
   0.00863784  0.38800657  0.18773036 -0.08488221  0.10347866 -0.12641932
   0.08160588  0.25608648  0.01855061  0.08872862 -0.38832085  0.02561134
   0.05438145 -0.02220593 -0.28605289  0.44328952  0.11509661 -0.19934852
   0.39641427 -0.32871413  0.57397376  0.24142789  0.17004766 -0.15754536
  -0.31082227 -0.15310681 -0.02479582  0.03447435 -0.10720128  0.37407848
  -0.35610845  0.21025257 -0.28840614  0.44723489  0.49345927  0.1550587
   0.26088733  0.11562795  0.37075706  0.18923632  0.20342446  0.36825936
   0.1151892  -0.32001747 -0.02221112 -0.11389328]]"
2469,Spark使用Java开发遇到的那些类型错误,"Spark使用Java开发其实比较方便的，JAVA8的lambda表达式使得编写体验并不比Scala差很多，但是因为Spark本身使用Scala实现，导致使用Java开发的时候，也遇到不少的类型匹配问题。本文列举出自己在工作开发中遇到的一些问题，供大家参考：WrappedArray和Vector报错信息为：Caused by: java.lang.ClassCastException: scala.collection.mutable.WrappedArray$ofRef cannot be cast to org.apache.spark.ml.linalg.Vector当使用DataFrame打印Schema的时候，是这样的输出： |-- tag_weights: array (nullable = true) |    |-- element: double (containsNull = true) |-- word_sims: array (nullable = true) |    |-- element: double (containsNull = true) 这时候如果Java用Vector接收，就会报这个错误，JAVA代码为：spark.udf().register(                ""computeWeightSim"",                new UDF2<Vector, Vector, Double>() {                    @Override                    public Double call(Vector tag_weights, Vector word_sims) throws Exception {解决办法是使用WrappedArray<Long>来接收，这是个scala的类型，可以用Iterator做遍历：scala.collection.Iterator<Long> it1 = view_qipuids.iterator();scala.collection.Iterator<Long> it2 = view_cnts.iterator();Map<Long, Long> viewMap = new HashMap<>();while (it1.hasNext() && it2.hasNext()) {    viewMap.put(it1.next(), it2.next());}或者可以zip两个iterator进行计算：new UDF2<WrappedArray<Double>, WrappedArray<Double>, Double>() {    /**     * 计算加权权重     * @param tag_weights 加权     * @param word_sims 计算结果目标     * @return 加权权重     * @throws Exception     */    @Override    public Double call(WrappedArray<Double> tag_weights, WrappedArray<Double> word_sims) throws Exception {        scala.collection.Iterator<Double> tag_weightsIter = tag_weights.iterator();        scala.collection.Iterator<Double> word_simsIter = word_sims.iterator();        scala.collection.Iterator<Tuple2<Double, Double>> zipIterator = tag_weightsIter.zip(word_simsIter);        double totalWeight = 0.0;        double fenziWeight = 0.0;        while (zipIterator.hasNext()) {            Tuple2<Double, Double> iterTuple = zipIterator.next();            totalWeight += iterTuple._1;            fenziWeight += iterTuple._1 * iterTuple._2;        }        if (totalWeight == 0.0) {            return 0.0;        } else {            return fenziWeight / totalWeight;        }    }} 详细内容见scala的文档：https://docs.scala-lang.org/overviews/collections/iterators.html ","['spark', '使用', 'java', '开发', '遇到', '那些', '类型', '错误', 'spark', '使用', 'java', '开发', '其实', '比较', '方便', 'java8', 'lambda', '表达式', '使得', '编写', '体验', '并不比', 'scala', '很多', '但是', '因为', 'spark', '本身', '使用', 'scala', '实现', '导致', '使用', 'java', '开发', '时候', '遇到', '不少', '类型', '匹配', '问题', '本文', '列举', '自己', '工作', '开发', '遇到', '一些', '问题', '大家', '参考', 'wrappedarray', 'vector', '报错', '信息', 'caused', 'by', 'java', 'lang', 'classcastexception', 'scala', 'collection', 'mutable', 'wrappedarray', 'ofref', 'cannot', 'be', 'cast', 'to', 'org', 'apache', 'spark', 'ml', 'linalg', 'vector', '使用', 'dataframe', '打印', 'schema', '时候', '这样', '输出', '--', 'tag', 'weights', 'array', 'nullable', 'true', '--', 'element', 'double', 'containsnull', 'true', '--', 'word', 'sims', 'array', 'nullable', 'true', '--', 'element', 'double', 'containsnull', 'true', '这时候', '如果', 'java', 'vector', '接收', '就会报', '这个', '错误', 'java', '代码', 'spark', 'udf', 'register', 'computeweightsim', 'new', 'udf2', 'vector', 'vector', 'double', 'override', 'public', 'double', 'call', 'vector', 'tag', 'weights', 'vector', 'word', 'sims', 'throws', 'exception', '解决办法', '使用', 'wrappedarray', 'long', '接收', 'scala', '类型', '可以', 'iterator', '遍历', 'scala', 'collection', 'iterator', 'long', 'it1', 'view', 'qipuids', 'iterator', 'scala', 'collection', 'iterator', 'long', 'it2', 'view', 'cnts', 'iterator', 'map', 'long', 'long', 'viewmap', 'new', 'hashmap', 'while', 'it1', 'hasnext', '&&', 'it2', 'hasnext', 'viewmap', 'put', 'it1', 'next', 'it2', 'next', '或者', '可以', 'zip', '两个', 'iterator', '进行', '计算', 'new', 'udf2', 'wrappedarray', 'double', 'wrappedarray', 'double', 'double', '计算', '加权', '权重', 'param', 'tag', 'weights', '加权', 'param', 'word', 'sims', '计算结果', '目标', 'return', '加权', '权重', 'throws', 'exception', 'override', 'public', 'double', 'call', 'wrappedarray', 'double', 'tag', 'weights', 'wrappedarray', 'double', 'word', 'sims', 'throws', 'exception', 'scala', 'collection', 'iterator', 'double', 'tag', 'weightsiter', 'tag', 'weights', 'iterator', 'scala', 'collection', 'iterator', 'double', 'word', 'simsiter', 'word', 'sims', 'iterator', 'scala', 'collection', 'iterator', 'tuple2', 'double', 'double', 'zipiterator', 'tag', 'weightsiter', 'zip', 'word', 'simsiter', 'double', 'totalweight', '0.0', 'double', 'fenziweight', '0.0', 'while', 'zipiterator', 'hasnext', 'tuple2', 'double', 'double', 'itertuple', 'zipiterator', 'next', 'totalweight', 'itertuple', '._', 'fenziweight', 'itertuple', '._', 'itertuple', '._', 'if', 'totalweight', '0.0', 'return', '0.0', 'else', 'return', 'fenziweight', 'totalweight', '详细', '内容', 'scala', '文档', 'https', 'docs', 'scala', 'lang', 'org', 'overviews', 'collections', 'iterators', 'html']","[[-0.25132232 -0.07077073  0.24986888  0.16038874  0.23770142 -0.34678718
  -0.09502788  0.43355833 -0.07078757 -0.11082377 -0.0351284  -0.35918576
  -0.08809588  0.49004279  0.15709664 -0.11637914 -0.10613387 -0.02497148
  -0.05729831 -0.46222839 -0.03409528  0.26461923 -0.06434414 -0.17872259
   0.03866703 -0.42587544 -0.28229707  0.026463   -0.19872966 -0.08157609
   0.16208238  0.00373007  0.00348906 -0.10499937 -0.15088594  0.32539399
  -0.16947339 -0.26904005  0.07541751 -0.67613597 -0.11505033 -0.50942509
  -0.06721648 -0.02521961 -0.1256793  -0.20632477 -0.24715667  0.34432486
  -0.15472286  0.41277203  0.10646722 -0.26623667 -0.11268365 -0.19234652
  -0.00309756  0.36981753  0.13746954 -0.08500055  0.11315138 -0.12584724
   0.08932499  0.20549247  0.01652739  0.06339175 -0.35074136  0.05079752
   0.04125254 -0.01644655 -0.26416082  0.40462039  0.05754425 -0.15297195
   0.36481691 -0.3083377   0.48630985  0.26519787  0.15272733 -0.16864848
  -0.27050853 -0.1249095  -0.01538171  0.03683363 -0.10152197  0.37108498
  -0.28659454  0.19152618 -0.25851572  0.41635704  0.45480412  0.16692471
   0.20330592  0.10349612  0.32228417  0.17445324  0.17988159  0.34499322
   0.1076551  -0.26957602  0.03710478 -0.11286797]]"
2499,Pandas系列-读取csv/excel/mysql数据," 本代码演示：1. pandas读取纯文本文件  * 读取csv文件  * 读取txt文件2. pandas读取xlsx格式excel文件3. pandas读取mysql数据表import pandas as pd1、读取纯文本文件1.1 读取CSV，使用默认的标题行、逗号分隔符fpath = ""./datas/ml-latest-small/ratings.csv""# 使用pd.read_csv读取数据ratings = pd.read_csv(fpath)# 查看前几行数据ratings.head()userIdmovieIdratingtimestamp0114.09649827031134.09649812472164.096498222431475.096498381541505.0964982931# 查看数据的形状，返回(行数、列数)ratings.shape(100836, 4)# 查看列名列表ratings.columnsIndex(['userId', 'movieId', 'rating', 'timestamp'], dtype='object')# 查看索引列ratings.indexRangeIndex(start=0, stop=100836, step=1)# 查看每列的数据类型ratings.dtypesuserId         int64movieId        int64rating       float64timestamp      int64dtype: object1.2 读取txt文件，自己指定分隔符、列名fpath = ""./datas/crazyant/access_pvuv.txt""pvuv = pd.read_csv(    fpath,    sep=""\t"",    header=None,    names=['pdate', 'pv', 'uv'])pvuvpdatepvuv02019-09-101399212019-09-0918515322019-09-081235932019-09-07654042019-09-061579852019-09-0520515162019-09-0419616772019-09-0321617682019-09-0222714892019-09-01105612、读取excel文件fpath = ""./datas/crazyant/access_pvuv.xlsx""pvuv = pd.read_excel(fpath)pvuv日期PVUV02019-09-101399212019-09-0918515322019-09-081235932019-09-07654042019-09-061579852019-09-0520515162019-09-0419616772019-09-0321617682019-09-0222714892019-09-01105613、读取MySQL数据库import pymysqlconn = pymysql.connect(        host='127.0.0.1',        user='root',        password='12345678',        database='test',        charset='utf8'    )mysql_page = pd.read_sql(""select * from crazyant_pvuv"", con=conn)mysql_pagepdatepvuv02019-09-101399212019-09-0918515322019-09-081235932019-09-07654042019-09-061579852019-09-0520515162019-09-0419616772019-09-0321617682019-09-0222714892019-09-0110561本文的代码地址：https://github.com/peiss/ant-learn-pandas本文的视频地址：微信公众号：蚂蚁学Python","['pandas', '系列', '读取', 'csv', 'excel', 'mysql', '数据', '代码', '演示', 'pandas', '读取', '文本文件', '读取', 'csv', '文件', '读取', 'txt', '文件', 'pandas', '读取', 'xlsx', '格式', 'excel', '文件', 'pandas', '读取', 'mysql', '数据表', 'import', 'pandas', 'as', 'pd1', '读取', '文本文件', '1.1', '读取', 'csv', '使用', '默认', '标题', '逗号', '分隔符', 'fpath', 'datas', 'ml', 'latest', 'small', 'ratings', 'csv', '使用', 'pd', 'read', 'csv', '读取数据', 'ratings', 'pd', 'read', 'csv', 'fpath', '查看', '几行', '数据', 'ratings', 'head', 'useridmovieidratingtimestamp0114.09649827031134', '09649812472164.096498222431475', '096498381541505.0964982931', '查看', '数据', '形状', '返回', '列数', 'ratings', 'shape', '100836', '查看', '列名', '列表', 'ratings', 'columnsindex', 'userid', 'movieid', 'rating', 'timestamp', 'dtype', 'object', '查看', '索引', 'ratings', 'indexrangeindex', 'start', 'stop', '100836', 'step', '查看', '每列', '数据类型', 'ratings', 'dtypesuserid', 'int64movieid', 'int64rating', 'float64timestamp', 'int64dtype', 'object1.2', '读取', 'txt', '文件', '自己', '指定', '分隔符', '列名', 'fpath', 'datas', 'crazyant', 'access', 'pvuv', 'txt', 'pvuv', 'pd', 'read', 'csv', 'fpath', 'sep', 'header', 'none', 'names', 'pdate', 'pv', 'uv', 'pvuvpdatepvuv02019', '09', '101399212019', '09', '0918515322019', '09', '081235932019', '09', '07654042019', '09', '061579852019', '09', '0520515162019', '09', '0419616772019', '09', '0321617682019', '09', '0222714892019', '09', '01105612', '读取', 'excel', '文件', 'fpath', 'datas', 'crazyant', 'access', 'pvuv', 'xlsx', 'pvuv', 'pd', 'read', 'excel', 'fpath', 'pvuv', '日期', 'pvuv02019', '09', '101399212019', '09', '0918515322019', '09', '081235932019', '09', '07654042019', '09', '061579852019', '09', '0520515162019', '09', '0419616772019', '09', '0321617682019', '09', '0222714892019', '09', '01105613', '读取', 'mysql', '数据库', 'import', 'pymysqlconn', 'pymysql', 'connect', 'host', '127.0', '0.1', 'user', 'root', 'password', '12345678', 'database', 'test', 'charset', 'utf8', 'mysql', 'page', 'pd', 'read', 'sql', 'select', 'from', 'crazyant', 'pvuv', 'con', 'conn', 'mysql', 'pagepdatepvuv02019', '09', '101399212019', '09', '0918515322019', '09', '081235932019', '09', '07654042019', '09', '061579852019', '09', '0520515162019', '09', '0419616772019', '09', '0321617682019', '09', '0222714892019', '09', '0110561', '本文', '代码', '地址', 'https', 'github', 'com', 'peiss', 'ant', 'learn', 'pandas', '本文', '视频', '地址', '微信', '公众', '蚂蚁', 'python']","[[-2.75647109e-01 -1.10100269e-01  2.64341149e-01  1.73689830e-01
   2.27109710e-01 -4.08169017e-01 -9.54922838e-02  4.77337223e-01
  -6.14963478e-02 -1.21109779e-01 -5.83226038e-02 -3.97356627e-01
  -1.38334516e-01  5.52072920e-01  1.28300937e-01 -1.46598146e-01
  -1.19725922e-01 -3.05798914e-04 -3.07435581e-02 -4.46921565e-01
  -2.56310022e-02  2.65030749e-01 -7.27752268e-02 -2.01194925e-01
   3.99852673e-02 -4.69116081e-01 -3.03045071e-01  4.14311202e-02
  -2.16447950e-01 -8.30591723e-02  1.78538967e-01  5.90863090e-02
   9.78502748e-03 -1.08346756e-01 -1.77898980e-01  3.33550579e-01
  -1.75113649e-01 -2.54718564e-01  7.17348773e-02 -6.98829674e-01
  -1.11757367e-01 -5.71406549e-01 -6.34093986e-02 -5.13479401e-02
  -1.23238097e-01 -2.24680804e-01 -2.79210568e-01  3.92958171e-01
  -1.17527549e-01  4.24083063e-01  1.21283948e-01 -2.76824657e-01
  -6.66798725e-02 -2.09593129e-01 -4.42432612e-02  3.82281056e-01
   1.59695439e-01 -1.10306153e-01  1.12791615e-01 -1.26745277e-01
   1.23232406e-01  2.37487281e-01  1.02605849e-02  5.87315806e-02
  -3.63538611e-01  4.95180653e-02  3.03611834e-02 -8.01795730e-03
  -2.47944827e-01  4.24618819e-01  6.73663778e-02 -1.69648524e-01
   3.98144509e-01 -3.19150681e-01  5.75523021e-01  2.98724288e-01
   1.96940869e-01 -1.98759160e-01 -2.47862022e-01 -1.55953579e-01
  -3.20762461e-02  6.12879884e-02 -1.23150065e-01  4.15103664e-01
  -3.31622419e-01  1.68207597e-01 -2.76319865e-01  4.84054982e-01
   5.02716780e-01  1.69009526e-01  2.25201540e-01  1.41646183e-01
   3.39805710e-01  1.65265655e-01  2.07569888e-01  3.87381179e-01
   1.15338560e-01 -2.86952499e-01  6.75421873e-02 -1.04575391e-01]]"
2502,Pandas系列-DataFrame和Series数据结构,"本代码演示：1. pandas读取纯文本文件  * 读取csv文件  * 读取txt文件2. pandas读取xlsx格式excel文件3. pandas读取mysql数据表import pandas as pd1、读取纯文本文件1.1 读取CSV，使用默认的标题行、逗号分隔符fpath = ""./datas/ml-latest-small/ratings.csv""# 使用pd.read_csv读取数据ratings = pd.read_csv(fpath)# 查看前几行数据ratings.head()userIdmovieIdratingtimestamp0114.09649827031134.09649812472164.096498222431475.096498381541505.0964982931# 查看数据的形状，返回(行数、列数)ratings.shape(100836, 4)# 查看列名列表ratings.columnsIndex(['userId', 'movieId', 'rating', 'timestamp'], dtype='object')# 查看索引列ratings.indexRangeIndex(start=0, stop=100836, step=1)# 查看每列的数据类型ratings.dtypesuserId         int64movieId        int64rating       float64timestamp      int64dtype: object1.2 读取txt文件，自己指定分隔符、列名fpath = ""./datas/crazyant/access_pvuv.txt""pvuv = pd.read_csv(    fpath,    sep=""\t"",    header=None,    names=['pdate', 'pv', 'uv'])pvuvpdatepvuv02019-09-101399212019-09-0918515322019-09-081235932019-09-07654042019-09-061579852019-09-0520515162019-09-0419616772019-09-0321617682019-09-0222714892019-09-01105612、读取excel文件fpath = ""./datas/crazyant/access_pvuv.xlsx""pvuv = pd.read_excel(fpath)pvuv日期PVUV02019-09-101399212019-09-0918515322019-09-081235932019-09-07654042019-09-061579852019-09-0520515162019-09-0419616772019-09-0321617682019-09-0222714892019-09-01105613、读取MySQL数据库import pymysqlconn = pymysql.connect(        host='127.0.0.1',        user='root',        password='12345678',        database='test',        charset='utf8'    )mysql_page = pd.read_sql(""select * from crazyant_pvuv"", con=conn)mysql_pagepdatepvuv02019-09-101399212019-09-0918515322019-09-081235932019-09-07654042019-09-061579852019-09-0520515162019-09-0419616772019-09-0321617682019-09-0222714892019-09-0110561本文的代码地址：https://github.com/peiss/ant-learn-pandas本文的视频地址：微信公众号：蚂蚁学Python","['pandas', '系列', 'dataframe', 'series', '数据结构', '代码', '演示', 'pandas', '读取', '文本文件', '读取', 'csv', '文件', '读取', 'txt', '文件', 'pandas', '读取', 'xlsx', '格式', 'excel', '文件', 'pandas', '读取', 'mysql', '数据表', 'import', 'pandas', 'as', 'pd1', '读取', '文本文件', '1.1', '读取', 'csv', '使用', '默认', '标题', '逗号', '分隔符', 'fpath', 'datas', 'ml', 'latest', 'small', 'ratings', 'csv', '使用', 'pd', 'read', 'csv', '读取数据', 'ratings', 'pd', 'read', 'csv', 'fpath', '查看', '几行', '数据', 'ratings', 'head', 'useridmovieidratingtimestamp0114.09649827031134', '09649812472164.096498222431475', '096498381541505.0964982931', '查看', '数据', '形状', '返回', '列数', 'ratings', 'shape', '100836', '查看', '列名', '列表', 'ratings', 'columnsindex', 'userid', 'movieid', 'rating', 'timestamp', 'dtype', 'object', '查看', '索引', 'ratings', 'indexrangeindex', 'start', 'stop', '100836', 'step', '查看', '每列', '数据类型', 'ratings', 'dtypesuserid', 'int64movieid', 'int64rating', 'float64timestamp', 'int64dtype', 'object1.2', '读取', 'txt', '文件', '自己', '指定', '分隔符', '列名', 'fpath', 'datas', 'crazyant', 'access', 'pvuv', 'txt', 'pvuv', 'pd', 'read', 'csv', 'fpath', 'sep', 'header', 'none', 'names', 'pdate', 'pv', 'uv', 'pvuvpdatepvuv02019', '09', '101399212019', '09', '0918515322019', '09', '081235932019', '09', '07654042019', '09', '061579852019', '09', '0520515162019', '09', '0419616772019', '09', '0321617682019', '09', '0222714892019', '09', '01105612', '读取', 'excel', '文件', 'fpath', 'datas', 'crazyant', 'access', 'pvuv', 'xlsx', 'pvuv', 'pd', 'read', 'excel', 'fpath', 'pvuv', '日期', 'pvuv02019', '09', '101399212019', '09', '0918515322019', '09', '081235932019', '09', '07654042019', '09', '061579852019', '09', '0520515162019', '09', '0419616772019', '09', '0321617682019', '09', '0222714892019', '09', '01105613', '读取', 'mysql', '数据库', 'import', 'pymysqlconn', 'pymysql', 'connect', 'host', '127.0', '0.1', 'user', 'root', 'password', '12345678', 'database', 'test', 'charset', 'utf8', 'mysql', 'page', 'pd', 'read', 'sql', 'select', 'from', 'crazyant', 'pvuv', 'con', 'conn', 'mysql', 'pagepdatepvuv02019', '09', '101399212019', '09', '0918515322019', '09', '081235932019', '09', '07654042019', '09', '061579852019', '09', '0520515162019', '09', '0419616772019', '09', '0321617682019', '09', '0222714892019', '09', '0110561', '本文', '代码', '地址', 'https', 'github', 'com', 'peiss', 'ant', 'learn', 'pandas', '本文', '视频', '地址', '微信', '公众', '蚂蚁', 'python']","[[-2.74008276e-01 -1.07922171e-01  2.64902675e-01  1.71910951e-01
   2.24243463e-01 -4.07327748e-01 -9.20299908e-02  4.73442429e-01
  -6.31961227e-02 -1.23333665e-01 -5.67608980e-02 -3.97375928e-01
  -1.35388836e-01  5.47214005e-01  1.27987918e-01 -1.46588055e-01
  -1.18010451e-01 -6.30226711e-04 -2.89241100e-02 -4.45739791e-01
  -2.80394943e-02  2.64657788e-01 -7.45534160e-02 -2.03447357e-01
   3.70960158e-02 -4.63497123e-01 -3.01582284e-01  3.90621831e-02
  -2.15934841e-01 -8.30626563e-02  1.75082942e-01  5.81026637e-02
   1.13456788e-02 -1.06613925e-01 -1.79031117e-01  3.31476556e-01
  -1.75703665e-01 -2.55216688e-01  6.99218732e-02 -6.93484391e-01
  -1.09920630e-01 -5.68142634e-01 -6.47711738e-02 -4.97984979e-02
  -1.21111303e-01 -2.26293128e-01 -2.77389153e-01  3.86822776e-01
  -1.16616486e-01  4.23722955e-01  1.17809894e-01 -2.74983961e-01
  -6.58996801e-02 -2.07104570e-01 -4.71387185e-02  3.79888943e-01
   1.55515577e-01 -1.11069372e-01  1.12369685e-01 -1.27721748e-01
   1.24620659e-01  2.34129778e-01  9.40850999e-03  5.82294115e-02
  -3.61147977e-01  5.13295215e-02  3.01922587e-02 -8.69938442e-03
  -2.47705245e-01  4.21726015e-01  6.41077818e-02 -1.66145218e-01
   3.95627751e-01 -3.17510993e-01  5.71580179e-01  3.01067885e-01
   1.94486052e-01 -1.99224981e-01 -2.46515238e-01 -1.52539343e-01
  -2.98451599e-02  6.28719876e-02 -1.24283154e-01  4.14851364e-01
  -3.28411159e-01  1.66918147e-01 -2.74615333e-01  4.83018135e-01
   5.00893150e-01  1.69347338e-01  2.20760874e-01  1.41033809e-01
   3.37573279e-01  1.63549679e-01  2.06922632e-01  3.84715365e-01
   1.15511467e-01 -2.85729285e-01  6.83884699e-02 -1.04701611e-01]]"
2506,Pandas系列-查询数据的5种方法,"今天没有漂亮的PPT，只有干货！！Pandas查询数据的几种方法df.loc方法，根据行、列的标签值查询df.iloc方法，根据行、列的数字位置查询df.where方法df.query方法.loc既能查询，又能覆盖写入，强烈推荐！Pandas使用df.loc查询数据的方法使用单个label值查询数据使用值列表批量查询使用数值区间进行范围查询使用条件表达式查询调用函数查询注意以上查询方法，既适用于行，也适用于列注意观察降维dataFrame>Series>值微信公众号：【蚂蚁学Python】，Python原创免费视频分享import pandas as pd0、读取数据数据为北京2018年全年天气预报该数据的爬虫教程参见我的Python爬虫系列视频课程df = pd.read_csv(""./datas/beijing_tianqi/beijing_tianqi_2018.csv"")df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel02018-01-013℃-6℃晴~多云东北风1-2级59良212018-01-022℃-5℃阴~多云东北风1-2级49优122018-01-032℃-5℃多云北风1-2级28优132018-01-040℃-8℃阴东北风1-2级28优142018-01-053℃-6℃多云~晴西北风1-2级50优1# 设定索引为日期，方便按日期筛选df.set_index('ymd', inplace=True)# 时间序列见后续课程，本次按字符串处理df.indexIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04', '2018-01-05',       '2018-01-06', '2018-01-07', '2018-01-08', '2018-01-09', '2018-01-10',       ...       '2018-12-22', '2018-12-23', '2018-12-24', '2018-12-25', '2018-12-26',       '2018-12-27', '2018-12-28', '2018-12-29', '2018-12-30', '2018-12-31'],      dtype='object', name='ymd', length=365)df.head()bWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelymd2018-01-013℃-6℃晴~多云东北风1-2级59良22018-01-022℃-5℃阴~多云东北风1-2级49优12018-01-032℃-5℃多云北风1-2级28优12018-01-040℃-8℃阴东北风1-2级28优12018-01-053℃-6℃多云~晴西北风1-2级50优1# 替换掉温度的后缀℃df.loc[:, ""bWendu""] = df[""bWendu""].str.replace(""℃"", """").astype('int32')df.loc[:, ""yWendu""] = df[""yWendu""].str.replace(""℃"", """").astype('int32')df.dtypesbWendu        int32yWendu        int32tianqi       objectfengxiang    objectfengli       objectaqi           int64aqiInfo      objectaqiLevel      int64dtype: objectdf.head()bWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelymd2018-01-013-6晴~多云东北风1-2级59良22018-01-022-5阴~多云东北风1-2级49优12018-01-032-5多云北风1-2级28优12018-01-040-8阴东北风1-2级28优12018-01-053-6多云~晴西北风1-2级50优11、使用单个label值查询数据行或者列，都可以只传入单个值，实现精确匹配# 得到单个值df.loc['2018-01-03', 'bWendu']2# 得到一个Seriesdf.loc['2018-01-03', ['bWendu', 'yWendu']]bWendu     2yWendu    -5Name: 2018-01-03, dtype: object2、使用值列表批量查询# 得到Seriesdf.loc[['2018-01-03','2018-01-04','2018-01-05'], 'bWendu']ymd2018-01-03    22018-01-04    02018-01-05    3Name: bWendu, dtype: int32# 得到DataFramedf.loc[['2018-01-03','2018-01-04','2018-01-05'], ['bWendu', 'yWendu']]bWenduyWenduymd2018-01-032-52018-01-040-82018-01-053-63、使用数值区间进行范围查询注意：区间既包含开始，也包含结束# 行index按区间df.loc['2018-01-03':'2018-01-05', 'bWendu']ymd2018-01-03    22018-01-04    02018-01-05    3Name: bWendu, dtype: int32# 列index按区间df.loc['2018-01-03', 'bWendu':'fengxiang']bWendu        2yWendu       -5tianqi       多云fengxiang    北风Name: 2018-01-03, dtype: object# 行和列都按区间查询df.loc['2018-01-03':'2018-01-05', 'bWendu':'fengxiang']bWenduyWendutianqifengxiangymd2018-01-032-5多云北风2018-01-040-8阴东北风2018-01-053-6多云~晴西北风4、使用条件表达式查询bool列表的长度得等于行数或者列数简单条件查询，最低温度低于-10度的列表df.loc[df[""yWendu""]<-10, :]bWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelymd2018-01-23-4-12晴西北风3-4级31优12018-01-24-4-11晴西南风1-2级34优12018-01-25-3-11多云东北风1-2级27优12018-12-26-2-11晴~多云东北风2级26优12018-12-27-5-12多云~晴西北风3级48优12018-12-28-3-11晴西北风3级40优12018-12-29-3-12晴西北风2级29优12018-12-30-2-11晴~多云东北风1级31优1# 观察一下这里的boolean条件df[""yWendu""]<-10ymd2018-01-01    False2018-01-02    False2018-01-03    False2018-01-04    False2018-01-05    False              ...  2018-12-27     True2018-12-28     True2018-12-29     True2018-12-30     True2018-12-31    FalseName: yWendu, Length: 365, dtype: bool复杂条件查询，查一下我心中的完美天气注意，组合条件用&符号合并，每个条件判断都得带括号## 查询最高温度小于30度，并且最低温度大于15度，并且是晴天，并且天气为优的数据df.loc[(df[""bWendu""]<=30) & (df[""yWendu""]>=15) & (df[""tianqi""]=='晴') & (df[""aqiLevel""]==1), :]bWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelymd2018-08-243020晴北风1-2级40优12018-09-072716晴西北风3-4级22优1我哭，北京好天气这么稀少！！# 再次观察这里的boolean条件(df[""bWendu""]<=30) & (df[""yWendu""]>=15) & (df[""tianqi""]=='晴') & (df[""aqiLevel""]==1)ymd2018-01-01    False2018-01-02    False2018-01-03    False2018-01-04    False2018-01-05    False              ...  2018-12-27    False2018-12-28    False2018-12-29    False2018-12-30    False2018-12-31    FalseLength: 365, dtype: bool5、调用函数查询# 直接写lambda表达式df.loc[lambda df : (df[""bWendu""]<=30) & (df[""yWendu""]>=15), :]bWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelymd2018-04-282717晴西南风3-4级125轻度污染32018-04-293016多云南风3-4级193中度污染42018-05-042716晴~多云西南风1-2级86良22018-05-092917晴~多云西南风3-4级79良22018-05-102618多云南风3-4级118轻度污染3...........................2018-09-152615多云北风3-4级42优12018-09-172717多云~阴北风1-2级37优12018-09-182517阴~多云西南风1-2级50优12018-09-192617多云南风1-2级52良22018-09-202716多云西南风1-2级63良264 rows × 8 columns# 编写自己的函数，查询9月份，空气质量好的数据def query_my_data(df):    return df.index.str.startswith(""2018-09"") & df[""aqiLevel""]==1df.loc[query_my_data, :]bWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelymd2018-09-012719阴~小雨南风1-2级50优12018-09-043118晴西南风3-4级24优12018-09-053119晴~多云西南风3-4级34优12018-09-062718多云~晴西北风4-5级37优12018-09-072716晴西北风3-4级22优12018-09-082715多云~晴北风1-2级28优12018-09-132920多云~阴南风1-2级107轻度污染32018-09-142819小雨~多云南风1-2级128轻度污染32018-09-152615多云北风3-4级42优12018-09-162514多云~晴北风1-2级29优12018-09-172717多云~阴北风1-2级37优12018-09-182517阴~多云西南风1-2级50优12018-09-212514晴西北风3-4级50优12018-09-222413晴西北风3-4级28优12018-09-232312晴西北风4-5级28优12018-09-242311晴北风1-2级28优12018-09-252412晴~多云南风1-2级44优12018-09-292211晴北风3-4级21优12018-09-301913多云西北风4-5级22优1本文的代码地址：https://github.com/peiss/ant-learn-pandas本文的视频地址：微信公众号：蚂蚁学Python","['pandas', '系列', '查询', '数据', '方法', '今天', '没有', '漂亮', 'ppt', '只有', '干货', 'pandas', '查询', '数据', '几种', '方法', 'df', 'loc', '方法', '根据', '标签', '查询', 'df', 'iloc', '方法', '根据', '数字', '位置', '查询', 'df', 'where', '方法', 'df', 'query', '方法', 'loc', '既能', '查询', '覆盖', '写入', '强烈推荐', 'pandas', '使用', 'df', 'loc', '查询', '数据', '方法', '使用', '单个', 'label', '查询', '数据', '使用', '列表', '批量', '查询', '使用', '数值', '区间', '进行', '范围', '查询', '使用', '条件', '表达式', '查询', '调用函数', '查询', '注意', '以上', '查询方法', '适用', '于行', '适用', '于列', '注意', '观察', '降维', 'dataframe', 'series', '值微信', '公众', '蚂蚁', 'python', 'python', '原创', '免费视频', '分享', 'import', 'pandas', 'as', 'pd0', '读取数据', '数据', '北京', '2018', '全年', '天气预报', '数据', '爬虫', '教程', '参见', 'python', '爬虫', '系列', '视频', '课程', 'df', 'pd', 'read', 'csv', 'datas', 'beijing', 'tianqi', 'beijing', 'tianqi', '2018', 'csv', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel02018', '01', '013', '多云', '东北风', '59', '212018', '01', '022', '多云', '东北风', '49', '122018', '01', '032', '多云', '北风', '28', '132018', '01', '040', '东北风', '28', '142018', '01', '053', '多云', '西北风', '50', '设定', '索引', '日期', '方便', '日期', '筛选', 'df', 'set', 'index', 'ymd', 'inplace', 'true', '时间', '序列', '后续', '课程', '本次', '字符串', '处理', 'df', 'indexindex', '2018', '01', '01', '2018', '01', '02', '2018', '01', '03', '2018', '01', '04', '2018', '01', '05', '2018', '01', '06', '2018', '01', '07', '2018', '01', '08', '2018', '01', '09', '2018', '01', '10', '...', '2018', '12', '22', '2018', '12', '23', '2018', '12', '24', '2018', '12', '25', '2018', '12', '26', '2018', '12', '27', '2018', '12', '28', '2018', '12', '29', '2018', '12', '30', '2018', '12', '31', 'dtype', 'object', 'name', 'ymd', 'length', '365', 'df', 'head', 'bwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelymd2018', '01', '013', '多云', '东北风', '59', '22018', '01', '022', '多云', '东北风', '49', '12018', '01', '032', '多云', '北风', '28', '12018', '01', '040', '东北风', '28', '12018', '01', '053', '多云', '西北风', '50', '替换', '温度', '后缀', 'df', 'loc', 'bwendu', 'df', 'bwendu', 'str', 'replace', 'astype', 'int32', 'df', 'loc', 'ywendu', 'df', 'ywendu', 'str', 'replace', 'astype', 'int32', 'df', 'dtypesbwendu', 'int32ywendu', 'int32tianqi', 'objectfengxiang', 'objectfengli', 'objectaqi', 'int64aqiinfo', 'objectaqilevel', 'int64dtype', 'objectdf', 'head', 'bwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelymd2018', '01', '013', '多云', '东北风', '59', '22018', '01', '022', '多云', '东北风', '49', '12018', '01', '032', '多云', '北风', '28', '12018', '01', '040', '东北风', '28', '12018', '01', '053', '多云', '西北风', '50', '11', '使用', '单个', 'label', '查询', '数据', '或者', '可以', '传入', '单个', '实现', '精确', '匹配', '得到', '单个', 'df', 'loc', '2018', '01', '03', 'bwendu', '得到', '一个', 'seriesdf', 'loc', '2018', '01', '03', 'bwendu', 'ywendu', 'bwendu', '2ywendu', '5name', '2018', '01', '03', 'dtype', 'object2', '使用', '列表', '批量', '查询', '得到', 'seriesdf', 'loc', '2018', '01', '03', '2018', '01', '04', '2018', '01', '05', 'bwendu', 'ymd2018', '01', '03', '22018', '01', '04', '02018', '01', '05', '3name', 'bwendu', 'dtype', 'int32', '得到', 'dataframedf', 'loc', '2018', '01', '03', '2018', '01', '04', '2018', '01', '05', 'bwendu', 'ywendu', 'bwenduywenduymd2018', '01', '032', '52018', '01', '040', '82018', '01', '053', '63', '使用', '数值', '区间', '进行', '范围', '查询', '注意', '区间', '包含', '开始', '包含', '结束', 'index', '区间', 'df', 'loc', '2018', '01', '03', '2018', '01', '05', 'bwendu', 'ymd2018', '01', '03', '22018', '01', '04', '02018', '01', '05', '3name', 'bwendu', 'dtype', 'int32', 'index', '区间', 'df', 'loc', '2018', '01', '03', 'bwendu', 'fengxiang', 'bwendu', '2ywendu', '5tianqi', '多云', 'fengxiang', '北风', 'name', '2018', '01', '03', 'dtype', 'object', '行和列', '区间', '查询', 'df', 'loc', '2018', '01', '03', '2018', '01', '05', 'bwendu', 'fengxiang', 'bwenduywendutianqifengxiangymd2018', '01', '032', '多云', '北风', '2018', '01', '040', '东北风', '2018', '01', '053', '多云', '西北风', '使用', '条件', '表达式', '查询', 'bool', '列表', '长度', '等于', '或者', '列数', '简单', '条件', '查询', '最低温度', '低于', '10', '列表', 'df', 'loc', 'df', 'ywendu', '10', 'bwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelymd2018', '01', '23', '12', '西北风', '31', '12018', '01', '24', '11', '西南风', '34', '12018', '01', '25', '11', '多云', '东北风', '27', '12018', '12', '26', '11', '多云', '东北风', '26', '12018', '12', '27', '12', '多云', '西北风', '48', '12018', '12', '28', '11', '西北风', '40', '12018', '12', '29', '12', '西北风', '29', '12018', '12', '30', '11', '多云', '东北风', '31', '观察', '一下', '这里', 'boolean', '条件', 'df', 'ywendu', '10ymd2018', '01', '01', 'false2018', '01', '02', 'false2018', '01', '03', 'false2018', '01', '04', 'false2018', '01', '05', 'false', '...', '2018', '12', '27', 'true2018', '12', '28', 'true2018', '12', '29', 'true2018', '12', '30', 'true2018', '12', '31', 'falsename', 'ywendu', 'length', '365', 'dtype', 'bool', '复杂', '条件', '查询', '一下', '心中', '完美', '天气', '注意', '组合', '条件', '符号', '合并', '每个', '条件', '判断', '括号', '##', '查询', '最高', '温度', '小于', '30', '并且', '最低温度', '大于', '15', '并且', '晴天', '并且', '天气', '数据', 'df', 'loc', 'df', 'bwendu', '30', 'df', 'ywendu', '15', 'df', 'tianqi', 'df', 'aqilevel', 'bwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelymd2018', '08', '243020', '北风', '40', '12018', '09', '072716', '西北风', '22', '北京', '天气', '这么', '稀少', '再次', '观察', '这里', 'boolean', '条件', 'df', 'bwendu', '30', 'df', 'ywendu', '15', 'df', 'tianqi', 'df', 'aqilevel', 'ymd2018', '01', '01', 'false2018', '01', '02', 'false2018', '01', '03', 'false2018', '01', '04', 'false2018', '01', '05', 'false', '...', '2018', '12', '27', 'false2018', '12', '28', 'false2018', '12', '29', 'false2018', '12', '30', 'false2018', '12', '31', 'falselength', '365', 'dtype', 'bool5', '调用函数', '查询', '直接', 'lambda', '表达式', 'df', 'loc', 'lambda', 'df', 'df', 'bwendu', '30', 'df', 'ywendu', '15', 'bwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelymd2018', '04', '282717', '西南风', '125', '轻度', '污染', '32018', '04', '293016', '云南', '193', '中度', '污染', '42018', '05', '042716', '多云', '西南风', '86', '22018', '05', '092917', '多云', '西南风', '79', '22018', '05', '102618', '云南', '118', '轻度', '污染', '...........................', '2018', '09', '152615', '多云', '北风', '42', '12018', '09', '172717', '多云', '北风', '37', '12018', '09', '182517', '多云', '西南风', '50', '12018', '09', '192617', '云南', '52', '22018', '09', '202716', '多云', '西南风', '63', '264', 'rows', 'columns', '编写', '自己', '函数', '查询', '月份', '空气质量', '数据', 'def', 'query', 'my', 'data', 'df', 'return', 'df', 'index', 'str', 'startswith', '2018', '09', 'df', 'aqilevel', '1df', 'loc', 'query', 'my', 'data', 'bwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelymd2018', '09', '012719', '小雨', '南风', '50', '12018', '09', '043118', '西南风', '24', '12018', '09', '053119', '多云', '西南风', '34', '12018', '09', '062718', '多云', '西北风', '37', '12018', '09', '072716', '西北风', '22', '12018', '09', '082715', '多云', '北风', '28', '12018', '09', '132920', '多云', '南风', '107', '轻度', '污染', '32018', '09', '142819', '小雨', '云南', '128', '轻度', '污染', '32018', '09', '152615', '多云', '北风', '42', '12018', '09', '162514', '多云', '北风', '29', '12018', '09', '172717', '多云', '北风', '37', '12018', '09', '182517', '多云', '西南风', '50', '12018', '09', '212514', '西北风', '50', '12018', '09', '222413', '西北风', '28', '12018', '09', '232312', '西北风', '28', '12018', '09', '242311', '北风', '28', '12018', '09', '252412', '云南', '44', '12018', '09', '292211', '北风', '21', '12018', '09', '301913', '多云', '西北风', '22', '本文', '代码', '地址', 'https', 'github', 'com', 'peiss', 'ant', 'learn', 'pandas', '本文', '视频', '地址', '微信', '公众', '蚂蚁', 'python']","[[-3.23632194e-01 -6.87525922e-02  3.33139141e-01  9.00011559e-02
   3.22685287e-01 -5.12062591e-01 -6.45385311e-02  5.22419133e-01
  -1.11515548e-01 -1.71494945e-01 -4.32245080e-02 -4.86820711e-01
  -1.44649300e-01  5.97931528e-01  1.72772848e-01 -1.76385869e-01
  -1.16803556e-01 -3.64213316e-02 -4.25909711e-03 -5.80645209e-01
  -8.26134431e-02  3.30118267e-01 -7.40881771e-02 -2.54105459e-01
   3.94173945e-02 -5.13336466e-01 -3.16540413e-01 -2.91056076e-02
  -2.60229883e-01 -8.39373537e-02  1.69146361e-01 -2.81160304e-04
   4.38238950e-02 -1.04106027e-01 -1.83823197e-01  3.23822995e-01
  -2.20209123e-01 -2.92126143e-01  1.01537460e-01 -8.47429896e-01
  -1.41748074e-01 -6.94859096e-01 -1.28648132e-01 -4.41882785e-02
  -1.36175596e-01 -2.82589060e-01 -2.65810043e-01  3.73724781e-01
  -2.31104314e-01  5.56395655e-01  1.11867244e-01 -2.47573775e-01
  -1.43753353e-01 -2.06013959e-01 -1.13252873e-01  3.81840531e-01
   1.25156708e-01 -1.47909846e-01  6.66378606e-02 -1.35350503e-01
   1.45575933e-01  2.84746833e-01  8.28602257e-03  5.63623268e-02
  -4.27646076e-01  3.54308618e-02  9.45430537e-02 -7.36680389e-02
  -3.29152160e-01  4.66934584e-01  1.68473299e-02 -1.58010633e-01
   4.31532803e-01 -3.66279015e-01  6.39390214e-01  3.80526005e-01
   1.41084072e-01 -2.03008178e-01 -3.13817882e-01 -1.12774573e-01
   6.26444017e-02  9.62152301e-02 -1.46884794e-01  4.97379973e-01
  -3.48742858e-01  1.91090833e-01 -2.88364646e-01  5.59695404e-01
   5.38017167e-01  1.97993089e-01  2.44889607e-01  1.95715683e-01
   4.31218714e-01  1.83033768e-01  2.83172075e-01  3.54390291e-01
   1.94454451e-01 -4.12795904e-01  7.47329695e-04 -8.69837657e-02]]"
2515,Pandas怎样按条件删除行？,"来自：https://stackoverflow.com/questions/13851535/delete-rows-from-a-pandas-dataframe-based-on-a-conditional-expression-involvingTo directly answer this question's original title ""How to delete rows from a pandas DataFrame based on a conditional expression"" (which I understand is not necessarily the OP's problem but could help other users coming across this question) one way to do this is to use the drop method:df = df.drop(some labels)df = df.drop(df[].index)ExampleTo remove all rows where column 'score' is < 50:df = df.drop(df[df.score < 50].index)In place version (as pointed out in comments)df.drop(df[df.score < 50].index, inplace=True)Multiple conditions(see Boolean Indexing)The operators are: | for or, & for and, and ~ for not. These must be grouped by using parentheses.To remove all rows where column 'score' is < 50 and > 20df = df.drop(df[(df.score < 50) & (df.score > 20)].index)","['pandas', '怎样', '条件', '删除', '来自', 'https', 'stackoverflow', 'com', 'questions', '13851535', 'delete', 'rows', 'from', 'pandas', 'dataframe', 'based', 'on', 'conditional', 'expression', 'involvingto', 'directly', 'answer', 'this', 'question', 'original', 'title', 'how', 'to', 'delete', 'rows', 'from', 'pandas', 'dataframe', 'based', 'on', 'conditional', 'expression', 'which', 'understand', 'is', 'not', 'necessarily', 'the', 'op', 'problem', 'but', 'could', 'help', 'other', 'users', 'coming', 'across', 'this', 'question', 'one', 'way', 'to', 'do', 'this', 'is', 'to', 'use', 'the', 'drop', 'method', 'df', 'df', 'drop', 'some', 'labels', 'df', 'df', 'drop', 'df', 'index', 'exampleto', 'remove', 'all', 'rows', 'where', 'column', 'score', 'is', '50', 'df', 'df', 'drop', 'df', 'df', 'score', '50', 'index', 'in', 'place', 'version', 'as', 'pointed', 'out', 'in', 'comments', 'df', 'drop', 'df', 'df', 'score', '50', 'index', 'inplace', 'true', 'multiple', 'conditions', 'see', 'boolean', 'indexing', 'the', 'operators', 'are', 'for', 'or', 'for', 'and', 'and', 'for', 'not', 'these', 'must', 'be', 'grouped', 'by', 'using', 'parentheses', 'to', 'remove', 'all', 'rows', 'where', 'column', 'score', 'is', '50', 'and', '20df', 'df', 'drop', 'df', 'df', 'score', '50', 'df', 'score', '20', 'index']","[[-0.2532025  -0.07710541  0.34290749  0.08616449  0.33191907 -0.44621152
  -0.04830464  0.49153224 -0.1417704  -0.25114152 -0.00246717 -0.4799789
  -0.11214127  0.50362424  0.2091632  -0.1184357  -0.10645026 -0.04954803
  -0.03440129 -0.68226735 -0.13250498  0.30333293 -0.11580675 -0.36362162
   0.00486756 -0.44245898 -0.36661341 -0.02402003 -0.32187991 -0.12620399
   0.08616648 -0.03467096  0.02707253 -0.12052983 -0.24220827  0.33124539
  -0.29676788 -0.38071479  0.03881823 -0.78271726 -0.1266811  -0.72202537
  -0.1297026   0.06131284 -0.10342861 -0.36253584 -0.20083814  0.25525319
  -0.26240109  0.63803087  0.09708063 -0.27855251 -0.17385919 -0.12376169
  -0.14204178  0.38677715  0.05315253 -0.13475748  0.11132704 -0.19022579
   0.15948327  0.18464321  0.00423267  0.08351529 -0.40963431  0.10744205
   0.10355202 -0.05333811 -0.398167    0.46678904  0.06278979 -0.1082327
   0.39755609 -0.35052356  0.59476557  0.41366291  0.06860503 -0.19209822
  -0.41967259 -0.02850356  0.1333502   0.13767988 -0.20680777  0.47885612
  -0.32294611  0.24126713 -0.3007868   0.53169924  0.57341178  0.21873001
   0.17985884  0.10473008  0.42835175  0.20418722  0.24341573  0.3452947
   0.16083471 -0.41359813 -0.05793703 -0.1663959 ]]"
2517,Pandas怎样根据码表更新ID对应的名称？,"1、从数据库获取码表sql = ""select category_id, category_name from tb_category""category_dict = {x[""category_name""]:x[""category_id""] for x in queryBySql(sql)}2、在DF中使用apply添加一列新的IDdf.loc[:, ""category_id""] = df.apply(    lambda x : category_dict.get(x[""分类""],-1), axis=1)这里的axis==1，那么每次遍历的是每个row的Series，这个Series的key是每列的column name.","['pandas', '怎样', '根据', '码表', '更新', 'id', '对应', '名称', '数据库', '获取', '码表', 'sql', 'select', 'category', 'id', 'category', 'name', 'from', 'tb', 'category', 'category', 'dict', 'category', 'name', 'category', 'id', 'for', 'in', 'querybysql', 'sql', 'df', '使用', 'apply', '添加', '一列', 'iddf', 'loc', 'category', 'id', 'df', 'apply', 'lambda', 'category', 'dict', 'get', '分类', 'axis', '这里', 'axis', '那么', '每次', '遍历', '每个', 'row', 'series', '这个', 'series', 'key', '每列', 'column', 'name']","[[-0.20807754 -0.11358359  0.2824268   0.05578203  0.37796813 -0.42735005
  -0.14307231  0.55556116 -0.08880003 -0.19414788 -0.01979577 -0.41121736
  -0.20221014  0.59966774  0.21363329 -0.09630386 -0.12168665  0.00312574
  -0.09393372 -0.70555038 -0.11034305  0.27681475 -0.07065854 -0.31805797
   0.07096505 -0.52676463 -0.37147193  0.02847303 -0.3239     -0.0813592
   0.15375422 -0.03373332  0.02137513 -0.16223067 -0.2154526   0.34587449
  -0.28726871 -0.3474782   0.0866998  -0.85086376 -0.18229298 -0.74115945
  -0.11683557  0.05529837 -0.13030389 -0.31070322 -0.15935115  0.31555419
  -0.2756201   0.62731403  0.18474784 -0.29333905 -0.21158941 -0.1081072
  -0.06923907  0.41619417  0.13240394 -0.12468968  0.11444997 -0.20440578
   0.13158137  0.23813783  0.01313463  0.13186605 -0.42488614  0.07490125
   0.11369095 -0.08622316 -0.4315326   0.48521469  0.12043769 -0.16477054
   0.39669183 -0.37152354  0.62423501  0.35035027  0.04555938 -0.15317072
  -0.4643513  -0.02974806  0.09975235  0.11356107 -0.17015809  0.43923633
  -0.34437001  0.25837755 -0.31879154  0.49872576  0.56704052  0.18346432
   0.27008817  0.10632637  0.43512511  0.21438537  0.23823831  0.32369081
   0.16653039 -0.41380274 -0.15783291 -0.16733627]]"
2521,Pandas系列 - 数据统计函数,"汇总类统计唯一去重和按值计数相关系数和协方差import pandas as pd0、读取csv数据fpath = ""./datas/beijing_tianqi/beijing_tianqi_2018.csv""df = pd.read_csv(fpath)df.head(3)ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel02018-01-013℃-6℃晴~多云东北风1-2级59良212018-01-022℃-5℃阴~多云东北风1-2级49优122018-01-032℃-5℃多云北风1-2级28优1# 替换掉温度的后缀℃df.loc[:, ""bWendu""] = df[""bWendu""].str.replace(""℃"", """").astype('int32')df.loc[:, ""yWendu""] = df[""yWendu""].str.replace(""℃"", """").astype('int32')df.head(3)ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel02018-01-013-6晴~多云东北风1-2级59良212018-01-022-5阴~多云东北风1-2级49优122018-01-032-5多云北风1-2级28优11、汇总类统计# 一下子提取所有数字列统计结果df.describe()bWenduyWenduaqiaqiLevelcount365.000000365.000000365.000000365.000000mean18.6657538.35890482.1835622.090411std11.85804611.75505351.9361591.029798min-5.000000-12.00000021.0000001.00000025%8.000000-3.00000046.0000001.00000050%21.0000008.00000069.0000002.00000075%29.00000019.000000104.0000003.000000max38.00000027.000000387.0000006.000000## 查看单个Series的数据df[""bWendu""].mean()18.665753424657535# 最高温df[""bWendu""].max()38# 最低温df[""bWendu""].min()-52、唯一去重和按值计数2.1 唯一性去重一般不用于数值列，而是枚举、分类列df[""fengxiang""].unique()array(['东北风', '北风', '西北风', '西南风', '南风', '东南风', '东风', '西风'], dtype=object)df[""tianqi""].unique()array(['晴~多云', '阴~多云', '多云', '阴', '多云~晴', '多云~阴', '晴', '阴~小雪', '小雪~多云',       '小雨~阴', '小雨~雨夹雪', '多云~小雨', '小雨~多云', '大雨~小雨', '小雨', '阴~小雨',       '多云~雷阵雨', '雷阵雨~多云', '阴~雷阵雨', '雷阵雨', '雷阵雨~大雨', '中雨~雷阵雨', '小雨~大雨',       '暴雨~雷阵雨', '雷阵雨~中雨', '小雨~雷阵雨', '雷阵雨~阴', '中雨~小雨', '小雨~中雨', '雾~多云',       '霾'], dtype=object)df[""fengli""].unique()array(['1-2级', '4-5级', '3-4级', '2级', '1级', '3级'], dtype=object)2.2 按值计数df[""fengxiang""].value_counts()南风     92西南风    64北风     54西北风    51东南风    46东北风    38东风     14西风      6Name: fengxiang, dtype: int64df[""tianqi""].value_counts()晴         101多云         95多云~晴       40晴~多云       34多云~雷阵雨     14多云~阴       10阴~多云        8小雨~多云       8雷阵雨         8雷阵雨~多云      7小雨          6多云~小雨       5阴           4雷阵雨~中雨      4中雨~小雨       2中雨~雷阵雨      2阴~小雨        2霾           2阴~小雪        1小雪~多云       1大雨~小雨       1小雨~雷阵雨      1小雨~中雨       1小雨~雨夹雪      1雾~多云        1雷阵雨~阴       1暴雨~雷阵雨      1小雨~阴        1雷阵雨~大雨      1阴~雷阵雨       1小雨~大雨       1Name: tianqi, dtype: int64df[""fengli""].value_counts()1-2级    2363-4级     681级       214-5级     202级       133级        7Name: fengli, dtype: int643、相关系数和协方差用途（超级厉害）：1. 两只股票，是不是同涨同跌？程度多大？正相关还是负相关？2. 产品销量的波动，跟哪些因素正相关、负相关，程度有多大？来自知乎，对于两个变量X、Y：1. 协方差：衡量同向反向程度，如果协方差为正，说明X，Y同向变化，协方差越大说明同向程度越高；如果协方差为负，说明X，Y反向运动，协方差越小说明反向程度越高。2. 相关系数：衡量相似度程度，当他们的相关系数为1时，说明两个变量变化时的正向相似度最大，当相关系数为－1时，说明两个变量变化的反向相似度最大# 协方差矩阵：df.cov()bWenduyWenduaqiaqiLevelbWendu140.613247135.52963347.4626220.879204yWendu135.529633138.18127416.1866850.264165aqi47.46262216.1866852697.36456450.749842aqiLevel0.8792040.26416550.7498421.060485# 相关系数矩阵df.corr()bWenduyWenduaqiaqiLevelbWendu1.0000000.9722920.0770670.071999yWendu0.9722921.0000000.0265130.021822aqi0.0770670.0265131.0000000.948883aqiLevel0.0719990.0218220.9488831.000000# 单独查看空气质量和最高温度的相关系数df[""aqi""].corr(df[""bWendu""])0.07706705916811077df[""aqi""].corr(df[""yWendu""])0.02651328267296879# 空气质量和温差的相关系数df[""aqi""].corr(df[""bWendu""]-df[""yWendu""])0.21652257576382047# !! 这就是特征工程对于机器学习重要性的一个例子0.21/0.0210.5","['pandas', '系列', '数据', '统计', '函数', '汇总', '统计', '唯一', '按值', '计数', '相关系数', '协方差', 'import', 'pandas', 'as', 'pd0', '读取', 'csv', '数据', 'fpath', 'datas', 'beijing', 'tianqi', 'beijing', 'tianqi', '2018', 'csv', 'df', 'pd', 'read', 'csv', 'fpath', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel02018', '01', '013', '多云', '东北风', '59', '212018', '01', '022', '多云', '东北风', '49', '122018', '01', '032', '多云', '北风', '28', '替换', '温度', '后缀', 'df', 'loc', 'bwendu', 'df', 'bwendu', 'str', 'replace', 'astype', 'int32', 'df', 'loc', 'ywendu', 'df', 'ywendu', 'str', 'replace', 'astype', 'int32', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel02018', '01', '013', '多云', '东北风', '59', '212018', '01', '022', '多云', '东北风', '49', '122018', '01', '032', '多云', '北风', '28', '11', '汇总', '统计', '一下子', '提取', '所有', '数字', '统计', '结果', 'df', 'describe', 'bwenduywenduaqiaqilevelcount365.000000365', '000000365.000000365', '000000mean18.6657538', '35890482.1835622', '090411std11.85804611', '75505351.9361591', '029798min', '5.000000', '12.00000021', '0000001.00000025%', '8.000000', '3.00000046', '0000001.00000050%', '21.0000008', '00000069.0000002', '00000075%', '29.00000019', '000000104.0000003', '000000max38.00000027', '000000387.0000006', '000000', '##', '查看', '单个', 'series', '数据', 'df', 'bwendu', 'mean', '18.665753424657535', '高温', 'df', 'bwendu', 'max', '38', '最低温', 'df', 'bwendu', 'min', '52', '唯一', '按值', '计数', '2.1', '唯一性', '一般', '用于', '数值', '而是', '枚举', '分类', 'df', 'fengxiang', 'unique', 'array', '东北风', '北风', '西北风', '西南风', '南风', '东南风', '东风', '西风', 'dtype', 'object', 'df', 'tianqi', 'unique', 'array', '多云', '多云', '多云', '多云', '多云', '小雪', '小雪', '多云', '小雨', '小雨', '雨夹雪', '多云', '小雨', '小雨', '多云', '大雨', '小雨', '小雨', '小雨', '多云', '雷阵雨', '雷阵雨', '多云', '雷阵雨', '雷阵雨', '雷阵雨', '大雨', '中雨', '雷阵雨', '小雨', '大雨', '暴雨', '雷阵雨', '雷阵雨', '中雨', '小雨', '雷阵雨', '雷阵雨', '中雨', '小雨', '小雨', '中雨', '多云', 'dtype', 'object', 'df', 'fengli', 'unique', 'array', 'dtype', 'object', '2.2', '按值', '计数', 'df', 'fengxiang', 'value', 'counts', '南风', '92', '西南风', '64', '北风', '54', '西北风', '51', '东南风', '46', '东北风', '38', '东风', '14', '西风', '6name', 'fengxiang', 'dtype', 'int64df', 'tianqi', 'value', 'counts', '101', '多云', '95', '多云', '40', '多云', '34', '多云', '雷阵雨', '14', '多云', '10', '多云', '小雨', '多云', '雷阵雨', '雷阵雨', '多云', '小雨', '多云', '小雨', '雷阵雨', '中雨', '中雨', '小雨', '中雨', '雷阵雨', '小雨', '小雪', '小雪', '多云', '大雨', '小雨', '小雨', '雷阵雨', '小雨', '中雨', '小雨', '雨夹雪', '多云', '雷阵雨', '暴雨', '雷阵雨', '小雨', '雷阵雨', '大雨', '雷阵雨', '小雨', '大雨', '1name', 'tianqi', 'dtype', 'int64df', 'fengli', 'value', 'counts', '2363', '681', '214', '202', '133', '7name', 'fengli', 'dtype', 'int643', '相关系数', '协方差', '用途', '超级', '厉害', '两只', '股票', '是不是', '同涨', '同跌', '程度', '多大', '相关', '还是', '负相关', '产品', '销量', '波动', '哪些因素', '相关', '负相关', '程度', '来自', '知乎', '对于', '两个', '变量', '协方差', '衡量', '反向', '程度', '如果', '协方差', '说明', '同向', '变化', '协方差', '越大', '说明', '程度', '越高', '如果', '协方差', '说明', '反向运动', '协方差', '越小', '说明', '反向', '程度', '越高', '相关系数', '衡量', '相似', '程度', '他们', '相关系数', '说明', '两个', '变量', '变化', '正向', '相似', '最大', '相关系数', '说明', '两个', '变量', '变化', '反向', '相似', '最大', '协方差', '矩阵', 'df', 'cov', 'bwenduywenduaqiaqilevelbwendu140.613247135', '52963347.4626220', '879204ywendu135.529633138', '18127416.1866850', '264165aqi47.46262216', '1866852697.36456450', '749842aqilevel0.8792040', '26416550.7498421', '060485', '相关系数', '矩阵', 'df', 'corr', 'bwenduywenduaqiaqilevelbwendu1.0000000', '9722920.0770670', '071999ywendu0.9722921', '0000000.0265130', '021822aqi0.0770670', '0265131.0000000', '948883aqilevel0.0719990', '0218220.9488831', '000000', '单独', '查看', '空气质量', '最高', '温度', '相关系数', 'df', 'aqi', 'corr', 'df', 'bwendu', '0.07706705916811077', 'df', 'aqi', 'corr', 'df', 'ywendu', '0.02651328267296879', '空气质量', '温差', '相关系数', 'df', 'aqi', 'corr', 'df', 'bwendu', 'df', 'ywendu', '0.21652257576382047', '就是', '特征', '工程', '对于', '机器', '学习', '重要性', '一个', '例子', '0.21', '0.0210']","[[-0.27483168 -0.06992156  0.28750658  0.08593869  0.29644374 -0.42428437
  -0.08319671  0.46705062 -0.08370262 -0.14181651 -0.03197837 -0.41495139
  -0.13364904  0.53882032  0.16509728 -0.14221254 -0.11378803 -0.03179851
  -0.02943721 -0.53576386 -0.06942261  0.28211725 -0.0627284  -0.21889121
   0.04756895 -0.46839003 -0.29469834 -0.0044992  -0.24613741 -0.07602114
   0.15466913 -0.00761542  0.0287792  -0.10680501 -0.1570638   0.29578307
  -0.19528963 -0.26623156  0.08998777 -0.76197084 -0.14111114 -0.621985
  -0.10503019 -0.03002008 -0.12629801 -0.24621431 -0.22366161  0.34344962
  -0.21010772  0.50350514  0.11526731 -0.23643556 -0.14904042 -0.17115566
  -0.07276575  0.35765354  0.12931693 -0.11949659  0.06944784 -0.12150043
   0.1173466   0.2476908   0.0123245   0.06752285 -0.3863842   0.03102218
   0.07896262 -0.06093014 -0.30218725  0.42244621  0.05049462 -0.15178765
   0.38899752 -0.32295838  0.56524543  0.31336182  0.11742299 -0.16886142
  -0.30411219 -0.09896405  0.05066089  0.07134363 -0.12521008  0.42424651
  -0.31964299  0.19010907 -0.27216593  0.48057349  0.48554409  0.17159025
   0.22967829  0.15344156  0.3867509   0.17734604  0.24401472  0.31978239
   0.15637155 -0.36721451 -0.02543754 -0.09634381]]"
2523,Pandas系列 - 怎样新增数据列？,"在进行数据分析时，经常需要按照一定条件创建新的数据列，然后进行进一步分析。直接赋值df.apply方法df.assign方法按条件选择分组分别赋值微信公众号：蚂蚁学Pythonimport pandas as pd0、读取csv数据到dataframefpath = ""./datas/beijing_tianqi/beijing_tianqi_2018.csv""df = pd.read_csv(fpath)df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel02018-01-013℃-6℃晴~多云东北风1-2级59良212018-01-022℃-5℃阴~多云东北风1-2级49优122018-01-032℃-5℃多云北风1-2级28优132018-01-040℃-8℃阴东北风1-2级28优142018-01-053℃-6℃多云~晴西北风1-2级50优11、直接赋值的方法实例：清理温度列，变成数字类型# 替换掉温度的后缀℃df.loc[:, ""bWendu""] = df[""bWendu""].str.replace(""℃"", """").astype('int32')df.loc[:, ""yWendu""] = df[""yWendu""].str.replace(""℃"", """").astype('int32')df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel02018-01-013-6晴~多云东北风1-2级59良212018-01-022-5阴~多云东北风1-2级49优122018-01-032-5多云北风1-2级28优132018-01-040-8阴东北风1-2级28优142018-01-053-6多云~晴西北风1-2级50优1实例：计算温差# 注意，df[""bWendu""]其实是一个Series，后面的减法返回的是Seriesdf.loc[:, ""wencha""] = df[""bWendu""] - df[""yWendu""]df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelwencha02018-01-013-6晴~多云东北风1-2级59良2912018-01-022-5阴~多云东北风1-2级49优1722018-01-032-5多云北风1-2级28优1732018-01-040-8阴东北风1-2级28优1842018-01-053-6多云~晴西北风1-2级50优192、df.apply方法Apply a function along an axis of the DataFrame.Objects passed to the function are Series objects whose index is either the DataFrame’s index (axis=0) or the DataFrame’s columns (axis=1).实例：添加一列温度类型：1. 如果最高温度大于33度就是高温2. 低于-10度是低温3. 否则是常温def get_wendu_type(x):    if x[""bWendu""] > 33:        return '高温'    if x[""yWendu""] < -10:        return '低温'    return '常温'# 注意需要设置axis==1，这是series的index是columnsdf.loc[:, ""wendu_type""] = df.apply(get_wendu_type, axis=1)# 查看温度类型的计数df[""wendu_type""].value_counts()常温    328高温     29低温      8Name: wendu_type, dtype: int643、df.assign方法Assign new columns to a DataFrame.Returns a new object with all original columns in addition to new ones.实例：将温度从摄氏度变成华氏度# 可以同时添加多个新的列df.assign(    yWendu_huashi = lambda x : x[""yWendu""] * 9 / 5 + 32,    # 摄氏度转华氏度    bWendu_huashi = lambda x : x[""bWendu""] * 9 / 5 + 32)ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelwenchawendu_typeyWendu_huashibWendu_huashi02018-01-013-6晴~多云东北风1-2级59良29常温21.237.412018-01-022-5阴~多云东北风1-2级49优17常温23.035.622018-01-032-5多云北风1-2级28优17常温23.035.632018-01-040-8阴东北风1-2级28优18常温17.632.042018-01-053-6多云~晴西北风1-2级50优19常温21.237.4..........................................3602018-12-27-5-12多云~晴西北风3级48优17低温10.423.03612018-12-28-3-11晴西北风3级40优18低温12.226.63622018-12-29-3-12晴西北风2级29优19低温10.426.63632018-12-30-2-11晴~多云东北风1级31优19低温12.228.43642018-12-31-2-10多云东北风1级56良28常温14.028.4365 rows × 13 columns4、按条件选择分组分别赋值按条件先选择数据，然后对这部分数据赋值新列实例：高低温差大于10度，则认为温差大# 先创建空列（这是第一种创建新列的方法）df['wencha_type'] = ''df.loc[df[""bWendu""]-df[""yWendu""]>10, ""wencha_type""] = ""温差大""df.loc[df[""bWendu""]-df[""yWendu""]<=10, ""wencha_type""] = ""温差正常""df[""wencha_type""].value_counts()温差正常    187温差大     178Name: wencha_type, dtype: int64","['pandas', '系列', '怎样', '新增', '数据', '进行', '数据分析', '经常', '需要', '按照', '一定', '条件', '创建', '数据', '然后', '进行', '进一步', '分析', '直接', '赋值', 'df', 'apply', '方法', 'df', 'assign', '方法', '条件', '选择', '分组', '分别', '赋值', '微信', '公众', '蚂蚁', 'pythonimport', 'pandas', 'as', 'pd0', '读取', 'csv', '数据', 'dataframefpath', 'datas', 'beijing', 'tianqi', 'beijing', 'tianqi', '2018', 'csv', 'df', 'pd', 'read', 'csv', 'fpath', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel02018', '01', '013', '多云', '东北风', '59', '212018', '01', '022', '多云', '东北风', '49', '122018', '01', '032', '多云', '北风', '28', '132018', '01', '040', '东北风', '28', '142018', '01', '053', '多云', '西北风', '50', '11', '直接', '赋值', '方法', '实例', '清理', '温度', '变成', '数字', '类型', '替换', '温度', '后缀', 'df', 'loc', 'bwendu', 'df', 'bwendu', 'str', 'replace', 'astype', 'int32', 'df', 'loc', 'ywendu', 'df', 'ywendu', 'str', 'replace', 'astype', 'int32', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel02018', '01', '013', '多云', '东北风', '59', '212018', '01', '022', '多云', '东北风', '49', '122018', '01', '032', '多云', '北风', '28', '132018', '01', '040', '东北风', '28', '142018', '01', '053', '多云', '西北风', '50', '实例', '计算', '温差', '注意', 'df', 'bwendu', '其实', '一个', 'series', '后面', '减法', '返回', 'seriesdf', 'loc', 'wencha', 'df', 'bwendu', 'df', 'ywendu', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelwencha02018', '01', '013', '多云', '东北风', '59', '2912018', '01', '022', '多云', '东北风', '49', '1722018', '01', '032', '多云', '北风', '28', '1732018', '01', '040', '东北风', '28', '1842018', '01', '053', '多云', '西北风', '50', '192', 'df', 'apply', '方法', 'apply', 'function', 'along', 'an', 'axis', 'of', 'the', 'dataframe', 'objects', 'passed', 'to', 'the', 'function', 'are', 'series', 'objects', 'whose', 'index', 'is', 'either', 'the', 'dataframe', 'index', 'axis', 'or', 'the', 'dataframe', 'columns', 'axis', '实例', '添加', '一列', '温度', '类型', '如果', '最高', '温度', '大于', '33', '就是', '高温', '低于', '10', '低温', '否则', '常温', 'def', 'get', 'wendu', 'type', 'if', 'bwendu', '33', 'return', '高温', 'if', 'ywendu', '10', 'return', '低温', 'return', '常温', '注意', '需要', '设置', 'axis', '这是', 'series', 'index', 'columnsdf', 'loc', 'wendu', 'type', 'df', 'apply', 'get', 'wendu', 'type', 'axis', '查看', '温度', '类型', '计数', 'df', 'wendu', 'type', 'value', 'counts', '常温', '328', '高温', '29', '低温', '8name', 'wendu', 'type', 'dtype', 'int643', 'df', 'assign', '方法', 'assign', 'new', 'columns', 'to', 'dataframe', 'returns', 'new', 'object', 'with', 'all', 'original', 'columns', 'in', 'addition', 'to', 'new', 'ones', '实例', '温度', '摄氏度', '变成', '华氏度', '可以', '同时', '添加', '多个', 'df', 'assign', 'ywendu', 'huashi', 'lambda', 'ywendu', '32', '摄氏度', '华氏度', 'bwendu', 'huashi', 'lambda', 'bwendu', '32', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelwenchawendu', 'typeywendu', 'huashibwendu', 'huashi02018', '01', '013', '多云', '东北风', '59', '29', '常温', '21.237', '412018', '01', '022', '多云', '东北风', '49', '17', '常温', '23.035', '622018', '01', '032', '多云', '北风', '28', '17', '常温', '23.035', '632018', '01', '040', '东北风', '28', '18', '常温', '17.632', '042018', '01', '053', '多云', '西北风', '50', '19', '常温', '21.237', '..........................................', '3602018', '12', '27', '12', '多云', '西北风', '48', '17', '低温', '10.423', '03612018', '12', '28', '11', '西北风', '40', '18', '低温', '12.226', '63622018', '12', '29', '12', '西北风', '29', '19', '低温', '10.426', '63632018', '12', '30', '11', '多云', '东北风', '31', '19', '低温', '12.228', '43642018', '12', '31', '10', '多云', '东北风', '56', '28', '常温', '14.028', '4365', 'rows', '13', 'columns4', '条件', '选择', '分组', '分别', '赋值', '条件', '选择', '数据', '然后', '这部分', '数据', '赋值', '新列', '实例', '高低', '温差', '大于', '10', '认为', '温差', '创建', '空列', '这是', '第一种', '创建', '新列', '方法', 'df', 'wencha', 'type', 'df', 'loc', 'df', 'bwendu', 'df', 'ywendu', '10', 'wencha', 'type', '温差', 'df', 'loc', 'df', 'bwendu', 'df', 'ywendu', '10', 'wencha', 'type', '温差', '正常', 'df', 'wencha', 'type', 'value', 'counts', '温差', '正常', '187', '温差', '178name', 'wencha', 'type', 'dtype', 'int64']","[[-0.28299598 -0.07737459  0.30969373  0.07816631  0.32563606 -0.46188035
  -0.0823533   0.49856573 -0.0999234  -0.16656219 -0.0292069  -0.45050986
  -0.14722919  0.56788987  0.18133608 -0.14801321 -0.11965543 -0.03115189
  -0.0290646  -0.59353278 -0.08499712  0.30382681 -0.06491491 -0.24911152
   0.04905543 -0.4960894  -0.31210684 -0.01338796 -0.2655376  -0.08283703
   0.1561387  -0.0201896   0.03766211 -0.11741322 -0.17824971  0.31059898
  -0.22611006 -0.29716601  0.09490398 -0.81495688 -0.15057755 -0.67903626
  -0.12021137 -0.01769218 -0.13229054 -0.27876164 -0.22571354  0.34730726
  -0.24015823  0.55298166  0.12602008 -0.24712356 -0.16159055 -0.17424553
  -0.09158203  0.37899253  0.12185559 -0.13720999  0.07708796 -0.14319292
   0.12944939  0.2637198   0.01059391  0.07372703 -0.41637483  0.04168071
   0.09313085 -0.07326048 -0.33984544  0.45189991  0.04930702 -0.15550073
   0.40997931 -0.3465494   0.60551029  0.35020245  0.11198583 -0.17881508
  -0.3389022  -0.09071992  0.06808522  0.08429349 -0.14351955  0.45594228
  -0.33405601  0.20352946 -0.28649357  0.5158099   0.51928712  0.18501377
   0.23659594  0.16404728  0.41872671  0.18647145  0.25746252  0.33027191
   0.17800082 -0.40186695 -0.0448522  -0.10694632]]"
2525,3分钟Python爬取9000张表情包图片,"先看下我的爬取成果：本视频的演示步骤：使用requests爬取200个网页使用BeautifulSoup实现图片的标题和地址解析将图片下载到本地目录这2个库的详细用法，请看我的其他视频课程import requestsfrom bs4 import BeautifulSoupimport re1、下载共200个页面的HTMLdef download_all_htmls():    """"""    下载所有列表页面的HTML，用于后续的分析    """"""    htmls = []    for idx in range(200):        url = f""https://fabiaoqing.com/biaoqing/lists/page/{idx+1}.html""        print(""craw html:"", url)        r = requests.get(url)        if r.status_code != 200:            raise Exception(""error"")        htmls.append(r.text)    print(""success"")    return htmls# 执行爬取htmls = download_all_htmls()craw html: https://fabiaoqing.com/biaoqing/lists/page/1.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/2.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/3.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/4.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/188.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/189.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/190.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/191.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/192.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/193.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/194.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/195.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/196.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/197.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/198.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/199.htmlcraw html: https://fabiaoqing.com/biaoqing/lists/page/200.htmlsuccesshtmls[0][:1000]'<html>\n\n<head>\n    <meta charset=""UTF-8"">\n    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"">\n    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">\n    <meta http-equiv=""content-type"" content=""text/html; charset=UTF-8"">\n    <title>热门表情_发表情，表情包大全fabiaoqing.com</title>\n    <meta name=""Keywords"" content=""热门表情,表情包,聊天表情,微信表情包,QQ表情包,发表情,表情包大全,表情包下载,表情下载,表情包大战,贴吧表情包,表情包集中营,斗图"">\n    <meta name=""Description"" content=""全网热门表情。发表情，最大最全的表情包网站，分享最新最热的表情包、聊天表情、微信表情包、QQ表情包、金馆长表情包、蘑菇头表情包等各类表情。"">\n    <meta name=""referrer"" content=""no-referrer"" />\n    <link rel=""stylesheet"" type=""text/css"" href=""//lib.baomitu.com/semantic-ui/2.2.2/semantic.min.css"" />\n    <link rel=""stylesheet"" type=""text/css"" href=""/Public/css/fbq.css?v=2018"" />\n    <script data-ad-client=""ca-pub-5486123269162001"" async src=""https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js""></script>\n    <script async src=""//pagead2.googlesyndication.com/pagead/js/adsbygoogle.'2、解析HTML得到所有的图片标题和URL地址def parse_single_html(html):    """"""    解析单个HTML，得到数据    @return list((img_title, img_url))    """"""    soup = BeautifulSoup(html, 'html.parser')    img_divs = soup.find_all(""div"", class_=""tagbqppdiv"")    datas = []    for img_div in img_divs:        img_node = img_div.find(""img"")        if not img_node: continue        datas.append((img_node[""title""], img_node[""data-original""]))    return datasimport pprintpprint.pprint(parse_single_html(htmls[0])[:10])[('阿弥陀佛，施主放下骂图，立地成佛！',  'http://ww2.sinaimg.cn/bmiddle/9150e4e5gy1g6qlfb10avj20d70f7gmf.jpg'), ('看见你就烦（草莓果酱ox白眼 GIF 动图表情包）',  'http://wx1.sinaimg.cn/bmiddle/006APoFYly1g68tiftpbmg30bh0bh4o5.gif'), ('我在哭', 'http://wx3.sinaimg.cn/bmiddle/006qir4ogy1g54eoes2q2j309q09cdgh.jpg'), ('我的人生只要这样躺着混日子就很幸福了',  'http://ww4.sinaimg.cn/bmiddle/9150e4e5gy1g6qm7x6fiuj20mw0mmt9y.jpg'), ('草莓果酱ox动图表情包',  'http://wx1.sinaimg.cn/bmiddle/ceeb653ely1g64664qyc0g20bf0br4jn.gif'), ('噗呲 放屁（沙雕羊驼动图表情包）',  'http://wx1.sinaimg.cn/bmiddle/78b88159gy1g69cze2hkkg20bp0bpx0y.gif'), ('来群里转转（熊猫头旋转 GIF 动图）',  'http://wx1.sinaimg.cn/bmiddle/ceeb653ely1g68tzab8xng207608wwou.gif'), ('我爱你（草莓果酱oxGIF 动图表情包）',  'http://wx2.sinaimg.cn/bmiddle/006APoFYly1g68uwg8djlg30b60b6e57.gif'), ('锁屏 带薪拉屎',  'http://wx3.sinaimg.cn/bmiddle/ceeb653ely1g654hwdsjkg20dc0avgm4.gif'), ('我要可爱死你（草莓果酱ox表情包）',  'http://wx2.sinaimg.cn/bmiddle/bf976b12gy1g68hx2gtleg208c08bk8q.gif')]# 执行所有的HTML页面的解析all_imgs = []for html in htmls:    all_imgs.extend(parse_single_html(html))all_imgs[:10][('阿弥陀佛，施主放下骂图，立地成佛！',  'http://ww2.sinaimg.cn/bmiddle/9150e4e5gy1g6qlfb10avj20d70f7gmf.jpg'), ('看见你就烦（草莓果酱ox白眼 GIF 动图表情包）',  'http://wx1.sinaimg.cn/bmiddle/006APoFYly1g68tiftpbmg30bh0bh4o5.gif'), ('我在哭', 'http://wx3.sinaimg.cn/bmiddle/006qir4ogy1g54eoes2q2j309q09cdgh.jpg'), ('我的人生只要这样躺着混日子就很幸福了',  'http://ww4.sinaimg.cn/bmiddle/9150e4e5gy1g6qm7x6fiuj20mw0mmt9y.jpg'), ('草莓果酱ox动图表情包',  'http://wx1.sinaimg.cn/bmiddle/ceeb653ely1g64664qyc0g20bf0br4jn.gif'), ('噗呲 放屁（沙雕羊驼动图表情包）',  'http://wx1.sinaimg.cn/bmiddle/78b88159gy1g69cze2hkkg20bp0bpx0y.gif'), ('来群里转转（熊猫头旋转 GIF 动图）',  'http://wx1.sinaimg.cn/bmiddle/ceeb653ely1g68tzab8xng207608wwou.gif'), ('我爱你（草莓果酱oxGIF 动图表情包）',  'http://wx2.sinaimg.cn/bmiddle/006APoFYly1g68uwg8djlg30b60b6e57.gif'), ('锁屏 带薪拉屎',  'http://wx3.sinaimg.cn/bmiddle/ceeb653ely1g654hwdsjkg20dc0avgm4.gif'), ('我要可爱死你（草莓果酱ox表情包）',  'http://wx2.sinaimg.cn/bmiddle/bf976b12gy1g68hx2gtleg208c08bk8q.gif')]len(all_imgs)89993、下载图片到本地目录for idx, (title, img_url) in enumerate(all_imgs):    # 移除标点符号，只保留中文、大小写字母和阿拉伯数字    reg = ""[^0-9A-Za-z\u4e00-\u9fa5]""    title = re.sub(reg, '', title)    # 发现了超长的图片标题，做截断    if len(title)>10: title = title[:10]    # 得到jpg还是gif后缀    post_fix = img_url[-3:]    filename = f""./output/{title}.{post_fix}""    print(idx, filename)    img_data = requests.get(img_url)    with open(filename,""wb"")as f:        f.write(img_data.content)print(""success"")0 ./output/阿弥陀佛施主放下骂图.jpg1 ./output/看见你就烦草莓果酱o.gif2 ./output/我在哭.jpg3 ./output/我的人生只要这样躺着.jpg4 ./output/草莓果酱ox动图表情.gif5 ./output/噗呲放屁沙雕羊驼动图.gif6 ./output/来群里转转熊猫头旋转.gif7 ./output/我爱你草莓果酱oxG.gif8 ./output/锁屏带薪拉屎.gif9 ./output/我要可爱死你草莓果酱.gif10 ./output/我尼玛傻了都.jpg11 ./output/你今天表现蛮好10分.gif12 ./output/真烦人得找个理由做她.gif13 ./output/哇哦草莓果酱ox表情.jpg14 ./output/哥哥又说笑了乔碧萝表.gif15 ./output/锁屏带薪拉屎.gif16 ./output/我简直难上加难麻将表.jpg本文有配套视频讲解，关注公众号：蚂蚁学Python观看","['分钟', 'python', '爬取', '9000', '表情', '图片', '先看', '成果', '视频', '演示', '步骤', '使用', 'requests', '爬取', '200', '网页', '使用', 'beautifulsoup', '实现', '图片', '标题', '地址', '解析', '图片下载', '本地', '目录', '个库', '详细', '用法', '其他', '视频', '课程', 'import', 'requestsfrom', 'bs4', 'import', 'beautifulsoupimport', 're1', '下载', '200', '页面', 'htmldef', 'download', 'all', 'htmls', '下载', '所有', '列表', '页面', 'html', '用于', '后续', '分析', 'htmls', 'for', 'idx', 'in', 'range', '200', 'url', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', 'idx', 'html', 'print', 'craw', 'html', 'url', 'requests', 'get', 'url', 'if', 'status', 'code', '200', 'raise', 'exception', 'error', 'htmls', 'append', 'text', 'print', 'success', 'return', 'htmls', '执行', '爬取', 'htmls', 'download', 'all', 'htmls', 'craw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '188', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '189', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '190', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '191', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '192', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '193', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '194', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '195', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '196', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '197', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '198', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '199', 'htmlcraw', 'html', 'https', 'fabiaoqing', 'com', 'biaoqing', 'lists', 'page', '200', 'htmlsuccesshtmls', '1000', 'html', 'head', 'meta', 'charset', 'utf', 'meta', 'name', 'viewport', 'content', 'width', 'device', 'width', 'initial', 'scale', '1.0', 'maximum', 'scale', '1.0', 'user', 'scalable', 'no', 'meta', 'http', 'equiv', 'ua', 'compatible', 'content', 'ie', 'edge', 'meta', 'http', 'equiv', 'content', 'type', 'content', 'text', 'html', 'charset', 'utf', 'title', '热门', '表情', '发表', '表情', '大全', 'fabiaoqing', 'com', 'title', 'meta', 'name', 'keywords', 'content', '热门', '表情', '表情', '聊天', '表情', '微信', '表情', 'qq', '表情', '发表', '表情', '大全', '表情', '下载', '表情', '下载', '表情', '大战', '表情', '表情', '集中营', '斗图', 'meta', 'name', 'description', 'content', '全网', '热门', '表情', '发表', '最大', '最全', '表情', '网站', '分享', '最新', '最热', '表情', '聊天', '表情', '微信', '表情', 'qq', '表情', '馆长', '表情', '蘑菇', '表情', '包等', '各类', '表情', 'meta', 'name', 'referrer', 'content', 'no', 'referrer', 'link', 'rel', 'stylesheet', 'type', 'text', 'css', 'href', 'lib', 'baomitu', 'com', 'semantic', 'ui', '2.2', 'semantic', 'min', 'css', 'link', 'rel', 'stylesheet', 'type', 'text', 'css', 'href', 'public', 'css', 'fbq', 'css', '2018', 'script', 'data', 'ad', 'client', 'ca', 'pub', '5486123269162001', 'async', 'src', 'https', 'pagead2', 'googlesyndication', 'com', 'pagead', 'js', 'adsbygoogle', 'js', 'script', 'script', 'async', 'src', 'pagead2', 'googlesyndication', 'com', 'pagead', 'js', 'adsbygoogle', '解析', 'html', '得到', '所有', '图片', '标题', 'url', '地址', 'def', 'parse', 'single', 'html', 'html', '解析', '单个', 'html', '得到', '数据', 'return', 'list', 'img', 'title', 'img', 'url', 'soup', 'beautifulsoup', 'html', 'html', 'parser', 'img', 'divs', 'soup', 'find', 'all', 'div', 'class', 'tagbqppdiv', 'datas', 'for', 'img', 'div', 'in', 'img', 'divs', 'img', 'node', 'img', 'div', 'find', 'img', 'if', 'not', 'img', 'node', 'continue', 'datas', 'append', 'img', 'node', 'title', 'img', 'node', 'data', 'original', 'return', 'datasimport', 'pprintpprint', 'pprint', 'parse', 'single', 'html', 'htmls', '10', '阿弥陀佛', '施主', '放下', '立地成佛', 'http', 'ww2', 'sinaimg', 'cn', 'bmiddle', '9150e4e5gy1g6qlfb10avj20d70f7gmf', 'jpg', '看见', '草莓', '果酱', 'ox', '白眼', 'gif', '动图', '表情', 'http', 'wx1', 'sinaimg', 'cn', 'bmiddle', '006apofyly1g68tiftpbmg30bh0bh4o5', 'gif', 'http', 'wx3', 'sinaimg', 'cn', 'bmiddle', '006qir4ogy1g54eoes2q2j309q09cdgh', 'jpg', '人生', '只要', '这样', '混日子', '幸福', 'http', 'ww4', 'sinaimg', 'cn', 'bmiddle', '9150e4e5gy1g6qm7x6fiuj20mw0mmt9y', 'jpg', '草莓', '果酱', 'ox', '动图', '表情', 'http', 'wx1', 'sinaimg', 'cn', 'bmiddle', 'ceeb653ely1g64664qyc0g20bf0br4jn', 'gif', '放屁', '沙雕', '羊驼', '动图', '表情', 'http', 'wx1', 'sinaimg', 'cn', 'bmiddle', '78b88159gy1g69cze2hkkg20bp0bpx0y', 'gif', '群里', '转转', '熊猫', '旋转', 'gif', '动图', 'http', 'wx1', 'sinaimg', 'cn', 'bmiddle', 'ceeb653ely1g68tzab8xng207608wwou', 'gif', '我爱你', '草莓', '果酱', 'oxgif', '动图', '表情', 'http', 'wx2', 'sinaimg', 'cn', 'bmiddle', '006apofyly1g68uwg8djlg30b60b6e57', 'gif', '锁屏', '带薪', '拉屎', 'http', 'wx3', 'sinaimg', 'cn', 'bmiddle', 'ceeb653ely1g654hwdsjkg20dc0avgm4', 'gif', '我要', '可爱', '草莓', '果酱', 'ox', '表情', 'http', 'wx2', 'sinaimg', 'cn', 'bmiddle', 'bf976b12gy1g68hx2gtleg208c08bk8q', 'gif', '执行', '所有', 'html', '页面', '解析', 'all', 'imgs', 'for', 'html', 'in', 'htmls', 'all', 'imgs', 'extend', 'parse', 'single', 'html', 'html', 'all', 'imgs', '10', '阿弥陀佛', '施主', '放下', '立地成佛', 'http', 'ww2', 'sinaimg', 'cn', 'bmiddle', '9150e4e5gy1g6qlfb10avj20d70f7gmf', 'jpg', '看见', '草莓', '果酱', 'ox', '白眼', 'gif', '动图', '表情', 'http', 'wx1', 'sinaimg', 'cn', 'bmiddle', '006apofyly1g68tiftpbmg30bh0bh4o5', 'gif', 'http', 'wx3', 'sinaimg', 'cn', 'bmiddle', '006qir4ogy1g54eoes2q2j309q09cdgh', 'jpg', '人生', '只要', '这样', '混日子', '幸福', 'http', 'ww4', 'sinaimg', 'cn', 'bmiddle', '9150e4e5gy1g6qm7x6fiuj20mw0mmt9y', 'jpg', '草莓', '果酱', 'ox', '动图', '表情', 'http', 'wx1', 'sinaimg', 'cn', 'bmiddle', 'ceeb653ely1g64664qyc0g20bf0br4jn', 'gif', '放屁', '沙雕', '羊驼', '动图', '表情', 'http', 'wx1', 'sinaimg', 'cn', 'bmiddle', '78b88159gy1g69cze2hkkg20bp0bpx0y', 'gif', '群里', '转转', '熊猫', '旋转', 'gif', '动图', 'http', 'wx1', 'sinaimg', 'cn', 'bmiddle', 'ceeb653ely1g68tzab8xng207608wwou', 'gif', '我爱你', '草莓', '果酱', 'oxgif', '动图', '表情', 'http', 'wx2', 'sinaimg', 'cn', 'bmiddle', '006apofyly1g68uwg8djlg30b60b6e57', 'gif', '锁屏', '带薪', '拉屎', 'http', 'wx3', 'sinaimg', 'cn', 'bmiddle', 'ceeb653ely1g654hwdsjkg20dc0avgm4', 'gif', '我要', '可爱', '草莓', '果酱', 'ox', '表情', 'http', 'wx2', 'sinaimg', 'cn', 'bmiddle', 'bf976b12gy1g68hx2gtleg208c08bk8q', 'gif', 'len', 'all', 'imgs', '89993', '下载', '图片', '本地', '目录', 'for', 'idx', 'title', 'img', 'url', 'in', 'enumerate', 'all', 'imgs', '移除', '标点符号', '保留', '中文', '小写字母', '阿拉伯数字', 'reg', '9a', 'za', 'u4e00', 'u9fa5', 'title', 're', 'sub', 'reg', 'title', '发现', '超长', '图片', '标题', '截断', 'if', 'len', 'title', '10', 'title', 'title', '10', '得到', 'jpg', '还是', 'gif', '后缀', 'post', 'fix', 'img', 'url', 'filename', 'output', 'title', 'post', 'fix', 'print', 'idx', 'filename', 'img', 'data', 'requests', 'get', 'img', 'url', 'with', 'open', 'filename', 'wb', 'as', 'write', 'img', 'data', 'content', 'print', 'success', 'output', '阿弥陀佛', '施主', '放下', 'jpg1', 'output', '看见', '草莓', '果酱', 'gif2', 'output', 'jpg3', 'output', '人生', '只要', '这样', 'jpg4', 'output', '草莓', '果酱', 'ox', '动图', '表情', 'gif5', 'output', '放屁', '沙雕', '羊驼', '动图', 'gif6', 'output', '群里', '转转', '熊猫', '旋转', 'gif7', 'output', '我爱你', '草莓', '果酱', 'oxg', 'gif8', 'output', '锁屏', '带薪', '拉屎', 'gif9', 'output', '我要', '可爱', '草莓', '果酱', 'gif10', 'output', '尼玛', 'jpg11', 'output', '今天', '表现', '10', 'gif12', 'output', '烦人', '找个', '理由', 'gif13', 'output', '草莓', '果酱', 'ox', '表情', 'jpg14', 'output', '哥哥', '乔碧萝表', 'gif15', 'output', '锁屏', '带薪', '拉屎', 'gif16', 'output', '简直', '难上加难', '麻将', 'jpg', '本文', '配套', '视频', '讲解', '关注', '公众', '蚂蚁', 'python', '观看']","[[-0.22106937 -0.09540083  0.29381805  0.28971998  0.11204789 -0.43976122
  -0.03684704  0.47027734 -0.09898891 -0.16669415 -0.08746204 -0.44587096
  -0.06448854  0.46482258  0.07308785 -0.16709911 -0.09753447  0.01944287
   0.06859745 -0.39432928 -0.05514159  0.29730745 -0.15525198 -0.29316283
  -0.0660018  -0.34234462 -0.35365607  0.04333913 -0.19617395 -0.08249999
   0.096561    0.149886    0.05099438 -0.07903369 -0.26936134  0.36344548
  -0.20701718 -0.28442146  0.01652137 -0.56014843 -0.00493396 -0.50428554
  -0.05812941  0.0122245  -0.06894855 -0.33938195 -0.35060488  0.30991397
   0.04745557  0.38191011 -0.01986249 -0.29939263  0.0634345  -0.21585775
  -0.11266754  0.42811853  0.07591702 -0.13023767  0.15162136 -0.13410356
   0.2059327   0.14405519 -0.01846852  0.07543446 -0.29424394  0.11897093
  -0.05660146  0.0636182  -0.21647327  0.40424991 -0.01519544 -0.09666442
   0.40911717 -0.31533247  0.52972916  0.41224617  0.26471155 -0.26742062
  -0.18623721 -0.15607723 -0.06460797  0.09198402 -0.18171136  0.45393888
  -0.34846677  0.14559367 -0.26419403  0.56439375  0.5744714   0.22042285
   0.09050499  0.11720002  0.27539458  0.13045955  0.20127616  0.4686666
   0.0778782  -0.20315186  0.25005965 -0.11235949]]"
2528,Pandas的SettingWithCopyWarning报警怎么回事？,"本文实例演示报警的复现、原因、解决方案。0、读取数据import pandas as pdfpath = ""./datas/beijing_tianqi/beijing_tianqi_2018.csv""df = pd.read_csv(fpath)df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel02018-01-013℃-6℃晴~多云东北风1-2级59良212018-01-022℃-5℃阴~多云东北风1-2级49优122018-01-032℃-5℃多云北风1-2级28优132018-01-040℃-8℃阴东北风1-2级28优142018-01-053℃-6℃多云~晴西北风1-2级50优1# 替换掉温度的后缀℃df.loc[:, ""bWendu""] = df[""bWendu""].str.replace(""℃"", """").astype('int32')df.loc[:, ""yWendu""] = df[""yWendu""].str.replace(""℃"", """").astype('int32')df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel02018-01-013-6晴~多云东北风1-2级59良212018-01-022-5阴~多云东北风1-2级49优122018-01-032-5多云北风1-2级28优132018-01-040-8阴东北风1-2级28优142018-01-053-6多云~晴西北风1-2级50优11、复现# 只选出3月份的数据用于分析condition = df[""ymd""].str.startswith(""2018-03"")# 设置温差df[condition][""wen_cha""] = df[""bWendu""]-df[""yWendu""]d:\appdata\python37\lib\site-packages\ipykernel_launcher.py:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.Try using .loc[row_indexer,col_indexer] = value insteadSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy# 查看是否修改成功df[condition].head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel592018-03-018-3多云西南风1-2级46优1602018-03-029-1晴~多云北风1-2级95良2612018-03-03133多云~阴北风1-2级214重度污染5622018-03-047-2阴~多云东南风1-2级144轻度污染3632018-03-058-3晴南风1-2级94良22、原因发出警告的代码df[condition][""wen_cha""] = df[""bWendu""]-df[""yWendu""]相当于：df.get(condition).set(wen_cha)，第一步骤的get发出了报警链式操作其实是两个步骤，先get后set，get得到的dataframe可能是view也可能是copy，pandas发出警告官网文档：https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy核心要诀：pandas的dataframe的修改写操作，只允许在源dataframe上进行，一步到位3、解决方法1将get+set的两步操作，改成set的一步操作df.loc[condition, ""wen_cha""] = df[""bWendu""]-df[""yWendu""]df[condition].head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelwen_cha592018-03-018-3多云西南风1-2级46优111.0602018-03-029-1晴~多云北风1-2级95良210.0612018-03-03133多云~阴北风1-2级214重度污染510.0622018-03-047-2阴~多云东南风1-2级144轻度污染39.0632018-03-058-3晴南风1-2级94良211.04、解决方法2如果需要预筛选数据做后续的处理分析，使用copy复制dataframedf_month3 = df[condition].copy()df_month3.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelwen_cha592018-03-018-3多云西南风1-2级46优111.0602018-03-029-1晴~多云北风1-2级95良210.0612018-03-03133多云~阴北风1-2级214重度污染510.0622018-03-047-2阴~多云东南风1-2级144轻度污染39.0632018-03-058-3晴南风1-2级94良211.0df_month3[""wen_cha""] = df[""bWendu""]-df[""yWendu""]df_month3.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelwen_cha592018-03-018-3多云西南风1-2级46优111602018-03-029-1晴~多云北风1-2级95良210612018-03-03133多云~阴北风1-2级214重度污染510622018-03-047-2阴~多云东南风1-2级144轻度污染39632018-03-058-3晴南风1-2级94良211总之，pandas不允许先筛选子dataframe，再进行修改写入要么使用.loc实现一个步骤直接修改源dataframe要么先复制一个子dataframe再一个步骤执行修改本文章有配套视频讲解，关注公众号：蚂蚁学Python获取：","['pandas', 'settingwithcopywarning', '报警', '怎么回事', '本文', '实例', '演示', '报警', '复现', '原因', '解决方案', '读取数据', 'import', 'pandas', 'as', 'pdfpath', 'datas', 'beijing', 'tianqi', 'beijing', 'tianqi', '2018', 'csv', 'df', 'pd', 'read', 'csv', 'fpath', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel02018', '01', '013', '多云', '东北风', '59', '212018', '01', '022', '多云', '东北风', '49', '122018', '01', '032', '多云', '北风', '28', '132018', '01', '040', '东北风', '28', '142018', '01', '053', '多云', '西北风', '50', '替换', '温度', '后缀', 'df', 'loc', 'bwendu', 'df', 'bwendu', 'str', 'replace', 'astype', 'int32', 'df', 'loc', 'ywendu', 'df', 'ywendu', 'str', 'replace', 'astype', 'int32', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel02018', '01', '013', '多云', '东北风', '59', '212018', '01', '022', '多云', '东北风', '49', '122018', '01', '032', '多云', '北风', '28', '132018', '01', '040', '东北风', '28', '142018', '01', '053', '多云', '西北风', '50', '11', '复现', '选出', '月份', '数据', '用于', '分析', 'condition', 'df', 'ymd', 'str', 'startswith', '2018', '03', '设置', '温差', 'df', 'condition', 'wen', 'cha', 'df', 'bwendu', 'df', 'ywendu', 'appdata', 'python37', 'lib', 'site', 'packages', 'ipykernel', 'launcher', 'py', 'settingwithcopywarning', 'value', 'is', 'trying', 'to', 'be', 'set', 'on', 'copy', 'of', 'slice', 'from', 'dataframe', 'try', 'using', 'loc', 'row', 'indexer', 'col', 'indexer', 'value', 'insteadsee', 'the', 'caveats', 'in', 'the', 'documentation', 'http', 'pandas', 'pydata', 'org', 'pandas', 'docs', 'stable', 'user', 'guide', 'indexing', 'html', 'returning', 'view', 'versus', 'copy', '查看', '是否', '修改', '成功', 'df', 'condition', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel592018', '03', '018', '多云', '西南风', '46', '1602018', '03', '029', '多云', '北风', '95', '2612018', '03', '03133', '多云', '北风', '214', '重度', '污染', '5622018', '03', '047', '多云', '东南风', '144', '轻度', '污染', '3632018', '03', '058', '南风', '94', '22', '原因', '发出', '警告', '代码', 'df', 'condition', 'wen', 'cha', 'df', 'bwendu', 'df', 'ywendu', '相当于', 'df', 'get', 'condition', 'set', 'wen', 'cha', '第一', '步骤', 'get', '发出', '报警', '链式', '操作', '其实', '两个', '步骤', 'get', 'set', 'get', '得到', 'dataframe', '可能', 'view', '可能', 'copy', 'pandas', '发出', '警告', '官网', '文档', 'https', 'pandas', 'pydata', 'org', 'pandas', 'docs', 'stable', 'user', 'guide', 'indexing', 'html', 'returning', 'view', 'versus', 'copy', '核心', '要诀', 'pandas', 'dataframe', '修改', '操作', '允许', 'dataframe', '进行', '一步到位', '解决', '方法', 'get', 'set', '两步', '操作', '改成', 'set', '一步', '操作', 'df', 'loc', 'condition', 'wen', 'cha', 'df', 'bwendu', 'df', 'ywendu', 'df', 'condition', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelwen', 'cha592018', '03', '018', '多云', '西南风', '46', '111.0602018', '03', '029', '多云', '北风', '95', '210.0612018', '03', '03133', '多云', '北风', '214', '重度', '污染', '510.0622018', '03', '047', '多云', '东南风', '144', '轻度', '污染', '39.0632018', '03', '058', '南风', '94', '211.04', '解决', '方法', '如果', '需要', '筛选', '数据', '后续', '处理', '分析', '使用', 'copy', '复制', 'dataframedf', 'month3', 'df', 'condition', 'copy', 'df', 'month3', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelwen', 'cha592018', '03', '018', '多云', '西南风', '46', '111.0602018', '03', '029', '多云', '北风', '95', '210.0612018', '03', '03133', '多云', '北风', '214', '重度', '污染', '510.0622018', '03', '047', '多云', '东南风', '144', '轻度', '污染', '39.0632018', '03', '058', '南风', '94', '211.0', 'df', 'month3', 'wen', 'cha', 'df', 'bwendu', 'df', 'ywendu', 'df', 'month3', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelwen', 'cha592018', '03', '018', '多云', '西南风', '46', '111602018', '03', '029', '多云', '北风', '95', '210612018', '03', '03133', '多云', '北风', '214', '重度', '污染', '510622018', '03', '047', '多云', '东南风', '144', '轻度', '污染', '39632018', '03', '058', '南风', '94', '211', '总之', 'pandas', '允许', '筛选', 'dataframe', '进行', '修改', '写入', '要么', '使用', 'loc', '实现', '一个', '步骤', '直接', '修改', 'dataframe', '要么', '复制', '一个', 'dataframe', '一个', '步骤', '执行', '修改', '文章', '配套', '视频', '讲解', '关注', '公众', '蚂蚁', 'python', '获取']","[[-0.28616652 -0.07643898  0.30249371  0.1113128   0.29965551 -0.45036892
  -0.08211053  0.49757672 -0.09429031 -0.15107413 -0.03925998 -0.4430123
  -0.13371621  0.56047714  0.16885859 -0.15220736 -0.1169032  -0.03144366
  -0.02069134 -0.55528589 -0.07193653  0.30227743 -0.07169822 -0.2392892
   0.04264338 -0.48439476 -0.31510353 -0.00203    -0.25044671 -0.0822748
   0.16042129  0.0035255   0.03360438 -0.11205513 -0.1769183   0.32079298
  -0.20989256 -0.28532117  0.09053027 -0.78898212 -0.13647364 -0.64656003
  -0.10703626 -0.02658703 -0.13145852 -0.26942977 -0.24571594  0.35818197
  -0.20259497  0.51938478  0.11023115 -0.25303281 -0.13842282 -0.18802739
  -0.07975883  0.38239907  0.12967364 -0.12583215  0.07907125 -0.13112857
   0.13430753  0.25344374  0.01316922  0.06918198 -0.40406119  0.04021204
   0.07454505 -0.05135952 -0.31342248  0.44277655  0.04167344 -0.15370828
   0.4096733  -0.34340536  0.59339063  0.34022136  0.13750667 -0.18453459
  -0.31299704 -0.10912758  0.04230466  0.07524321 -0.13742614  0.45218914
  -0.33675273  0.19436256 -0.28273283  0.51411973  0.51929554  0.18403216
   0.22956515  0.1610397   0.40268902  0.18335693  0.25444563  0.34933078
   0.16190571 -0.37250878 -0.00622025 -0.09968338]]"
2532,Pandas对缺失值的处理,"Pandas使用这些函数处理缺失值：* isnull和notnull：检测是否是空值，可用于df和series* dropna：丢弃、删除缺失值  - axis : 删除行还是列，{0 or ‘index’, 1 or ‘columns’}, default 0  - how : 如果等于any则任何值为空都删除，如果等于all则所有值都为空才删除  - inplace : 如果为True则修改当前df，否则返回新的df* fillna：填充空值  - value：用于填充的值，可以是单个值，或者字典（key是列名，value是值）  - method : 等于ffill使用前一个不为空的值填充forword fill；等于bfill使用后一个不为空的值填充backword fill  - axis : 按行还是列填充，{0 or ‘index’, 1 or ‘columns’}  - inplace : 如果为True则修改当前df，否则返回新的dfimport pandas as pd实例：特殊Excel的读取、清洗、处理步骤1：读取excel的时候，忽略前几个空行studf = pd.read_excel(""./datas/student_excel/student_excel.xlsx"", skiprows=2)studfUnnamed: 0姓名科目分数0NaN小明语文85.01NaNNaN数学80.02NaNNaN英语90.03NaNNaNNaNNaN4NaN小王语文85.05NaNNaN数学NaN6NaNNaN英语90.07NaNNaNNaNNaN8NaN小刚语文85.09NaNNaN数学80.010NaNNaN英语90.0步骤2：检测空值studf.isnull()Unnamed: 0姓名科目分数0TrueFalseFalseFalse1TrueTrueFalseFalse2TrueTrueFalseFalse3TrueTrueTrueTrue4TrueFalseFalseFalse5TrueTrueFalseTrue6TrueTrueFalseFalse7TrueTrueTrueTrue8TrueFalseFalseFalse9TrueTrueFalseFalse10TrueTrueFalseFalsestudf[""分数""].isnull()0     False1     False2     False3      True4     False5      True6     False7      True8     False9     False10    FalseName: 分数, dtype: boolstudf[""分数""].notnull()0      True1      True2      True3     False4      True5     False6      True7     False8      True9      True10     TrueName: 分数, dtype: bool# 筛选没有空分数的所有行studf.loc[studf[""分数""].notnull(), :]Unnamed: 0姓名科目分数0NaN小明语文85.01NaNNaN数学80.02NaNNaN英语90.04NaN小王语文85.06NaNNaN英语90.08NaN小刚语文85.09NaNNaN数学80.010NaNNaN英语90.0步骤3：删除掉全是空值的列studf.dropna(axis=""columns"", how='all', inplace=True)studf姓名科目分数0小明语文85.01NaN数学80.02NaN英语90.03NaNNaNNaN4小王语文85.05NaN数学NaN6NaN英语90.07NaNNaNNaN8小刚语文85.09NaN数学80.010NaN英语90.0步骤4：删除掉全是空值的行studf.dropna(axis=""index"", how='all', inplace=True)studf姓名科目分数0小明语文85.01NaN数学80.02NaN英语90.04小王语文85.05NaN数学NaN6NaN英语90.08小刚语文85.09NaN数学80.010NaN英语90.0步骤5：将分数列为空的填充为0分studf.fillna({""分数"":0})姓名科目分数0小明语文85.01NaN数学80.02NaN英语90.04小王语文85.05NaN数学0.06NaN英语90.08小刚语文85.09NaN数学80.010NaN英语90.0# 等同于studf.loc[:, '分数'] = studf['分数'].fillna(0)studf姓名科目分数0小明语文85.01NaN数学80.02NaN英语90.04小王语文85.05NaN数学0.06NaN英语90.08小刚语文85.09NaN数学80.010NaN英语90.0步骤6：将姓名的缺失值填充使用前面的有效值填充，用ffill：forward fillstudf.loc[:, '姓名'] = studf['姓名'].fillna(method=""ffill"")studf姓名科目分数0小明语文85.01小明数学80.02小明英语90.04小王语文85.05小王数学0.06小王英语90.08小刚语文85.09小刚数学80.010小刚英语90.0步骤7：将清洗好的excel保存studf.to_excel(""./datas/student_excel/student_excel_clean.xlsx"", index=False)本文章有配套视频讲解，关注公众号：蚂蚁学Python获取","['pandas', '缺失', '处理', 'pandas', '使用', '这些', '函数', '处理', '缺失', 'isnull', 'notnull', '检测', '是否是', '空值', '用于', 'df', 'series', 'dropna', '丢弃', '删除', '缺失', 'axis', '删除', '还是', 'or', 'index', 'or', 'columns', 'default', 'how', '如果', '等于', 'any', '任何', '值为', '删除', '如果', '等于', 'all', '所有', '空才', '删除', 'inplace', '如果', 'true', '修改', '当前', 'df', '否则', '返回', 'df', 'fillna', '填充', '空值', 'value', '用于', '填充', '可以', '单个', '或者', '字典', 'key', '列名', 'value', 'method', '等于', 'ffill', '使用', '一个', '不为', '填充', 'forword', 'fill', '等于', 'bfill', '使用', '一个', '不为', '填充', 'backword', 'fill', 'axis', '按行', '还是', '填充', 'or', 'index', 'or', 'columns', 'inplace', '如果', 'true', '修改', '当前', 'df', '否则', '返回', 'dfimport', 'pandas', 'as', 'pd', '实例', '特殊', 'excel', '读取', '清洗', '处理', '步骤', '读取', 'excel', '时候', '忽略', '几个', '空行', 'studf', 'pd', 'read', 'excel', 'datas', 'student', 'excel', 'student', 'excel', 'xlsx', 'skiprows', 'studfunnamed', '姓名', '科目', '分数', '0nan', '小明', '语文', '85.01', 'nannan', '数学', '80.02', 'nannan', '英语', '90.03', 'nannannannan4nan', '小王', '语文', '85.05', 'nannan', '数学', 'nan6nannan', '英语', '90.07', 'nannannannan8nan', '小刚', '语文', '85.09', 'nannan', '数学', '80.010', 'nannan', '英语', '90.0', '步骤', '检测', '空值', 'studf', 'isnull', 'unnamed', '姓名', '科目', '分数', '0truefalsefalsefalse1truetruefalsefalse2truetruefalsefalse3truetruetruetrue4truefalsefalsefalse5truetruefalsetrue6truetruefalsefalse7truetruetruetrue8truefalsefalsefalse9truetruefalsefalse10truetruefalsefalsestudf', '分数', 'isnull', 'false1', 'false2', 'false3', 'true4', 'false5', 'true6', 'false7', 'true8', 'false9', 'false10', 'falsename', '分数', 'dtype', 'boolstudf', '分数', 'notnull', 'true1', 'true2', 'true3', 'false4', 'true5', 'false6', 'true7', 'false8', 'true9', 'true10', 'truename', '分数', 'dtype', 'bool', '筛选', '没有', '分数', '所有', 'studf', 'loc', 'studf', '分数', 'notnull', 'unnamed', '姓名', '科目', '分数', '0nan', '小明', '语文', '85.01', 'nannan', '数学', '80.02', 'nannan', '英语', '90.04', 'nan', '小王', '语文', '85.06', 'nannan', '英语', '90.08', 'nan', '小刚', '语文', '85.09', 'nannan', '数学', '80.010', 'nannan', '英语', '90.0', '步骤', '删除', '全是', '空值', 'studf', 'dropna', 'axis', 'columns', 'how', 'all', 'inplace', 'true', 'studf', '姓名', '科目', '分数', '小明', '语文', '85.01', 'nan', '数学', '80.02', 'nan', '英语', '90.03', 'nannannan4', '小王', '语文', '85.05', 'nan', '数学', 'nan6nan', '英语', '90.07', 'nannannan8', '小刚', '语文', '85.09', 'nan', '数学', '80.010', 'nan', '英语', '90.0', '步骤', '删除', '全是', '空值', 'studf', 'dropna', 'axis', 'index', 'how', 'all', 'inplace', 'true', 'studf', '姓名', '科目', '分数', '小明', '语文', '85.01', 'nan', '数学', '80.02', 'nan', '英语', '90.04', '小王', '语文', '85.05', 'nan', '数学', 'nan6nan', '英语', '90.08', '小刚', '语文', '85.09', 'nan', '数学', '80.010', 'nan', '英语', '90.0', '步骤', '分数', '列为', '填充', 'studf', 'fillna', '分数', '姓名', '科目', '分数', '小明', '语文', '85.01', 'nan', '数学', '80.02', 'nan', '英语', '90.04', '小王', '语文', '85.05', 'nan', '数学', '0.06', 'nan', '英语', '90.08', '小刚', '语文', '85.09', 'nan', '数学', '80.010', 'nan', '英语', '90.0', '等同于', 'studf', 'loc', '分数', 'studf', '分数', 'fillna', 'studf', '姓名', '科目', '分数', '小明', '语文', '85.01', 'nan', '数学', '80.02', 'nan', '英语', '90.04', '小王', '语文', '85.05', 'nan', '数学', '0.06', 'nan', '英语', '90.08', '小刚', '语文', '85.09', 'nan', '数学', '80.010', 'nan', '英语', '90.0', '步骤', '姓名', '缺失', '填充', '使用', '前面', '有效值', '填充', 'ffill', 'forward', 'fillstudf', 'loc', '姓名', 'studf', '姓名', 'fillna', 'method', 'ffill', 'studf', '姓名', '科目', '分数', '小明', '语文', '85.01', '小明', '数学', '80.02', '小明', '英语', '90.04', '小王', '语文', '85.05', '小王', '数学', '0.06', '小王', '英语', '90.08', '小刚', '语文', '85.09', '小刚', '数学', '80.010', '小刚', '英语', '90.0', '步骤', '清洗', 'excel', '保存', 'studf', 'to', 'excel', 'datas', 'student', 'excel', 'student', 'excel', 'clean', 'xlsx', 'index', 'false', '文章', '配套', '视频', '讲解', '关注', '公众', '蚂蚁', 'python', '获取']","[[-2.06938446e-01 -9.15318792e-02  2.14956775e-01  1.21943179e-01
   2.38610711e-01 -3.07669734e-01 -1.10835063e-01  3.95007485e-01
  -4.10198779e-02 -7.85711597e-02 -3.56361615e-02 -3.09802322e-01
  -1.24869960e-01  4.64639047e-01  1.33927811e-01 -9.62893206e-02
  -1.12914472e-01 -1.11469998e-02 -6.19328947e-02 -4.24511236e-01
  -1.94321795e-02  2.14957713e-01 -3.24539301e-02 -1.47842258e-01
   6.44011771e-02 -4.18043333e-01 -2.52824214e-01  4.25666174e-02
  -1.93762907e-01 -6.33016741e-02  1.56882687e-01  1.01531430e-02
  -1.14166282e-03 -1.05877844e-01 -1.29138772e-01  2.71187788e-01
  -1.55290353e-01 -2.21646485e-01  7.26128311e-02 -6.24974161e-01
  -1.22620250e-01 -5.00169930e-01 -5.41714700e-02 -2.75020853e-02
  -1.19360169e-01 -1.75990047e-01 -2.01935453e-01  3.28481555e-01
  -1.53687286e-01  3.81938978e-01  1.27173260e-01 -2.27318414e-01
  -1.02303088e-01 -1.64400241e-01 -6.12078129e-05  3.25934323e-01
   1.49385312e-01 -7.60742569e-02  9.06876880e-02 -1.06178316e-01
   7.25892671e-02  2.10408199e-01  1.07047176e-02  7.05702926e-02
  -3.21281653e-01  2.58880159e-02  4.58303590e-02 -2.42616930e-02
  -2.35702367e-01  3.66087860e-01  8.52032940e-02 -1.62525613e-01
   3.28290354e-01 -2.78488811e-01  4.68749414e-01  2.06627241e-01
   1.36524331e-01 -1.33736982e-01 -2.51120583e-01 -1.24255560e-01
  -1.57001000e-02  3.28057319e-02 -9.28821934e-02  3.17033178e-01
  -2.84875806e-01  1.67871135e-01 -2.39378176e-01  3.71347942e-01
   4.06228559e-01  1.28911618e-01  2.12735548e-01  9.82958747e-02
   3.00799874e-01  1.52249223e-01  1.63066827e-01  3.04127338e-01
   1.00982544e-01 -2.63889671e-01 -1.61715779e-02 -9.51789820e-02]]"
2534,CTR预估：(标签-权重)列表类特征怎么输入到模型？,"问题：要做一个CTR预估模型；通过之前的数据挖掘，我得到了用户对标签的偏好数据：[('标签1', 0.8), ('标签2', 0.65), ('标签3', 0.32), ('标签4', 0.05)]列表的每一个元素包含两个分量，分别是标签、偏好权重；问题是，这样的一个特征，怎样输入到模型？我只知道，对于标签1、标签2、标签3这样是分类特征，可以用one hot编码；然而我不知道这里的权重怎么使用呢？，我想到2种方法：1、先给标签1、标签2、标签3做one-hot编码，然后自己找到每个数字为1的位置，把数字1替换成权重；2、对所有标签映射到一个大数组，找到标签在数组的下标，设置为权重，其他的都是0；这两种方法哪种更好，或者有其他方法吗？这个问题也有其他场景：用户的历史行为比如播放的ID列表，统计会得到：[播放itemid，频次]的列表，怎么作为特征输入到模型？方法：1、可以直接把权重作为那一维度的特征吧，就是比如favori_entity_延禧攻略，这个特征，特征值就是weight2、可以看成特殊的one-hot, 把one-hot里面的1用weight代替，作为一个连续值特征一种做法，打平成单独维度特征如果是tensorflow，问题的答案在这个文章：https://zhuanlan.zhihu.com/p/41663141超级的详细，1、单个特征有有多分类怎么处理，比如[('cat_a','cat_b), (cat_b, cat_c)]；2、如果是加权cat列表怎么办，比如用户的tag偏好列表：[('IT', 0,8), ('音乐',0.6)]；对于第一个问题，用cat_vocu_list加上Indicator_column，第二个，用weighted_categorical_column","['ctr', '预估', '标签', '权重', '列表', '特征', '怎么', '输入', '模型', '问题', '一个', 'ctr', '预估', '模型', '通过', '之前', '数据挖掘', '得到', '用户', '标签', '偏好', '数据', '标签', '0.8', '标签', '0.65', '标签', '0.32', '标签', '0.05', '列表', '一个', '元素', '包含', '两个', '分量', '分别', '标签', '偏好', '权重', '问题', '这样', '一个', '特征', '怎样', '输入', '模型', '知道', '对于', '标签', '标签', '标签', '这样', '分类', '特征', '可以', 'one', 'hot', '编码', '然而', '知道', '这里', '权重', '怎么', '使用', '想到', '方法', '先给', '标签', '标签', '标签', 'one', 'hot', '编码', '然后', '自己', '找到', '每个', '数字', '位置', '数字', '替换成', '权重', '所有', '标签', '映射', '一个', '数组', '找到', '标签', '数组', '下标', '设置', '权重', '其他', '两种', '方法', '更好', '或者', '其他', '方法', '这个', '问题', '其他', '场景', '用户', '历史', '行为', '比如', '播放', 'id', '列表', '统计', '得到', '播放', 'itemid', '频次', '列表', '怎么', '作为', '特征', '输入', '模型', '方法', '可以', '直接', '权重', '作为', '那一', '维度', '特征', '就是', '比如', 'favori', 'entity', '延禧', '攻略', '这个', '特征', '特征值', '就是', 'weight2', '可以', '看成', '特殊', 'one', 'hot', 'one', 'hot', '里面', 'weight', '代替', '作为', '一个', '连续', '特征', '一种', '做法', '打平', '单独', '维度', '特征', '如果', 'tensorflow', '问题', '答案', '这个', '文章', 'https', 'zhuanlan', 'zhihu', 'com', '41663141', '超级', '详细', '单个', '特征', '分类', '怎么', '处理', '比如', 'cat', 'cat', 'cat', 'cat', '如果', '加权', 'cat', '列表', '怎么办', '比如', '用户', 'tag', '偏好', '列表', 'it', '音乐', '0.6', '对于', '第一个', '问题', 'cat', 'vocu', 'list', '加上', 'indicator', 'column', '第二个', 'weighted', 'categorical', 'column']","[[-0.24217466 -0.14629672  0.20837141  0.16127862  0.30577241 -0.32943059
  -0.2079815   0.48439104  0.01462069  0.00372381 -0.06519027 -0.31021712
  -0.19810107  0.61554455  0.14964179 -0.0958913  -0.16487581 -0.00083008
  -0.12182224 -0.45538081  0.04238569  0.224979    0.01877192 -0.06647805
   0.13718115 -0.57095101 -0.28135035  0.10015854 -0.20552958 -0.05190492
   0.2607984   0.02830701 -0.02014057 -0.15100475 -0.08932439  0.32498247
  -0.12095886 -0.20357493  0.12357927 -0.77245648 -0.19124784 -0.58845437
  -0.0348634  -0.08313485 -0.17594481 -0.1316053  -0.25717456  0.48849242
  -0.18214567  0.38454211  0.22849253 -0.26184736 -0.11914349 -0.2319116
   0.09458045  0.38671477  0.27107458 -0.0527971   0.08753857 -0.08720555
   0.02728922  0.30699292  0.0248377   0.0961548  -0.38690195 -0.02897768
   0.04308294 -0.02038736 -0.23551949  0.44323717  0.16051501 -0.26843589
   0.40081672 -0.32248369  0.57575693  0.13526228  0.21081388 -0.1246188
  -0.2693246  -0.22837914 -0.09061355 -0.01692564 -0.05385927  0.31146577
  -0.38880104  0.20755124 -0.28935337  0.39463601  0.4555972   0.11795588
   0.33288686  0.12304482  0.36234467  0.18746099  0.1854827   0.37216176
   0.09217998 -0.30143457 -0.0476028  -0.08600414]]"
2536,Pandas怎样对数据进行排序？," Series的排序：Series.sort_values(ascending=True, inplace=False)参数说明：* ascending：默认为True升序排序，为False降序排序* inplace：是否修改原始SeriesDataFrame的排序：DataFrame.sort_values(by, ascending=True, inplace=False)参数说明：* by：字符串或者List<字符串>，单列排序或者多列排序* ascending：bool或者List，升序还是降序，如果是list对应by的多列* inplace：是否修改原始DataFrameimport pandas as pd0、读取数据fpath = ""./datas/beijing_tianqi/beijing_tianqi_2018.csv""df = pd.read_csv(fpath)# 替换掉温度的后缀℃df.loc[:, ""bWendu""] = df[""bWendu""].str.replace(""℃"", """").astype('int32')df.loc[:, ""yWendu""] = df[""yWendu""].str.replace(""℃"", """").astype('int32')df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel02018-01-013-6晴~多云东北风1-2级59良212018-01-022-5阴~多云东北风1-2级49优122018-01-032-5多云北风1-2级28优132018-01-040-8阴东北风1-2级28优142018-01-053-6多云~晴西北风1-2级50优11、Series的排序df[""aqi""].sort_values()271     21281     21249     22272     22301     22      ... 317    26671     28791     28772     29386     387Name: aqi, Length: 365, dtype: int64df[""aqi""].sort_values(ascending=False)86     38772     29391     28771     287317    266      ... 301     22272     22249     22281     21271     21Name: aqi, Length: 365, dtype: int64df[""tianqi""].sort_values()225     中雨~小雨230     中雨~小雨197    中雨~雷阵雨196    中雨~雷阵雨112        多云        ...  191    雷阵雨~大雨219     雷阵雨~阴335      雾~多云353         霾348         霾Name: tianqi, Length: 365, dtype: object2、DataFrame的排序2.1 单列排序df.sort_values(by=""aqi"")ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel2712018-09-292211晴北风3-4级21优12812018-10-09154多云~晴西北风4-5级21优12492018-09-072716晴西北风3-4级22优12722018-09-301913多云西北风4-5级22优13012018-10-29153晴北风3-4级22优1..............................3172018-11-14135多云南风1-2级266重度污染5712018-03-13175晴~多云南风1-2级287重度污染5912018-04-022611多云北风1-2级287重度污染5722018-03-14156多云~阴东北风1-2级293重度污染5862018-03-28259多云~晴东风1-2级387严重污染6365 rows × 9 columnsdf.sort_values(by=""aqi"", ascending=False)ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel862018-03-28259多云~晴东风1-2级387严重污染6722018-03-14156多云~阴东北风1-2级293重度污染5712018-03-13175晴~多云南风1-2级287重度污染5912018-04-022611多云北风1-2级287重度污染53172018-11-14135多云南风1-2级266重度污染5..............................2492018-09-072716晴西北风3-4级22优13012018-10-29153晴北风3-4级22优12722018-09-301913多云西北风4-5级22优12712018-09-292211晴北风3-4级21优12812018-10-09154多云~晴西北风4-5级21优1365 rows × 9 columns2.2 多列排序# 按空气质量等级、最高温度排序，默认升序df.sort_values(by=[""aqiLevel"", ""bWendu""])ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel3602018-12-27-5-12多云~晴西北风3级48优1222018-01-23-4-12晴西北风3-4级31优1232018-01-24-4-11晴西南风1-2级34优13402018-12-07-4-10晴西北风3级33优1212018-01-22-3-10小雪~多云东风1-2级47优1..............................712018-03-13175晴~多云南风1-2级287重度污染5902018-04-012511晴~多云南风1-2级218重度污染5912018-04-022611多云北风1-2级287重度污染5852018-03-272711晴南风1-2级243重度污染5862018-03-28259多云~晴东风1-2级387严重污染6365 rows × 9 columns# 两个字段都是降序df.sort_values(by=[""aqiLevel"", ""bWendu""], ascending=False)ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel862018-03-28259多云~晴东风1-2级387严重污染6852018-03-272711晴南风1-2级243重度污染5912018-04-022611多云北风1-2级287重度污染5902018-04-012511晴~多云南风1-2级218重度污染5712018-03-13175晴~多云南风1-2级287重度污染5..............................3622018-12-29-3-12晴西北风2级29优1222018-01-23-4-12晴西北风3-4级31优1232018-01-24-4-11晴西南风1-2级34优13402018-12-07-4-10晴西北风3级33优13602018-12-27-5-12多云~晴西北风3级48优1365 rows × 9 columns# 分别指定升序和降序df.sort_values(by=[""aqiLevel"", ""bWendu""], ascending=[True, False])ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel1782018-06-283524多云~晴北风1-2级33优11492018-05-303318晴西风1-2级46优12062018-07-263325多云~雷阵雨东北风1-2级40优11582018-06-083219多云~雷阵雨西南风1-2级43优12052018-07-253225多云北风1-2级28优1..............................3172018-11-14135多云南风1-2级266重度污染53292018-11-26100多云东南风1级245重度污染53352018-12-0292雾~多云东北风1级234重度污染5572018-02-2770阴东风1-2级220重度污染5862018-03-28259多云~晴东风1-2级387严重污染6365 rows × 9 columns本文章有配套视频讲解，关注公众号：蚂蚁学Python，查看视频、获取源码","['pandas', '怎样', '数据', '进行', '排序', 'series', '排序', 'series', 'sort', 'values', 'ascending', 'true', 'inplace', 'false', '参数', '说明', 'ascending', '默认', 'true', '升序', '排序', 'false', '降序', '排序', 'inplace', '是否', '修改', '原始', 'seriesdataframe', '排序', 'dataframe', 'sort', 'values', 'by', 'ascending', 'true', 'inplace', 'false', '参数', '说明', 'by', '字符串', '或者', 'list', '字符串', '单列', '排序', '或者', '多列', '排序', 'ascending', 'bool', '或者', 'list', '升序', '还是', '降序', '如果', 'list', '对应', 'by', '多列', 'inplace', '是否', '修改', '原始', 'dataframeimport', 'pandas', 'as', 'pd0', '读取数据', 'fpath', 'datas', 'beijing', 'tianqi', 'beijing', 'tianqi', '2018', 'csv', 'df', 'pd', 'read', 'csv', 'fpath', '替换', '温度', '后缀', 'df', 'loc', 'bwendu', 'df', 'bwendu', 'str', 'replace', 'astype', 'int32', 'df', 'loc', 'ywendu', 'df', 'ywendu', 'str', 'replace', 'astype', 'int32', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel02018', '01', '013', '多云', '东北风', '59', '212018', '01', '022', '多云', '东北风', '49', '122018', '01', '032', '多云', '北风', '28', '132018', '01', '040', '东北风', '28', '142018', '01', '053', '多云', '西北风', '50', '11', 'series', '排序', 'df', 'aqi', 'sort', 'values', '271', '21281', '21249', '22272', '22301', '22', '...', '317', '26671', '28791', '28772', '29386', '387name', 'aqi', 'length', '365', 'dtype', 'int64df', 'aqi', 'sort', 'values', 'ascending', 'false', '86', '38772', '29391', '28771', '287317', '266', '...', '301', '22272', '22249', '22281', '21271', '21name', 'aqi', 'length', '365', 'dtype', 'int64df', 'tianqi', 'sort', 'values', '225', '中雨', '小雨', '230', '中雨', '小雨', '197', '中雨', '雷阵雨', '196', '中雨', '雷阵雨', '112', '多云', '...', '191', '雷阵雨', '大雨', '219', '雷阵雨', '335', '多云', '353', '348', 'name', 'tianqi', 'length', '365', 'dtype', 'object2', 'dataframe', '排序', '2.1', '单列', '排序', 'df', 'sort', 'values', 'by', 'aqi', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel2712018', '09', '292211', '北风', '21', '12812018', '10', '09154', '多云', '西北风', '21', '12492018', '09', '072716', '西北风', '22', '12722018', '09', '301913', '多云', '西北风', '22', '13012018', '10', '29153', '北风', '22', '..............................', '3172018', '11', '14135', '云南', '266', '重度', '污染', '5712018', '03', '13175', '云南', '287', '重度', '污染', '5912018', '04', '022611', '多云', '北风', '287', '重度', '污染', '5722018', '03', '14156', '多云', '东北风', '293', '重度', '污染', '5862018', '03', '28259', '多云', '东风', '387', '严重', '污染', '6365', 'rows', 'columnsdf', 'sort', 'values', 'by', 'aqi', 'ascending', 'false', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel862018', '03', '28259', '多云', '东风', '387', '严重', '污染', '6722018', '03', '14156', '多云', '东北风', '293', '重度', '污染', '5712018', '03', '13175', '云南', '287', '重度', '污染', '5912018', '04', '022611', '多云', '北风', '287', '重度', '污染', '53172018', '11', '14135', '云南', '266', '重度', '污染', '..............................', '2492018', '09', '072716', '西北风', '22', '13012018', '10', '29153', '北风', '22', '12722018', '09', '301913', '多云', '西北风', '22', '12712018', '09', '292211', '北风', '21', '12812018', '10', '09154', '多云', '西北风', '21', '1365', 'rows', 'columns2.2', '多列', '排序', '空气质量', '等级', '最高', '温度', '排序', '默认', '升序', 'df', 'sort', 'values', 'by', 'aqilevel', 'bwendu', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel3602018', '12', '27', '12', '多云', '西北风', '48', '1222018', '01', '23', '12', '西北风', '31', '1232018', '01', '24', '11', '西南风', '34', '13402018', '12', '07', '10', '西北风', '33', '1212018', '01', '22', '10', '小雪', '多云', '东风', '47', '..............................', '712018', '03', '13175', '云南', '287', '重度', '污染', '5902018', '04', '012511', '云南', '218', '重度', '污染', '5912018', '04', '022611', '多云', '北风', '287', '重度', '污染', '5852018', '03', '272711', '南风', '243', '重度', '污染', '5862018', '03', '28259', '多云', '东风', '387', '严重', '污染', '6365', 'rows', 'columns', '两个', '字段', '降序', 'df', 'sort', 'values', 'by', 'aqilevel', 'bwendu', 'ascending', 'false', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel862018', '03', '28259', '多云', '东风', '387', '严重', '污染', '6852018', '03', '272711', '南风', '243', '重度', '污染', '5912018', '04', '022611', '多云', '北风', '287', '重度', '污染', '5902018', '04', '012511', '云南', '218', '重度', '污染', '5712018', '03', '13175', '云南', '287', '重度', '污染', '..............................', '3622018', '12', '29', '12', '西北风', '29', '1222018', '01', '23', '12', '西北风', '31', '1232018', '01', '24', '11', '西南风', '34', '13402018', '12', '07', '10', '西北风', '33', '13602018', '12', '27', '12', '多云', '西北风', '48', '1365', 'rows', 'columns', '分别', '指定', '升序', '降序', 'df', 'sort', 'values', 'by', 'aqilevel', 'bwendu', 'ascending', 'true', 'false', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel1782018', '06', '283524', '多云', '北风', '33', '11492018', '05', '303318', '西风', '46', '12062018', '07', '263325', '多云', '雷阵雨', '东北风', '40', '11582018', '06', '083219', '多云', '雷阵雨', '西南风', '43', '12052018', '07', '253225', '多云', '北风', '28', '..............................', '3172018', '11', '14135', '云南', '266', '重度', '污染', '53292018', '11', '26100', '多云', '东南风', '245', '重度', '污染', '53352018', '12', '0292', '多云', '东北风', '234', '重度', '污染', '5572018', '02', '2770', '东风', '220', '重度', '污染', '5862018', '03', '28259', '多云', '东风', '387', '严重', '污染', '6365', 'rows', 'columns', '文章', '配套', '视频', '讲解', '关注', '公众', '蚂蚁', 'python', '查看', '视频', '获取', '源码']","[[-0.27136595 -0.06268364  0.29316977  0.07902964  0.27946087 -0.43363942
  -0.06410667  0.45320711 -0.09632094 -0.15439402 -0.03184923 -0.41939099
  -0.1227123   0.51988597  0.1563702  -0.14259148 -0.10143456 -0.02969158
  -0.01701633 -0.51834807 -0.07877234  0.28368848 -0.06934214 -0.22978951
   0.03290511 -0.44624449 -0.28856791 -0.0189435  -0.23434776 -0.07526336
   0.14140085 -0.00247899  0.03216326 -0.09142027 -0.16548804  0.2913911
  -0.19928305 -0.26458444  0.08239365 -0.73283293 -0.12673416 -0.60695781
  -0.11227031 -0.03221321 -0.11635487 -0.24782805 -0.23087533  0.31832648
  -0.2033332   0.49695609  0.09917622 -0.22356801 -0.13128776 -0.17267078
  -0.09239945  0.34216674  0.10554751 -0.12214173  0.06960625 -0.12708407
   0.12361767  0.23870662  0.00481267  0.06016875 -0.36638263  0.03958657
   0.08146494 -0.06222827 -0.29336648  0.41283756  0.02846798 -0.13669006
   0.37263018 -0.31957608  0.55343198  0.33161248  0.11784369 -0.17883293
  -0.28412232 -0.09327669  0.05825156  0.08849596 -0.13258834  0.42840429
  -0.30535236  0.17821425 -0.26064362  0.48456512  0.47681409  0.17547844
   0.21355247  0.15779221  0.37202386  0.1610287   0.23798335  0.31320467
   0.16458579 -0.35511353 -0.00745165 -0.08894278]]"
2541,Pandas怎样处理字符串？," 前面我们已经使用了字符串的处理函数：df[""bWendu""].str.replace(""℃"", """").astype('int32')Pandas的字符串处理：1. 使用方法：先获取Series的str属性，然后在属性上调用函数；2. 只能在字符串列上使用，不能数字列上使用；3. Dataframe上没有str属性和处理方法4. Series.str并不是Python原生字符串，而是自己的一套方法，不过大部分和原生str很相似；Series.str字符串方法列表参考文档:https://pandas.pydata.org/pandas-docs/stable/reference/series.html#string-handling本节演示内容：1. 获取Series的str属性，然后使用各种字符串处理函数2. 使用str的startswith、contains等bool类Series可以做条件查询3. 需要多次str处理的链式操作4. 使用正则表达式的处理0、读取北京2018年天气数据import pandas as pdfpath = ""./datas/beijing_tianqi/beijing_tianqi_2018.csv""df = pd.read_csv(fpath)df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel02018-01-013℃-6℃晴~多云东北风1-2级59良212018-01-022℃-5℃阴~多云东北风1-2级49优122018-01-032℃-5℃多云北风1-2级28优132018-01-040℃-8℃阴东北风1-2级28优142018-01-053℃-6℃多云~晴西北风1-2级50优1df.dtypesymd          objectbWendu       objectyWendu       objecttianqi       objectfengxiang    objectfengli       objectaqi           int64aqiInfo      objectaqiLevel      int64dtype: object1、获取Series的str属性，使用各种字符串处理函数df[""bWendu""].str<pandas.core.strings.StringMethods at 0x1af21871808># 字符串替换函数df[""bWendu""].str.replace(""℃"", """")0       31       22       23       04       3       ..360    -5361    -3362    -3363    -2364    -2Name: bWendu, Length: 365, dtype: object# 判断是不是数字df[""bWendu""].str.isnumeric()0      False1      False2      False3      False4      False       ...  360    False361    False362    False363    False364    FalseName: bWendu, Length: 365, dtype: booldf[""aqi""].str.len()---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)<ipython-input-8-12cdcbdb6f81> in <module>----> 1 df[""aqi""].str.len()d:\appdata\python37\lib\site-packages\pandas\core\generic.py in __getattr__(self, name)   5173             or name in self._accessors   5174         ):-> 5175             return object.__getattribute__(self, name)   5176         else:   5177             if self._info_axis._can_hold_identifiers_and_holds_name(name):d:\appdata\python37\lib\site-packages\pandas\core\accessor.py in __get__(self, obj, cls)    173             # we're accessing the attribute of the class, i.e., Dataset.geo    174             return self._accessor--> 175         accessor_obj = self._accessor(obj)    176         # Replace the property with the accessor object. Inspired by:    177         # http://www.pydanny.com/cached-property.htmld:\appdata\python37\lib\site-packages\pandas\core\strings.py in __init__(self, data)   1915    1916     def __init__(self, data):-> 1917         self._inferred_dtype = self._validate(data)   1918         self._is_categorical = is_categorical_dtype(data)   1919 d:\appdata\python37\lib\site-packages\pandas\core\strings.py in _validate(data)   1965    1966         if inferred_dtype not in allowed_types:-> 1967             raise AttributeError(""Can only use .str accessor with string "" ""values!"")   1968         return inferred_dtype   1969 AttributeError: Can only use .str accessor with string values!2、使用str的startswith、contains等得到bool的Series可以做条件查询condition = df[""ymd""].str.startswith(""2018-03"")condition0      False1      False2      False3      False4      False       ...  360    False361    False362    False363    False364    FalseName: ymd, Length: 365, dtype: booldf[condition].head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel592018-03-018℃-3℃多云西南风1-2级46优1602018-03-029℃-1℃晴~多云北风1-2级95良2612018-03-0313℃3℃多云~阴北风1-2级214重度污染5622018-03-047℃-2℃阴~多云东南风1-2级144轻度污染3632018-03-058℃-3℃晴南风1-2级94良23、需要多次str处理的链式操作怎样提取201803这样的数字月份？1、先将日期2018-03-31替换成20180331的形式2、提取月份字符串201803df[""ymd""].str.replace(""-"", """")0      201801011      201801022      201801033      201801044      20180105         ...   360    20181227361    20181228362    20181229363    20181230364    20181231Name: ymd, Length: 365, dtype: object# 每次调用函数，都返回一个新Seriesdf[""ymd""].str.replace(""-"", """").slice(0, 6)---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)<ipython-input-13-ae278fb12255> in <module>      1 # 每次调用函数，都返回一个新Series----> 2 df[""ymd""].str.replace(""-"", """").slice(0, 6)d:\appdata\python37\lib\site-packages\pandas\core\generic.py in __getattr__(self, name)   5177             if self._info_axis._can_hold_identifiers_and_holds_name(name):   5178                 return self[name]-> 5179             return object.__getattribute__(self, name)   5180    5181     def __setattr__(self, name, value):AttributeError: 'Series' object has no attribute 'slice'df[""ymd""].str.replace(""-"", """").str.slice(0, 6)0      2018011      2018012      2018013      2018014      201801        ...  360    201812361    201812362    201812363    201812364    201812Name: ymd, Length: 365, dtype: object# slice就是切片语法，可以直接用df[""ymd""].str.replace(""-"", """").str[0:6]0      2018011      2018012      2018013      2018014      201801        ...  360    201812361    201812362    201812363    201812364    201812Name: ymd, Length: 365, dtype: object4. 使用正则表达式的处理# 添加新列def get_nianyueri(x):    year,month,day = x[""ymd""].split(""-"")    return f""{year}年{month}月{day}日""df[""中文日期""] = df.apply(get_nianyueri, axis=1)df[""中文日期""]0      2018年01月01日1      2018年01月02日2      2018年01月03日3      2018年01月04日4      2018年01月05日          ...     360    2018年12月27日361    2018年12月28日362    2018年12月29日363    2018年12月30日364    2018年12月31日Name: 中文日期, Length: 365, dtype: object问题：怎样将“2018年12月31日”中的年、月、日三个中文字符去除？# 方法1：链式replacedf[""中文日期""].str.replace(""年"", """").str.replace(""月"","""").str.replace(""日"", """")0      201801011      201801022      201801033      201801044      20180105         ...   360    20181227361    20181228362    20181229363    20181230364    20181231Name: 中文日期, Length: 365, dtype: objectSeries.str默认就开启了正则表达式模式# 方法2：正则表达式替换df[""中文日期""].str.replace(""[年月日]"", """")0      201801011      201801022      201801033      201801044      20180105         ...   360    20181227361    20181228362    20181229363    20181230364    20181231Name: 中文日期, Length: 365, dtype: object","['pandas', '怎样', '处理', '字符串', '前面', '我们', '已经', '使用', '字符串', '处理函数', 'df', 'bwendu', 'str', 'replace', 'astype', 'int32', 'pandas', '字符串', '处理', '使用', '方法', '获取', 'series', 'str', '属性', '然后', '属性', '调用函数', '只能', '字符串', '使用', '不能', '数字', '使用', 'dataframe', '没有', 'str', '属性', '处理', '方法', 'series', 'str', '不是', 'python', '原生', '字符串', '而是', '自己', '一套', '方法', '不过', '大部分', '原生', 'str', '相似', 'series', 'str', '字符串', '方法', '列表', '参考', '文档', 'https', 'pandas', 'pydata', 'org', 'pandas', 'docs', 'stable', 'reference', 'series', 'html', 'string', 'handling', '本节', '演示', '内容', '获取', 'series', 'str', '属性', '然后', '使用', '各种', '字符串', '处理函数', '使用', 'str', 'startswith', 'contains', 'bool', 'series', '可以', '条件', '查询', '需要', '多次', 'str', '处理', '链式', '操作', '使用', '正则表达式', '处理', '读取', '北京', '2018', '天气', '数据', 'import', 'pandas', 'as', 'pdfpath', 'datas', 'beijing', 'tianqi', 'beijing', 'tianqi', '2018', 'csv', 'df', 'pd', 'read', 'csv', 'fpath', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel02018', '01', '013', '多云', '东北风', '59', '212018', '01', '022', '多云', '东北风', '49', '122018', '01', '032', '多云', '北风', '28', '132018', '01', '040', '东北风', '28', '142018', '01', '053', '多云', '西北风', '50', '1df', 'dtypesymd', 'objectbwendu', 'objectywendu', 'objecttianqi', 'objectfengxiang', 'objectfengli', 'objectaqi', 'int64aqiinfo', 'objectaqilevel', 'int64dtype', 'object1', '获取', 'series', 'str', '属性', '使用', '各种', '字符串', '处理函数', 'df', 'bwendu', 'str', 'pandas', 'core', 'strings', 'stringmethods', 'at', '0x1af21871808', '字符串', '替换', '函数', 'df', 'bwendu', 'str', 'replace', '31', '22', '23', '04', '..', '360', '5361', '3362', '3363', '2364', '2name', 'bwendu', 'length', '365', 'dtype', 'object', '判断', '是不是', '数字', 'df', 'bwendu', 'str', 'isnumeric', 'false1', 'false2', 'false3', 'false4', 'false', '...', '360', 'false361', 'false362', 'false363', 'false364', 'falsename', 'bwendu', 'length', '365', 'dtype', 'booldf', 'aqi', 'str', 'len', '---------------------------------------------------------------------------', 'attributeerror', 'traceback', 'most', 'recent', 'call', 'last', 'ipython', 'input', '12cdcbdb6f81', 'in', 'module', '----', 'df', 'aqi', 'str', 'len', 'appdata', 'python37', 'lib', 'site', 'packages', 'pandas', 'core', 'generic', 'py', 'in', '__', 'getattr', '__', 'self', 'name', '5173', 'or', 'name', 'in', 'self', '._', 'accessors', '5174', '5175', 'return', 'object', '.__', 'getattribute', '__', 'self', 'name', '5176', 'else', '5177', 'if', 'self', '._', 'info', 'axis', '._', 'can', 'hold', 'identifiers', 'and', 'holds', 'name', 'name', 'appdata', 'python37', 'lib', 'site', 'packages', 'pandas', 'core', 'accessor', 'py', 'in', '__', 'get', '__', 'self', 'obj', 'cls', '173', 'we', 're', 'accessing', 'the', 'attribute', 'of', 'the', 'class', 'dataset', 'geo', '174', 'return', 'self', '._', 'accessor', '--', '175', 'accessor', 'obj', 'self', '._', 'accessor', 'obj', '176', 'replace', 'the', 'property', 'with', 'the', 'accessor', 'object', 'inspired', 'by', '177', 'http', 'www', 'pydanny', 'com', 'cached', 'property', 'htmld', 'appdata', 'python37', 'lib', 'site', 'packages', 'pandas', 'core', 'strings', 'py', 'in', '__', 'init', '__', 'self', 'data', '1915', '1916', 'def', '__', 'init', '__', 'self', 'data', '1917', 'self', '._', 'inferred', 'dtype', 'self', '._', 'validate', 'data', '1918', 'self', '._', 'is', 'categorical', 'is', 'categorical', 'dtype', 'data', '1919', 'appdata', 'python37', 'lib', 'site', 'packages', 'pandas', 'core', 'strings', 'py', 'in', 'validate', 'data', '1965', '1966', 'if', 'inferred', 'dtype', 'not', 'in', 'allowed', 'types', '1967', 'raise', 'attributeerror', 'can', 'only', 'use', 'str', 'accessor', 'with', 'string', 'values', '1968', 'return', 'inferred', 'dtype', '1969', 'attributeerror', 'can', 'only', 'use', 'str', 'accessor', 'with', 'string', 'values', '使用', 'str', 'startswith', 'contains', '得到', 'bool', 'series', '可以', '条件', '查询', 'condition', 'df', 'ymd', 'str', 'startswith', '2018', '03', 'condition0', 'false1', 'false2', 'false3', 'false4', 'false', '...', '360', 'false361', 'false362', 'false363', 'false364', 'falsename', 'ymd', 'length', '365', 'dtype', 'booldf', 'condition', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel592018', '03', '018', '多云', '西南风', '46', '1602018', '03', '029', '多云', '北风', '95', '2612018', '03', '0313', '多云', '北风', '214', '重度', '污染', '5622018', '03', '047', '多云', '东南风', '144', '轻度', '污染', '3632018', '03', '058', '南风', '94', '23', '需要', '多次', 'str', '处理', '链式', '操作', '怎样', '提取', '201803', '这样', '数字', '月份', '日期', '2018', '03', '31', '替换成', '20180331', '形式', '提取', '月份', '字符串', '201803df', 'ymd', 'str', 'replace', '201801011', '201801022', '201801033', '201801044', '20180105', '...', '360', '20181227361', '20181228362', '20181229363', '20181230364', '20181231name', 'ymd', 'length', '365', 'dtype', 'object', '每次', '调用函数', '返回', '一个', 'seriesdf', 'ymd', 'str', 'replace', 'slice', '---------------------------------------------------------------------------', 'attributeerror', 'traceback', 'most', 'recent', 'call', 'last', 'ipython', 'input', '13', 'ae278fb12255', 'in', 'module', '每次', '调用函数', '返回', '一个', 'series', '----', 'df', 'ymd', 'str', 'replace', 'slice', 'appdata', 'python37', 'lib', 'site', 'packages', 'pandas', 'core', 'generic', 'py', 'in', '__', 'getattr', '__', 'self', 'name', '5177', 'if', 'self', '._', 'info', 'axis', '._', 'can', 'hold', 'identifiers', 'and', 'holds', 'name', 'name', '5178', 'return', 'self', 'name', '5179', 'return', 'object', '.__', 'getattribute', '__', 'self', 'name', '5180', '5181', 'def', '__', 'setattr', '__', 'self', 'name', 'value', 'attributeerror', 'series', 'object', 'has', 'no', 'attribute', 'slice', 'df', 'ymd', 'str', 'replace', 'str', 'slice', '2018011', '2018012', '2018013', '2018014', '201801', '...', '360', '201812361', '201812362', '201812363', '201812364', '201812name', 'ymd', 'length', '365', 'dtype', 'object', 'slice', '就是', '切片', '语法', '可以', '直接', 'df', 'ymd', 'str', 'replace', 'str', '2018011', '2018012', '2018013', '2018014', '201801', '...', '360', '201812361', '201812362', '201812363', '201812364', '201812name', 'ymd', 'length', '365', 'dtype', 'object4', '使用', '正则表达式', '处理', '添加', '新列', 'def', 'get', 'nianyueri', 'year', 'month', 'day', 'ymd', 'split', 'return', 'year', 'month', 'day', 'df', '中文', '日期', 'df', 'apply', 'get', 'nianyueri', 'axis', 'df', '中文', '日期', '2018', '01', '01', '2018', '01', '02', '2018', '01', '03', '2018', '01', '04', '2018', '01', '05', '...', '360', '2018', '12', '27', '361', '2018', '12', '28', '362', '2018', '12', '29', '363', '2018', '12', '30', '364', '2018', '12', '31', 'name', '中文', '日期', 'length', '365', 'dtype', 'object', '问题', '怎样', '2018', '12', '31', '三个', '中文', '字符', '去除', '方法', '链式', 'replacedf', '中文', '日期', 'str', 'replace', 'str', 'replace', 'str', 'replace', '201801011', '201801022', '201801033', '201801044', '20180105', '...', '360', '20181227361', '20181228362', '20181229363', '20181230364', '20181231name', '中文', '日期', 'length', '365', 'dtype', 'objectseries', 'str', '默认', '开启', '正则表达式', '模式', '方法', '正则表达式', '替换', 'df', '中文', '日期', 'str', 'replace', '年月日', '201801011', '201801022', '201801033', '201801044', '20180105', '...', '360', '20181227361', '20181228362', '20181229363', '20181230364', '20181231name', '中文', '日期', 'length', '365', 'dtype', 'object']","[[-0.21028291 -0.09555635  0.28115176  0.05934626  0.31190573 -0.43456576
  -0.07287557  0.48798177 -0.12309456 -0.21600812 -0.00668355 -0.43380441
  -0.17021645  0.52286792  0.18952859 -0.12963689 -0.11292602  0.00179103
  -0.03531739 -0.64488422 -0.13901968  0.28691828 -0.05929872 -0.31708741
   0.03847955 -0.43747768 -0.31337846 -0.02042284 -0.30211339 -0.0839006
   0.12382677 -0.04838738  0.07946351 -0.14937373 -0.22977963  0.31026714
  -0.28994157 -0.34372282  0.07798887 -0.76607811 -0.13699072 -0.66706958
  -0.12571218  0.06161902 -0.1014544  -0.31321088 -0.15180385  0.25281073
  -0.23148373  0.58619327  0.1219143  -0.27462187 -0.18411961 -0.10382368
  -0.10514404  0.39229937  0.07699812 -0.1475847   0.1214849  -0.20751211
   0.16451381  0.22876749  0.02624315  0.10991836 -0.42007497  0.08709014
   0.07875575 -0.08069489 -0.40036374  0.44044938  0.03545802 -0.1174947
   0.38648763 -0.34005571  0.59358608  0.35807784  0.03153364 -0.15671578
  -0.41439515 -0.00515766  0.09226737  0.10605063 -0.20181446  0.43201755
  -0.29320888  0.20022508 -0.28141375  0.48714538  0.51907933  0.16165161
   0.19052968  0.11707578  0.38237109  0.19322442  0.23860776  0.30694809
   0.20511109 -0.37065912 -0.11747485 -0.14444507]]"
2546,Pandas的axis参数怎么理解？," axis参数非常的让人困惑难以理解，本视频我会用形象化的方式讲解一下这个参数，核心要诀就是axis那个轴会消失！axis=0或者""index""：如果是单行操作，就指的是某一行如果是聚合操作，指的是跨行cross rowsaxis=1或者""columns""：如果是单列操作，就指的是某一列如果是聚合操作，指的是跨列cross columns按哪个axis，就是这个axis要动起来(类似被for遍历)，其它的axis保持不动import pandas as pdimport numpy as npdf = pd.DataFrame(    np.arange(12).reshape(3,4),    columns=['A', 'B', 'C', 'D'])dfABCD001231456728910111、单列drop，就是删除某一列# 代表的就是删除某列df.drop(""A"", axis=1)BCD012315672910112、单行drop，就是删除某一行dfABCD00123145672891011# 代表的就是删除某行df.drop(1, axis=0)ABCD0012328910113、按axis=0/index执行mean聚合操作反直觉：输出的不是每行的结果，而是每列的结果dfABCD00123145672891011# axis=0 or axis=indexdf.mean(axis=0)A    4.0B    5.0C    6.0D    7.0dtype: float64指定了按哪个axis，就是这个axis要动起来(类似被for遍历)，其它的axis保持不动4、按axis=1/columns执行mean聚合操作反直觉：输出的不是每行的结果，而是每列的结果dfABCD00123145672891011# axis=1 or axis=columnsdf.mean(axis=1)0    1.51    5.52    9.5dtype: float64指定了按哪个axis，就是这个axis要动起来(类似被for遍历)，其它的axis保持不动5、再次举例，加深理解def get_sum_value(x):    return x[""A""] + x[""B""] + x[""C""] + x[""D""]df[""sum_value""] = df.apply(get_sum_value, axis=1)dfABCDsum_value0012361456722289101138指定了按哪个axis，就是这个axis要动起来(类似被for遍历)，其它的axis保持不动本文地址：http://www.crazyant.net/2546.html转载请注明来源","['pandas', 'axis', '参数', '怎么', '理解', 'axis', '参数', '非常', '困惑', '难以', '理解', '视频', '我会', '形象化', '方式', '讲解', '一下', '这个', '参数', '核心', '要诀', '就是', 'axis', '那个', '轴会', '消失', 'axis', '或者', 'index', '如果', '单行', '操作', '一行', '如果', '聚合', '操作', '跨行', 'cross', 'rowsaxis', '或者', 'columns', '如果', '单列', '操作', '一列', '如果', '聚合', '操作', '跨列', 'cross', 'columns', '哪个', 'axis', '就是', '这个', 'axis', '要动', '起来', '类似', 'for', '遍历', '其它', 'axis', '保持', '不动', 'import', 'pandas', 'as', 'pdimport', 'numpy', 'as', 'npdf', 'pd', 'dataframe', 'np', 'arange', '12', 'reshape', 'columns', 'dfabcd001231456728910111', '单列', 'drop', '就是', '删除', '一列', '代表', '就是', '删除', '某列', 'df', 'drop', 'axis', 'bcd012315672910112', '单行', 'drop', '就是', '删除', '一行', 'dfabcd00123145672891011', '代表', '就是', '删除', '某行', 'df', 'drop', 'axis', 'abcd0012328910113', 'axis', 'index', '执行', 'mean', '聚合', '操作', '直觉', '输出', '不是', '每行', '结果', '而是', '每列', '结果', 'dfabcd00123145672891011', 'axis', 'or', 'axis', 'indexdf', 'mean', 'axis', '4.0', '5.0', '6.0', '7.0', 'dtype', 'float64', '指定', '哪个', 'axis', '就是', '这个', 'axis', '要动', '起来', '类似', 'for', '遍历', '其它', 'axis', '保持', '不动', 'axis', 'columns', '执行', 'mean', '聚合', '操作', '直觉', '输出', '不是', '每行', '结果', '而是', '每列', '结果', 'dfabcd00123145672891011', 'axis', 'or', 'axis', 'columnsdf', 'mean', 'axis', '1.51', '5.52', '9.5', 'dtype', 'float64', '指定', '哪个', 'axis', '就是', '这个', 'axis', '要动', '起来', '类似', 'for', '遍历', '其它', 'axis', '保持', '不动', '再次', '举例', '加深', '理解', 'def', 'get', 'sum', 'value', 'return', 'df', 'sum', 'value', 'df', 'apply', 'get', 'sum', 'value', 'axis', 'dfabcdsum', 'value0012361456722289101138', '指定', '哪个', 'axis', '就是', '这个', 'axis', '要动', '起来', '类似', 'for', '遍历', '其它', 'axis', '保持', '本文', '地址', 'http', 'www', 'crazyant', 'net', '2546', 'html', '转载', '注明', '来源']","[[-0.23896602 -0.12704057  0.24894242  0.15465046  0.28652567 -0.38071466
  -0.14835816  0.489612   -0.03873683 -0.08349901 -0.04783899 -0.37018607
  -0.1706617   0.58415644  0.16258124 -0.11418987 -0.14828847 -0.00196349
  -0.07008636 -0.51193834 -0.01796497  0.25700724 -0.03784727 -0.17026354
   0.07925785 -0.51659878 -0.31076515  0.06535545 -0.238009   -0.07149204
   0.20057004  0.02267994  0.00796896 -0.14206875 -0.15202365  0.33046077
  -0.18469676 -0.26240523  0.09509395 -0.75732372 -0.15793605 -0.61697334
  -0.06466403 -0.03405993 -0.14315809 -0.22504547 -0.24976378  0.41342925
  -0.16922184  0.4509809   0.16742883 -0.27679061 -0.1134664  -0.20244795
   0.0087119   0.40385637  0.19704642 -0.0920119   0.11151942 -0.13368335
   0.08606753  0.25739475  0.00999329  0.09600766 -0.38953936  0.02775216
   0.04487194 -0.02220524 -0.28493036  0.44555681  0.1171408  -0.20512319
   0.40232213 -0.33320976  0.58451012  0.24538163  0.1782841  -0.16364788
  -0.30152728 -0.1622421  -0.03313201  0.03203035 -0.11075084  0.37874098
  -0.36268251  0.20193316 -0.29448458  0.45754926  0.50695011  0.16067417
   0.26191217  0.12242253  0.37035326  0.17955971  0.20355848  0.38040809
   0.11272944 -0.31664325 -0.01903788 -0.1160225 ]]"
2561,一个数据科学家的修炼路径,来自一个视频：https://www.youtube.com/watch?v=xC-c7E5PK0Y数据科学家的需求层次，从底层往上层依次需要：COLLECT，数据收集MOVE/STORE，数据传输和存储EXPLORE/TRANSOFRM，数据探索、清洗、异常检测过滤等AGGREGATE/LABEL，分析、指标、聚合、特征工程、输出训练数据LEARN/OPTIMIZE，AB测试、试验、简单的机器学习算法AI/DEEP LEARNING，人工智能，深度学习数据科学家的核心要义：不需要复杂的算法，只需要你用任何手段解决公司的问题一切都是为了解决问题,"['一个', '数据', '科学家', '修炼', '路径', '来自', '一个', '视频', 'https', 'www', 'youtube', 'com', 'watch', 'xc', 'c7e5pk0y', '数据', '科学家', '需求', '层次', '底层', '上层', '依次', '需要', 'collect', '数据', '收集', 'move', 'store', '数据传输', '存储', 'explore', 'transofrm', '数据', '探索', '清洗', '异常', '检测', '过滤', 'aggregate', 'label', '分析', '指标', '聚合', '特征', '工程', '输出', '训练', '数据', 'learn', 'optimize', 'ab', '测试', '试验', '简单', '机器', '学习', '算法', 'ai', 'deep', 'learning', '人工智能', '深度', '学习', '数据', '科学家', '核心', '要义', '需要', '复杂', '算法', '需要', '任何', '手段', '解决', '公司', '问题', '一切都是', '为了', '解决问题']","[[-2.38312732e-01 -1.32995548e-01  2.06728881e-01  1.89161322e-01
   2.56926990e-01 -3.28462221e-01 -1.83032710e-01  4.65244859e-01
   7.48039454e-03 -2.17403069e-03 -7.41161506e-02 -3.09933732e-01
  -1.73456384e-01  5.71170412e-01  1.20861507e-01 -1.03674723e-01
  -1.46727844e-01 -4.79988758e-04 -8.70306845e-02 -3.94118226e-01
   4.73679613e-02  2.25886400e-01 -1.16962588e-04 -7.26880888e-02
   1.08601371e-01 -5.14793051e-01 -2.72147896e-01  9.73361086e-02
  -1.79394033e-01 -4.90950241e-02  2.44487990e-01  5.99145846e-02
  -1.65105287e-02 -1.31872694e-01 -9.72192167e-02  3.20675412e-01
  -1.05761885e-01 -1.89191932e-01  1.06641534e-01 -6.99263473e-01
  -1.48425466e-01 -5.35705058e-01 -2.27729065e-02 -8.24756598e-02
  -1.56719092e-01 -1.32175086e-01 -2.75521798e-01  4.65701202e-01
  -1.26373867e-01  3.39145103e-01  1.84138251e-01 -2.56573180e-01
  -7.36912144e-02 -2.37891974e-01  7.43442736e-02  3.73276244e-01
   2.53586301e-01 -5.03922790e-02  8.89527958e-02 -6.90741414e-02
   3.98779261e-02  2.79635127e-01  1.71646666e-02  8.27439336e-02
  -3.52255153e-01 -1.68585540e-02  2.03907165e-02  3.39907142e-04
  -1.99617588e-01  4.14160362e-01  1.32359198e-01 -2.45454093e-01
   3.84467649e-01 -3.07751767e-01  5.46110273e-01  1.46341088e-01
   2.33400725e-01 -1.41506036e-01 -2.20193925e-01 -2.32769705e-01
  -1.08243174e-01 -1.39583980e-02 -5.52244166e-02  3.12079274e-01
  -3.71123856e-01  1.84163961e-01 -2.71863984e-01  3.94656724e-01
   4.42966961e-01  1.21457858e-01  2.90948277e-01  1.16955544e-01
   3.26701300e-01  1.66218272e-01  1.74736764e-01  3.79650724e-01
   7.75681756e-02 -2.61310072e-01  2.17167173e-02 -6.90478430e-02]]"
2564,机器学习常用数据集大全,"UCI Machine Learning Adult DatasetBusiness Problem: Classification (a person earns more than 50k or less) Predictor Variable: Label ; Predictors: country, age, education, occupation, marital status etc.文章：https://towardsdatascience.com/pandas-index-explained-b131beaf6f7b数据集地址：https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.dataKaggle - Avazu：Click-Through Rate PredictionPredict whether a mobile ad will be clickedIn online advertising, click-through rate (CTR) is a very important metric for evaluating ad performance. As a result, click prediction systems are essential and widely used for sponsored search and real-time bidding.Kaggle地址：https://www.kaggle.com/c/avazu-ctr-prediction/overviewUCI - Adult Data Set $50kPredict whether income exceeds $50K/yr based on census data. Also known as ""Census Income"" datasethttps://archive.ics.uci.edu/ml/datasets/AdultUCI - Iris Data SetThis is perhaps the best known database to be found in the pattern recognition literature. Fisher's paper is a classic in the field and is referenced frequently to this dayhttps://archive.ics.uci.edu/ml/datasets/IrisKaggle Titanic: Machine Learning from Disasteruse machine learning to create a model that predicts which passengers survived the Titanic shipwreck.https://www.kaggle.com/c/titanic","['机器', '学习', '常用', '数据', '大全', 'uci', 'machine', 'learning', 'adult', 'datasetbusiness', 'problem', 'classification', 'person', 'earns', 'more', 'than', '50k', 'or', 'less', 'predictor', 'variable', 'label', 'predictors', 'country', 'age', 'education', 'occupation', 'marital', 'status', 'etc', '文章', 'https', 'towardsdatascience', 'com', 'pandas', 'index', 'explained', 'b131beaf6f7b', '数据', '地址', 'https', 'archive', 'ics', 'uci', 'edu', 'ml', 'machine', 'learning', 'databases', 'adult', 'adult', 'datakaggle', 'avazu', 'click', 'through', 'rate', 'predictionpredict', 'whether', 'mobile', 'ad', 'will', 'be', 'clickedin', 'online', 'advertising', 'click', 'through', 'rate', 'ctr', 'is', 'very', 'important', 'metric', 'for', 'evaluating', 'ad', 'performance', 'as', 'result', 'click', 'prediction', 'systems', 'are', 'essential', 'and', 'widely', 'used', 'for', 'sponsored', 'search', 'and', 'real', 'time', 'bidding', 'kaggle', '地址', 'https', 'www', 'kaggle', 'com', 'avazu', 'ctr', 'prediction', 'overviewuci', 'adult', 'data', 'set', '50kpredict', 'whether', 'income', 'exceeds', '50k', 'yr', 'based', 'on', 'census', 'data', 'also', 'known', 'as', 'census', 'income', 'datasethttps', 'archive', 'ics', 'uci', 'edu', 'ml', 'datasets', 'adultuci', 'iris', 'data', 'setthis', 'is', 'perhaps', 'the', 'best', 'known', 'database', 'to', 'be', 'found', 'in', 'the', 'pattern', 'recognition', 'literature', 'fisher', 'paper', 'is', 'classic', 'in', 'the', 'field', 'and', 'is', 'referenced', 'frequently', 'to', 'this', 'dayhttps', 'archive', 'ics', 'uci', 'edu', 'ml', 'datasets', 'iriskaggle', 'titanic', 'machine', 'learning', 'from', 'disasteruse', 'machine', 'learning', 'to', 'create', 'model', 'that', 'predicts', 'which', 'passengers', 'survived', 'the', 'titanic', 'shipwreck', 'https', 'www', 'kaggle', 'com', 'titanic']","[[-0.20447158 -0.08150667  0.29005692  0.17492926  0.19451009 -0.39310323
  -0.03589133  0.43202132 -0.12252148 -0.20628414 -0.03982196 -0.42093677
  -0.0757395   0.42501562  0.12577307 -0.11634219 -0.08741176 -0.01123741
   0.01576871 -0.49206006 -0.10147968  0.27817781 -0.1307661  -0.32665215
  -0.03861232 -0.33433352 -0.33575698  0.00397533 -0.23645175 -0.10079843
   0.06577899  0.05892149  0.02879322 -0.08326254 -0.24793137  0.32542839
  -0.2476258  -0.31649222  0.01148647 -0.59148367 -0.03701274 -0.54294501
  -0.08746826  0.05131535 -0.06609663 -0.32616985 -0.25408675  0.23348488
  -0.0923566   0.46682554  0.02351805 -0.27216814 -0.04699675 -0.14672483
  -0.12112139  0.36695295  0.03998997 -0.11423781  0.13447594 -0.1552657
   0.17303642  0.13165911 -0.0118508   0.07251873 -0.30792562  0.11475579
   0.01920504  0.00923923 -0.28696228  0.39790362  0.01876004 -0.07217629
   0.35850032 -0.3018875   0.49942863  0.38496762  0.14587119 -0.21929166
  -0.28851784 -0.07663356  0.04297214  0.11136795 -0.17742003  0.42900144
  -0.28737121  0.18087085 -0.253266    0.50212194  0.51973423  0.21028704
   0.10419704  0.0910437   0.31305623  0.15394677  0.19445354  0.36914217
   0.11178778 -0.27118078  0.10452512 -0.13599395]]"
2574,Pandas的Index索引有什么用途？,"把数据存储于普通的column列也能用于数据查询，那使用index有什么好处？index的用途总结：1. 更方便的数据查询；2. 使用index可以获得性能提升；3. 自动的数据对齐功能；4. 更多更强大的数据结构支持；import pandas as pddf = pd.read_csv(""./datas/ml-latest-small/ratings.csv"")df.head()userIdmovieIdratingtimestamp0114.09649827031134.09649812472164.096498222431475.096498381541505.0964982931df.count()userId       100836movieId      100836rating       100836timestamp    100836dtype: int641、使用index查询数据# drop==False，让索引列还保持在columndf.set_index(""userId"", inplace=True, drop=False)df.head()userIdmovieIdratingtimestampuserId1114.09649827031134.09649812471164.096498222411475.096498381511505.0964982931df.indexInt64Index([  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,            ...            610, 610, 610, 610, 610, 610, 610, 610, 610, 610],           dtype='int64', name='userId', length=100836)# 使用index的查询方法df.loc[500].head(5)userIdmovieIdratingtimestampuserId50050014.01005527755500500111.01005528017500500391.010055279265005001011.010055279805005001044.01005528065# 使用column的condition查询方法df.loc[df[""userId""] == 500].head()userIdmovieIdratingtimestampuserId50050014.01005527755500500111.01005528017500500391.010055279265005001011.010055279805005001044.010055280652. 使用index会提升查询性能如果index是唯一的，Pandas会使用哈希表优化，查询性能为O(1);如果index不是唯一的，但是有序，Pandas会使用二分查找算法，查询性能为O(logN);如果index是完全随机的，那么每次查询都要扫描全表，查询性能为O(N);实验1：完全随机的顺序查询# 将数据随机打散from sklearn.utils import shuffledf_shuffle = shuffle(df)df_shuffle.head()userIdmovieIdratingtimestampuserId16016023401.098538331412912911363.51167375403167167441914.511547189155365362763.0832839990676759522.01501274082# 索引是否是递增的df_shuffle.index.is_monotonic_increasingFalsedf_shuffle.index.is_uniqueFalse# 计时，查询id==500数据性能%timeit df_shuffle.loc[500]376 µs ± 52.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)实验2：将index排序后的查询df_sorted = df_shuffle.sort_index()df_sorted.head()userIdmovieIdratingtimestampuserId1129854.09649830341126172.09649825881136394.09649822711164.0964982224117334.0964982400# 索引是否是递增的df_sorted.index.is_monotonic_increasingTruedf_sorted.index.is_uniqueFalse%timeit df_sorted.loc[500]203 µs ± 20.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)3. 使用index能自动对齐数据包括series和dataframes1 = pd.Series([1,2,3], index=list(""abc""))s1a    1b    2c    3dtype: int64s2 = pd.Series([2,3,4], index=list(""bcd""))s2b    2c    3d    4dtype: int64s1+s2a    NaNb    4.0c    6.0d    NaNdtype: float644. 使用index更多更强大的数据结构支持很多强大的索引数据结构 * CategoricalIndex，基于分类数据的Index，提升性能；* MultiIndex，多维索引，用于groupby多维聚合后结果等；* DatetimeIndex，时间类型索引，强大的日期和时间的方法支持；","['pandas', 'index', '索引', '什么', '用途', '数据', '存储', '普通', 'column', '用于', '数据', '查询', '使用', 'index', '什么', '好处', 'index', '用途', '总结', '方便', '数据', '查询', '使用', 'index', '可以', '获得', '性能', '提升', '自动', '数据', '对齐', '功能', '强大', '数据结构', '支持', 'import', 'pandas', 'as', 'pddf', 'pd', 'read', 'csv', 'datas', 'ml', 'latest', 'small', 'ratings', 'csv', 'df', 'head', 'useridmovieidratingtimestamp0114.09649827031134', '09649812472164.096498222431475', '096498381541505.0964982931', 'df', 'count', 'userid', '100836movieid', '100836rating', '100836timestamp', '100836dtype', 'int641', '使用', 'index', '查询', '数据', 'drop', 'false', '索引', '保持', 'columndf', 'set', 'index', 'userid', 'inplace', 'true', 'drop', 'false', 'df', 'head', 'useridmovieidratingtimestampuserid1114.09649827031134', '09649812471164.096498222411475', '096498381511505.0964982931', 'df', 'indexint64index', '...', '610', '610', '610', '610', '610', '610', '610', '610', '610', '610', 'dtype', 'int64', 'name', 'userid', 'length', '100836', '使用', 'index', '查询方法', 'df', 'loc', '500', 'head', 'useridmovieidratingtimestampuserid50050014.01005527755500500111', '01005528017500500391.010055279265005001011', '010055279805005001044.01005528065', '使用', 'column', 'condition', '查询方法', 'df', 'loc', 'df', 'userid', '500', 'head', 'useridmovieidratingtimestampuserid50050014.01005527755500500111', '01005528017500500391.010055279265005001011', '010055279805005001044.010055280652', '使用', 'index', '提升', '查询', '性能', '如果', 'index', '唯一', 'pandas', '使用', '哈希', '优化', '查询', '性能', '如果', 'index', '不是', '唯一', '但是', '有序', 'pandas', '使用', '二分', '查找', '算法', '查询', '性能', 'logn', '如果', 'index', '完全', '随机', '那么', '每次', '查询', '扫描', '全表', '查询', '性能', '实验', '完全', '随机', '顺序', '查询', '数据', '随机', '打散', 'from', 'sklearn', 'utils', 'import', 'shuffledf', 'shuffle', 'shuffle', 'df', 'df', 'shuffle', 'head', 'useridmovieidratingtimestampuserid16016023401.098538331412912911363', '51167375403167167441914.511547189155365362763', '0832839990676759522.01501274082', '索引', '是否是', '递增', 'df', 'shuffle', 'index', 'is', 'monotonic', 'increasingfalsedf', 'shuffle', 'index', 'is', 'uniquefalse', '计时', '查询', 'id', '500', '数据', '性能', 'timeit', 'df', 'shuffle', 'loc', '500', '376', '52.4', 'per', 'loop', 'mean', 'std', 'dev', 'of', 'runs', '1000', 'loops', 'each', '实验', 'index', '排序', '查询', 'df', 'sorted', 'df', 'shuffle', 'sort', 'index', 'df', 'sorted', 'head', 'useridmovieidratingtimestampuserid1129854.09649830341126172', '09649825881136394.09649822711164', '0964982224117334.0964982400', '索引', '是否是', '递增', 'df', 'sorted', 'index', 'is', 'monotonic', 'increasingtruedf', 'sorted', 'index', 'is', 'uniquefalse%', 'timeit', 'df', 'sorted', 'loc', '500', '203', '20.8', 'per', 'loop', 'mean', 'std', 'dev', 'of', 'runs', '1000', 'loops', 'each', '使用', 'index', '自动', '对齐', '数据', '包括', 'series', 'dataframes1', 'pd', 'series', 'index', 'list', 'abc', 's1a', '1b', '2c', '3dtype', 'int64s2', 'pd', 'series', 'index', 'list', 'bcd', 's2b', '2c', '3d', '4dtype', 'int64s1', 's2a', 'nanb', '4.0', '6.0', 'nandtype', 'float644', '使用', 'index', '强大', '数据结构', '支持', '很多', '强大', '索引', '数据结构', 'categoricalindex', '基于', '分类', '数据', 'index', '提升', '性能', 'multiindex', '多维', '索引', '用于', 'groupby', '多维', '聚合', '结果', 'datetimeindex', '时间', '类型', '索引', '强大', '日期', '时间', '方法', '支持']","[[-2.49076534e-01 -1.10970507e-01  2.53823091e-01  1.25066958e-01
   3.12155083e-01 -3.77009757e-01 -1.42557286e-01  4.86415890e-01
  -4.48027036e-02 -9.81745045e-02 -3.73265612e-02 -3.69301928e-01
  -1.63698874e-01  5.70376830e-01  1.71836721e-01 -1.09138448e-01
  -1.36924860e-01 -1.73188306e-02 -8.07477103e-02 -5.38433600e-01
  -2.93486433e-02  2.55917124e-01 -3.72127932e-02 -1.83694059e-01
   8.93651978e-02 -5.11238359e-01 -3.06855459e-01  5.18951899e-02
  -2.45524864e-01 -7.68145403e-02  1.95302416e-01 -3.54188743e-03
  -9.11419484e-05 -1.39015355e-01 -1.45854106e-01  3.19648647e-01
  -1.85127578e-01 -2.70085161e-01  9.80575616e-02 -7.70463282e-01
  -1.64281734e-01 -6.35484378e-01 -7.01280928e-02 -2.25392294e-02
  -1.49259605e-01 -2.24487032e-01 -2.15619281e-01  3.96965283e-01
  -2.13106129e-01  4.80920001e-01  1.72959767e-01 -2.64360927e-01
  -1.51438116e-01 -1.81606682e-01 -6.53003245e-03  3.86777396e-01
   1.87819230e-01 -8.91557221e-02  9.35060252e-02 -1.31616385e-01
   8.13116283e-02  2.55577528e-01  2.00983193e-02  8.69178724e-02
  -3.96893891e-01  2.52674440e-02  6.75345690e-02 -4.09448632e-02
  -3.05217798e-01  4.38333354e-01  1.23158463e-01 -1.99877046e-01
   3.90481192e-01 -3.27333301e-01  5.74087425e-01  2.47649984e-01
   1.39846377e-01 -1.48608852e-01 -3.33377299e-01 -1.29130752e-01
   1.70235306e-03  3.93002604e-02 -1.10919373e-01  3.80099531e-01
  -3.48923729e-01  2.15525192e-01 -2.88628322e-01  4.39955535e-01
   4.88462636e-01  1.52171539e-01  2.69258544e-01  1.17254577e-01
   3.83582822e-01  1.90921406e-01  2.11871102e-01  3.48402591e-01
   1.23944444e-01 -3.45678284e-01 -6.27211902e-02 -1.13914698e-01]]"
2583,Pandas实现数据的合并concat,"使用场景：批量合并相同格式的Excel、给DataFrame添加行、给DataFrame添加列一句话说明concat语法：使用某种合并方式(inner/outer)沿着某个轴向(axis=0/1)把多个Pandas对象(DataFrame/Series)合并成一个。concat语法：pandas.concat(objs, axis=0, join='outer', ignore_index=False)objs：一个列表，内容可以是DataFrame或者Series，可以混合axis：默认是0代表按行合并，如果等于1代表按列合并join：合并的时候索引的对齐方式，默认是outer join，也可以是inner joinignore_index：是否忽略掉原来的数据索引append语法：DataFrame.append(other, ignore_index=False)append只有按行合并，没有按列合并，相当于concat按行的简写形式* other：单个dataframe、series、dict，或者列表* ignore_index：是否忽略掉原来的数据索引参考文档：pandas.concat的api文档：https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.htmlpandas.concat的教程：https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.htmlpandas.append的api文档：https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.append.htmlimport pandas as pdimport warningswarnings.filterwarnings('ignore')一、使用pandas.concat合并数据df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],                    'B': ['B0', 'B1', 'B2', 'B3'],                    'C': ['C0', 'C1', 'C2', 'C3'],                    'D': ['D0', 'D1', 'D2', 'D3'],                    'E': ['E0', 'E1', 'E2', 'E3']                   })df1ABCDE0A0B0C0D0E01A1B1C1D1E12A2B2C2D2E23A3B3C3D3E3df2 = pd.DataFrame({ 'A': ['A4', 'A5', 'A6', 'A7'],                     'B': ['B4', 'B5', 'B6', 'B7'],                     'C': ['C4', 'C5', 'C6', 'C7'],                     'D': ['D4', 'D5', 'D6', 'D7'],                     'F': ['F4', 'F5', 'F6', 'F7']                   })df2ABCDF0A4B4C4D4F41A5B5C5D5F52A6B6C6D6F63A7B7C7D7F71、默认的concat，参数为axis=0、join=outer、ignore_index=Falsepd.concat([df1,df2])ABCDEF0A0B0C0D0E0NaN1A1B1C1D1E1NaN2A2B2C2D2E2NaN3A3B3C3D3E3NaN0A4B4C4D4NaNF41A5B5C5D5NaNF52A6B6C6D6NaNF63A7B7C7D7NaNF72、使用ignore_index=True可以忽略原来的索引pd.concat([df1,df2], ignore_index=True)ABCDEF0A0B0C0D0E0NaN1A1B1C1D1E1NaN2A2B2C2D2E2NaN3A3B3C3D3E3NaN4A4B4C4D4NaNF45A5B5C5D5NaNF56A6B6C6D6NaNF67A7B7C7D7NaNF73、使用join=inner过滤掉不匹配的列pd.concat([df1,df2], ignore_index=True, join=""inner"")ABCD0A0B0C0D01A1B1C1D12A2B2C2D23A3B3C3D34A4B4C4D45A5B5C5D56A6B6C6D67A7B7C7D74、使用axis=1相当于添加新列df1ABCDE0A0B0C0D0E01A1B1C1D1E12A2B2C2D2E23A3B3C3D3E3A：添加一列Seriess1 = pd.Series(list(range(4)), name=""F"")pd.concat([df1,s1], axis=1)ABCDEF0A0B0C0D0E001A1B1C1D1E112A2B2C2D2E223A3B3C3D3E33B：添加多列Seriess2 = df1.apply(lambda x:x[""A""]+""_GG"", axis=1)s20    A0_GG1    A1_GG2    A2_GG3    A3_GGdtype: objects2.name=""G""pd.concat([df1,s1,s2], axis=1)ABCDEFG0A0B0C0D0E00A0_GG1A1B1C1D1E11A1_GG2A2B2C2D2E22A2_GG3A3B3C3D3E33A3_GG# 列表可以只有Seriespd.concat([s1,s2], axis=1)FG00A0_GG11A1_GG22A2_GG33A3_GG# 列表是可以混合顺序的pd.concat([s1,df1,s2], axis=1)FABCDEG00A0B0C0D0E0A0_GG11A1B1C1D1E1A1_GG22A2B2C2D2E2A2_GG33A3B3C3D3E3A3_GG二、使用DataFrame.append按行合并数据df1 = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))df1AB012134df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))df2AB0561781、给1个dataframe添加另一个dataframedf1.append(df2)AB0121340561782、忽略原来的索引ignore_index=Truedf1.append(df2, ignore_index=True)AB0121342563783、可以一行一行的给DataFrame添加数据# 一个空的dfdf = pd.DataFrame(columns=['A'])dfAA：低性能版本for i in range(5):    # 注意这里每次都在复制    df = df.append({'A': i}, ignore_index=True)dfA0011223344B：性能好的版本# 第一个入参是一个列表，避免了多次复制pd.concat(    [pd.DataFrame([i], columns=['A']) for i in range(5)],    ignore_index=True)A0011223344","['pandas', '实现', '数据', '合并', 'concat', '使用', '场景', '批量', '合并', '相同', '格式', 'excel', 'dataframe', '添加', 'dataframe', '添加', '一句', '说明', 'concat', '语法', '使用', '某种', '合并', '方式', 'inner', 'outer', '沿着', '某个', '轴向', 'axis', '多个', 'pandas', '对象', 'dataframe', 'series', '合并', '一个', 'concat', '语法', 'pandas', 'concat', 'objs', 'axis', 'join', 'outer', 'ignore', 'index', 'false', 'objs', '一个', '列表', '内容', '可以', 'dataframe', '或者', 'series', '可以', '混合', 'axis', '默认', '代表', '按行', '合并', '如果', '等于', '代表', '按列', '合并', 'join', '合并', '时候', '索引', '对齐', '方式', '默认', 'outer', 'join', '可以', 'inner', 'joinignore', 'index', '是否', '忽略', '原来', '数据', '索引', 'append', '语法', 'dataframe', 'append', 'other', 'ignore', 'index', 'false', 'append', '只有', '按行', '合并', '没有', '按列', '合并', '相当于', 'concat', '按行', '简写', '形式', 'other', '单个', 'dataframe', 'series', 'dict', '或者', '列表', 'ignore', 'index', '是否', '忽略', '原来', '数据', '索引', '参考', '文档', 'pandas', 'concat', 'api', '文档', 'https', 'pandas', 'pydata', 'org', 'pandas', 'docs', 'stable', 'reference', 'api', 'pandas', 'concat', 'htmlpandas', 'concat', '教程', 'https', 'pandas', 'pydata', 'org', 'pandas', 'docs', 'stable', 'user', 'guide', 'merging', 'htmlpandas', 'append', 'api', '文档', 'https', 'pandas', 'pydata', 'org', 'pandas', 'docs', 'stable', 'reference', 'api', 'pandas', 'dataframe', 'append', 'htmlimport', 'pandas', 'as', 'pdimport', 'warningswarnings', 'filterwarnings', 'ignore', '使用', 'pandas', 'concat', '合并', '数据', 'df1', 'pd', 'dataframe', 'a0', 'a1', 'a2', 'a3', 'b0', 'b1', 'b2', 'b3', 'c0', 'c1', 'c2', 'c3', 'd0', 'd1', 'd2', 'd3', 'e0', 'e1', 'e2', 'e3', 'df1abcde0a0b0c0d0e01a1b1c1d1e12a2b2c2d2e23a3b3c3d3e3df2', 'pd', 'dataframe', 'a4', 'a5', 'a6', 'a7', 'b4', 'b5', 'b6', 'b7', 'c4', 'c5', 'c6', 'c7', 'd4', 'd5', 'd6', 'd7', 'f4', 'f5', 'f6', 'f7', 'df2abcdf0a4b4c4d4f41a5b5c5d5f52a6b6c6d6f63a7b7c7d7f71', '默认', 'concat', '参数', 'axis', 'join', 'outer', 'ignore', 'index', 'falsepd', 'concat', 'df1', 'df2', 'abcdef0a0b0c0d0e0nan1a1b1c1d1e1nan2a2b2c2d2e2nan3a3b3c3d3e3nan0a4b4c4d4nanf41a5b5c5d5nanf52a6b6c6d6nanf63a7b7c7d7nanf72', '使用', 'ignore', 'index', 'true', '可以', '忽略', '原来', '索引', 'pd', 'concat', 'df1', 'df2', 'ignore', 'index', 'true', 'abcdef0a0b0c0d0e0nan1a1b1c1d1e1nan2a2b2c2d2e2nan3a3b3c3d3e3nan4a4b4c4d4nanf45a5b5c5d5nanf56a6b6c6d6nanf67a7b7c7d7nanf73', '使用', 'join', 'inner', '过滤', '匹配', 'pd', 'concat', 'df1', 'df2', 'ignore', 'index', 'true', 'join', 'inner', 'abcd0a0b0c0d01a1b1c1d12a2b2c2d23a3b3c3d34a4b4c4d45a5b5c5d56a6b6c6d67a7b7c7d74', '使用', 'axis', '相当于', '添加', '新列', 'df1abcde0a0b0c0d0e01a1b1c1d1e12a2b2c2d2e23a3b3c3d3e3a', '添加', '一列', 'seriess1', 'pd', 'series', 'list', 'range', 'name', 'pd', 'concat', 'df1', 's1', 'axis', 'abcdef0a0b0c0d0e001a1b1c1d1e112a2b2c2d2e223a3b3c3d3e33b', '添加', '多列', 'seriess2', 'df1', 'apply', 'lambda', 'gg', 'axis', 's20', 'a0', 'gg1', 'a1', 'gg2', 'a2', 'gg3', 'a3', 'ggdtype', 'objects2', 'name', 'pd', 'concat', 'df1', 's1', 's2', 'axis', 'abcdefg0a0b0c0d0e00a0', 'gg1a1b1c1d1e11a1', 'gg2a2b2c2d2e22a2', 'gg3a3b3c3d3e33a3', 'gg', '列表', '可以', '只有', 'seriespd', 'concat', 's1', 's2', 'axis', 'fg00a0', 'gg11a1', 'gg22a2', 'gg33a3', 'gg', '列表', '可以', '混合', '顺序', 'pd', 'concat', 's1', 'df1', 's2', 'axis', 'fabcdeg00a0b0c0d0e0a0', 'gg11a1b1c1d1e1a1', 'gg22a2b2c2d2e2a2', 'gg33a3b3c3d3e3a3', 'gg', '使用', 'dataframe', 'append', '按行', '合并', '数据', 'df1', 'pd', 'dataframe', 'columns', 'list', 'ab', 'df1ab012134df2', 'pd', 'dataframe', 'columns', 'list', 'ab', 'df2ab0561781', 'dataframe', '添加', '一个', 'dataframedf1', 'append', 'df2', 'ab0121340561782', '忽略', '原来', '索引', 'ignore', 'index', 'truedf1', 'append', 'df2', 'ignore', 'index', 'true', 'ab0121342563783', '可以', '一行', '一行', 'dataframe', '添加', '数据', '一个', 'dfdf', 'pd', 'dataframe', 'columns', 'dfaa', '性能', '版本', 'for', 'in', 'range', '注意', '这里', '每次', '复制', 'df', 'df', 'append', 'ignore', 'index', 'true', 'dfa0011223344b', '性能', '版本', '第一个', '参是', '一个', '列表', '避免', '多次', '复制', 'pd', 'concat', 'pd', 'dataframe', 'columns', 'for', 'in', 'range', 'ignore', 'index', 'true', 'a0011223344']","[[-0.23519576 -0.11208799  0.23538443  0.14776211  0.27584922 -0.35096305
  -0.13519574  0.45944778 -0.04662677 -0.08698502 -0.04044529 -0.35019943
  -0.1478562   0.54210953  0.15945842 -0.10465534 -0.13309061 -0.01155425
  -0.07687221 -0.49078129 -0.02388155  0.25294985 -0.03457433 -0.16668262
   0.07434055 -0.47955478 -0.29195457  0.05289616 -0.21899661 -0.07157171
   0.18999158  0.00727857  0.00243603 -0.13018928 -0.14492     0.32048395
  -0.1777266  -0.25751047  0.08939143 -0.7194083  -0.14182306 -0.56994531
  -0.06450723 -0.02632446 -0.13835806 -0.20403447 -0.22958605  0.38374745
  -0.17609655  0.43179635  0.15432192 -0.26640795 -0.12451584 -0.18697847
   0.00775135  0.37937994  0.17682567 -0.08122512  0.10663581 -0.12507778
   0.08350472  0.23873845  0.01728981  0.08574467 -0.3717071   0.03050445
   0.04673151 -0.02328838 -0.27765035  0.41893375  0.09966929 -0.18647088
   0.37669242 -0.31549698  0.53632259  0.22665225  0.15579806 -0.14922679
  -0.29790118 -0.14275313 -0.02106318  0.03039663 -0.10545709  0.35974414
  -0.32525923  0.19776868 -0.27230761  0.41692718  0.46917817  0.14740756
   0.24757304  0.10936318  0.34826445  0.18238987  0.19271582  0.35011823
   0.11071468 -0.29839547 -0.02165915 -0.11057351]]"
2585,Tensorflow怎样接收变长列表特征,"比如用户的分类偏好、用户的历史观影行为，都是变长的元素列表，怎么输入到模型？这个问题很多人遇到，比如这些：Feeding variable length list data (from csv) to an 'indicator_column' featureHow to input a list of lists with different sizes in tf.data.Dataset有几种方法，但都还没有完美解决问题：1、multi-onehot自己创建一个大数组，把变长元素对应位置设置为1；比如这个特征有两个值：值1：a、b、c值2：b、c、d那么词表是a、b、c、d值1就变成了[1,1,1,0]，值2变成了[0,1,1,1]这种方式最灵活，因为如果遇到了带有权重的分类列表，也能搞定：比如值1：[(a,0.8), (b,0.7), (c, 0.6)]值2：[(b,0.5), (c, 0.4), (d, 0.3)]那么词表依然是a、b、c、d，但是对应权重却可以放到原来为1的位置上；值1变成了：[0.8, 0.7, 0.6, 0]值2变成了：[0, 0.5, 0.4, 0.3]然而这种方法tensorflow的feature column不支持，只能自己做映射转换2、变成定长以下两种方式，tensorflow的feature column可以支持变成定长方法1：截取前TOP N个元素来自资料：http://proceedings.mlr.press/v7/niculescu09有个PDF，看截图：使用的方法，是先计算每个词语的频率，然后去TOP10的频率；对于这种方法，个人感觉，如果是用户的分类偏好(分类，权重)列表，可以按照权重排序，取TOP10；也可以提取定长10个元素，并且反映了用户个性化的偏好；变成定长方法2：使用padding补0来自资料：tensorflow的官方文档https://www.tensorflow.org/tutorials/text/text_classification_rnn这是用0补齐的方式；","['tensorflow', '怎样', '接收', '列表', '特征', '比如', '用户', '分类', '偏好', '用户', '历史观', '行为', '变长', '元素', '列表', '怎么', '输入', '模型', '这个', '问题', '很多', '遇到', '比如', '这些', 'feeding', 'variable', 'length', 'list', 'data', 'from', 'csv', 'to', 'an', 'indicator', 'column', 'featurehow', 'to', 'input', 'list', 'of', 'lists', 'with', 'different', 'sizes', 'in', 'tf', 'data', 'dataset', '几种', '方法', '没有', '完美', '解决问题', 'multi', 'onehot', '自己', '创建', '一个', '数组', '变长', '元素', '对应', '位置', '设置', '比如', '这个', '特征', '两个', '那么', '词表', '变成', '变成', '这种', '方式', '灵活', '因为', '如果', '遇到', '带有', '权重', '分类', '列表', '搞定', '比如', '0.8', '0.7', '0.6', '0.5', '0.4', '0.3', '那么', '词表', '依然', '但是', '对应', '权重', '可以', '放到', '原来', '位置', '变成', '0.8', '0.7', '0.6', '变成', '0.5', '0.4', '0.3', '然而', '这种', '方法', 'tensorflow', 'feature', 'column', '支持', '只能', '自己', '映射', '转换', '变成', '以下', '两种', '方式', 'tensorflow', 'feature', 'column', '可以', '支持', '变成', '方法', '截取', 'top', '元素', '来自', '资料', 'http', 'proceedings', 'mlr', 'press', 'v7', 'niculescu09', '有个', 'pdf', '截图', '使用', '方法', '计算', '每个', '词语', '频率', '然后', 'top10', '频率', '对于', '这种', '方法', '个人感觉', '如果', '用户', '分类', '偏好', '分类', '权重', '列表', '可以', '按照', '权重', '排序', 'top10', '可以', '提取', '定长', '10', '元素', '并且', '反映', '用户', '个性化', '偏好', '变成', '方法', '使用', 'padding', '来自', '资料', 'tensorflow', '官方', '文档', 'https', 'www', 'tensorflow', 'org', 'tutorials', 'text', 'text', 'classification', 'rnn', '补齐', '方式']","[[-2.56878776e-01 -1.35657775e-01  2.36905901e-01  1.71753422e-01
   3.08064988e-01 -3.60291057e-01 -1.90825469e-01  5.07603946e-01
  -1.16294886e-02 -3.23594778e-02 -6.08945205e-02 -3.50758089e-01
  -1.84219040e-01  6.25880770e-01  1.65021698e-01 -1.09224350e-01
  -1.59385920e-01 -7.15532904e-03 -1.08569544e-01 -4.95889176e-01
   2.03718504e-02  2.54962794e-01 -5.72562043e-03 -1.12444929e-01
   1.14766544e-01 -5.67909433e-01 -3.07511359e-01  8.65494936e-02
  -2.20100179e-01 -6.29786367e-02  2.48272974e-01  2.84316810e-02
  -1.42204425e-02 -1.50251308e-01 -1.18605408e-01  3.49714912e-01
  -1.50300798e-01 -2.39154842e-01  1.17335970e-01 -8.00426739e-01
  -1.79901077e-01 -6.13812463e-01 -4.89844075e-02 -6.47172302e-02
  -1.70680745e-01 -1.71519936e-01 -2.71890515e-01  4.77349771e-01
  -1.85169447e-01  4.25330470e-01  2.06099659e-01 -2.83082425e-01
  -1.23579370e-01 -2.34424673e-01  6.51739691e-02  4.12795366e-01
   2.50303091e-01 -6.69363428e-02  1.00970618e-01 -1.05120118e-01
   5.34179351e-02  2.97122982e-01  2.21875349e-02  9.85724536e-02
  -4.05316554e-01 -4.38970315e-03  4.54629024e-02 -1.75239780e-02
  -2.63814109e-01  4.66284447e-01  1.41771891e-01 -2.50912874e-01
   4.20084245e-01 -3.42085060e-01  5.95316090e-01  1.89416489e-01
   2.10316514e-01 -1.46815794e-01 -2.92852373e-01 -2.12008555e-01
  -7.62305320e-02 -7.71895538e-04 -7.55483183e-02  3.56719633e-01
  -3.90406956e-01  2.19059547e-01 -3.01341927e-01  4.36751012e-01
   4.94302925e-01  1.41959149e-01  3.15000865e-01  1.28350462e-01
   3.80478066e-01  1.97972773e-01  1.99792461e-01  3.92566567e-01
   1.03970098e-01 -3.17108057e-01 -2.71065593e-02 -1.02538852e-01]]"
2591,怎样使用Pandas批量拆分与合并Excel文件？," Pandas批量拆分Excel与合并Excel实例演示：1. 将一个大Excel等份拆成多个Excel2. 将多个小Excel合并成一个大Excel并标记来源work_dir=""./course_datas/c15_excel_split_merge""splits_dir=f""{work_dir}/splits""import osif not os.path.exists(splits_dir):    os.mkdir(splits_dir)0、读取源Excel到Pandasimport pandas as pddf_source = pd.read_excel(f""{work_dir}/crazyant_blog_articles_source.xlsx"")df_source.head()idtitletags02585Tensorflow怎样接收变长列表特征python,tensorflow,特征工程12583Pandas实现数据的合并concatpandas,python,数据分析22574Pandas的Index索引有什么用途？pandas,python,数据分析32564机器学习常用数据集大全python,机器学习42561一个数据科学家的修炼路径数据分析df_source.indexRangeIndex(start=0, stop=258, step=1)df_source.shape(258, 3)total_row_count = df_source.shape[0]total_row_count258一、将一个大Excel等份拆成多个Excel使用df.iloc方法，将一个大的dataframe，拆分成多个小dataframe将使用dataframe.to_excel保存每个小Excel1、计算拆分后的每个excel的行数# 这个大excel，会拆分给这几个人user_names = [""xiao_shuai"", ""xiao_wang"", ""xiao_ming"", ""xiao_lei"", ""xiao_bo"", ""xiao_hong""]# 每个人的任务数目split_size = total_row_count // len(user_names)if total_row_count % len(user_names) != 0:    split_size += 1split_size432、拆分成多个dataframedf_subs = []for idx, user_name in enumerate(user_names):    # iloc的开始索引    begin = idx*split_size    # iloc的结束索引    end = begin+split_size    # 实现df按照iloc拆分    df_sub = df_source.iloc[begin:end]    # 将每个子df存入列表    df_subs.append((idx, user_name, df_sub))3、将每个datafame存入excelfor idx, user_name, df_sub in df_subs:    file_name = f""{splits_dir}/crazyant_blog_articles_{idx}_{user_name}.xlsx""    df_sub.to_excel(file_name, index=False)二、合并多个小Excel到一个大Excel遍历文件夹，得到要合并的Excel文件列表分别读取到dataframe，给每个df添加一列用于标记来源使用pd.concat进行df批量合并将合并后的dataframe输出到excel1. 遍历文件夹，得到要合并的Excel名称列表import osexcel_names = []for excel_name in os.listdir(splits_dir):    excel_names.append(excel_name)excel_names['crazyant_blog_articles_0_xiao_shuai.xlsx', 'crazyant_blog_articles_1_xiao_wang.xlsx', 'crazyant_blog_articles_2_xiao_ming.xlsx', 'crazyant_blog_articles_3_xiao_lei.xlsx', 'crazyant_blog_articles_4_xiao_bo.xlsx', 'crazyant_blog_articles_5_xiao_hong.xlsx']2. 分别读取到dataframedf_list = []for excel_name in excel_names:    # 读取每个excel到df    excel_path = f""{splits_dir}/{excel_name}""    df_split = pd.read_excel(excel_path)    # 得到username    username = excel_name.replace(""crazyant_blog_articles_"", """").replace("".xlsx"", """")[2:]    print(excel_name, username)    # 给每个df添加1列，即用户名字    df_split[""username""] = username    df_list.append(df_split)crazyant_blog_articles_0_xiao_shuai.xlsx xiao_shuaicrazyant_blog_articles_1_xiao_wang.xlsx xiao_wangcrazyant_blog_articles_2_xiao_ming.xlsx xiao_mingcrazyant_blog_articles_3_xiao_lei.xlsx xiao_leicrazyant_blog_articles_4_xiao_bo.xlsx xiao_bocrazyant_blog_articles_5_xiao_hong.xlsx xiao_hong3. 使用pd.concat进行合并df_merged = pd.concat(df_list)df_merged.shape(258, 4)df_merged.head()idtitletagsusername02585Tensorflow怎样接收变长列表特征python,tensorflow,特征工程xiao_shuai12583Pandas实现数据的合并concatpandas,python,数据分析xiao_shuai22574Pandas的Index索引有什么用途？pandas,python,数据分析xiao_shuai32564机器学习常用数据集大全python,机器学习xiao_shuai42561一个数据科学家的修炼路径数据分析xiao_shuaidf_merged[""username""].value_counts()xiao_hong     43xiao_bo       43xiao_shuai    43xiao_lei      43xiao_wang     43xiao_ming     43Name: username, dtype: int644. 将合并后的dataframe输出到exceldf_merged.to_excel(f""{work_dir}/crazyant_blog_articles_merged.xlsx"", index=False)","['怎样', '使用', 'pandas', '批量', '拆分', '合并', 'excel', '文件', 'pandas', '批量', '拆分', 'excel', '合并', 'excel', '实例', '演示', '一个', 'excel', '等份', '拆成', '多个', 'excel2', '多个', 'excel', '合并', '一个', 'excel', '标记', '来源', 'work', 'dir', 'course', 'datas', 'c15', 'excel', 'split', 'merge', 'splits', 'dir', 'work', 'dir', 'splits', 'import', 'osif', 'not', 'os', 'path', 'exists', 'splits', 'dir', 'os', 'mkdir', 'splits', 'dir', '读取', 'excel', 'pandasimport', 'pandas', 'as', 'pddf', 'source', 'pd', 'read', 'excel', 'work', 'dir', 'crazyant', 'blog', 'articles', 'source', 'xlsx', 'df', 'source', 'head', 'idtitletags02585tensorflow', '怎样', '接收', '列表', '特征', 'python', 'tensorflow', '特征', '工程', '12583pandas', '实现', '数据', '合并', 'concatpandas', 'python', '数据分析', '22574pandas', 'index', '索引', '什么', '用途', 'pandas', 'python', '数据分析', '32564', '机器', '学习', '常用', '数据', '大全', 'python', '机器', '学习', '42561', '一个', '数据', '科学家', '修炼', '路径', '数据分析', 'df', 'source', 'indexrangeindex', 'start', 'stop', '258', 'step', 'df', 'source', 'shape', '258', 'total', 'row', 'count', 'df', 'source', 'shape', 'total', 'row', 'count258', '一个', 'excel', '等份', '拆成', '多个', 'excel', '使用', 'df', 'iloc', '方法', '一个', 'dataframe', '分成', '多个', 'dataframe', '使用', 'dataframe', 'to', 'excel', '保存', '每个', 'excel1', '计算', '拆分', '每个', 'excel', '行数', '这个', 'excel', '拆分', '几个', 'user', 'names', 'xiao', 'shuai', 'xiao', 'wang', 'xiao', 'ming', 'xiao', 'lei', 'xiao', 'bo', 'xiao', 'hong', '每个', '任务', '数目', 'split', 'size', 'total', 'row', 'count', 'len', 'user', 'names', 'if', 'total', 'row', 'count', 'len', 'user', 'names', 'split', 'size', '1split', 'size432', '分成', '多个', 'dataframedf', 'subs', 'for', 'idx', 'user', 'name', 'in', 'enumerate', 'user', 'names', 'iloc', '开始', '索引', 'begin', 'idx', 'split', 'size', 'iloc', '结束', '索引', 'end', 'begin', 'split', 'size', '实现', 'df', '按照', 'iloc', '拆分', 'df', 'sub', 'df', 'source', 'iloc', 'begin', 'end', '每个', 'df', '存入', '列表', 'df', 'subs', 'append', 'idx', 'user', 'name', 'df', 'sub', '每个', 'datafame', '存入', 'excelfor', 'idx', 'user', 'name', 'df', 'sub', 'in', 'df', 'subs', 'file', 'name', 'splits', 'dir', 'crazyant', 'blog', 'articles', 'idx', 'user', 'name', 'xlsx', 'df', 'sub', 'to', 'excel', 'file', 'name', 'index', 'false', '合并', '多个', 'excel', '一个', 'excel', '遍历', '文件夹', '得到', '合并', 'excel', '文件', '列表', '分别', '读取', 'dataframe', '每个', 'df', '添加', '一列', '用于', '标记', '来源', '使用', 'pd', 'concat', '进行', 'df', '批量', '合并', '合并', 'dataframe', '输出', 'excel1', '遍历', '文件夹', '得到', '合并', 'excel', '名称', '列表', 'import', 'osexcel', 'names', 'for', 'excel', 'name', 'in', 'os', 'listdir', 'splits', 'dir', 'excel', 'names', 'append', 'excel', 'name', 'excel', 'names', 'crazyant', 'blog', 'articles', 'xiao', 'shuai', 'xlsx', 'crazyant', 'blog', 'articles', 'xiao', 'wang', 'xlsx', 'crazyant', 'blog', 'articles', 'xiao', 'ming', 'xlsx', 'crazyant', 'blog', 'articles', 'xiao', 'lei', 'xlsx', 'crazyant', 'blog', 'articles', 'xiao', 'bo', 'xlsx', 'crazyant', 'blog', 'articles', 'xiao', 'hong', 'xlsx', '分别', '读取', 'dataframedf', 'list', 'for', 'excel', 'name', 'in', 'excel', 'names', '读取', '每个', 'excel', 'df', 'excel', 'path', 'splits', 'dir', 'excel', 'name', 'df', 'split', 'pd', 'read', 'excel', 'excel', 'path', '得到', 'username', 'username', 'excel', 'name', 'replace', 'crazyant', 'blog', 'articles', 'replace', 'xlsx', 'print', 'excel', 'name', 'username', '每个', 'df', '添加', '用户', '名字', 'df', 'split', 'username', 'username', 'df', 'list', 'append', 'df', 'split', 'crazyant', 'blog', 'articles', 'xiao', 'shuai', 'xlsx', 'xiao', 'shuaicrazyant', 'blog', 'articles', 'xiao', 'wang', 'xlsx', 'xiao', 'wangcrazyant', 'blog', 'articles', 'xiao', 'ming', 'xlsx', 'xiao', 'mingcrazyant', 'blog', 'articles', 'xiao', 'lei', 'xlsx', 'xiao', 'leicrazyant', 'blog', 'articles', 'xiao', 'bo', 'xlsx', 'xiao', 'bocrazyant', 'blog', 'articles', 'xiao', 'hong', 'xlsx', 'xiao', 'hong3', '使用', 'pd', 'concat', '进行', '合并', 'df', 'merged', 'pd', 'concat', 'df', 'list', 'df', 'merged', 'shape', '258', 'df', 'merged', 'head', 'idtitletagsusername02585tensorflow', '怎样', '接收', '列表', '特征', 'python', 'tensorflow', '特征', '工程', 'xiao', 'shuai12583pandas', '实现', '数据', '合并', 'concatpandas', 'python', '数据分析', 'xiao', 'shuai22574pandas', 'index', '索引', '什么', '用途', 'pandas', 'python', '数据分析', 'xiao', 'shuai32564', '机器', '学习', '常用', '数据', '大全', 'python', '机器', '学习', 'xiao', 'shuai42561', '一个', '数据', '科学家', '修炼', '路径', '数据分析', 'xiao', 'shuaidf', 'merged', 'username', 'value', 'counts', 'xiao', 'hong', '43xiao', 'bo', '43xiao', 'shuai', '43xiao', 'lei', '43xiao', 'wang', '43xiao', 'ming', '43name', 'username', 'dtype', 'int644', '合并', 'dataframe', '输出', 'exceldf', 'merged', 'to', 'excel', 'work', 'dir', 'crazyant', 'blog', 'articles', 'merged', 'xlsx', 'index', 'false']","[[-0.24441075 -0.11285033  0.27534746  0.14900306  0.28003119 -0.41828297
  -0.10554242  0.50353299 -0.06943256 -0.1493361  -0.04050338 -0.41831881
  -0.14962178  0.55447714  0.16011233 -0.13255433 -0.12669063 -0.00487112
  -0.04525371 -0.55468121 -0.05754981  0.27604482 -0.07960472 -0.24837051
   0.04831991 -0.48672459 -0.33103261  0.03643783 -0.25842424 -0.08816718
   0.16184471  0.01443246  0.02848543 -0.13504245 -0.1998474   0.33593233
  -0.21896069 -0.30945976  0.07350967 -0.74948436 -0.13516947 -0.63743462
  -0.07356665 -0.00289038 -0.12417441 -0.28295395 -0.23431294  0.36718005
  -0.15887808  0.51123437  0.13139874 -0.29008028 -0.11759942 -0.17796751
  -0.05530356  0.40710305  0.14346933 -0.12351521  0.12695905 -0.17013811
   0.13334832  0.23772958  0.01116454  0.08976137 -0.39575848  0.06989675
   0.04862111 -0.02270509 -0.32045095  0.4482778   0.08246735 -0.16366432
   0.4087433  -0.33533788  0.59550131  0.32404206  0.14950004 -0.19027634
  -0.32827361 -0.10824136  0.01128246  0.06800957 -0.1586079   0.42545539
  -0.34564347  0.20136533 -0.29951438  0.49877075  0.53946032  0.18101457
   0.21989413  0.12213101  0.36985364  0.18592786  0.22094497  0.38399565
   0.1325739  -0.33292341 -0.00972437 -0.13323568]]"
2594,Pandas怎样实现对数据的分组统计？," Pandas怎样实现groupby分组统计类似SQL：select city,max(temperature) from city_weather group by city;groupby：先对数据分组，然后在每个分组上应用聚合函数、转换函数本次演示：一、分组使用聚合函数做数据统计二、遍历groupby的结果理解执行流程三、实例分组探索天气数据import pandas as pdimport numpy as np# 加上这一句，能在jupyter notebook展示matplot图表%matplotlib inlinedf = pd.DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'],                   'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'],                   'C': np.random.randn(8),                   'D': np.random.randn(8)})dfABCD0fooone0.5429030.7888961barone-0.375789-0.3458692footwo-0.9034070.4280313barthree-1.5647480.0811634footwo-1.0936020.8373485bartwo-0.2024030.7013016fooone-0.665189-1.5052907foothree-0.4983390.534438一、分组使用聚合函数做数据统计1、单个列groupby，查询所有数据列的统计df.groupby('A').sum()CDAbar-2.1429400.436595foo-2.6176331.083423我们看到：1. groupby中的'A'变成了数据的索引列2. 因为要统计sum，但B列不是数字，所以被自动忽略掉2、多个列groupby，查询所有数据列的统计df.groupby(['A','B']).mean()CDABbarone-0.375789-0.345869three-1.5647480.081163two-0.2024030.701301fooone-0.061143-0.358197three-0.4983390.534438two-0.9985040.632690我们看到：('A','B')成对变成了二级索引df.groupby(['A','B'], as_index=False).mean()ABCD0barone-0.375789-0.3458691barthree-1.5647480.0811632bartwo-0.2024030.7013013fooone-0.061143-0.3581974foothree-0.4983390.5344385footwo-0.9985040.6326903、同时查看多种数据统计df.groupby('A').agg([np.sum, np.mean, np.std])CDsummeanstdsummeanstdAbar-2.142940-0.7143130.7415830.4365950.1455320.526544foo-2.617633-0.5235270.6378221.0834230.2166850.977686我们看到：列变成了多级索引4、查看单列的结果数据统计# 方法1：预过滤，性能更好df.groupby('A')['C'].agg([np.sum, np.mean, np.std])summeanstdAbar-2.142940-0.7143130.741583foo-2.617633-0.5235270.637822# 方法2df.groupby('A').agg([np.sum, np.mean, np.std])['C']summeanstdAbar-2.142940-0.7143130.741583foo-2.617633-0.5235270.6378225、不同列使用不同的聚合函数df.groupby('A').agg({""C"":np.sum, ""D"":np.mean})CDAbar-2.1429400.145532foo-2.6176330.216685二、遍历groupby的结果理解执行流程for循环可以直接遍历每个group1、遍历单个列聚合的分组g = df.groupby('A')g<pandas.core.groupby.generic.DataFrameGroupBy object at 0x00000123B250E548>for name,group in g:    print(name)    print(group)    print()bar     A      B         C         D1  bar    one -0.375789 -0.3458693  bar  three -1.564748  0.0811635  bar    two -0.202403  0.701301foo     A      B         C         D0  foo    one  0.542903  0.7888962  foo    two -0.903407  0.4280314  foo    two -1.093602  0.8373486  foo    one -0.665189 -1.5052907  foo  three -0.498339  0.534438可以获取单个分组的数据g.get_group('bar')ABCD1barone-0.375789-0.3458693barthree-1.5647480.0811635bartwo-0.2024030.7013012、遍历多个列聚合的分组g = df.groupby(['A', 'B'])for name,group in g:    print(name)    print(group)    print()('bar', 'one')     A    B         C         D1  bar  one -0.375789 -0.345869('bar', 'three')     A      B         C         D3  bar  three -1.564748  0.081163('bar', 'two')     A    B         C         D5  bar  two -0.202403  0.701301('foo', 'one')     A    B         C         D0  foo  one  0.542903  0.7888966  foo  one -0.665189 -1.505290('foo', 'three')     A      B         C         D7  foo  three -0.498339  0.534438('foo', 'two')     A    B         C         D2  foo  two -0.903407  0.4280314  foo  two -1.093602  0.837348可以看到，name是一个2个元素的tuple，代表不同的列g.get_group(('foo', 'one'))ABCD0fooone0.5429030.7888966fooone-0.665189-1.505290可以直接查询group后的某几列，生成Series或者子DataFrameg['C']<pandas.core.groupby.generic.SeriesGroupBy object at 0x00000123C33F64C8>for name, group in g['C']:    print(name)    print(group)    print(type(group))    print()('bar', 'one')1   -0.375789Name: C, dtype: float64<class 'pandas.core.series.Series'>('bar', 'three')3   -1.564748Name: C, dtype: float64<class 'pandas.core.series.Series'>('bar', 'two')5   -0.202403Name: C, dtype: float64<class 'pandas.core.series.Series'>('foo', 'one')0    0.5429036   -0.665189Name: C, dtype: float64<class 'pandas.core.series.Series'>('foo', 'three')7   -0.498339Name: C, dtype: float64<class 'pandas.core.series.Series'>('foo', 'two')2   -0.9034074   -1.093602Name: C, dtype: float64<class 'pandas.core.series.Series'>其实所有的聚合统计，都是在dataframe和series上进行的；三、实例分组探索天气数据fpath = ""./datas/beijing_tianqi/beijing_tianqi_2018.csv""df = pd.read_csv(fpath)# 替换掉温度的后缀℃df.loc[:, ""bWendu""] = df[""bWendu""].str.replace(""℃"", """").astype('int32')df.loc[:, ""yWendu""] = df[""yWendu""].str.replace(""℃"", """").astype('int32')df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevel02018-01-013-6晴~多云东北风1-2级59良212018-01-022-5阴~多云东北风1-2级49优122018-01-032-5多云北风1-2级28优132018-01-040-8阴东北风1-2级28优142018-01-053-6多云~晴西北风1-2级50优1# 新增一列为月份df['month'] = df['ymd'].str[:7]df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelmonth02018-01-013-6晴~多云东北风1-2级59良22018-0112018-01-022-5阴~多云东北风1-2级49优12018-0122018-01-032-5多云北风1-2级28优12018-0132018-01-040-8阴东北风1-2级28优12018-0142018-01-053-6多云~晴西北风1-2级50优12018-011、查看每个月的最高温度data = df.groupby('month')['bWendu'].max()datamonth2018-01     72018-02    122018-03    272018-04    302018-05    352018-06    382018-07    372018-08    362018-09    312018-10    252018-11    182018-12    10Name: bWendu, dtype: int32type(data)pandas.core.series.Seriesdata.plot()<matplotlib.axes._subplots.AxesSubplot at 0x123c344b308>2、查看每个月的最高温度、最低温度、平均空气质量指数df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelmonth02018-01-013-6晴~多云东北风1-2级59良22018-0112018-01-022-5阴~多云东北风1-2级49优12018-0122018-01-032-5多云北风1-2级28优12018-0132018-01-040-8阴东北风1-2级28优12018-0142018-01-053-6多云~晴西北风1-2级50优12018-01group_data = df.groupby('month').agg({""bWendu"":np.max, ""yWendu"":np.min, ""aqi"":np.mean})group_databWenduyWenduaqimonth2018-017-1260.6774192018-0212-1078.8571432018-0327-4130.3225812018-04301102.8666672018-05351099.0645162018-06381782.3000002018-07372272.6774192018-08362059.5161292018-09311150.4333332018-1025167.0967742018-1118-4105.1000002018-1210-1277.354839group_data.plot()<matplotlib.axes._subplots.AxesSubplot at 0x123c5502d48>","['pandas', '怎样', '实现', '数据', '分组', '统计', 'pandas', '怎样', '实现', 'groupby', '分组', '统计', '类似', 'sql', 'select', 'city', 'max', 'temperature', 'from', 'city', 'weather', 'group', 'by', 'city', 'groupby', '先对', '数据', '分组', '然后', '每个', '分组', '应用', '聚合', '函数', '转换', '函数', '本次', '演示', '分组', '使用', '聚合', '函数', '数据', '统计', '遍历', 'groupby', '结果', '理解', '执行', '流程', '实例', '分组', '探索', '天气', '数据', 'import', 'pandas', 'as', 'pdimport', 'numpy', 'as', 'np', '加上', '一句', 'jupyter', 'notebook', '展示', 'matplot', '图表', 'matplotlib', 'inlinedf', 'pd', 'dataframe', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo', 'one', 'one', 'two', 'three', 'two', 'two', 'one', 'three', 'np', 'random', 'randn', 'np', 'random', 'randn', 'dfabcd0fooone0.5429030', '7888961barone', '0.375789', '0.3458692', 'footwo', '0.9034070', '4280313barthree', '1.5647480', '0811634footwo', '1.0936020', '8373485bartwo', '0.2024030', '7013016fooone', '0.665189', '1.5052907', 'foothree', '0.4983390', '534438', '分组', '使用', '聚合', '函数', '数据', '统计', '单个', 'groupby', '查询', '所有', '数据', '统计', 'df', 'groupby', 'sum', 'cdabar', '2.1429400', '436595foo', '2.6176331', '083423', '我们', '看到', 'groupby', '变成', '数据', '索引', '因为', '统计', 'sum', '不是', '数字', '所以', '自动', '忽略', '多个', 'groupby', '查询', '所有', '数据', '统计', 'df', 'groupby', 'mean', 'cdabbarone', '0.375789', '0.345869', 'three', '1.5647480', '081163two', '0.2024030', '701301fooone', '0.061143', '0.358197', 'three', '0.4983390', '534438two', '0.9985040', '632690', '我们', '看到', '变成', '二级', '索引', 'df', 'groupby', 'as', 'index', 'false', 'mean', 'abcd0barone', '0.375789', '0.3458691', 'barthree', '1.5647480', '0811632bartwo', '0.2024030', '7013013fooone', '0.061143', '0.3581974', 'foothree', '0.4983390', '5344385footwo', '0.9985040', '6326903', '同时', '查看', '多种', '数据', '统计', 'df', 'groupby', 'agg', 'np', 'sum', 'np', 'mean', 'np', 'std', 'cdsummeanstdsummeanstdabar', '2.142940', '0.7143130', '7415830.4365950', '1455320.526544', 'foo', '2.617633', '0.5235270', '6378221.0834230', '2166850.977686', '我们', '看到', '变成', '多级', '索引', '查看', '单列', '结果', '数据', '统计', '方法', '过滤', '性能', '更好', 'df', 'groupby', 'agg', 'np', 'sum', 'np', 'mean', 'np', 'std', 'summeanstdabar', '2.142940', '0.7143130', '741583foo', '2.617633', '0.5235270', '637822', '方法', '2df', 'groupby', 'agg', 'np', 'sum', 'np', 'mean', 'np', 'std', 'summeanstdabar', '2.142940', '0.7143130', '741583foo', '2.617633', '0.5235270', '6378225', '不同', '使用', '不同', '聚合', '函数', 'df', 'groupby', 'agg', 'np', 'sum', 'np', 'mean', 'cdabar', '2.1429400', '145532foo', '2.6176330', '216685', '遍历', 'groupby', '结果', '理解', '执行', '流程', 'for', '循环', '可以', '直接', '遍历', '每个', 'group1', '遍历', '单个', '聚合', '分组', 'df', 'groupby', 'pandas', 'core', 'groupby', 'generic', 'dataframegroupby', 'object', 'at', '0x00000123b250e548', 'for', 'name', 'group', 'in', 'print', 'name', 'print', 'group', 'print', 'bar', 'd1', 'bar', 'one', '0.375789', '0.3458693', 'bar', 'three', '1.564748', '0.0811635', 'bar', 'two', '0.202403', '0.701301', 'foo', 'd0', 'foo', 'one', '0.542903', '0.7888962', 'foo', 'two', '0.903407', '0.4280314', 'foo', 'two', '1.093602', '0.8373486', 'foo', 'one', '0.665189', '1.5052907', 'foo', 'three', '0.498339', '0.534438', '可以', '获取', '单个', '分组', '数据', 'get', 'group', 'bar', 'abcd1barone', '0.375789', '0.3458693', 'barthree', '1.5647480', '0811635bartwo', '0.2024030', '7013012', '遍历', '多个', '聚合', '分组', 'df', 'groupby', 'for', 'name', 'group', 'in', 'print', 'name', 'print', 'group', 'print', 'bar', 'one', 'd1', 'bar', 'one', '0.375789', '0.345869', 'bar', 'three', 'd3', 'bar', 'three', '1.564748', '0.081163', 'bar', 'two', 'd5', 'bar', 'two', '0.202403', '0.701301', 'foo', 'one', 'd0', 'foo', 'one', '0.542903', '0.7888966', 'foo', 'one', '0.665189', '1.505290', 'foo', 'three', 'd7', 'foo', 'three', '0.498339', '0.534438', 'foo', 'two', 'd2', 'foo', 'two', '0.903407', '0.4280314', 'foo', 'two', '1.093602', '0.837348', '可以', '看到', 'name', '一个', '元素', 'tuple', '代表', '不同', 'get', 'group', 'foo', 'one', 'abcd0fooone0.5429030', '7888966fooone', '0.665189', '1.505290', '可以', '直接', '查询', 'group', '几列', '生成', 'series', '或者', 'dataframeg', 'pandas', 'core', 'groupby', 'generic', 'seriesgroupby', 'object', 'at', '0x00000123c33f64c8', 'for', 'name', 'group', 'in', 'print', 'name', 'print', 'group', 'print', 'type', 'group', 'print', 'bar', 'one', '0.375789', 'name', 'dtype', 'float64', 'class', 'pandas', 'core', 'series', 'series', 'bar', 'three', '1.564748', 'name', 'dtype', 'float64', 'class', 'pandas', 'core', 'series', 'series', 'bar', 'two', '0.202403', 'name', 'dtype', 'float64', 'class', 'pandas', 'core', 'series', 'series', 'foo', 'one', '0.5429036', '0.665189', 'name', 'dtype', 'float64', 'class', 'pandas', 'core', 'series', 'series', 'foo', 'three', '0.498339', 'name', 'dtype', 'float64', 'class', 'pandas', 'core', 'series', 'series', 'foo', 'two', '0.9034074', '1.093602', 'name', 'dtype', 'float64', 'class', 'pandas', 'core', 'series', 'series', '其实', '所有', '聚合', '统计', 'dataframe', 'series', '进行', '实例', '分组', '探索', '天气', '数据', 'fpath', 'datas', 'beijing', 'tianqi', 'beijing', 'tianqi', '2018', 'csv', 'df', 'pd', 'read', 'csv', 'fpath', '替换', '温度', '后缀', 'df', 'loc', 'bwendu', 'df', 'bwendu', 'str', 'replace', 'astype', 'int32', 'df', 'loc', 'ywendu', 'df', 'ywendu', 'str', 'replace', 'astype', 'int32', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevel02018', '01', '013', '多云', '东北风', '59', '212018', '01', '022', '多云', '东北风', '49', '122018', '01', '032', '多云', '北风', '28', '132018', '01', '040', '东北风', '28', '142018', '01', '053', '多云', '西北风', '50', '新增', '列为', '月份', 'df', 'month', 'df', 'ymd', 'str', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelmonth02018', '01', '013', '多云', '东北风', '59', '22018', '0112018', '01', '022', '多云', '东北风', '49', '12018', '0122018', '01', '032', '多云', '北风', '28', '12018', '0132018', '01', '040', '东北风', '28', '12018', '0142018', '01', '053', '多云', '西北风', '50', '12018', '011', '查看', '每个', '最高', '温度', 'data', 'df', 'groupby', 'month', 'bwendu', 'max', 'datamonth2018', '01', '72018', '02', '122018', '03', '272018', '04', '302018', '05', '352018', '06', '382018', '07', '372018', '08', '362018', '09', '312018', '10', '252018', '11', '182018', '12', '10name', 'bwendu', 'dtype', 'int32type', 'data', 'pandas', 'core', 'series', 'seriesdata', 'plot', 'matplotlib', 'axes', '._', 'subplots', 'axessubplot', 'at', '0x123c344b308', '查看', '每个', '最高', '温度', '最低温度', '平均', '空气质量', '指数', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelmonth02018', '01', '013', '多云', '东北风', '59', '22018', '0112018', '01', '022', '多云', '东北风', '49', '12018', '0122018', '01', '032', '多云', '北风', '28', '12018', '0132018', '01', '040', '东北风', '28', '12018', '0142018', '01', '053', '多云', '西北风', '50', '12018', '01group', 'data', 'df', 'groupby', 'month', 'agg', 'bwendu', 'np', 'max', 'ywendu', 'np', 'min', 'aqi', 'np', 'mean', 'group', 'databwenduywenduaqimonth2018', '017', '1260.6774192018', '0212', '1078.8571432018', '0327', '4130.3225812018', '04301102.8666672018', '05351099.0645162018', '06381782.3000002018', '07372272.6774192018', '08362059.5161292018', '09311150.4333332018', '1025167.0967742018', '1118', '4105.1000002018', '1210', '1277.354839', 'group', 'data', 'plot', 'matplotlib', 'axes', '._', 'subplots', 'axessubplot', 'at', '0x123c5502d48']","[[-0.25366605 -0.08920634  0.27646984  0.09820092  0.3118916  -0.41894359
  -0.10141998  0.4885322  -0.0849221  -0.1455536  -0.02941649 -0.40838896
  -0.15061442  0.55200048  0.17499107 -0.1287502  -0.11935574 -0.01941446
  -0.04948145 -0.56965175 -0.07372036  0.28352982 -0.0563144  -0.23234376
   0.05658546 -0.48077187 -0.30571055  0.00929956 -0.25575653 -0.07750887
   0.16646311 -0.01686706  0.03061978 -0.12596495 -0.17515731  0.31854987
  -0.21823057 -0.2906499   0.09183631 -0.7750481  -0.14484964 -0.63518166
  -0.09998954 -0.00569605 -0.12504408 -0.25497839 -0.21216156  0.34279834
  -0.21959632  0.51510702  0.1363772  -0.259661   -0.15641918 -0.16256222
  -0.05409812  0.37887647  0.13590051 -0.11564909  0.0940887  -0.14664916
   0.11907236  0.24883265  0.01731658  0.08508528 -0.39996438  0.04603393
   0.07617454 -0.05967981 -0.32780847  0.44161664  0.06557134 -0.15997
   0.3922924  -0.33904949  0.577297    0.30829499  0.11061765 -0.16440203
  -0.34128592 -0.09245377  0.04193687  0.07056905 -0.13901282  0.41947421
  -0.3202338   0.20309442 -0.28354053  0.47484965  0.50152123  0.1694226
   0.23556099  0.1324493   0.38824006  0.18825047  0.23233317  0.3331032
   0.15640616 -0.35853543 -0.05083614 -0.11463814]]"
2598,Pandas的分层索引MultiIndex怎样用？," Pandas的分层索引MultiIndex为什么要学习分层索引MultiIndex？* 分层索引：在一个轴向上拥有多个索引层级，可以表达更高维度数据的形式；* 可以更方便的进行数据筛选，如果有序则性能更好；* groupby等操作的结果，如果是多KEY，结果是分层索引，需要会使用* 一般不需要自己创建分层索引(MultiIndex有构造函数但一般不用)演示数据：百度、阿里巴巴、爱奇艺、京东四家公司的10天股票数据数据来自：英为财经https://cn.investing.com/本次演示提纲：一、Series的分层索引MultiIndex二、Series有多层索引怎样筛选数据？三、DataFrame的多层索引MultiIndex四、DataFrame有多层索引怎样筛选数据？import pandas as pd%matplotlib inlinestocks = pd.read_excel('./datas/stocks/互联网公司股票.xlsx')stocks.shape(12, 8)stocks.head(3)日期公司收盘开盘高低交易量涨跌幅02019-10-03BIDU104.32102.35104.73101.152.240.0212019-10-02BIDU102.62100.85103.2499.502.690.0122019-10-01BIDU102.00102.80103.26101.001.78-0.01stocks[""公司""].unique()array(['BIDU', 'BABA', 'IQ', 'JD'], dtype=object)stocks.indexRangeIndex(start=0, stop=12, step=1)stocks.groupby('公司')[""收盘""].mean()公司BABA    166.80BIDU    102.98IQ       15.90JD       28.35Name: 收盘, dtype: float64一、Series的分层索引MultiIndexser = stocks.groupby(['公司', '日期'])['收盘'].mean()ser公司    日期        BABA  2019-10-01    165.15      2019-10-02    165.77      2019-10-03    169.48BIDU  2019-10-01    102.00      2019-10-02    102.62      2019-10-03    104.32IQ    2019-10-01     15.92      2019-10-02     15.72      2019-10-03     16.06JD    2019-10-01     28.19      2019-10-02     28.06      2019-10-03     28.80Name: 收盘, dtype: float64多维索引中，空白的意思是：使用上面的值ser.indexMultiIndex([('BABA', '2019-10-01'),            ('BABA', '2019-10-02'),            ('BABA', '2019-10-03'),            ('BIDU', '2019-10-01'),            ('BIDU', '2019-10-02'),            ('BIDU', '2019-10-03'),            (  'IQ', '2019-10-01'),            (  'IQ', '2019-10-02'),            (  'IQ', '2019-10-03'),            (  'JD', '2019-10-01'),            (  'JD', '2019-10-02'),            (  'JD', '2019-10-03')],           names=['公司', '日期'])# unstack把二级索引变成列ser.unstack()日期2019-10-012019-10-022019-10-03公司BABA165.15165.77169.48BIDU102.00102.62104.32IQ15.9215.7216.06JD28.1928.0628.80ser公司    日期        BABA  2019-10-01    165.15      2019-10-02    165.77      2019-10-03    169.48BIDU  2019-10-01    102.00      2019-10-02    102.62      2019-10-03    104.32IQ    2019-10-01     15.92      2019-10-02     15.72      2019-10-03     16.06JD    2019-10-01     28.19      2019-10-02     28.06      2019-10-03     28.80Name: 收盘, dtype: float64ser.reset_index()公司日期收盘0BABA2019-10-01165.151BABA2019-10-02165.772BABA2019-10-03169.483BIDU2019-10-01102.004BIDU2019-10-02102.625BIDU2019-10-03104.326IQ2019-10-0115.927IQ2019-10-0215.728IQ2019-10-0316.069JD2019-10-0128.1910JD2019-10-0228.0611JD2019-10-0328.80二、Series有多层索引MultiIndex怎样筛选数据？ser公司    日期        BABA  2019-10-01    165.15      2019-10-02    165.77      2019-10-03    169.48BIDU  2019-10-01    102.00      2019-10-02    102.62      2019-10-03    104.32IQ    2019-10-01     15.92      2019-10-02     15.72      2019-10-03     16.06JD    2019-10-01     28.19      2019-10-02     28.06      2019-10-03     28.80Name: 收盘, dtype: float64ser.loc['BIDU']日期2019-10-01    102.002019-10-02    102.622019-10-03    104.32Name: 收盘, dtype: float64# 多层索引，可以用元组的形式筛选ser.loc[('BIDU', '2019-10-02')]102.62ser.loc[:, '2019-10-02']公司BABA    165.77BIDU    102.62IQ       15.72JD       28.06Name: 收盘, dtype: float64三、DataFrame的多层索引MultiIndexstocks.head()日期公司收盘开盘高低交易量涨跌幅02019-10-03BIDU104.32102.35104.73101.152.240.0212019-10-02BIDU102.62100.85103.2499.502.690.0122019-10-01BIDU102.00102.80103.26101.001.78-0.0132019-10-03BABA169.48166.65170.18165.0010.390.0242019-10-02BABA165.77162.82166.88161.9011.600.00stocks.set_index(['公司', '日期'], inplace=True)stocks收盘开盘高低交易量涨跌幅公司日期BIDU2019-10-03104.32102.35104.73101.152.240.022019-10-02102.62100.85103.2499.502.690.012019-10-01102.00102.80103.26101.001.78-0.01BABA2019-10-03169.48166.65170.18165.0010.390.022019-10-02165.77162.82166.88161.9011.600.002019-10-01165.15168.01168.23163.6414.19-0.01IQ2019-10-0316.0615.7116.3815.3210.080.022019-10-0215.7215.8515.8715.128.10-0.012019-10-0115.9216.1416.2215.5011.65-0.01JD2019-10-0328.8028.1128.9727.828.770.032019-10-0228.0628.0028.2227.539.530.002019-10-0128.1928.2228.5727.9710.640.00stocks.indexMultiIndex([('BIDU', '2019-10-03'),            ('BIDU', '2019-10-02'),            ('BIDU', '2019-10-01'),            ('BABA', '2019-10-03'),            ('BABA', '2019-10-02'),            ('BABA', '2019-10-01'),            (  'IQ', '2019-10-03'),            (  'IQ', '2019-10-02'),            (  'IQ', '2019-10-01'),            (  'JD', '2019-10-03'),            (  'JD', '2019-10-02'),            (  'JD', '2019-10-01')],           names=['公司', '日期'])stocks.sort_index(inplace=True)stocks收盘开盘高低交易量涨跌幅公司日期BABA2019-10-01165.15168.01168.23163.6414.19-0.012019-10-02165.77162.82166.88161.9011.600.002019-10-03169.48166.65170.18165.0010.390.02BIDU2019-10-01102.00102.80103.26101.001.78-0.012019-10-02102.62100.85103.2499.502.690.012019-10-03104.32102.35104.73101.152.240.02IQ2019-10-0115.9216.1416.2215.5011.65-0.012019-10-0215.7215.8515.8715.128.10-0.012019-10-0316.0615.7116.3815.3210.080.02JD2019-10-0128.1928.2228.5727.9710.640.002019-10-0228.0628.0028.2227.539.530.002019-10-0328.8028.1128.9727.828.770.03四、DataFrame有多层索引MultiIndex怎样筛选数据？【重要知识】在选择数据时： * 元组(key1,key2)代表筛选多层索引，其中key1是索引第一级，key2是第二级，比如key1=JD, key2=2019-10-02* 列表[key1,key2]代表同一层的多个KEY，其中key1和key2是并列的同级索引，比如key1=JD, key2=BIDUstocks.loc['BIDU']收盘开盘高低交易量涨跌幅日期2019-10-01102.00102.80103.26101.001.78-0.012019-10-02102.62100.85103.2499.502.690.012019-10-03104.32102.35104.73101.152.240.02stocks.loc[('BIDU', '2019-10-02'), :]收盘     102.62开盘     100.85高      103.24低       99.50交易量      2.69涨跌幅      0.01Name: (BIDU, 2019-10-02), dtype: float64stocks.loc[('BIDU', '2019-10-02'), '开盘']100.85stocks.loc[['BIDU', 'JD'], :]收盘开盘高低交易量涨跌幅公司日期BIDU2019-10-01102.00102.80103.26101.001.78-0.012019-10-02102.62100.85103.2499.502.690.012019-10-03104.32102.35104.73101.152.240.02JD2019-10-0128.1928.2228.5727.9710.640.002019-10-0228.0628.0028.2227.539.530.002019-10-0328.8028.1128.9727.828.770.03stocks.loc[(['BIDU', 'JD'], '2019-10-03'), :]收盘开盘高低交易量涨跌幅公司日期BIDU2019-10-03104.32102.35104.73101.152.240.02JD2019-10-0328.8028.1128.9727.828.770.03stocks.loc[(['BIDU', 'JD'], '2019-10-03'), '收盘']公司    日期        BIDU  2019-10-03    104.32JD    2019-10-03     28.80Name: 收盘, dtype: float64stocks.loc[('BIDU', ['2019-10-02', '2019-10-03']), '收盘']公司    日期        BIDU  2019-10-02    102.62      2019-10-03    104.32Name: 收盘, dtype: float64# slice(None)代表筛选这一索引的所有内容stocks.loc[(slice(None), ['2019-10-02', '2019-10-03']), :]收盘开盘高低交易量涨跌幅公司日期BABA2019-10-02165.77162.82166.88161.9011.600.002019-10-03169.48166.65170.18165.0010.390.02BIDU2019-10-02102.62100.85103.2499.502.690.012019-10-03104.32102.35104.73101.152.240.02IQ2019-10-0215.7215.8515.8715.128.10-0.012019-10-0316.0615.7116.3815.3210.080.02JD2019-10-0228.0628.0028.2227.539.530.002019-10-0328.8028.1128.9727.828.770.03stocks.reset_index()公司日期收盘开盘高低交易量涨跌幅0BABA2019-10-01165.15168.01168.23163.6414.19-0.011BABA2019-10-02165.77162.82166.88161.9011.600.002BABA2019-10-03169.48166.65170.18165.0010.390.023BIDU2019-10-01102.00102.80103.26101.001.78-0.014BIDU2019-10-02102.62100.85103.2499.502.690.015BIDU2019-10-03104.32102.35104.73101.152.240.026IQ2019-10-0115.9216.1416.2215.5011.65-0.017IQ2019-10-0215.7215.8515.8715.128.10-0.018IQ2019-10-0316.0615.7116.3815.3210.080.029JD2019-10-0128.1928.2228.5727.9710.640.0010JD2019-10-0228.0628.0028.2227.539.530.0011JD2019-10-0328.8028.1128.9727.828.770.03转载请注明链接： http://www.crazyant.net/2598.html","['pandas', '分层', '索引', 'multiindex', '怎样', 'pandas', '分层', '索引', 'multiindex', '为什么', '学习', '分层', '索引', 'multiindex', '分层', '索引', '一个', '向上', '拥有', '多个', '索引', '层级', '可以', '表达', '更高', '维度', '数据', '形式', '可以', '方便', '进行', '数据', '筛选', '如果', '有序', '性能', '更好', 'groupby', '操作', '结果', '如果', 'key', '结果', '分层', '索引', '需要', '使用', '一般', '需要', '自己', '创建', '分层', '索引', 'multiindex', '构造函数', '一般', '不用', '演示', '数据', '百度', '阿里巴巴', '爱奇艺', '京东', '四家', '公司', '10', '股票', '数据', '数据', '来自', '英为', '财经', 'https', 'cn', 'investing', 'com', '本次', '演示', '提纲', 'series', '分层', '索引', 'multiindex', 'series', '多层', '索引', '怎样', '筛选', '数据', 'dataframe', '多层', '索引', 'multiindex', 'dataframe', '多层', '索引', '怎样', '筛选', '数据', 'import', 'pandas', 'as', 'pd%', 'matplotlib', 'inlinestocks', 'pd', 'read', 'excel', 'datas', 'stocks', '互联网', '公司股票', 'xlsx', 'stocks', 'shape', '12', 'stocks', 'head', '日期', '公司', '收盘', '开盘', '高低', '交易量', '涨跌幅', '02019', '10', '03bidu104.32102', '35104.73101', '152.240', '0212019', '10', '02bidu102.62100', '85103.2499', '502.690', '0122019', '10', '01bidu102.00102', '80103.26101', '001.78', '0.01', 'stocks', '公司', 'unique', 'array', 'bidu', 'baba', 'iq', 'jd', 'dtype', 'object', 'stocks', 'indexrangeindex', 'start', 'stop', '12', 'step', 'stocks', 'groupby', '公司', '收盘', 'mean', '公司', 'baba', '166.80', 'bidu', '102.98', 'iq', '15.90', 'jd', '28.35', 'name', '收盘', 'dtype', 'float64', 'series', '分层', '索引', 'multiindexser', 'stocks', 'groupby', '公司', '日期', '收盘', 'mean', 'ser', '公司', '日期', 'baba', '2019', '10', '01', '165.15', '2019', '10', '02', '165.77', '2019', '10', '03', '169.48', 'bidu', '2019', '10', '01', '102.00', '2019', '10', '02', '102.62', '2019', '10', '03', '104.32', 'iq', '2019', '10', '01', '15.92', '2019', '10', '02', '15.72', '2019', '10', '03', '16.06', 'jd', '2019', '10', '01', '28.19', '2019', '10', '02', '28.06', '2019', '10', '03', '28.80', 'name', '收盘', 'dtype', 'float64', '多维', '索引', '空白', '意思', '使用', '上面', 'ser', 'indexmultiindex', 'baba', '2019', '10', '01', 'baba', '2019', '10', '02', 'baba', '2019', '10', '03', 'bidu', '2019', '10', '01', 'bidu', '2019', '10', '02', 'bidu', '2019', '10', '03', 'iq', '2019', '10', '01', 'iq', '2019', '10', '02', 'iq', '2019', '10', '03', 'jd', '2019', '10', '01', 'jd', '2019', '10', '02', 'jd', '2019', '10', '03', 'names', '公司', '日期', 'unstack', '二级', '索引', '变成', 'ser', 'unstack', '日期', '2019', '10', '012019', '10', '022019', '10', '03', '公司', 'baba165.15165', '77169.48', 'bidu102.00102', '62104.32', 'iq15.9215', '7216.06', 'jd28.1928', '0628.80', 'ser', '公司', '日期', 'baba', '2019', '10', '01', '165.15', '2019', '10', '02', '165.77', '2019', '10', '03', '169.48', 'bidu', '2019', '10', '01', '102.00', '2019', '10', '02', '102.62', '2019', '10', '03', '104.32', 'iq', '2019', '10', '01', '15.92', '2019', '10', '02', '15.72', '2019', '10', '03', '16.06', 'jd', '2019', '10', '01', '28.19', '2019', '10', '02', '28.06', '2019', '10', '03', '28.80', 'name', '收盘', 'dtype', 'float64ser', 'reset', 'index', '公司', '日期', '收盘', '0baba2019', '10', '01165.151', 'baba2019', '10', '02165.772', 'baba2019', '10', '03169.483', 'bidu2019', '10', '01102.004', 'bidu2019', '10', '02102.625', 'bidu2019', '10', '03104.326', 'iq2019', '10', '0115.927', 'iq2019', '10', '0215.728', 'iq2019', '10', '0316.069', 'jd2019', '10', '0128.1910', 'jd2019', '10', '0228.0611', 'jd2019', '10', '0328.80', 'series', '多层', '索引', 'multiindex', '怎样', '筛选', '数据', 'ser', '公司', '日期', 'baba', '2019', '10', '01', '165.15', '2019', '10', '02', '165.77', '2019', '10', '03', '169.48', 'bidu', '2019', '10', '01', '102.00', '2019', '10', '02', '102.62', '2019', '10', '03', '104.32', 'iq', '2019', '10', '01', '15.92', '2019', '10', '02', '15.72', '2019', '10', '03', '16.06', 'jd', '2019', '10', '01', '28.19', '2019', '10', '02', '28.06', '2019', '10', '03', '28.80', 'name', '收盘', 'dtype', 'float64ser', 'loc', 'bidu', '日期', '2019', '10', '01', '102.002019', '10', '02', '102.622019', '10', '03', '104.32', 'name', '收盘', 'dtype', 'float64', '多层', '索引', '可以', '元组', '形式', '筛选', 'ser', 'loc', 'bidu', '2019', '10', '02', '102.62', 'ser', 'loc', '2019', '10', '02', '公司', 'baba', '165.77', 'bidu', '102.62', 'iq', '15.72', 'jd', '28.06', 'name', '收盘', 'dtype', 'float64', 'dataframe', '多层', '索引', 'multiindexstocks', 'head', '日期', '公司', '收盘', '开盘', '高低', '交易量', '涨跌幅', '02019', '10', '03bidu104.32102', '35104.73101', '152.240', '0212019', '10', '02bidu102.62100', '85103.2499', '502.690', '0122019', '10', '01bidu102.00102', '80103.26101', '001.78', '0.0132019', '10', '03baba169.48166', '65170.18165', '0010.390', '0242019', '10', '02baba165.77162', '82166.88161', '9011.600', '00stocks', 'set', 'index', '公司', '日期', 'inplace', 'true', 'stocks', '收盘', '开盘', '高低', '交易量', '涨跌幅', '公司', '日期', 'bidu2019', '10', '03104.32102', '35104.73101', '152.240', '022019', '10', '02102.62100', '85103.2499', '502.690', '012019', '10', '01102.00102', '80103.26101', '001.78', '0.01', 'baba2019', '10', '03169.48166', '65170.18165', '0010.390', '022019', '10', '02165.77162', '82166.88161', '9011.600', '002019', '10', '01165.15168', '01168.23163', '6414.19', '0.01', 'iq2019', '10', '0316.0615', '7116.3815', '3210.080', '022019', '10', '0215.7215', '8515.8715', '128.10', '0.012019', '10', '0115.9216', '1416.2215', '5011.65', '0.01', 'jd2019', '10', '0328.8028', '1128.9727', '828.770', '032019', '10', '0228.0628', '0028.2227', '539.530', '002019', '10', '0128.1928', '2228.5727', '9710.640', '00stocks', 'indexmultiindex', 'bidu', '2019', '10', '03', 'bidu', '2019', '10', '02', 'bidu', '2019', '10', '01', 'baba', '2019', '10', '03', 'baba', '2019', '10', '02', 'baba', '2019', '10', '01', 'iq', '2019', '10', '03', 'iq', '2019', '10', '02', 'iq', '2019', '10', '01', 'jd', '2019', '10', '03', 'jd', '2019', '10', '02', 'jd', '2019', '10', '01', 'names', '公司', '日期', 'stocks', 'sort', 'index', 'inplace', 'true', 'stocks', '收盘', '开盘', '高低', '交易量', '涨跌幅', '公司', '日期', 'baba2019', '10', '01165.15168', '01168.23163', '6414.19', '0.012019', '10', '02165.77162', '82166.88161', '9011.600', '002019', '10', '03169.48166', '65170.18165', '0010.390', '02bidu2019', '10', '01102.00102', '80103.26101', '001.78', '0.012019', '10', '02102.62100', '85103.2499', '502.690', '012019', '10', '03104.32102', '35104.73101', '152.240', '02iq2019', '10', '0115.9216', '1416.2215', '5011.65', '0.012019', '10', '0215.7215', '8515.8715', '128.10', '0.012019', '10', '0316.0615', '7116.3815', '3210.080', '02jd2019', '10', '0128.1928', '2228.5727', '9710.640', '002019', '10', '0228.0628', '0028.2227', '539.530', '002019', '10', '0328.8028', '1128.9727', '828.770', '03', 'dataframe', '多层', '索引', 'multiindex', '怎样', '筛选', '数据', '重要', '知识', '选择', '数据', '元组', 'key1', 'key2', '代表', '筛选', '多层', '索引', '其中', 'key1', '索引', '第一级', 'key2', '第二级', '比如', 'key1', 'jd', 'key2', '2019', '10', '02', '列表', 'key1', 'key2', '代表', '一层', '多个', 'key', '其中', 'key1', 'key2', '并列', '同级', '索引', '比如', 'key1', 'jd', 'key2', 'bidustocks', 'loc', 'bidu', '收盘', '开盘', '高低', '交易量', '涨跌幅', '日期', '2019', '10', '01102.00102', '80103.26101', '001.78', '0.012019', '10', '02102.62100', '85103.2499', '502.690', '012019', '10', '03104.32102', '35104.73101', '152.240', '02stocks', 'loc', 'bidu', '2019', '10', '02', '收盘', '102.62', '开盘', '100.85', '103.24', '99.50', '交易量', '2.69', '涨跌幅', '0.01', 'name', 'bidu', '2019', '10', '02', 'dtype', 'float64stocks', 'loc', 'bidu', '2019', '10', '02', '开盘', '100.85', 'stocks', 'loc', 'bidu', 'jd', '收盘', '开盘', '高低', '交易量', '涨跌幅', '公司', '日期', 'bidu2019', '10', '01102.00102', '80103.26101', '001.78', '0.012019', '10', '02102.62100', '85103.2499', '502.690', '012019', '10', '03104.32102', '35104.73101', '152.240', '02jd2019', '10', '0128.1928', '2228.5727', '9710.640', '002019', '10', '0228.0628', '0028.2227', '539.530', '002019', '10', '0328.8028', '1128.9727', '828.770', '03stocks', 'loc', 'bidu', 'jd', '2019', '10', '03', '收盘', '开盘', '高低', '交易量', '涨跌幅', '公司', '日期', 'bidu2019', '10', '03104.32102', '35104.73101', '152.240', '02jd2019', '10', '0328.8028', '1128.9727', '828.770', '03stocks', 'loc', 'bidu', 'jd', '2019', '10', '03', '收盘', '公司', '日期', 'bidu', '2019', '10', '03', '104.32', 'jd', '2019', '10', '03', '28.80', 'name', '收盘', 'dtype', 'float64stocks', 'loc', 'bidu', '2019', '10', '02', '2019', '10', '03', '收盘', '公司', '日期', 'bidu', '2019', '10', '02', '102.62', '2019', '10', '03', '104.32', 'name', '收盘', 'dtype', 'float64', 'slice', 'none', '代表', '筛选', '这一', '索引', '所有', '内容', 'stocks', 'loc', 'slice', 'none', '2019', '10', '02', '2019', '10', '03', '收盘', '开盘', '高低', '交易量', '涨跌幅', '公司', '日期', 'baba2019', '10', '02165.77162', '82166.88161', '9011.600', '002019', '10', '03169.48166', '65170.18165', '0010.390', '02bidu2019', '10', '02102.62100', '85103.2499', '502.690', '012019', '10', '03104.32102', '35104.73101', '152.240', '02iq2019', '10', '0215.7215', '8515.8715', '128.10', '0.012019', '10', '0316.0615', '7116.3815', '3210.080', '02jd2019', '10', '0228.0628', '0028.2227', '539.530', '002019', '10', '0328.8028', '1128.9727', '828.770', '03stocks', 'reset', 'index', '公司', '日期', '收盘', '开盘', '高低', '交易量', '涨跌幅', '0baba2019', '10', '01165.15168', '01168.23163', '6414.19', '0.011', 'baba2019', '10', '02165.77162', '82166.88161', '9011.600', '002baba2019', '10', '03169.48166', '65170.18165', '0010.390', '023bidu2019', '10', '01102.00102', '80103.26101', '001.78', '0.014', 'bidu2019', '10', '02102.62100', '85103.2499', '502.690', '015bidu2019', '10', '03104.32102', '35104.73101', '152.240', '026iq2019', '10', '0115.9216', '1416.2215', '5011.65', '0.017', 'iq2019', '10', '0215.7215', '8515.8715', '128.10', '0.018', 'iq2019', '10', '0316.0615', '7116.3815', '3210.080', '029jd2019', '10', '0128.1928', '2228.5727', '9710.640', '0010jd2019', '10', '0228.0628', '0028.2227', '539.530', '0011jd2019', '10', '0328.8028', '1128.9727', '828.770', '03', '转载', '注明', '链接', 'http', 'www', 'crazyant', 'net', '2598', 'html']","[[-0.32072392 -0.05419295  0.33779009  0.08683872  0.32581576 -0.51978735
  -0.06814855  0.52072452 -0.10527882 -0.16617381 -0.05387598 -0.48211764
  -0.14946065  0.58415311  0.19512914 -0.14840464 -0.09944035 -0.03918833
  -0.01659112 -0.59445411 -0.09503637  0.32837602 -0.0509586  -0.24592865
   0.0574565  -0.50871774 -0.3175337  -0.03073149 -0.24409926 -0.0827504
   0.20360711 -0.00608403  0.05425784 -0.10067515 -0.19185625  0.33716449
  -0.23305156 -0.3136654   0.10490183 -0.85509993 -0.14856011 -0.7105313
  -0.12719042 -0.02320293 -0.13453209 -0.29367283 -0.28360908  0.34405547
  -0.25604718  0.58066067  0.12448867 -0.23851865 -0.15041985 -0.204956
  -0.09895883  0.37187201  0.12383941 -0.14846208  0.0678007  -0.13848336
   0.12321742  0.29203834  0.0051586   0.0794289  -0.41822801  0.04100658
   0.13534599 -0.0764247  -0.33090325  0.47727869  0.01218276 -0.17712534
   0.41591438 -0.36171015  0.64319976  0.4076226   0.14572283 -0.19100417
  -0.31607695 -0.1187246   0.05534764  0.09128715 -0.14172755  0.48950508
  -0.34905064  0.21557323 -0.29340585  0.56732255  0.53050462  0.19817163
   0.25777147  0.19477014  0.43066597  0.16832448  0.25439212  0.35554971
   0.1953334  -0.40524086 -0.01783257 -0.08467555]]"
2602,怎样使用Pandas的map和apply函数？," 数据转换函数对比：map、apply、applymap：1. map：只用于Series，实现每个值->值的映射；2. apply：用于Series实现每个值的处理，用于Dataframe实现某个轴的Series的处理；3. applymap：只能用于DataFrame，用于处理该DataFrame的每个元素；1. map用于Series值的转换实例：将股票代码英文转换成中文名字Series.map(dict) or Series.map(function)均可import pandas as pdstocks = pd.read_excel('./datas/stocks/互联网公司股票.xlsx')stocks.head()日期公司收盘开盘高低交易量涨跌幅02019-10-03BIDU104.32102.35104.73101.152.240.0212019-10-02BIDU102.62100.85103.2499.502.690.0122019-10-01BIDU102.00102.80103.26101.001.78-0.0132019-10-03BABA169.48166.65170.18165.0010.390.0242019-10-02BABA165.77162.82166.88161.9011.600.00stocks[""公司""].unique()array(['BIDU', 'BABA', 'IQ', 'JD'], dtype=object)# 公司股票代码到中文的映射，注意这里是小写dict_company_names = {    ""bidu"": ""百度"",    ""baba"": ""阿里巴巴"",    ""iq"": ""爱奇艺"",     ""jd"": ""京东""}方法1：Series.map(dict)stocks[""公司中文1""] = stocks[""公司""].str.lower().map(dict_company_names)stocks.head()日期公司收盘开盘高低交易量涨跌幅公司中文102019-10-03BIDU104.32102.35104.73101.152.240.02百度12019-10-02BIDU102.62100.85103.2499.502.690.01百度22019-10-01BIDU102.00102.80103.26101.001.78-0.01百度32019-10-03BABA169.48166.65170.18165.0010.390.02阿里巴巴42019-10-02BABA165.77162.82166.88161.9011.600.00阿里巴巴方法2：Series.map(function)function的参数是Series的每个元素的值stocks[""公司中文2""] = stocks[""公司""].map(lambda x : dict_company_names[x.lower()])stocks.head()日期公司收盘开盘高低交易量涨跌幅公司中文1公司中文202019-10-03BIDU104.32102.35104.73101.152.240.02百度百度12019-10-02BIDU102.62100.85103.2499.502.690.01百度百度22019-10-01BIDU102.00102.80103.26101.001.78-0.01百度百度32019-10-03BABA169.48166.65170.18165.0010.390.02阿里巴巴阿里巴巴42019-10-02BABA165.77162.82166.88161.9011.600.00阿里巴巴阿里巴巴2. apply用于Series和DataFrame的转换Series.apply(function), 函数的参数是每个值DataFrame.apply(function), 函数的参数是SeriesSeries.apply(function)function的参数是Series的每个值stocks[""公司中文3""] = stocks[""公司""].apply(    lambda x : dict_company_names[x.lower()])stocks.head()日期公司收盘开盘高低交易量涨跌幅公司中文1公司中文2公司中文302019-10-03BIDU104.32102.35104.73101.152.240.02百度百度百度12019-10-02BIDU102.62100.85103.2499.502.690.01百度百度百度22019-10-01BIDU102.00102.80103.26101.001.78-0.01百度百度百度32019-10-03BABA169.48166.65170.18165.0010.390.02阿里巴巴阿里巴巴阿里巴巴42019-10-02BABA165.77162.82166.88161.9011.600.00阿里巴巴阿里巴巴阿里巴巴DataFrame.apply(function)function的参数是对应轴的Seriesstocks[""公司中文4""] = stocks.apply(    lambda x : dict_company_names[x[""公司""].lower()],     axis=1)注意这个代码：1、apply是在stocks这个DataFrame上调用；2、lambda x的x是一个Series，因为指定了axis=1所以Seires的key是列名，可以用x['公司']获取stocks.head()日期公司收盘开盘高低交易量涨跌幅公司中文1公司中文2公司中文3公司中文402019-10-03BIDU104.32102.35104.73101.152.240.02百度百度百度百度12019-10-02BIDU102.62100.85103.2499.502.690.01百度百度百度百度22019-10-01BIDU102.00102.80103.26101.001.78-0.01百度百度百度百度32019-10-03BABA169.48166.65170.18165.0010.390.02阿里巴巴阿里巴巴阿里巴巴阿里巴巴42019-10-02BABA165.77162.82166.88161.9011.600.00阿里巴巴阿里巴巴阿里巴巴阿里巴巴3. applymap用于DataFrame所有值的转换sub_df = stocks[['收盘', '开盘', '高', '低', '交易量']]sub_df.head()收盘开盘高低交易量0104.32102.35104.73101.152.241102.62100.85103.2499.502.692102.00102.80103.26101.001.783169.48166.65170.18165.0010.394165.77162.82166.88161.9011.60# 将这些数字取整数，应用于所有元素sub_df.applymap(lambda x : int(x))收盘开盘高低交易量0104102104101211021001039922102102103101131691661701651041651621661611151651681681631461615161510715151515881516161511928282827810282828279112828282710# 直接修改原df的这几列stocks.loc[:, ['收盘', '开盘', '高', '低', '交易量']] = sub_df.applymap(lambda x : int(x))stocks.head()日期公司收盘开盘高低交易量涨跌幅公司中文1公司中文2公司中文3公司中文402019-10-03BIDU10410210410120.02百度百度百度百度12019-10-02BIDU1021001039920.01百度百度百度百度22019-10-01BIDU1021021031011-0.01百度百度百度百度32019-10-03BABA169166170165100.02阿里巴巴阿里巴巴阿里巴巴阿里巴巴42019-10-02BABA165162166161110.00阿里巴巴阿里巴巴阿里巴巴阿里巴巴","['怎样', '使用', 'pandas', 'map', 'apply', '函数', '数据', '转换', '函数', '对比', 'map', 'apply', 'applymap', 'map', '用于', 'series', '实现', '每个', '映射', 'apply', '用于', 'series', '实现', '每个', '处理', '用于', 'dataframe', '实现', '某个', 'series', '处理', 'applymap', '只能', '用于', 'dataframe', '用于', '处理', 'dataframe', '每个', '元素', 'map', '用于', 'series', '转换', '实例', '股票代码', '英文', '转换成', '中文', '名字', 'series', 'map', 'dict', 'or', 'series', 'map', 'function', 'import', 'pandas', 'as', 'pdstocks', 'pd', 'read', 'excel', 'datas', 'stocks', '互联网', '公司股票', 'xlsx', 'stocks', 'head', '日期', '公司', '收盘', '开盘', '高低', '交易量', '涨跌幅', '02019', '10', '03bidu104.32102', '35104.73101', '152.240', '0212019', '10', '02bidu102.62100', '85103.2499', '502.690', '0122019', '10', '01bidu102.00102', '80103.26101', '001.78', '0.0132019', '10', '03baba169.48166', '65170.18165', '0010.390', '0242019', '10', '02baba165.77162', '82166.88161', '9011.600', '00stocks', '公司', 'unique', 'array', 'bidu', 'baba', 'iq', 'jd', 'dtype', 'object', '公司', '股票代码', '中文', '映射', '注意', '这里', '小写', 'dict', 'company', 'names', 'bidu', '百度', 'baba', '阿里巴巴', 'iq', '爱奇艺', 'jd', '京东', '方法', 'series', 'map', 'dict', 'stocks', '公司', '中文', 'stocks', '公司', 'str', 'lower', 'map', 'dict', 'company', 'names', 'stocks', 'head', '日期', '公司', '收盘', '开盘', '高低', '交易量', '涨跌幅', '公司', '中文', '102019', '10', '03bidu104.32102', '35104.73101', '152.240', '02', '百度', '12019', '10', '02bidu102.62100', '85103.2499', '502.690', '01', '百度', '22019', '10', '01bidu102.00102', '80103.26101', '001.78', '0.01', '百度', '32019', '10', '03baba169.48166', '65170.18165', '0010.390', '02', '阿里巴巴', '42019', '10', '02baba165.77162', '82166.88161', '9011.600', '00', '阿里巴巴', '方法', 'series', 'map', 'function', 'function', '参数', 'series', '每个', '元素', 'stocks', '公司', '中文', 'stocks', '公司', 'map', 'lambda', 'dict', 'company', 'names', 'lower', 'stocks', 'head', '日期', '公司', '收盘', '开盘', '高低', '交易量', '涨跌幅', '公司', '中文', '公司', '中文', '202019', '10', '03bidu104.32102', '35104.73101', '152.240', '02', '百度', '百度', '12019', '10', '02bidu102.62100', '85103.2499', '502.690', '01', '百度', '百度', '22019', '10', '01bidu102.00102', '80103.26101', '001.78', '0.01', '百度', '百度', '32019', '10', '03baba169.48166', '65170.18165', '0010.390', '02', '阿里巴巴', '阿里巴巴', '42019', '10', '02baba165.77162', '82166.88161', '9011.600', '00', '阿里巴巴', '阿里巴巴', 'apply', '用于', 'series', 'dataframe', '转换', 'series', 'apply', 'function', '函数', '参数', '每个', 'dataframe', 'apply', 'function', '函数', '参数', 'seriesseries', 'apply', 'function', 'function', '参数', 'series', '每个', 'stocks', '公司', '中文', 'stocks', '公司', 'apply', 'lambda', 'dict', 'company', 'names', 'lower', 'stocks', 'head', '日期', '公司', '收盘', '开盘', '高低', '交易量', '涨跌幅', '公司', '中文', '公司', '中文', '公司', '中文', '302019', '10', '03bidu104.32102', '35104.73101', '152.240', '02', '百度', '百度', '百度', '12019', '10', '02bidu102.62100', '85103.2499', '502.690', '01', '百度', '百度', '百度', '22019', '10', '01bidu102.00102', '80103.26101', '001.78', '0.01', '百度', '百度', '百度', '32019', '10', '03baba169.48166', '65170.18165', '0010.390', '02', '阿里巴巴', '阿里巴巴', '阿里巴巴', '42019', '10', '02baba165.77162', '82166.88161', '9011.600', '00', '阿里巴巴', '阿里巴巴', '阿里巴巴', 'dataframe', 'apply', 'function', 'function', '参数', '对应', 'seriesstocks', '公司', '中文', 'stocks', 'apply', 'lambda', 'dict', 'company', 'names', '公司', 'lower', 'axis', '注意', '这个', '代码', 'apply', 'stocks', '这个', 'dataframe', '调用', 'lambda', '一个', 'series', '因为', '指定', 'axis', '所以', 'seires', 'key', '列名', '可以', '公司', '获取', 'stocks', 'head', '日期', '公司', '收盘', '开盘', '高低', '交易量', '涨跌幅', '公司', '中文', '公司', '中文', '公司', '中文', '公司', '中文', '402019', '10', '03bidu104.32102', '35104.73101', '152.240', '02', '百度', '百度', '百度', '百度', '12019', '10', '02bidu102.62100', '85103.2499', '502.690', '01', '百度', '百度', '百度', '百度', '22019', '10', '01bidu102.00102', '80103.26101', '001.78', '0.01', '百度', '百度', '百度', '百度', '32019', '10', '03baba169.48166', '65170.18165', '0010.390', '02', '阿里巴巴', '阿里巴巴', '阿里巴巴', '阿里巴巴', '42019', '10', '02baba165.77162', '82166.88161', '9011.600', '00', '阿里巴巴', '阿里巴巴', '阿里巴巴', '阿里巴巴', 'applymap', '用于', 'dataframe', '所有', '转换', 'sub', 'df', 'stocks', '收盘', '开盘', '交易量', 'sub', 'df', 'head', '收盘', '开盘', '高低', '交易量', '0104.32102', '35104.73101', '152.241102', '62100.85103', '2499.502', '692102.00102', '80103.26101', '001.783169', '48166.65170', '18165.0010', '394165.77162', '82166.88161', '9011.60', '这些', '数字', '整数', '应用', '所有', '元素', 'sub', 'df', 'applymap', 'lambda', 'int', '收盘', '开盘', '高低', '交易量', '0104102104101211021001039922102102103101131691661701651041651621661611151651681681631461615161510715151515881516161511928282827810282828279112828282710', '直接', '修改', 'df', '几列', 'stocks', 'loc', '收盘', '开盘', '交易量', 'sub', 'df', 'applymap', 'lambda', 'int', 'stocks', 'head', '日期', '公司', '收盘', '开盘', '高低', '交易量', '涨跌幅', '公司', '中文', '公司', '中文', '公司', '中文', '公司', '中文', '402019', '10', '03bidu10410210410120.02', '百度', '百度', '百度', '百度', '12019', '10', '02bidu1021001039920.01', '百度', '百度', '百度', '百度', '22019', '10', '01bidu1021021031011', '0.01', '百度', '百度', '百度', '百度', '32019', '10', '03baba169166170165100.02', '阿里巴巴', '阿里巴巴', '阿里巴巴', '阿里巴巴', '42019', '10', '02baba165162166161110.00', '阿里巴巴', '阿里巴巴', '阿里巴巴', '阿里巴巴']","[[-0.28043308 -0.09546392  0.29444008  0.13283016  0.3028052  -0.44319221
  -0.11702796  0.50521823 -0.06442081 -0.11454103 -0.05313947 -0.41894819
  -0.15423651  0.59265348  0.17191188 -0.13111595 -0.1281765  -0.02198762
  -0.05506379 -0.54810589 -0.05120471  0.29051613 -0.0386348  -0.19605978
   0.07312349 -0.51497753 -0.31730112  0.03045442 -0.24012294 -0.07254976
   0.212574    0.01166313  0.02375831 -0.1223195  -0.16368082  0.34310084
  -0.20093376 -0.28949067  0.10023965 -0.80900237 -0.1558813  -0.6564402
  -0.09137692 -0.0321965  -0.14264867 -0.24595332 -0.27628441  0.39423025
  -0.21177359  0.5065308   0.14676988 -0.26571634 -0.13094452 -0.21294083
  -0.02868381  0.39584873  0.17535809 -0.1167738   0.09147401 -0.12785849
   0.09253577  0.28237867  0.01048444  0.08873743 -0.41054516  0.02845919
   0.07988995 -0.04747963 -0.29628747  0.4686526   0.07431215 -0.20858412
   0.41562273 -0.35325216  0.60765875  0.30803216  0.17459683 -0.17650199
  -0.3100126  -0.15504634 -0.0009526   0.05250025 -0.11249158  0.42864645
  -0.36152143  0.21884224 -0.30044984  0.50428883  0.51587445  0.17772942
   0.26828861  0.14887922  0.39685044  0.18188567  0.22135848  0.37491088
   0.14507505 -0.35758785 -0.00797083 -0.09649186]]"
2604,Pandas怎样对每个分组应用apply函数?,"Pandas怎样对每个分组应用apply函数?知识：Pandas的GroupBy遵从split、apply、combine模式这里的split指的是pandas的groupby，我们自己实现apply函数，apply返回的结果由pandas进行combine得到结果GroupBy.apply(function)function的第一个参数是dataframefunction的返回结果，可是dataframe、series、单个值，甚至和输入dataframe完全没关系本次实例演示：怎样对数值列按分组的归一化？怎样取每个分组的TOPN数据？实例1：怎样对数值列按分组的归一化？将不同范围的数值列进行归一化，映射到[0,1]区间：* 更容易做数据横向对比，比如价格字段是几百到几千，增幅字段是0到100* 机器学习模型学的更快性能更好归一化的公式：演示：用户对电影评分的归一化每个用户的评分不同，有的乐观派评分高，有的悲观派评分低，按用户做归一化import pandas as pdratings = pd.read_csv(    ""./datas/movielens-1m/ratings.dat"",     sep=""::"",    engine='python',     names=""UserID::MovieID::Rating::Timestamp"".split(""::""))ratings.head()UserIDMovieIDRatingTimestamp011193597830076011661397830210921914397830196831340849783002754123555978824291# 实现按照用户ID分组，然后对其中一列归一化def ratings_norm(df):    """"""    @param df：每个用户分组的dataframe    """"""    min_value = df[""Rating""].min()    max_value = df[""Rating""].max()    df[""Rating_norm""] = df[""Rating""].apply(        lambda x: (x-min_value)/(max_value-min_value))    return dfratings = ratings.groupby(""UserID"").apply(ratings_norm)ratings[ratings[""UserID""]==1].head()UserIDMovieIDRatingTimestampRating_norm01119359783007601.01166139783021090.02191439783019680.031340849783002750.541235559788242911.0可以看到UserID==1这个用户，Rating==3是他的最低分，是个乐观派，我们归一化到0分；实例2：怎样取每个分组的TOPN数据？获取2018年每个月温度最高的2天数据fpath = ""./datas/beijing_tianqi/beijing_tianqi_2018.csv""df = pd.read_csv(fpath)# 替换掉温度的后缀℃df.loc[:, ""bWendu""] = df[""bWendu""].str.replace(""℃"", """").astype('int32')df.loc[:, ""yWendu""] = df[""yWendu""].str.replace(""℃"", """").astype('int32')# 新增一列为月份df['month'] = df['ymd'].str[:7]df.head()ymdbWenduyWendutianqifengxiangfengliaqiaqiInfoaqiLevelmonth02018-01-013-6晴~多云东北风1-2级59良22018-0112018-01-022-5阴~多云东北风1-2级49优12018-0122018-01-032-5多云北风1-2级28优12018-0132018-01-040-8阴东北风1-2级28优12018-0142018-01-053-6多云~晴西北风1-2级50优12018-01def getWenduTopN(df, topn):    """"""    这里的df，是每个月份分组group的df    """"""    return df.sort_values(by=""bWendu"")[[""ymd"", ""bWendu""]][-topn:]df.groupby(""month"").apply(getWenduTopN, topn=1).head()ymdbWendumonth2018-01182018-01-1972018-02562018-02-26122018-03852018-03-27272018-041182018-04-29302018-051502018-05-3135我们看到，grouby的apply函数返回的dataframe，其实和原来的dataframe其实可以完全不一样视频地址在：http://www.iqiyi.com/a_19rrhyyqix.html","['pandas', '怎样', '每个', '分组', '应用', 'apply', '函数', 'pandas', '怎样', '每个', '分组', '应用', 'apply', '函数', '知识', 'pandas', 'groupby', '遵从', 'split', 'apply', 'combine', '模式', '这里', 'split', 'pandas', 'groupby', '我们', '自己', '实现', 'apply', '函数', 'apply', '返回', '结果', 'pandas', '进行', 'combine', '得到', '结果', 'groupby', 'apply', 'function', 'function', '第一个', '参数', 'dataframefunction', '返回', '结果', '可是', 'dataframe', 'series', '单个', '甚至', '输入', 'dataframe', '完全', '没关系', '本次', '实例', '演示', '怎样', '数值', '分组', '归一化', '怎样', '每个', '分组', 'topn', '数据', '实例', '怎样', '数值', '分组', '归一化', '不同', '范围', '数值', '进行', '归一化', '映射', '区间', '容易', '数据', '横向', '对比', '比如', '价格', '字段', '几百', '几千', '增幅', '字段', '100', '机器', '学习', '模型', '性能', '更好', '归一化', '公式', '演示', '用户', '电影', '评分', '归一化', '每个', '用户', '评分', '不同', '乐观', '评分', '悲观派', '评分', '用户', '归一化', 'import', 'pandas', 'as', 'pdratings', 'pd', 'read', 'csv', 'datas', 'movielens', '1m', 'ratings', 'dat', 'sep', 'engine', 'python', 'names', 'userid', 'movieid', 'rating', 'timestamp', 'split', 'ratings', 'head', 'useridmovieidratingtimestamp011193597830076011661397830210921914397830196831340849783002754123555978824291', '实现', '按照', '用户', 'id', '分组', '然后', '其中', '一列', '归一化', 'def', 'ratings', 'norm', 'df', 'param', 'df', '每个', '用户', '分组', 'dataframe', 'min', 'value', 'df', 'rating', 'min', 'max', 'value', 'df', 'rating', 'max', 'df', 'rating', 'norm', 'df', 'rating', 'apply', 'lambda', 'min', 'value', 'max', 'value', 'min', 'value', 'return', 'dfratings', 'ratings', 'groupby', 'userid', 'apply', 'ratings', 'norm', 'ratings', 'ratings', 'userid', 'head', 'useridmovieidratingtimestamprating', 'norm01119359783007601.01166139783021090', '02191439783019680.031340849783002750', '541235559788242911.0', '可以', '看到', 'userid', '这个', '用户', 'rating', '最低', '乐观', '我们', '归一化', '实例', '怎样', '每个', '分组', 'topn', '数据', '获取', '2018', '每个', '温度', '最高', '数据', 'fpath', 'datas', 'beijing', 'tianqi', 'beijing', 'tianqi', '2018', 'csv', 'df', 'pd', 'read', 'csv', 'fpath', '替换', '温度', '后缀', 'df', 'loc', 'bwendu', 'df', 'bwendu', 'str', 'replace', 'astype', 'int32', 'df', 'loc', 'ywendu', 'df', 'ywendu', 'str', 'replace', 'astype', 'int32', '新增', '列为', '月份', 'df', 'month', 'df', 'ymd', 'str', 'df', 'head', 'ymdbwenduywendutianqifengxiangfengliaqiaqiinfoaqilevelmonth02018', '01', '013', '多云', '东北风', '59', '22018', '0112018', '01', '022', '多云', '东北风', '49', '12018', '0122018', '01', '032', '多云', '北风', '28', '12018', '0132018', '01', '040', '东北风', '28', '12018', '0142018', '01', '053', '多云', '西北风', '50', '12018', '01def', 'getwendutopn', 'df', 'topn', '这里', 'df', '每个', '月份', '分组', 'group', 'df', 'return', 'df', 'sort', 'values', 'by', 'bwendu', 'ymd', 'bwendu', 'topn', 'df', 'groupby', 'month', 'apply', 'getwendutopn', 'topn', 'head', 'ymdbwendumonth2018', '01182018', '01', '1972018', '02562018', '02', '26122018', '03852018', '03', '27272018', '041182018', '04', '29302018', '051502018', '05', '3135', '我们', '看到', 'grouby', 'apply', '函数', '返回', 'dataframe', '其实', '原来', 'dataframe', '其实', '可以', '完全', '一样', '视频', '地址', 'http', 'www', 'iqiyi', 'com', '19rrhyyqix', 'html']","[[-0.27040801 -0.10597236  0.28088797  0.12547983  0.32482503 -0.42302204
  -0.13641258  0.51483278 -0.05447823 -0.10983077 -0.04409912 -0.41133806
  -0.16514859  0.60331411  0.17554633 -0.13265918 -0.14230414 -0.02107708
  -0.06725217 -0.56468317 -0.03616642  0.27844453 -0.04492935 -0.19566696
   0.08204007 -0.5342625  -0.32045712  0.04040395 -0.25521793 -0.07577991
   0.19773709  0.00358875  0.01400944 -0.13954218 -0.15772944  0.33260053
  -0.19169424 -0.27792834  0.1032161  -0.81790655 -0.17218527 -0.6691397
  -0.08456385 -0.03360637 -0.15152522 -0.24363603 -0.24217899  0.41167578
  -0.21639736  0.50851634  0.16429499 -0.2722026  -0.14718579 -0.19690018
  -0.02187935  0.40355016  0.1853591  -0.10823277  0.08640208 -0.13120305
   0.1009565   0.27760677  0.01760193  0.08915019 -0.41846582  0.02498348
   0.07096681 -0.04662979 -0.31316459  0.46458585  0.10262623 -0.20477419
   0.42009856 -0.34706104  0.61012333  0.28246832  0.15377318 -0.1658249
  -0.32994183 -0.14020986  0.00560852  0.0456669  -0.12061451  0.41516789
  -0.36898599  0.21548048 -0.30330965  0.48520135  0.52389551  0.16903881
   0.27702988  0.14299436  0.40720705  0.1945685   0.23521579  0.3665382
   0.13803912 -0.37042693 -0.04759383 -0.11040196]]"
2615,推荐系统实现相似推荐的流程和资源,视频位于：链接需要的资源整理：本视频涉及的相关资源：1、jieba中文分词库：https://github.com/fxsjy/jieba2、spark word2vec计算：http://spark.apache.org/docs/latest/ml-features.html#word2vec3、腾讯开源800万word2vec数据：https://ai.tencent.com/ailab/nlp/embedding.html4、Scipy的相似度计算函数：https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.spatial.distance.cosine.html5、相似度近邻搜索优化算法LSH局部敏感哈希http://spark.apache.org/docs/latest/ml-features.html#locality-sensitive-hashing ,"['推荐', '系统', '实现', '相似', '推荐', '流程', '资源', '视频', '位于', '链接', '需要', '资源', '整理', '视频', '涉及', '相关', '资源', 'jieba', '中文', '词库', 'https', 'github', 'com', 'fxsjy', 'jieba2', 'spark', 'word2vec', '计算', 'http', 'spark', 'apache', 'org', 'docs', 'latest', 'ml', 'features', 'html', 'word2vec3', '腾讯', '开源', '800', 'word2vec', '数据', 'https', 'ai', 'tencent', 'com', 'ailab', 'nlp', 'embedding', 'html4', 'scipy', '相似', '计算', '函数', 'https', 'docs', 'scipy', 'org', 'doc', 'scipy', '0.14', 'reference', 'generated', 'scipy', 'spatial', 'distance', 'cosine', 'html5', '相似', '近邻', '搜索', '优化', '算法', 'lsh', '局部', '敏感', '哈希', 'http', 'spark', 'apache', 'org', 'docs', 'latest', 'ml', 'features', 'html', 'locality', 'sensitive', 'hashing']","[[-0.27655334 -0.07232752  0.28476627  0.35867841  0.12021098 -0.40118105
  -0.06506886  0.48703631 -0.0895936  -0.1042918  -0.09842967 -0.42635443
  -0.02312763  0.50378158  0.1015993  -0.17086066 -0.10058868 -0.01433428
   0.03277093 -0.36843764 -0.01254413  0.3330424  -0.14149476 -0.22223427
  -0.04953236 -0.37286795 -0.34941616  0.06139561 -0.15601418 -0.08070268
   0.16431481  0.15097984  0.01136976 -0.0791717  -0.21702971  0.41913057
  -0.17068366 -0.27429161  0.04199187 -0.62573221 -0.01550848 -0.44530309
  -0.04239784 -0.02633348 -0.10905228 -0.2732304  -0.40641591  0.39100156
   0.03766525  0.32570826 -0.0126151  -0.33637783  0.03330357 -0.27975102
  -0.02016035  0.45649182  0.13908985 -0.08606817  0.14939519 -0.08760212
   0.17594618  0.15596971  0.00510309  0.06201987 -0.33169278  0.09029941
  -0.06240473  0.08633037 -0.19719118  0.41951212 -0.02416325 -0.12494823
   0.43048635 -0.33932394  0.50581777  0.34558021  0.31728601 -0.25135435
  -0.17151807 -0.22146163 -0.12627248  0.02656754 -0.12140895  0.45106593
  -0.33683016  0.16513191 -0.26432182  0.52754878  0.55836648  0.21408647
   0.1315005   0.11993264  0.28729546  0.16832881  0.19364395  0.48995467
   0.05455802 -0.17264906  0.29197227 -0.09347944]]"
2623,文章写的好，但是没人看，原来标题可以这么写,有一种方法，就是三段式标题。三段式，来自百度百科：地址：https://baike.baidu.com/item/%E4%B8%89%E6%AE%B5%E5%BC%8F/10868374?fr=aladdin···德国哲学家黑格尔用来说明发展过程公式。认为一切发展都经历三个阶段，即发展的起点（正题），对立面的显现（反题），对立面的统一（合题）。反题否定正题，合题否定反题，合题是否定之否定。黑格尔把三段式作为论证其客观唯心主义工具，却为事物从低级到高级发展的辩证法开辟了道路。···来自头条起标题的一个说明：三段式是指用三个小分句组成标题的形式，是最容易出爆款的句式，因为它的套路比较清晰明了易模仿，标题中可以容纳更多的信息点，然后用递进、转折增加标题的争议。大数据显示，三段式的标题比两段式的标题更加吸引用户点击。例子：原标题 ：这样表达，你的听众才会被打动！点击/展示 ：4338/112326=3.86%优化 标题 ：开会时，怎么发言最有水平？一个小技巧让领导对你刮目相看点击/展示 ：107387/997934=10.76%案例解析 ：原标题太过简略，没有具体场景，优化后的标题设置了“职场”场景，给用户强烈代入感，并且突出了实用价值“让领导对你刮目相看”。另一个例子,"['文章', '但是', '没人', '原来', '标题', '可以', '这么', '一种', '方法', '就是', '三段式', '标题', '三段式', '来自', '百度', '百科', '地址', 'https', 'baike', 'baidu', 'com', 'item', 'e4%', 'b8%', '89%', 'e6%', 'ae%', 'b5%', 'e5%', 'bc%', '8f', '10868374', 'fr', 'aladdin', '德国', '哲学家', '黑格尔', '用来', '说明', '发展', '过程', '公式', '认为', '一切', '发展', '经历', '三个', '阶段', '发展', '起点', '正题', '对立面', '显现', '反题', '对立面', '统一', '合题', '反题', '否定', '正题', '合题', '否定', '反题', '合题', '否定', '否定', '黑格尔', '三段式', '作为', '论证', '客观唯心主义', '工具', '事物', '低级', '高级', '发展', '辩证法', '开辟', '道路', '来自', '头条', '标题', '一个', '说明', '三段式', '指用', '三个', '分句', '组成', '标题', '形式', '容易', '爆款', '句式', '因为', '套路', '比较', '清晰', '模仿', '标题', '可以', '容纳', '信息点', '然后', '递进', '转折', '增加', '标题', '争议', '数据', '显示', '三段式', '标题', '两段式', '标题', '更加', '吸引', '用户', '点击', '例子', '标题', '这样', '表达', '听众', '打动', '点击', '展示', '4338', '112326', '3.86%', '优化', '标题', '开会', '怎么', '发言', '最有', '水平', '一个', '技巧', '领导', '刮目相看', '点击', '展示', '107387', '997934', '10.76%', '案例', '解析', '标题', '太过', '简略', '没有', '具体', '场景', '优化', '标题', '设置', '职场', '场景', '用户', '强烈', '代入', '并且', '突出', '实用价值', '领导', '刮目相看', '一个', '例子']","[[-2.26146493e-01 -1.23023021e-01  2.09350920e-01  1.79648550e-01
   2.40959892e-01 -3.26696545e-01 -1.55861508e-01  4.41782364e-01
  -1.10696740e-02 -2.70541739e-02 -6.54577737e-02 -3.15283171e-01
  -1.52453961e-01  5.37907398e-01  1.18918008e-01 -1.04111237e-01
  -1.34512437e-01 -1.42445849e-03 -7.07295898e-02 -3.92106902e-01
   2.50024945e-02  2.23697514e-01 -1.64818511e-02 -9.97079805e-02
   8.46512455e-02 -4.79787618e-01 -2.69128186e-01  8.03819062e-02
  -1.82718233e-01 -5.76134061e-02  2.15148063e-01  5.46828032e-02
  -8.81045235e-03 -1.21915485e-01 -1.14585887e-01  3.09884616e-01
  -1.24702604e-01 -1.99355701e-01  9.21102973e-02 -6.69811494e-01
  -1.36507892e-01 -5.17091906e-01 -3.28792166e-02 -6.43731076e-02
  -1.44810936e-01 -1.49637719e-01 -2.63789372e-01  4.18730716e-01
  -1.21312316e-01  3.45789035e-01  1.56462334e-01 -2.49479025e-01
  -7.23800117e-02 -2.20476537e-01  4.77750798e-02  3.63954958e-01
   2.14081192e-01 -6.12672492e-02  9.07734364e-02 -7.96806043e-02
   5.62030237e-02  2.52150692e-01  1.49941446e-02  7.81336109e-02
  -3.38426401e-01 -2.55335191e-03  1.97138794e-02 -2.14512396e-04
  -2.04300081e-01  3.95953941e-01  1.09928708e-01 -2.13415024e-01
   3.72277594e-01 -2.99012157e-01  5.20723137e-01  1.72614817e-01
   2.13087397e-01 -1.42451836e-01 -2.25943904e-01 -2.00967789e-01
  -8.41465995e-02  1.14186388e-03 -6.58346915e-02  3.18013479e-01
  -3.51340656e-01  1.77018672e-01 -2.58830326e-01  3.96922795e-01
   4.39721930e-01  1.26158866e-01  2.58285475e-01  1.15378502e-01
   3.14141448e-01  1.62025346e-01  1.71092428e-01  3.66443153e-01
   8.05089143e-02 -2.55786818e-01  2.68304918e-02 -7.77098852e-02]]"
2629,自律使我自由,从来都没有完全的自由。如果不加节制的放纵自己，大吃大喝、熬夜不睡、畅玩游戏，那么就会导致现在的状态，那就是肥胖、精神差、血脂高、颈椎病等等；放纵，导致了恶果。而如果想要身体轻盈、健康、精神饱满、激情四射，那就不能通过放纵来实现，而是节制。如果做到了这些节制：1. 不吃高糖、高脂、高油腻的食物；2. 吃饭不吃过度饱；3. 多次健康食物，比如粗粮、高蛋白；4. 坐的时间长，就起来活动；5. 经常做颈椎操，些许的锻炼；6. 经常散散步走走路，可以尝试快走，做做下蹲和俯卧撑；7. 少熬夜；8. 减少趴着睡，伤颈椎，可以用冥想的方式休息；那么逐步的，我会收获这些健康：1. 身体的指标回归正常，比如高脂、肥胖；2. 精神状态变得饱满和有活力；3. 更加的高产、学习的更加快；我很向往有一天，自己能身体轻盈、放松自在；而这，需要节制来实现，而不是放纵；放纵只能获得当前的满足、过后就是恶果和痛苦；当前的节制，却能换来将来长期的健康和快乐。自律使我自由；当前的自律，带来长期的自由。,"['自律', '自由', '从来', '没有', '完全', '自由', '如果', '节制', '放纵', '自己', '大吃大喝', '熬夜', '玩游戏', '那么', '导致', '现在', '状态', '就是', '肥胖', '精神', '血脂高', '颈椎病', '等等', '放纵', '导致', '恶果', '如果', '想要', '身体', '轻盈', '健康', '精神饱满', '激情', '四射', '不能', '通过', '放纵', '实现', '而是', '节制', '如果', '做到', '这些', '节制', '不吃', '高糖', '高脂', '油腻', '食物', '吃饭', '不吃', '过度', '多次', '健康', '食物', '比如', '粗粮', '高蛋白', '时间', '起来', '活动', '经常', '颈椎', '些许', '锻炼', '经常', '散散步', '走路', '可以', '尝试', '做做', '俯卧撑', '熬夜', '减少', '趴着睡', '颈椎', '可以', '冥想', '方式', '休息', '那么', '逐步', '我会', '收获', '这些', '健康', '身体', '指标', '回归', '正常', '比如', '高脂', '肥胖', '精神状态', '变得', '饱满', '活力', '更加', '高产', '学习', '加快', '向往', '一天', '自己', '身体', '轻盈', '放松', '需要', '节制', '实现', '不是', '放纵', '放纵', '只能', '获得', '当前', '满足', '过后', '就是', '恶果', '痛苦', '当前', '节制', '换来', '将来', '长期', '健康', '快乐', '自律', '自由', '当前', '自律', '带来', '长期', '自由']","[[-0.20256902 -0.11403334  0.16966445  0.12729765  0.24976051 -0.26384075
  -0.17061094  0.39221961  0.01055236  0.01073066 -0.04959959 -0.25032979
  -0.16028182  0.50237905  0.12460865 -0.08017049 -0.1315386  -0.00922293
  -0.09800928 -0.36120144  0.04113489  0.18425174  0.02157848 -0.04176298
   0.11478703 -0.46573476 -0.22097096  0.08052099 -0.1607629  -0.04472285
   0.2213796   0.01820915 -0.02156753 -0.12172801 -0.06212643  0.26118711
  -0.09152725 -0.16234331  0.10295122 -0.63409078 -0.15780738 -0.47318678
  -0.02734848 -0.07761778 -0.14688969 -0.09385981 -0.21421699  0.40537136
  -0.15822631  0.30546595  0.18769937 -0.21075034 -0.1025226  -0.19724063
   0.08067643  0.30979561  0.22704092 -0.03919762  0.06962877 -0.06542172
   0.01205221  0.25609474  0.02181673  0.07371877 -0.31841105 -0.02821726
   0.0383301  -0.02063067 -0.18789457  0.35972326  0.13433867 -0.2217138
   0.3244789  -0.26201437  0.46957184  0.10082976  0.17712505 -0.09898019
  -0.21355116 -0.18955231 -0.07755434 -0.02006642 -0.03748517  0.25229312
  -0.31240408  0.17157466 -0.2365962   0.31300762  0.36011716  0.09404655
   0.27434297  0.09977772  0.29664566  0.1523346   0.1476342   0.30032587
   0.07914034 -0.24807085 -0.03642284 -0.06456773]]"
2637,程序员-颈椎病-该练八段锦, ,"['程序员', '颈椎病', '该练', '八段锦']","[[-0.18399197 -0.08412956  0.18572408  0.14099224  0.19683574 -0.29024407
  -0.09760937  0.37833634 -0.04337506 -0.05141068 -0.04265921 -0.28877917
  -0.11083896  0.43580988  0.10656191 -0.08905102 -0.09989039 -0.01878195
  -0.05028928 -0.35515565  0.00652833  0.21310796 -0.03362452 -0.11451638
   0.05928387 -0.37796938 -0.22114198  0.03830022 -0.15842755 -0.05622278
   0.16458406  0.04326368  0.00662252 -0.10142256 -0.10253102  0.26962611
  -0.12502493 -0.17440473  0.06470261 -0.56203902 -0.11213453 -0.43281811
  -0.03701593 -0.04122427 -0.12432455 -0.14562158 -0.22263578  0.33788112
  -0.12530299  0.31735265  0.10191191 -0.211951   -0.06625952 -0.17568615
   0.00972617  0.30574161  0.16324338 -0.04854514  0.07853636 -0.08730607
   0.05717347  0.20730649  0.01617349  0.06673945 -0.27830783  0.00339484
   0.02250807 -0.01016426 -0.19366847  0.32854694  0.07947912 -0.16487511
   0.3049829  -0.26346043  0.42237741  0.18885648  0.17232807 -0.12558042
  -0.2132715  -0.15079689 -0.06459029  0.02789218 -0.0607233   0.27739784
  -0.28134769  0.15495943 -0.21600513  0.35126254  0.37151524  0.13163166
   0.19909486  0.09636585  0.27991059  0.13042949  0.13882886  0.29795608
   0.08502589 -0.2216426   0.03395167 -0.08155615]]"
